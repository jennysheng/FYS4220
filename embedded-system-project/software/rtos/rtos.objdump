
rtos.elf:     file format elf32-littlenios2
rtos.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040230

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00018fe0 memsz 0x00018fe0 flags r-x
    LOAD off    0x0001a000 vaddr 0x00059000 paddr 0x0005ab74 align 2**12
         filesz 0x00001b74 memsz 0x00001b74 flags rw-
    LOAD off    0x0001c6e8 vaddr 0x0005c6e8 paddr 0x0005c6e8 align 2**12
         filesz 0x00000000 memsz 0x000073f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00018948  00040230  00040230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000488  00058b78  00058b78  00019b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b74  00059000  0005ab74  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000073f0  0005c6e8  0005c6e8  0001c6e8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00063ad8  00063ad8  0001bb74  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001bb74  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001050  00000000  00000000  0001bb98  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002d069  00000000  00000000  0001cbe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000abfc  00000000  00000000  00049c51  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000dc49  00000000  00000000  0005484d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003308  00000000  00000000  00062498  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004b83  00000000  00000000  000657a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017755  00000000  00000000  0006a323  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00081a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018a0  00000000  00000000  00081a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  00087e46  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00087e4c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00087e4f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00087e50  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00087e51  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00087e55  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00087e59  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00087e5d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00087e66  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00087e6f  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000c  00000000  00000000  00087e78  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000049  00000000  00000000  00087e84  2**0
                  CONTENTS, READONLY
 29 .jdi          00004a17  00000000  00000000  00087ecd  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000506d6  00000000  00000000  0008c8e4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040230 l    d  .text	00000000 .text
00058b78 l    d  .rodata	00000000 .rodata
00059000 l    d  .rwdata	00000000 .rwdata
0005c6e8 l    d  .bss	00000000 .bss
00063ad8 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../rtos_bsp//obj/HAL/src/crt0.o
00040268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 acc.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00058c2a l     O .rodata	00000010 zeroes.4404
00042a6c l     F .text	000000bc __sbprintf
00058c3a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00042c7c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000447d4 l     F .text	00000008 __fp_unlock
000447e8 l     F .text	0000019c __sinit.part.1
00044984 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00059000 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00059444 l     O .rwdata	00000020 lc_ctype_charset
00059424 l     O .rwdata	00000020 lc_message_charset
00059464 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00058c6c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00047368 l     F .text	000000fc __sprint_r.part.0
00058d90 l     O .rodata	00000010 zeroes.4349
000489a4 l     F .text	000000bc __sbprintf
00058da0 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0004d54c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004d660 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004d68c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0004d780 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004d868 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004d954 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0004db28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0005aae8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0004dd9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_env_lock.c
0005aaec l     O .rwdata	00000004 lockid
0005c71c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0005aaf0 l     O .rwdata	00000004 lockid
0005c724 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0004f7f8 l     F .text	00000048 OS_InitMisc
0004f840 l     F .text	0000006c OS_InitRdyList
0004f9ac l     F .text	000000e4 OS_InitTCBList
0004f718 l     F .text	000000e0 OS_InitEventList
0004f8ac l     F .text	00000080 OS_InitTaskIdle
0004f92c l     F .text	00000080 OS_InitTaskStat
0004fc1c l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0005192c l     F .text	000000f4 OS_FlagTaskRdy
000516ec l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000564cc l     F .text	00000034 alt_dev_reg
00059a4c l     O .rwdata	0000106c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00056848 l     F .text	000002a4 altera_avalon_jtag_uart_irq
00056aec l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000572c8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 i2c_avalon_mm_if.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0005777c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00057bdc l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00057d3c l     F .text	0000003c alt_get_errno
00057d78 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0005c788 g     O .bss	00000004 alt_instruction_exception_handler
00046e78 g     F .text	00000074 _mprec_log10
0005ab3e g     O .rwdata	00000002 OSTaskNameSize
00046f64 g     F .text	0000008c __any_on
00049420 g     F .text	00000054 _isatty_r
00058c78 g     O .rodata	00000028 __mprec_tinytens
0004da6c g     F .text	000000bc alt_main
000639d8 g     O .bss	00000100 alt_irq
00049474 g     F .text	00000060 _lseek_r
00052c14 g     F .text	000000d8 OS_MemInit
0005ab74 g       *ABS*	00000000 __flash_rwdata_start
0005646c g     F .text	00000060 OSTimeSet
0004bf24 g     F .text	00000088 .hidden __eqdf2
0004e46c g     F .text	00000610 OSEventPendMulti
00063ad8 g       *ABS*	00000000 __alt_heap_start
00058390 g     F .text	00000024 OSTaskCreateHook
0005c7b4 g     O .bss	00002000 task1_stk
00040738 g     F .text	0000003c printf
0005ab16 g     O .rwdata	00000002 OSMboxEn
0004ead4 g     F .text	0000004c OSIntEnter
00049d4c g     F .text	0000009c _wcrtomb_r
00047190 g     F .text	0000005c __sseek
00044b34 g     F .text	00000010 __sinit
00049bf4 g     F .text	00000140 __swbuf_r
0005ab26 g     O .rwdata	00000002 OSQEn
00045140 g     F .text	0000007c _setlocale_r
0004498c g     F .text	00000078 __sfmoreglue
0004e140 g     F .text	000000cc __malloc_unlock
000583f8 g     F .text	00000020 OSTaskStatHook
0005c6e8 g     O .bss	00000004 swTime
00057498 g     F .text	00000198 read_from_i2c_device
0005c72c g     O .bss	00000001 OSLockNesting
000573bc g     F .text	00000044 check_mm_if_busy
0005ab64 g     O .rwdata	00000002 OSDataSize
0005c72d g     O .bss	00000001 OSRunning
000494d4 g     F .text	0000015c memmove
00058438 g     F .text	00000020 OSInitHookBegin
0005ab5c g     O .rwdata	00000002 OSTmrSize
00044b1c g     F .text	00000018 _cleanup
00045f38 g     F .text	000000a8 _Balloc
0005c730 g     O .bss	00000004 OSIdleCtr
0004bfac g     F .text	000000dc .hidden __gtdf2
0004ded8 g     F .text	00000024 altera_nios2_gen2_irq_init
00058210 g       .text	00000000 OSStartTsk
0004ff4c g     F .text	000002d4 OS_TCBInit
00040000 g     F .entry	0000000c __reset
0005ab62 g     O .rwdata	00000002 OSTmrWheelTblSize
00040020 g       *ABS*	00000000 __flash_exceptions_start
0005ab02 g     O .rwdata	00000002 OSEventSize
0005c734 g     O .bss	00000001 OSPrioHighRdy
00048efc g     F .text	0000005c _fstat_r
000583b4 g     F .text	00000024 OSTaskDelHook
0005c708 g     O .bss	00000004 errno
0004710c g     F .text	00000008 __seofread
000581f0 g       .text	00000000 OSStartHighRdy
00054eec g     F .text	000001e4 OSTaskCreateExt
00051234 g     F .text	00000060 OSFlagPendGetFlagsRdy
0005ab42 g     O .rwdata	00000002 OSTaskStatStkSize
000503b0 g     F .text	00000308 OSFlagAccept
00053258 g     F .text	000000b8 OSQFlush
00052cec g     F .text	00000140 OSQAccept
0005c714 g     O .bss	00000004 alt_argv
00062ab8 g       *ABS*	00000000 _gp
00040324 g     F .text	00000144 readXYZ
00054d40 g     F .text	000001ac OSTaskCreate
00054850 g     F .text	000004f0 OSTaskChangePrio
0005c728 g     O .bss	00000004 alt_heapsem
00050220 g     F .text	00000190 OSDebugInit
000550d0 g     F .text	00000344 OSTaskDel
000598cc g     O .rwdata	00000180 alt_fd_list
000607b4 g     O .bss	00000370 OSFlagTbl
0004f4f8 g     F .text	000000b8 OS_EventTaskRemove
000584bc g     F .text	00000090 alt_find_dev
00045cc8 g     F .text	00000148 memcpy
0005ab2c g     O .rwdata	00000002 OSRdyTblSize
000447dc g     F .text	0000000c _cleanup_r
0004d364 g     F .text	000000dc .hidden __floatsidf
00057cc0 g     F .text	0000007c alt_io_redirect
0004c088 g     F .text	000000f4 .hidden __ltdf2
00058b78 g       *ABS*	00000000 __DTOR_END__
00058748 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0004e20c g     F .text	00000120 OSEventNameGet
0005ab10 g     O .rwdata	00000002 OSFlagMax
00046ff0 g     F .text	00000074 __fpclassifyd
00046dd4 g     F .text	000000a4 __ratio
0004eb20 g     F .text	000000f8 OSIntExit
00048988 g     F .text	0000001c __vfiprintf_internal
0005ab4a g     O .rwdata	00000002 OSTCBSize
0005c735 g     O .bss	00000001 OSPrioCur
00056d48 g     F .text	000002bc altera_avalon_jtag_uart_read
00040708 g     F .text	00000030 _printf_r
0004abec g     F .text	00000064 .hidden __udivsi3
0004d7bc g     F .text	000000ac isatty
0005ab30 g     O .rwdata	00000002 OSStkWidth
00058cc8 g     O .rodata	000000c8 __mprec_tens
0005ab24 g     O .rwdata	00000002 OSPtrSize
000451bc g     F .text	0000000c __locale_charset
0005ab04 g     O .rwdata	00000002 OSEventTblSize
00058164 g       .text	00000000 OSCtxSw
0005c704 g     O .bss	00000004 __malloc_top_pad
0005c738 g     O .bss	00000004 OSTCBList
0005c70c g     O .bss	00000004 alt_fd_list_lock
0005aac0 g     O .rwdata	00000004 __mb_cur_max
000451ec g     F .text	0000000c _localeconv_r
00048f58 g     F .text	000004c8 __sfvwrite_r
0004636c g     F .text	0000003c __i2b
00060b24 g     O .bss	00000c30 OSMemTbl
0005c73c g     O .bss	00000001 OSTickStepState
00047064 g     F .text	00000054 _sbrk_r
0005ab28 g     O .rwdata	00000002 OSQMax
00061754 g     O .bss	00000800 OSTaskStatStk
00052850 g     F .text	000000f0 OSMemNameGet
0005ab08 g     O .rwdata	00000002 OSFlagEn
00049630 g     F .text	00000060 _read_r
0005ab4e g     O .rwdata	00000002 OSTimeTickHookEn
00053708 g     F .text	00000168 OSQPost
00051a20 g     F .text	000000a4 OS_FlagUnlink
0005aae0 g     O .rwdata	00000004 alt_max_fd
0004fae4 g     F .text	00000068 OS_MemCopy
0004fb4c g     F .text	000000d0 OS_Sched
00048bf0 g     F .text	000000f0 _fclose_r
00052760 g     F .text	000000f0 OSMemGet
0005247c g     F .text	00000110 OSMboxQuery
000556fc g     F .text	000001b4 OSTaskNameSet
000447a4 g     F .text	00000030 fflush
0005c700 g     O .bss	00000004 __malloc_max_sbrked_mem
0005c740 g     O .bss	00000004 OSCtxSwCtr
00058418 g     F .text	00000020 OSTimeTickHook
0005ab12 g     O .rwdata	00000002 OSFlagNameSize
0004f5b0 g     F .text	00000100 OS_EventTaskRemoveMulti
0004aca8 g     F .text	000008ac .hidden __adddf3
0004f3a8 g     F .text	00000150 OS_EventTaskWaitMulti
00046b7c g     F .text	0000010c __b2d
0005ab2a g     O .rwdata	00000002 OSQSize
0004a530 g     F .text	000005c4 .hidden __umoddi3
0004d990 g     F .text	000000dc lseek
000541b8 g     F .text	0000020c OSSemPend
0005aab8 g     O .rwdata	00000004 _global_impure_ptr
00049690 g     F .text	00000564 _realloc_r
0005ab14 g     O .rwdata	00000002 OSLowestPrio
00063ad8 g       *ABS*	00000000 __bss_end
00057aec g     F .text	000000f0 alt_iic_isr_register
00058498 g     F .text	00000024 OSTCBInitHook
0005ab5a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0005805c g     F .text	00000108 alt_tick
00052210 g     F .text	00000110 OSMboxPost
00049f34 g     F .text	000005fc .hidden __udivdi3
00048e58 g     F .text	00000024 _fputwc_r
0005aafc g     O .rwdata	00000002 OSEventEn
00058ca0 g     O .rodata	00000028 __mprec_bigtens
00046150 g     F .text	00000104 __s2b
0005ab56 g     O .rwdata	00000002 OSTmrCfgNameSize
0004d440 g     F .text	000000a8 .hidden __floatunsidf
000468bc g     F .text	00000060 __mcmp
00044b54 g     F .text	00000018 __fp_lock_all
00057aa0 g     F .text	0000004c alt_ic_irq_enabled
0005184c g     F .text	000000e0 OS_FlagInit
00057fc0 g     F .text	0000009c alt_alarm_stop
0005ab38 g     O .rwdata	00000002 OSTaskIdleStkSize
0005c77c g     O .bss	00000004 alt_irq_active
00053df0 g     F .text	000000b0 OSSemAccept
00052a54 g     F .text	000000d8 OSMemPut
0005258c g     F .text	000001d4 OSMemCreate
0005c744 g     O .bss	00000004 OSIdleCtrMax
00040000 g       *ABS*	00000000 __alt_mem_onchip_mem
000400fc g     F .exceptions	000000d4 alt_irq_handler
000598a4 g     O .rwdata	00000028 alt_dev_null
0005ab4c g     O .rwdata	00000002 OSTicksPerSec
00058164 g       .text	00000000 OSIntCtxSw
0005775c g     F .text	00000020 alt_dcache_flush_all
00046254 g     F .text	00000068 __hi0bits
0004d2e4 g     F .text	00000080 .hidden __fixdfsi
0005c748 g     O .bss	00000004 OSTCBFreeList
0005ab74 g       *ABS*	00000000 __ram_rwdata_end
000543c4 g     F .text	0000016c OSSemPendAbort
0005aad8 g     O .rwdata	00000008 alt_dev_list
00057400 g     F .text	00000098 write_to_i2c_device
0004ddd8 g     F .text	00000100 write
0005ab50 g     O .rwdata	00000002 OSVersionNbr
00059000 g       *ABS*	00000000 __ram_rodata_end
0004d6c8 g     F .text	000000b8 fstat
0004c088 g     F .text	000000f4 .hidden __ledf2
0005aaf8 g     O .rwdata	00000004 OSEndiannessTest
00046634 g     F .text	00000140 __pow5mult
0004747c g     F .text	0000150c ___vfiprintf_internal_r
0005c6f8 g     O .bss	00000004 __nlocale_changed
0004ac50 g     F .text	00000058 .hidden __umodsi3
0005ab0a g     O .rwdata	00000002 OSFlagGrpSize
00063ad8 g       *ABS*	00000000 end
00056700 g     F .text	00000148 altera_avalon_jtag_uart_init
0004fdb4 g     F .text	000000cc OS_TaskStat
000401d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00058b78 g       *ABS*	00000000 __CTOR_LIST__
00065800 g       *ABS*	00000000 __alt_stack_pointer
00057340 g     F .text	0000007c alt_avalon_timer_sc_init
0004d4e8 g     F .text	00000064 .hidden __clzsi2
00057004 g     F .text	000002c4 altera_avalon_jtag_uart_write
00044b44 g     F .text	00000004 __sfp_lock_acquire
00045be4 g     F .text	000000e4 memchr
0004fa90 g     F .text	00000054 OS_MemClr
00040774 g     F .text	000022dc ___vfprintf_internal_r
00058234 g     F .text	0000015c OSTaskStkInit
00040468 g     F .text	000000e8 task1
00044ca8 g     F .text	00000310 _free_r
000451c8 g     F .text	00000010 __locale_mb_cur_max
0004f100 g     F .text	00000198 OS_EventTaskRdy
000589c4 g     F .text	00000180 __call_exitprocs
0005c74c g     O .bss	00000001 OSCPUUsage
0005c6f4 g     O .bss	00000004 __mlocale_changed
0005aac4 g     O .rwdata	00000004 __malloc_sbrk_base
00040230 g     F .text	0000003c _start
00040550 g     F .text	000000d4 task2
0005c780 g     O .bss	00000004 _alt_tick_rate
00053310 g     F .text	0000028c OSQPend
00055fbc g     F .text	00000104 OSTimeDly
00046774 g     F .text	00000148 __lshift
0005c784 g     O .bss	00000004 _alt_nticks
0004db64 g     F .text	00000104 read
00056538 g     F .text	00000064 alt_sys_init
000588ac g     F .text	00000118 __register_exitproc
0005c74d g     O .bss	00000001 OSTaskCtr
000560c0 g     F .text	0000017c OSTimeDlyHMSM
000463a8 g     F .text	0000028c __multiply
00056bf0 g     F .text	00000068 altera_avalon_jtag_uart_close
000406e0 g     F .text	00000028 .hidden __mulsi3
00059000 g       *ABS*	00000000 __ram_rwdata_start
00058b78 g       *ABS*	00000000 __ram_rodata_start
0005c78c g     O .bss	00000028 __malloc_current_mallinfo
0005aafe g     O .rwdata	00000002 OSEventMax
00046c88 g     F .text	0000014c __d2b
00054530 g     F .text	00000110 OSSemPost
0004eca4 g     F .text	000000dc OSSchedUnlock
0005659c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00058654 g     F .text	000000f4 alt_get_fd
0005c750 g     O .bss	00000004 OSMemFreeList
0004edf0 g     F .text	000000b0 OSStatInit
00051628 g     F .text	000000c4 OSFlagQuery
0005ab34 g     O .rwdata	00000002 OSTaskCreateExtEn
00048ac0 g     F .text	00000054 _close_r
00058830 g     F .text	0000007c memcmp
0004f0e0 g     F .text	00000020 OS_Dummy
0005665c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00063ad8 g       *ABS*	00000000 __alt_stack_base
000566ac g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00042b28 g     F .text	00000154 __swsetup_r
000402c0 g     F .text	00000064 init
00061f54 g     O .bss	000001e0 OSQTbl
0004b554 g     F .text	000009d0 .hidden __divdf3
00044a04 g     F .text	00000118 __sfp
00046eec g     F .text	00000078 __copybits
0005949c g     O .rwdata	00000408 __malloc_av_
00044b50 g     F .text	00000004 __sinit_lock_release
0005c754 g     O .bss	00000004 OSTCBHighRdy
0004c17c g     F .text	0000086c .hidden __muldf3
000470b8 g     F .text	00000054 __sread
0005c758 g     O .bss	00000004 OSQFreeList
0005854c g     F .text	00000108 alt_find_file
000577b8 g     F .text	000000a4 alt_dev_llist_insert
0004e020 g     F .text	00000120 __malloc_lock
0004dcec g     F .text	000000b0 sbrk
0004e32c g     F .text	00000140 OSEventNameSet
00044748 g     F .text	0000005c _fflush_r
00048b14 g     F .text	000000dc _calloc_r
0005c75c g     O .bss	00000001 OSRdyGrp
0005c6e8 g       *ABS*	00000000 __bss_start
00045e10 g     F .text	00000128 memset
00040624 g     F .text	000000bc main
0005c718 g     O .bss	00000004 alt_envp
0005c6fc g     O .bss	00000004 __malloc_max_total_mem
000565fc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00049d34 g     F .text	00000018 __swbuf
00058ecc g     O .rodata	00000100 OSUnMapTbl
0005ab2e g     O .rwdata	00000002 OSSemEn
00051294 g     F .text	00000394 OSFlagPost
000471ec g     F .text	00000008 __sclose
00065800 g       *ABS*	00000000 __alt_heap_limit
00048ce0 g     F .text	00000014 fclose
0004f298 g     F .text	00000110 OS_EventTaskWait
0005e7b4 g     O .bss	00002000 task2_stk
0004fe80 g     F .text	000000cc OS_TaskStatStkChk
00055414 g     F .text	00000150 OSTaskDelReq
00042ea4 g     F .text	00001688 _dtoa_r
000453d8 g     F .text	0000080c _malloc_r
00049ea8 g     F .text	00000030 __ascii_wctomb
0005aae4 g     O .rwdata	00000004 alt_errno
0004ed80 g     F .text	00000070 OSStart
0004dfc0 g     F .text	00000060 __env_unlock
00044fb8 g     F .text	000000c4 _fwalk
000558b0 g     F .text	000001d4 OSTaskResume
00052b2c g     F .text	000000e8 OSMemQuery
0005ab40 g     O .rwdata	00000002 OSTaskStatEn
0005ab1a g     O .rwdata	00000002 OSMemMax
00053870 g     F .text	00000170 OSQPostFront
0004aaf4 g     F .text	00000084 .hidden __divsi3
0005c75d g     O .bss	00000003 OSRdyTbl
0005aaf4 g     O .rwdata	00000002 OSDebugEn
00044b84 g     F .text	00000124 _malloc_trim_r
00058b78 g       *ABS*	00000000 __CTOR_END__
0005ab0c g     O .rwdata	00000002 OSFlagNodeSize
0005ab54 g     O .rwdata	00000002 OSTmrCfgMax
000471f4 g     F .text	000000dc strcmp
00052e2c g     F .text	000001ac OSQCreate
00055564 g     F .text	00000198 OSTaskNameGet
00058b78 g       *ABS*	00000000 __flash_rodata_start
000539e0 g     F .text	0000020c OSQPostOpt
0004eea0 g     F .text	00000220 OSTimeTick
0005ab3c g     O .rwdata	00000002 OSTaskMax
00058b78 g       *ABS*	00000000 __DTOR_LIST__
00053ea0 g     F .text	000000d8 OSSemCreate
0005ab60 g     O .rwdata	00000002 OSTmrWheelSize
0004bf24 g     F .text	00000088 .hidden __nedf2
0005ab36 g     O .rwdata	00000002 OSTaskDelEn
00054640 g     F .text	00000110 OSSemQuery
00052fd8 g     F .text	00000280 OSQDel
0005359c g     F .text	0000016c OSQPendAbort
00056500 g     F .text	00000038 alt_irq_init
0004dc68 g     F .text	00000084 alt_release_fd
0004026c g     F .text	00000054 checkID
0005c6ec g     O .bss	00000004 key1pressed
00058db0 g     O .rodata	00000100 .hidden __clz_tab
0005c6f0 g     O .bss	00000004 _PathLocale
000587e4 g     F .text	00000014 atexit
00048a60 g     F .text	00000060 _write_r
0004ec18 g     F .text	0000008c OSSchedLock
000451f8 g     F .text	00000018 setlocale
000506b8 g     F .text	00000108 OSFlagCreate
0005aabc g     O .rwdata	00000004 _impure_ptr
0005c710 g     O .bss	00000004 alt_argc
0004452c g     F .text	0000021c __sflush_r
000578bc g     F .text	00000060 _do_dtors
000451e4 g     F .text	00000008 __locale_cjk_lang
0005ab06 g     O .rwdata	00000002 OSEventMultiEn
000507c0 g     F .text	00000248 OSFlagDel
0005c760 g     O .bss	00000004 OSEventFreeList
00040020 g       .exceptions	00000000 alt_irq_entry
000520a4 g     F .text	0000016c OSMboxPendAbort
00046b18 g     F .text	00000064 __ulp
00050c7c g     F .text	000005b8 OSFlagPend
0005ab52 g     O .rwdata	00000002 OSTmrEn
00044b6c g     F .text	00000018 __fp_unlock_all
0005aad0 g     O .rwdata	00000008 alt_fs_list
0004fc90 g     F .text	00000074 OS_StrCopy
0005ab1c g     O .rwdata	00000002 OSMemNameSize
00058458 g     F .text	00000020 OSInitHookEnd
00040020 g       *ABS*	00000000 __ram_exceptions_start
0005ab48 g     O .rwdata	00000002 OSTCBPrioTblMax
00045210 g     F .text	0000000c localeconv
0005ab44 g     O .rwdata	00000002 OSTaskStatStkChkEn
00051b5c g     F .text	000000d4 OSMboxCreate
0005793c g     F .text	00000050 alt_ic_isr_register
0005ab18 g     O .rwdata	00000002 OSMemEn
0005ab22 g     O .rwdata	00000002 OSMutexEn
0005ab74 g       *ABS*	00000000 _edata
00063ad8 g       *ABS*	00000000 _end
0005c764 g     O .bss	00000001 OSIntNesting
00048cf4 g     F .text	00000164 __fputwc
00040230 g       *ABS*	00000000 __ram_exceptions_end
00056c58 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0005623c g     F .text	000001d4 OSTimeDlyResume
00050b30 g     F .text	0000014c OSFlagNameSet
00051e70 g     F .text	00000234 OSMboxPend
00055a84 g     F .text	000001c0 OSTaskStkChk
00057a14 g     F .text	0000008c alt_ic_irq_disable
0005ab1e g     O .rwdata	00000002 OSMemSize
00047114 g     F .text	0000007c __swrite
0005aac8 g     O .rwdata	00000004 __malloc_trim_threshold
000451d8 g     F .text	0000000c __locale_msgcharset
0005c768 g     O .bss	00000004 OSTCBCur
000587f8 g     F .text	00000038 exit
0005ab20 g     O .rwdata	00000002 OSMemTblSize
0004507c g     F .text	000000c4 _fwalk_reent
0004691c g     F .text	000001fc __mdiff
0004ab78 g     F .text	00000074 .hidden __modsi3
00051ac4 g     F .text	00000098 OSMboxAccept
00065800 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00044b48 g     F .text	00000004 __sfp_lock_release
0004ea7c g     F .text	00000058 OSInit
00055e28 g     F .text	00000124 OSTaskQuery
00053d48 g     F .text	000000a8 OS_QInit
0004fd04 g     F .text	00000054 OS_StrLen
00052940 g     F .text	00000114 OSMemNameSet
0005ab3a g     O .rwdata	00000002 OSTaskProfileEn
0005c76c g     O .bss	00000004 OSTime
00062134 g     O .bss	00000800 OSTaskIdleStk
00058b44 g     F .text	00000034 _exit
00052320 g     F .text	0000015c OSMboxPostOpt
00057630 g     F .text	0000012c alt_alarm_start
00050a08 g     F .text	00000128 OSFlagNameGet
00056410 g     F .text	0000005c OSTimeGet
0004521c g     F .text	000001bc __smakebuf_r
000472d0 g     F .text	00000098 strlen
000583d8 g     F .text	00000020 OSTaskSwHook
00057e64 g     F .text	0000015c open
00062934 g     O .bss	00000b40 OSEventTbl
0004bfac g     F .text	000000dc .hidden __gedf2
00063474 g     O .bss	00000510 OSTCBTbl
00054750 g     F .text	00000100 OSSemSet
0005aacc g     O .rwdata	00000004 __wctomb
00047464 g     F .text	00000018 __sprint_r
0005791c g     F .text	00000020 alt_icache_flush_all
0005ab68 g     O .rwdata	00000004 alt_priority_mask
00053f78 g     F .text	00000240 OSSemDel
0005c770 g     O .bss	00000004 OSFlagFreeList
0005798c g     F .text	00000088 alt_ic_irq_enable
0005ab00 g     O .rwdata	00000002 OSEventNameSize
00051c30 g     F .text	00000240 OSMboxDel
00042a50 g     F .text	0000001c __vfprintf_internal
0005c774 g     O .bss	00000001 OSStatRdy
00063984 g     O .bss	00000054 OSTCBPrioTbl
00049ed8 g     F .text	0000005c _wctomb_r
0004defc g     F .text	000000c4 __env_lock
0005ab46 g     O .rwdata	00000002 OSTaskSwHookEn
0004c9e8 g     F .text	000008fc .hidden __subdf3
000462bc g     F .text	000000b0 __lo0bits
0005ab6c g     O .rwdata	00000008 alt_alarm_list
0005ab0e g     O .rwdata	00000002 OSFlagWidth
0005785c g     F .text	00000060 _do_ctors
00049de8 g     F .text	000000c0 wcrtomb
0004d588 g     F .text	000000d8 close
0005c720 g     O .bss	00000004 alt_envsem
0005c778 g     O .bss	00000004 OSIdleCtrRun
0004f0c0 g     F .text	00000020 OSVersion
0005ab58 g     O .rwdata	00000002 OSTmrCfgWheelSize
0004d8d0 g     F .text	00000084 alt_load
00055f4c g     F .text	00000070 OS_TaskStkClr
0005ab32 g     O .rwdata	00000002 OSTaskCreateEn
0004f6b0 g     F .text	00000068 OS_EventWaitListInit
00048e7c g     F .text	00000080 fputwc
00058478 g     F .text	00000020 OSTaskIdleHook
00044b4c g     F .text	00000004 __sinit_lock_acquire
00046008 g     F .text	00000148 __multadd
00055c44 g     F .text	000001e4 OSTaskSuspend
00045fe0 g     F .text	00000028 _Bfree
0004fd58 g     F .text	0000005c OS_TaskIdle
0005ab5e g     O .rwdata	00000002 OSTmrTblSize
00053bec g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408c14 	ori	at,at,560
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	004ead40 	call	4ead4 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	008001b4 	movhi	r2,6
   40140:	108e7604 	addi	r2,r2,14808
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	008001b4 	movhi	r2,6
   40158:	108e7604 	addi	r2,r2,14808
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffda92c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffda920>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	004eb200 	call	4eb20 <OSIntExit>
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e4:	00bfffc4 	movi	r2,-1
   401e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401f0:	d0a73417 	ldw	r2,-25392(gp)
   401f4:	10000726 	beq	r2,zero,40214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401f8:	d0a73417 	ldw	r2,-25392(gp)
   401fc:	e0fffd17 	ldw	r3,-12(fp)
   40200:	e1bffe17 	ldw	r6,-8(fp)
   40204:	e17fff17 	ldw	r5,-4(fp)
   40208:	1809883a 	mov	r4,r3
   4020c:	103ee83a 	callr	r2
   40210:	00000206 	br	4021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40218:	0005883a 	mov	r2,zero
}
   4021c:	e037883a 	mov	sp,fp
   40220:	dfc00117 	ldw	ra,4(sp)
   40224:	df000017 	ldw	fp,0(sp)
   40228:	dec00204 	addi	sp,sp,8
   4022c:	f800283a 	ret

Disassembly of section .text:

00040230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40230:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   40234:	ded60014 	ori	sp,sp,22528
    movhi gp, %hi(_gp)
   40238:	068001b4 	movhi	gp,6
    ori gp, gp, %lo(_gp)
   4023c:	d68aae14 	ori	gp,gp,10936
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40240:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   40244:	10b1ba14 	ori	r2,r2,50920

    movhi r3, %hi(__bss_end)
   40248:	00c001b4 	movhi	r3,6
    ori r3, r3, %lo(__bss_end)
   4024c:	18ceb614 	ori	r3,r3,15064

    beq r2, r3, 1f
   40250:	10c00326 	beq	r2,r3,40260 <_start+0x30>

0:
    stw zero, (r2)
   40254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4025c:	10fffd36 	bltu	r2,r3,40254 <__alt_data_end+0xfffdaa54>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40260:	004d8d00 	call	4d8d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40264:	004da6c0 	call	4da6c <alt_main>

00040268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40268:	003fff06 	br	40268 <__alt_data_end+0xfffdaa68>

0004026c <checkID>:

//INITIALIZATION
//Before writing the code, just make sure that everything is alright by checking the DEVID of the device. The DEVID register (0x00)
//holds a fixed device ID code of 0xE5 . If the code matches 0xE5, we can proceed further.

void checkID(){
   4026c:	defffd04 	addi	sp,sp,-12
   40270:	dfc00215 	stw	ra,8(sp)
   40274:	df000115 	stw	fp,4(sp)
   40278:	df000104 	addi	fp,sp,4
	alt_u8 data;
	read_from_i2c_device(ADXL345_DEVICE_addr,ADXL345_DEVICE_ID_reg, 0x01,&data);
   4027c:	e1ffff04 	addi	r7,fp,-4
   40280:	01800044 	movi	r6,1
   40284:	000b883a 	mov	r5,zero
   40288:	010014c4 	movi	r4,83
   4028c:	00574980 	call	57498 <read_from_i2c_device>
	printf("0x%x.\n" , data);
   40290:	e0bfff03 	ldbu	r2,-4(fp)
   40294:	10803fcc 	andi	r2,r2,255
   40298:	100b883a 	mov	r5,r2
   4029c:	010001b4 	movhi	r4,6
   402a0:	2122de04 	addi	r4,r4,-29832
   402a4:	00407380 	call	40738 <printf>


}
   402a8:	0001883a 	nop
   402ac:	e037883a 	mov	sp,fp
   402b0:	dfc00117 	ldw	ra,4(sp)
   402b4:	df000017 	ldw	fp,0(sp)
   402b8:	dec00204 	addi	sp,sp,8
   402bc:	f800283a 	ret

000402c0 <init>:



//In order to initialize ADXL345, we need to modify POWER_CTL Register (0x2D)
//and DATA_FORMAT Register (0x31).
void init(){
   402c0:	defffe04 	addi	sp,sp,-8
   402c4:	dfc00115 	stw	ra,4(sp)
   402c8:	df000015 	stw	fp,0(sp)
   402cc:	d839883a 	mov	fp,sp

	write_to_i2c_device(ADXL345_DEVICE_addr, ADXL345_POWER_CTL_Reg, 0x01, 0x00);// reset all bits.
   402d0:	000f883a 	mov	r7,zero
   402d4:	01800044 	movi	r6,1
   402d8:	01400b44 	movi	r5,45
   402dc:	010014c4 	movi	r4,83
   402e0:	00574000 	call	57400 <write_to_i2c_device>
	//adxl_write (0x2d, 0x08);  // measure and wake up 8hz
	write_to_i2c_device(ADXL345_DEVICE_addr, ADXL345_POWER_CTL_Reg, 0x01, 0x08);//  // measure and wake up 8hz
   402e4:	01c00204 	movi	r7,8
   402e8:	01800044 	movi	r6,1
   402ec:	01400b44 	movi	r5,45
   402f0:	010014c4 	movi	r4,83
   402f4:	00574000 	call	57400 <write_to_i2c_device>
	//adxl_write (0x31, 0x01);  // data_format range= +- 4g
	write_to_i2c_device(ADXL345_DEVICE_addr, ADXL345_dataformat_reg, 0x01, 0x01);//
   402f8:	01c00044 	movi	r7,1
   402fc:	01800044 	movi	r6,1
   40300:	01400c44 	movi	r5,49
   40304:	010014c4 	movi	r4,83
   40308:	00574000 	call	57400 <write_to_i2c_device>



}
   4030c:	0001883a 	nop
   40310:	e037883a 	mov	sp,fp
   40314:	dfc00117 	ldw	ra,4(sp)
   40318:	df000017 	ldw	fp,0(sp)
   4031c:	dec00204 	addi	sp,sp,8
   40320:	f800283a 	ret

00040324 <readXYZ>:
void readXYZ(){
   40324:	defffc04 	addi	sp,sp,-16
   40328:	dfc00315 	stw	ra,12(sp)
   4032c:	df000215 	stw	fp,8(sp)
   40330:	df000204 	addi	fp,sp,8


	//while(1){
		// HAL_I2C_Mem_Read (&hi2c1, adxl_address, reg, 1, (uint8_t *)data_rec, 6, 100);
        //printf("Floating value with two decimal resolution %.2f:",value)
		read_from_i2c_device(ADXL345_DEVICE_addr, ADXL345_x_axis_DATAX0, 6, &dataX0_raw);
   40334:	e1fffe04 	addi	r7,fp,-8
   40338:	01800184 	movi	r6,6
   4033c:	01400c84 	movi	r5,50
   40340:	010014c4 	movi	r4,83
   40344:	00574980 	call	57498 <read_from_i2c_device>
		printf("%u: \n" , dataX0_raw);
   40348:	e0bffe03 	ldbu	r2,-8(fp)
   4034c:	10803fcc 	andi	r2,r2,255
   40350:	100b883a 	mov	r5,r2
   40354:	010001b4 	movhi	r4,6
   40358:	2122e004 	addi	r4,r4,-29824
   4035c:	00407380 	call	40738 <printf>
		read_from_i2c_device(ADXL345_DEVICE_addr, ADXL345_x_axis_DATAX1, 6, &dataX1_raw);
   40360:	e0bffe44 	addi	r2,fp,-7
   40364:	100f883a 	mov	r7,r2
   40368:	01800184 	movi	r6,6
   4036c:	01400cc4 	movi	r5,51
   40370:	010014c4 	movi	r4,83
   40374:	00574980 	call	57498 <read_from_i2c_device>
		printf("%u: \n" , dataX1_raw);
   40378:	e0bffe43 	ldbu	r2,-7(fp)
   4037c:	10803fcc 	andi	r2,r2,255
   40380:	100b883a 	mov	r5,r2
   40384:	010001b4 	movhi	r4,6
   40388:	2122e004 	addi	r4,r4,-29824
   4038c:	00407380 	call	40738 <printf>
		read_from_i2c_device(ADXL345_DEVICE_addr, ADXL345_y_axis_DATAY0, 6, &dataY0_raw);
   40390:	e0bffe84 	addi	r2,fp,-6
   40394:	100f883a 	mov	r7,r2
   40398:	01800184 	movi	r6,6
   4039c:	01400d04 	movi	r5,52
   403a0:	010014c4 	movi	r4,83
   403a4:	00574980 	call	57498 <read_from_i2c_device>
		printf("%u: \n" , dataY0_raw);
   403a8:	e0bffe83 	ldbu	r2,-6(fp)
   403ac:	10803fcc 	andi	r2,r2,255
   403b0:	100b883a 	mov	r5,r2
   403b4:	010001b4 	movhi	r4,6
   403b8:	2122e004 	addi	r4,r4,-29824
   403bc:	00407380 	call	40738 <printf>
		read_from_i2c_device(ADXL345_DEVICE_addr, ADXL345_y_axis_DATAY1, 6, &dataY1_raw);
   403c0:	e0bffec4 	addi	r2,fp,-5
   403c4:	100f883a 	mov	r7,r2
   403c8:	01800184 	movi	r6,6
   403cc:	01400d44 	movi	r5,53
   403d0:	010014c4 	movi	r4,83
   403d4:	00574980 	call	57498 <read_from_i2c_device>
		printf("%u:\n" , dataY1_raw);
   403d8:	e0bffec3 	ldbu	r2,-5(fp)
   403dc:	10803fcc 	andi	r2,r2,255
   403e0:	100b883a 	mov	r5,r2
   403e4:	010001b4 	movhi	r4,6
   403e8:	2122e204 	addi	r4,r4,-29816
   403ec:	00407380 	call	40738 <printf>
		read_from_i2c_device(ADXL345_DEVICE_addr, ADXL345_z_axis_DATAZ0, 6, &dataZ0_raw);
   403f0:	e0bfff04 	addi	r2,fp,-4
   403f4:	100f883a 	mov	r7,r2
   403f8:	01800184 	movi	r6,6
   403fc:	01400d84 	movi	r5,54
   40400:	010014c4 	movi	r4,83
   40404:	00574980 	call	57498 <read_from_i2c_device>
		printf("%u:\n" , dataZ0_raw);
   40408:	e0bfff03 	ldbu	r2,-4(fp)
   4040c:	10803fcc 	andi	r2,r2,255
   40410:	100b883a 	mov	r5,r2
   40414:	010001b4 	movhi	r4,6
   40418:	2122e204 	addi	r4,r4,-29816
   4041c:	00407380 	call	40738 <printf>
		read_from_i2c_device(ADXL345_DEVICE_addr, ADXL345_z_axis_DATAZ1, 6, &dataZ1_raw);
   40420:	e0bfff44 	addi	r2,fp,-3
   40424:	100f883a 	mov	r7,r2
   40428:	01800184 	movi	r6,6
   4042c:	01400dc4 	movi	r5,55
   40430:	010014c4 	movi	r4,83
   40434:	00574980 	call	57498 <read_from_i2c_device>
		printf("%u: \n" , dataZ1_raw);
   40438:	e0bfff43 	ldbu	r2,-3(fp)
   4043c:	10803fcc 	andi	r2,r2,255
   40440:	100b883a 	mov	r5,r2
   40444:	010001b4 	movhi	r4,6
   40448:	2122e004 	addi	r4,r4,-29824
   4044c:	00407380 	call	40738 <printf>

	//}
	//Keep in mind that the values read from the data registers har formatted as
	//16-bit two's complement. For Nios II, signed types are represented in two's complement??

}
   40450:	0001883a 	nop
   40454:	e037883a 	mov	sp,fp
   40458:	dfc00117 	ldw	ra,4(sp)
   4045c:	df000017 	ldw	fp,0(sp)
   40460:	dec00204 	addi	sp,sp,8
   40464:	f800283a 	ret

00040468 <task1>:
 *   out the accelerometer. The value received will be used to set a new timeout value for the
 *   OSMBoxPend function that is used to receive the message. The intertask communication is
 *   illustrated in figure 97

 */
void task1(void* pdata) {
   40468:	defff804 	addi	sp,sp,-32
   4046c:	dfc00715 	stw	ra,28(sp)
   40470:	df000615 	stw	fp,24(sp)
   40474:	df000604 	addi	fp,sp,24
   40478:	e13fff15 	stw	r4,-4(fp)

	int t_start;
	int t_end;
	int t_prev = 0;
   4047c:	e03ffb15 	stw	zero,-20(fp)
	INT8U error_code = OS_NO_ERR;
   40480:	e03ffe05 	stb	zero,-8(fp)

	INT8U sw;
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(INTERRUPT_PIO_BASE, 0x7); //enable 3 interrupts input key1 and sw and led
   40484:	00c001c4 	movi	r3,7
   40488:	00800234 	movhi	r2,8
   4048c:	10842204 	addi	r2,r2,4232
   40490:	10c00035 	stwio	r3,0(r2)
	while (1) {
		t_start = OSTimeGet();
   40494:	00564100 	call	56410 <OSTimeGet>
   40498:	e0bffc15 	stw	r2,-16(fp)

		if (OSSemAccept(key1pressed))
   4049c:	d0a70d17 	ldw	r2,-25548(gp)
   404a0:	1009883a 	mov	r4,r2
   404a4:	0053df00 	call	53df0 <OSSemAccept>
   404a8:	10bfffcc 	andi	r2,r2,65535
   404ac:	10000626 	beq	r2,zero,404c8 <task1+0x60>
			OSSemPend(key1pressed, 0, &error_code);
   404b0:	d0a70d17 	ldw	r2,-25548(gp)
   404b4:	e0fffe04 	addi	r3,fp,-8
   404b8:	180d883a 	mov	r6,r3
   404bc:	000b883a 	mov	r5,zero
   404c0:	1009883a 	mov	r4,r2
   404c4:	00541b80 	call	541b8 <OSSemPend>
		sw = 50 * IORD(SW_PIO_BASE, 0) & 0x0F;
   404c8:	00800234 	movhi	r2,8
   404cc:	10841c04 	addi	r2,r2,4208
   404d0:	10800037 	ldwio	r2,0(r2)
   404d4:	01400c84 	movi	r5,50
   404d8:	1009883a 	mov	r4,r2
   404dc:	00406e00 	call	406e0 <__mulsi3>
   404e0:	1080038c 	andi	r2,r2,14
   404e4:	e0bffe45 	stb	r2,-7(fp)

		t_end = OSTimeGet();
   404e8:	00564100 	call	56410 <OSTimeGet>
   404ec:	e0bffd15 	stw	r2,-12(fp)
		printf("T1:(Start, END, Ex.T.,P): (%d, %d, %d,%d)\n", t_start, t_end,
   404f0:	e0fffd17 	ldw	r3,-12(fp)
   404f4:	e0bffc17 	ldw	r2,-16(fp)
   404f8:	1889c83a 	sub	r4,r3,r2
   404fc:	e0fffc17 	ldw	r3,-16(fp)
   40500:	e0bffb17 	ldw	r2,-20(fp)
   40504:	1885c83a 	sub	r2,r3,r2
   40508:	d8800015 	stw	r2,0(sp)
   4050c:	200f883a 	mov	r7,r4
   40510:	e1bffd17 	ldw	r6,-12(fp)
   40514:	e17ffc17 	ldw	r5,-16(fp)
   40518:	010001b4 	movhi	r4,6
   4051c:	2122e404 	addi	r4,r4,-29808
   40520:	00407380 	call	40738 <printf>
				t_end - t_start, t_start - t_prev);
		OSSemPost(key1pressed);
   40524:	d0a70d17 	ldw	r2,-25548(gp)
   40528:	1009883a 	mov	r4,r2
   4052c:	00545300 	call	54530 <OSSemPost>
		OSMboxPost(swTime, (void*) &sw);
   40530:	d0a70c17 	ldw	r2,-25552(gp)
   40534:	e0fffe44 	addi	r3,fp,-7
   40538:	180b883a 	mov	r5,r3
   4053c:	1009883a 	mov	r4,r2
   40540:	00522100 	call	52210 <OSMboxPost>
		t_prev = t_start;
   40544:	e0bffc17 	ldw	r2,-16(fp)
   40548:	e0bffb15 	stw	r2,-20(fp)

		//	OSTimeDly(sw); // delay switch time.
	}
   4054c:	003fd106 	br	40494 <__alt_data_end+0xfffdac94>

00040550 <task2>:
}

void task2(void* pdata) {
   40550:	defff704 	addi	sp,sp,-36
   40554:	dfc00815 	stw	ra,32(sp)
   40558:	df000715 	stw	fp,28(sp)
   4055c:	df000704 	addi	fp,sp,28
   40560:	e13fff15 	stw	r4,-4(fp)
	int t_start;
	int t_end;
	int t_prev = 0;
   40564:	e03ffa15 	stw	zero,-24(fp)
	INT8U timeout=0;
   40568:	e03ffb05 	stb	zero,-20(fp)
	INT8U err;
	INT8U error_code = OS_NO_ERR;
   4056c:	e03ffe45 	stb	zero,-7(fp)
init();
   40570:	00402c00 	call	402c0 <init>

	//Declare a pointer of type OS_EVENT.

	while (1) {
		t_start = OSTimeGet();
   40574:	00564100 	call	56410 <OSTimeGet>
   40578:	e0bffc15 	stw	r2,-16(fp)
		OSSemPend(key1pressed, 0, &error_code);
   4057c:	d0a70d17 	ldw	r2,-25548(gp)
   40580:	e0fffe44 	addi	r3,fp,-7
   40584:	180d883a 	mov	r6,r3
   40588:	000b883a 	mov	r5,zero
   4058c:	1009883a 	mov	r4,r2
   40590:	00541b80 	call	541b8 <OSSemPend>

		t_end = OSTimeGet();
   40594:	00564100 	call	56410 <OSTimeGet>
   40598:	e0bffd15 	stw	r2,-12(fp)
		printf("T2:(Start, END, Ex.T.,P): (%d, %d, %d,%d)\n", t_start, t_end,
   4059c:	e0fffd17 	ldw	r3,-12(fp)
   405a0:	e0bffc17 	ldw	r2,-16(fp)
   405a4:	1889c83a 	sub	r4,r3,r2
   405a8:	e0fffc17 	ldw	r3,-16(fp)
   405ac:	e0bffa17 	ldw	r2,-24(fp)
   405b0:	1885c83a 	sub	r2,r3,r2
   405b4:	d8800015 	stw	r2,0(sp)
   405b8:	200f883a 	mov	r7,r4
   405bc:	e1bffd17 	ldw	r6,-12(fp)
   405c0:	e17ffc17 	ldw	r5,-16(fp)
   405c4:	010001b4 	movhi	r4,6
   405c8:	2122ef04 	addi	r4,r4,-29764
   405cc:	00407380 	call	40738 <printf>
				t_end - t_start, t_start - t_prev);
	     checkID();
   405d0:	004026c0 	call	4026c <checkID>
	     readXYZ();
   405d4:	00403240 	call	40324 <readXYZ>
		if (OSMboxPend(swTime, timeout, &err)) {
   405d8:	d0a70c17 	ldw	r2,-25552(gp)
   405dc:	e0fffb03 	ldbu	r3,-20(fp)
   405e0:	e13ffe04 	addi	r4,fp,-8
   405e4:	200d883a 	mov	r6,r4
   405e8:	180b883a 	mov	r5,r3
   405ec:	1009883a 	mov	r4,r2
   405f0:	0051e700 	call	51e70 <OSMboxPend>
   405f4:	103fdf26 	beq	r2,zero,40574 <__alt_data_end+0xfffdad74>
			readXYZ();
   405f8:	00403240 	call	40324 <readXYZ>
			OSSemPost(key1pressed);
   405fc:	d0a70d17 	ldw	r2,-25548(gp)
   40600:	1009883a 	mov	r4,r2
   40604:	00545300 	call	54530 <OSSemPost>
			t_prev = t_start;
   40608:	e0bffc17 	ldw	r2,-16(fp)
   4060c:	e0bffa15 	stw	r2,-24(fp)
			OSTimeDly(swTime);
   40610:	d0a70c17 	ldw	r2,-25552(gp)
   40614:	10bfffcc 	andi	r2,r2,65535
   40618:	1009883a 	mov	r4,r2
   4061c:	0055fbc0 	call	55fbc <OSTimeDly>
		}
	}
   40620:	003fd406 	br	40574 <__alt_data_end+0xfffdad74>

00040624 <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void) {
   40624:	defff904 	addi	sp,sp,-28
   40628:	dfc00615 	stw	ra,24(sp)
   4062c:	df000515 	stw	fp,20(sp)
   40630:	df000504 	addi	fp,sp,20

	//create semaphores in the main() function before starting the multitasking system,
	//and initialize to 1. That is, the semaphore is available from start.
	//If initialize to 0, the semaphore is not available from start.
	key1pressed = OSSemCreate(1);
   40634:	01000044 	movi	r4,1
   40638:	0053ea00 	call	53ea0 <OSSemCreate>
   4063c:	d0a70d15 	stw	r2,-25548(gp)
	altera_nios2_gen2_irq_init();	//enable internal interrupt
   40640:	004ded80 	call	4ded8 <altera_nios2_gen2_irq_init>
	//init_interrupt_pio();

	OSTaskCreateExt(task1,
   40644:	d8000415 	stw	zero,16(sp)
   40648:	d8000315 	stw	zero,12(sp)
   4064c:	00820004 	movi	r2,2048
   40650:	d8800215 	stw	r2,8(sp)
   40654:	008001b4 	movhi	r2,6
   40658:	10b1ed04 	addi	r2,r2,-14412
   4065c:	d8800115 	stw	r2,4(sp)
   40660:	00800044 	movi	r2,1
   40664:	d8800015 	stw	r2,0(sp)
   40668:	01c00044 	movi	r7,1
   4066c:	018001b4 	movhi	r6,6
   40670:	31b9ec04 	addi	r6,r6,-6224
   40674:	000b883a 	mov	r5,zero
   40678:	01000134 	movhi	r4,4
   4067c:	21011a04 	addi	r4,r4,1128
   40680:	0054eec0 	call	54eec <OSTaskCreateExt>
	TASK1_PRIORITY,
	TASK1_PRIORITY, task1_stk,
	TASK_STACKSIZE,
	NULL, 0);

	OSTaskCreateExt(task2,
   40684:	d8000415 	stw	zero,16(sp)
   40688:	d8000315 	stw	zero,12(sp)
   4068c:	00820004 	movi	r2,2048
   40690:	d8800215 	stw	r2,8(sp)
   40694:	008001b4 	movhi	r2,6
   40698:	10b9ed04 	addi	r2,r2,-6220
   4069c:	d8800115 	stw	r2,4(sp)
   406a0:	00800084 	movi	r2,2
   406a4:	d8800015 	stw	r2,0(sp)
   406a8:	01c00084 	movi	r7,2
   406ac:	018001b4 	movhi	r6,6
   406b0:	3181ec04 	addi	r6,r6,1968
   406b4:	000b883a 	mov	r5,zero
   406b8:	01000134 	movhi	r4,4
   406bc:	21015404 	addi	r4,r4,1360
   406c0:	0054eec0 	call	54eec <OSTaskCreateExt>
	//Prototype functions for OSSemPend and OSSemPost
	//void OSSemPend(OS_EVENT *pevent, INT16U timeout, INT8U *err);

	//INT8U OSSemPost(OS_EVENT *pevent);

	OSStart();
   406c4:	004ed800 	call	4ed80 <OSStart>
	return 0;
   406c8:	0005883a 	mov	r2,zero
}
   406cc:	e037883a 	mov	sp,fp
   406d0:	dfc00117 	ldw	ra,4(sp)
   406d4:	df000017 	ldw	fp,0(sp)
   406d8:	dec00204 	addi	sp,sp,8
   406dc:	f800283a 	ret

000406e0 <__mulsi3>:
   406e0:	0005883a 	mov	r2,zero
   406e4:	20000726 	beq	r4,zero,40704 <__mulsi3+0x24>
   406e8:	20c0004c 	andi	r3,r4,1
   406ec:	2008d07a 	srli	r4,r4,1
   406f0:	18000126 	beq	r3,zero,406f8 <__mulsi3+0x18>
   406f4:	1145883a 	add	r2,r2,r5
   406f8:	294b883a 	add	r5,r5,r5
   406fc:	203ffa1e 	bne	r4,zero,406e8 <__alt_data_end+0xfffdaee8>
   40700:	f800283a 	ret
   40704:	f800283a 	ret

00040708 <_printf_r>:
   40708:	defffd04 	addi	sp,sp,-12
   4070c:	2805883a 	mov	r2,r5
   40710:	dfc00015 	stw	ra,0(sp)
   40714:	d9800115 	stw	r6,4(sp)
   40718:	d9c00215 	stw	r7,8(sp)
   4071c:	21400217 	ldw	r5,8(r4)
   40720:	d9c00104 	addi	r7,sp,4
   40724:	100d883a 	mov	r6,r2
   40728:	00407740 	call	40774 <___vfprintf_internal_r>
   4072c:	dfc00017 	ldw	ra,0(sp)
   40730:	dec00304 	addi	sp,sp,12
   40734:	f800283a 	ret

00040738 <printf>:
   40738:	defffc04 	addi	sp,sp,-16
   4073c:	dfc00015 	stw	ra,0(sp)
   40740:	d9400115 	stw	r5,4(sp)
   40744:	d9800215 	stw	r6,8(sp)
   40748:	d9c00315 	stw	r7,12(sp)
   4074c:	008001b4 	movhi	r2,6
   40750:	10aaaf04 	addi	r2,r2,-21828
   40754:	10800017 	ldw	r2,0(r2)
   40758:	200b883a 	mov	r5,r4
   4075c:	d9800104 	addi	r6,sp,4
   40760:	11000217 	ldw	r4,8(r2)
   40764:	0042a500 	call	42a50 <__vfprintf_internal>
   40768:	dfc00017 	ldw	ra,0(sp)
   4076c:	dec00404 	addi	sp,sp,16
   40770:	f800283a 	ret

00040774 <___vfprintf_internal_r>:
   40774:	deffb804 	addi	sp,sp,-288
   40778:	dfc04715 	stw	ra,284(sp)
   4077c:	ddc04515 	stw	r23,276(sp)
   40780:	dd404315 	stw	r21,268(sp)
   40784:	d9002d15 	stw	r4,180(sp)
   40788:	282f883a 	mov	r23,r5
   4078c:	302b883a 	mov	r21,r6
   40790:	d9c02e15 	stw	r7,184(sp)
   40794:	df004615 	stw	fp,280(sp)
   40798:	dd804415 	stw	r22,272(sp)
   4079c:	dd004215 	stw	r20,264(sp)
   407a0:	dcc04115 	stw	r19,260(sp)
   407a4:	dc804015 	stw	r18,256(sp)
   407a8:	dc403f15 	stw	r17,252(sp)
   407ac:	dc003e15 	stw	r16,248(sp)
   407b0:	00451ec0 	call	451ec <_localeconv_r>
   407b4:	10800017 	ldw	r2,0(r2)
   407b8:	1009883a 	mov	r4,r2
   407bc:	d8803415 	stw	r2,208(sp)
   407c0:	00472d00 	call	472d0 <strlen>
   407c4:	d8803715 	stw	r2,220(sp)
   407c8:	d8802d17 	ldw	r2,180(sp)
   407cc:	10000226 	beq	r2,zero,407d8 <___vfprintf_internal_r+0x64>
   407d0:	10800e17 	ldw	r2,56(r2)
   407d4:	1000fb26 	beq	r2,zero,40bc4 <___vfprintf_internal_r+0x450>
   407d8:	b880030b 	ldhu	r2,12(r23)
   407dc:	10c8000c 	andi	r3,r2,8192
   407e0:	1800061e 	bne	r3,zero,407fc <___vfprintf_internal_r+0x88>
   407e4:	b9001917 	ldw	r4,100(r23)
   407e8:	00f7ffc4 	movi	r3,-8193
   407ec:	10880014 	ori	r2,r2,8192
   407f0:	20c6703a 	and	r3,r4,r3
   407f4:	b880030d 	sth	r2,12(r23)
   407f8:	b8c01915 	stw	r3,100(r23)
   407fc:	10c0020c 	andi	r3,r2,8
   40800:	1800c326 	beq	r3,zero,40b10 <___vfprintf_internal_r+0x39c>
   40804:	b8c00417 	ldw	r3,16(r23)
   40808:	1800c126 	beq	r3,zero,40b10 <___vfprintf_internal_r+0x39c>
   4080c:	1080068c 	andi	r2,r2,26
   40810:	00c00284 	movi	r3,10
   40814:	10c0c626 	beq	r2,r3,40b30 <___vfprintf_internal_r+0x3bc>
   40818:	d8c00404 	addi	r3,sp,16
   4081c:	050001b4 	movhi	r20,6
   40820:	d9001e04 	addi	r4,sp,120
   40824:	a5230a84 	addi	r20,r20,-29654
   40828:	d8c01e15 	stw	r3,120(sp)
   4082c:	d8002015 	stw	zero,128(sp)
   40830:	d8001f15 	stw	zero,124(sp)
   40834:	d8003315 	stw	zero,204(sp)
   40838:	d8003615 	stw	zero,216(sp)
   4083c:	d8003815 	stw	zero,224(sp)
   40840:	1811883a 	mov	r8,r3
   40844:	d8003915 	stw	zero,228(sp)
   40848:	d8003a15 	stw	zero,232(sp)
   4084c:	d8002f15 	stw	zero,188(sp)
   40850:	d9002815 	stw	r4,160(sp)
   40854:	a8800007 	ldb	r2,0(r21)
   40858:	10028b26 	beq	r2,zero,41288 <___vfprintf_internal_r+0xb14>
   4085c:	00c00944 	movi	r3,37
   40860:	a823883a 	mov	r17,r21
   40864:	10c0021e 	bne	r2,r3,40870 <___vfprintf_internal_r+0xfc>
   40868:	00001406 	br	408bc <___vfprintf_internal_r+0x148>
   4086c:	10c00326 	beq	r2,r3,4087c <___vfprintf_internal_r+0x108>
   40870:	8c400044 	addi	r17,r17,1
   40874:	88800007 	ldb	r2,0(r17)
   40878:	103ffc1e 	bne	r2,zero,4086c <__alt_data_end+0xfffdb06c>
   4087c:	8d61c83a 	sub	r16,r17,r21
   40880:	80000e26 	beq	r16,zero,408bc <___vfprintf_internal_r+0x148>
   40884:	d8c02017 	ldw	r3,128(sp)
   40888:	d8801f17 	ldw	r2,124(sp)
   4088c:	45400015 	stw	r21,0(r8)
   40890:	1c07883a 	add	r3,r3,r16
   40894:	10800044 	addi	r2,r2,1
   40898:	d8c02015 	stw	r3,128(sp)
   4089c:	44000115 	stw	r16,4(r8)
   408a0:	d8801f15 	stw	r2,124(sp)
   408a4:	00c001c4 	movi	r3,7
   408a8:	1880a916 	blt	r3,r2,40b50 <___vfprintf_internal_r+0x3dc>
   408ac:	42000204 	addi	r8,r8,8
   408b0:	d9402f17 	ldw	r5,188(sp)
   408b4:	2c0b883a 	add	r5,r5,r16
   408b8:	d9402f15 	stw	r5,188(sp)
   408bc:	88800007 	ldb	r2,0(r17)
   408c0:	1000aa26 	beq	r2,zero,40b6c <___vfprintf_internal_r+0x3f8>
   408c4:	8d400044 	addi	r21,r17,1
   408c8:	8c400047 	ldb	r17,1(r17)
   408cc:	0021883a 	mov	r16,zero
   408d0:	00bfffc4 	movi	r2,-1
   408d4:	0025883a 	mov	r18,zero
   408d8:	dc002905 	stb	r16,164(sp)
   408dc:	d8002785 	stb	zero,158(sp)
   408e0:	d8002b05 	stb	zero,172(sp)
   408e4:	d8802a15 	stw	r2,168(sp)
   408e8:	d8003115 	stw	zero,196(sp)
   408ec:	04c01604 	movi	r19,88
   408f0:	05800244 	movi	r22,9
   408f4:	9021883a 	mov	r16,r18
   408f8:	4039883a 	mov	fp,r8
   408fc:	ad400044 	addi	r21,r21,1
   40900:	88bff804 	addi	r2,r17,-32
   40904:	98833236 	bltu	r19,r2,415d0 <___vfprintf_internal_r+0xe5c>
   40908:	100490ba 	slli	r2,r2,2
   4090c:	00c00134 	movhi	r3,4
   40910:	18c24804 	addi	r3,r3,2336
   40914:	10c5883a 	add	r2,r2,r3
   40918:	10800017 	ldw	r2,0(r2)
   4091c:	1000683a 	jmp	r2
   40920:	000414c8 	cmpgei	zero,zero,4179
   40924:	000415d0 	cmplti	zero,zero,4183
   40928:	000415d0 	cmplti	zero,zero,4183
   4092c:	000414e8 	cmpgeui	zero,zero,4179
   40930:	000415d0 	cmplti	zero,zero,4183
   40934:	000415d0 	cmplti	zero,zero,4183
   40938:	000415d0 	cmplti	zero,zero,4183
   4093c:	000415d0 	cmplti	zero,zero,4183
   40940:	000415d0 	cmplti	zero,zero,4183
   40944:	000415d0 	cmplti	zero,zero,4183
   40948:	00040bd0 	cmplti	zero,zero,4143
   4094c:	000413d8 	cmpnei	zero,zero,4175
   40950:	000415d0 	cmplti	zero,zero,4183
   40954:	00040a94 	movui	zero,4138
   40958:	00040bf4 	movhi	zero,4143
   4095c:	000415d0 	cmplti	zero,zero,4183
   40960:	00040c44 	movi	zero,4145
   40964:	00040c50 	cmplti	zero,zero,4145
   40968:	00040c50 	cmplti	zero,zero,4145
   4096c:	00040c50 	cmplti	zero,zero,4145
   40970:	00040c50 	cmplti	zero,zero,4145
   40974:	00040c50 	cmplti	zero,zero,4145
   40978:	00040c50 	cmplti	zero,zero,4145
   4097c:	00040c50 	cmplti	zero,zero,4145
   40980:	00040c50 	cmplti	zero,zero,4145
   40984:	00040c50 	cmplti	zero,zero,4145
   40988:	000415d0 	cmplti	zero,zero,4183
   4098c:	000415d0 	cmplti	zero,zero,4183
   40990:	000415d0 	cmplti	zero,zero,4183
   40994:	000415d0 	cmplti	zero,zero,4183
   40998:	000415d0 	cmplti	zero,zero,4183
   4099c:	000415d0 	cmplti	zero,zero,4183
   409a0:	000415d0 	cmplti	zero,zero,4183
   409a4:	000415d0 	cmplti	zero,zero,4183
   409a8:	000415d0 	cmplti	zero,zero,4183
   409ac:	000415d0 	cmplti	zero,zero,4183
   409b0:	00040c8c 	andi	zero,zero,4146
   409b4:	00040d54 	movui	zero,4149
   409b8:	000415d0 	cmplti	zero,zero,4183
   409bc:	00040d54 	movui	zero,4149
   409c0:	000415d0 	cmplti	zero,zero,4183
   409c4:	000415d0 	cmplti	zero,zero,4183
   409c8:	000415d0 	cmplti	zero,zero,4183
   409cc:	000415d0 	cmplti	zero,zero,4183
   409d0:	00040e00 	call	40e0 <OSCtxSw_SWITCH_PC+0x40a0>
   409d4:	000415d0 	cmplti	zero,zero,4183
   409d8:	000415d0 	cmplti	zero,zero,4183
   409dc:	00040e0c 	andi	zero,zero,4152
   409e0:	000415d0 	cmplti	zero,zero,4183
   409e4:	000415d0 	cmplti	zero,zero,4183
   409e8:	000415d0 	cmplti	zero,zero,4183
   409ec:	000415d0 	cmplti	zero,zero,4183
   409f0:	000415d0 	cmplti	zero,zero,4183
   409f4:	00041290 	cmplti	zero,zero,4170
   409f8:	000415d0 	cmplti	zero,zero,4183
   409fc:	000415d0 	cmplti	zero,zero,4183
   40a00:	000412fc 	xorhi	zero,zero,4171
   40a04:	000415d0 	cmplti	zero,zero,4183
   40a08:	000415d0 	cmplti	zero,zero,4183
   40a0c:	000415d0 	cmplti	zero,zero,4183
   40a10:	000415d0 	cmplti	zero,zero,4183
   40a14:	000415d0 	cmplti	zero,zero,4183
   40a18:	000415d0 	cmplti	zero,zero,4183
   40a1c:	000415d0 	cmplti	zero,zero,4183
   40a20:	000415d0 	cmplti	zero,zero,4183
   40a24:	000415d0 	cmplti	zero,zero,4183
   40a28:	000415d0 	cmplti	zero,zero,4183
   40a2c:	00041574 	movhi	zero,4181
   40a30:	000414f4 	movhi	zero,4179
   40a34:	00040d54 	movui	zero,4149
   40a38:	00040d54 	movui	zero,4149
   40a3c:	00040d54 	movui	zero,4149
   40a40:	00041514 	movui	zero,4180
   40a44:	000414f4 	movhi	zero,4179
   40a48:	000415d0 	cmplti	zero,zero,4183
   40a4c:	000415d0 	cmplti	zero,zero,4183
   40a50:	00041520 	cmpeqi	zero,zero,4180
   40a54:	000415d0 	cmplti	zero,zero,4183
   40a58:	00041534 	movhi	zero,4180
   40a5c:	000413b8 	rdprs	zero,zero,4174
   40a60:	00040aa0 	cmpeqi	zero,zero,4138
   40a64:	000413f0 	cmpltui	zero,zero,4175
   40a68:	000415d0 	cmplti	zero,zero,4183
   40a6c:	000413fc 	xorhi	zero,zero,4175
   40a70:	000415d0 	cmplti	zero,zero,4183
   40a74:	00041460 	cmpeqi	zero,zero,4177
   40a78:	000415d0 	cmplti	zero,zero,4183
   40a7c:	000415d0 	cmplti	zero,zero,4183
   40a80:	00041480 	call	4148 <OSCtxSw_SWITCH_PC+0x4108>
   40a84:	d8c03117 	ldw	r3,196(sp)
   40a88:	d8802e15 	stw	r2,184(sp)
   40a8c:	00c7c83a 	sub	r3,zero,r3
   40a90:	d8c03115 	stw	r3,196(sp)
   40a94:	84000114 	ori	r16,r16,4
   40a98:	ac400007 	ldb	r17,0(r21)
   40a9c:	003f9706 	br	408fc <__alt_data_end+0xfffdb0fc>
   40aa0:	00800c04 	movi	r2,48
   40aa4:	d8802705 	stb	r2,156(sp)
   40aa8:	00801e04 	movi	r2,120
   40aac:	d8802745 	stb	r2,157(sp)
   40ab0:	d9002a17 	ldw	r4,168(sp)
   40ab4:	d8802e17 	ldw	r2,184(sp)
   40ab8:	d8002785 	stb	zero,158(sp)
   40abc:	e011883a 	mov	r8,fp
   40ac0:	10c00104 	addi	r3,r2,4
   40ac4:	14c00017 	ldw	r19,0(r2)
   40ac8:	002d883a 	mov	r22,zero
   40acc:	80800094 	ori	r2,r16,2
   40ad0:	2002ca16 	blt	r4,zero,415fc <___vfprintf_internal_r+0xe88>
   40ad4:	00bfdfc4 	movi	r2,-129
   40ad8:	80a4703a 	and	r18,r16,r2
   40adc:	d8c02e15 	stw	r3,184(sp)
   40ae0:	94800094 	ori	r18,r18,2
   40ae4:	9802b41e 	bne	r19,zero,415b8 <___vfprintf_internal_r+0xe44>
   40ae8:	014001b4 	movhi	r5,6
   40aec:	29630304 	addi	r5,r5,-29684
   40af0:	d9403915 	stw	r5,228(sp)
   40af4:	04401e04 	movi	r17,120
   40af8:	d8802a17 	ldw	r2,168(sp)
   40afc:	0039883a 	mov	fp,zero
   40b00:	1001fa26 	beq	r2,zero,412ec <___vfprintf_internal_r+0xb78>
   40b04:	0027883a 	mov	r19,zero
   40b08:	002d883a 	mov	r22,zero
   40b0c:	00021906 	br	41374 <___vfprintf_internal_r+0xc00>
   40b10:	d9002d17 	ldw	r4,180(sp)
   40b14:	b80b883a 	mov	r5,r23
   40b18:	0042b280 	call	42b28 <__swsetup_r>
   40b1c:	1005dc1e 	bne	r2,zero,42290 <___vfprintf_internal_r+0x1b1c>
   40b20:	b880030b 	ldhu	r2,12(r23)
   40b24:	00c00284 	movi	r3,10
   40b28:	1080068c 	andi	r2,r2,26
   40b2c:	10ff3a1e 	bne	r2,r3,40818 <__alt_data_end+0xfffdb018>
   40b30:	b880038f 	ldh	r2,14(r23)
   40b34:	103f3816 	blt	r2,zero,40818 <__alt_data_end+0xfffdb018>
   40b38:	d9c02e17 	ldw	r7,184(sp)
   40b3c:	d9002d17 	ldw	r4,180(sp)
   40b40:	a80d883a 	mov	r6,r21
   40b44:	b80b883a 	mov	r5,r23
   40b48:	0042a6c0 	call	42a6c <__sbprintf>
   40b4c:	00001106 	br	40b94 <___vfprintf_internal_r+0x420>
   40b50:	d9002d17 	ldw	r4,180(sp)
   40b54:	d9801e04 	addi	r6,sp,120
   40b58:	b80b883a 	mov	r5,r23
   40b5c:	00474640 	call	47464 <__sprint_r>
   40b60:	1000081e 	bne	r2,zero,40b84 <___vfprintf_internal_r+0x410>
   40b64:	da000404 	addi	r8,sp,16
   40b68:	003f5106 	br	408b0 <__alt_data_end+0xfffdb0b0>
   40b6c:	d8802017 	ldw	r2,128(sp)
   40b70:	10000426 	beq	r2,zero,40b84 <___vfprintf_internal_r+0x410>
   40b74:	d9002d17 	ldw	r4,180(sp)
   40b78:	d9801e04 	addi	r6,sp,120
   40b7c:	b80b883a 	mov	r5,r23
   40b80:	00474640 	call	47464 <__sprint_r>
   40b84:	b880030b 	ldhu	r2,12(r23)
   40b88:	1080100c 	andi	r2,r2,64
   40b8c:	1005c01e 	bne	r2,zero,42290 <___vfprintf_internal_r+0x1b1c>
   40b90:	d8802f17 	ldw	r2,188(sp)
   40b94:	dfc04717 	ldw	ra,284(sp)
   40b98:	df004617 	ldw	fp,280(sp)
   40b9c:	ddc04517 	ldw	r23,276(sp)
   40ba0:	dd804417 	ldw	r22,272(sp)
   40ba4:	dd404317 	ldw	r21,268(sp)
   40ba8:	dd004217 	ldw	r20,264(sp)
   40bac:	dcc04117 	ldw	r19,260(sp)
   40bb0:	dc804017 	ldw	r18,256(sp)
   40bb4:	dc403f17 	ldw	r17,252(sp)
   40bb8:	dc003e17 	ldw	r16,248(sp)
   40bbc:	dec04804 	addi	sp,sp,288
   40bc0:	f800283a 	ret
   40bc4:	d9002d17 	ldw	r4,180(sp)
   40bc8:	0044b340 	call	44b34 <__sinit>
   40bcc:	003f0206 	br	407d8 <__alt_data_end+0xfffdafd8>
   40bd0:	d9002e17 	ldw	r4,184(sp)
   40bd4:	d9402e17 	ldw	r5,184(sp)
   40bd8:	21000017 	ldw	r4,0(r4)
   40bdc:	28800104 	addi	r2,r5,4
   40be0:	d9003115 	stw	r4,196(sp)
   40be4:	203fa716 	blt	r4,zero,40a84 <__alt_data_end+0xfffdb284>
   40be8:	d8802e15 	stw	r2,184(sp)
   40bec:	ac400007 	ldb	r17,0(r21)
   40bf0:	003f4206 	br	408fc <__alt_data_end+0xfffdb0fc>
   40bf4:	ac400007 	ldb	r17,0(r21)
   40bf8:	01000a84 	movi	r4,42
   40bfc:	a8c00044 	addi	r3,r21,1
   40c00:	89075826 	beq	r17,r4,42964 <___vfprintf_internal_r+0x21f0>
   40c04:	8cbff404 	addi	r18,r17,-48
   40c08:	b486ae36 	bltu	r22,r18,426c4 <___vfprintf_internal_r+0x1f50>
   40c0c:	0009883a 	mov	r4,zero
   40c10:	1823883a 	mov	r17,r3
   40c14:	01400284 	movi	r5,10
   40c18:	00406e00 	call	406e0 <__mulsi3>
   40c1c:	88c00007 	ldb	r3,0(r17)
   40c20:	1489883a 	add	r4,r2,r18
   40c24:	8d400044 	addi	r21,r17,1
   40c28:	1cbff404 	addi	r18,r3,-48
   40c2c:	a823883a 	mov	r17,r21
   40c30:	b4bff82e 	bgeu	r22,r18,40c14 <__alt_data_end+0xfffdb414>
   40c34:	1823883a 	mov	r17,r3
   40c38:	2005f616 	blt	r4,zero,42414 <___vfprintf_internal_r+0x1ca0>
   40c3c:	d9002a15 	stw	r4,168(sp)
   40c40:	003f2f06 	br	40900 <__alt_data_end+0xfffdb100>
   40c44:	84002014 	ori	r16,r16,128
   40c48:	ac400007 	ldb	r17,0(r21)
   40c4c:	003f2b06 	br	408fc <__alt_data_end+0xfffdb0fc>
   40c50:	8cbff404 	addi	r18,r17,-48
   40c54:	d8003115 	stw	zero,196(sp)
   40c58:	0009883a 	mov	r4,zero
   40c5c:	a823883a 	mov	r17,r21
   40c60:	01400284 	movi	r5,10
   40c64:	00406e00 	call	406e0 <__mulsi3>
   40c68:	88c00007 	ldb	r3,0(r17)
   40c6c:	9089883a 	add	r4,r18,r2
   40c70:	ad400044 	addi	r21,r21,1
   40c74:	1cbff404 	addi	r18,r3,-48
   40c78:	a823883a 	mov	r17,r21
   40c7c:	b4bff82e 	bgeu	r22,r18,40c60 <__alt_data_end+0xfffdb460>
   40c80:	1823883a 	mov	r17,r3
   40c84:	d9003115 	stw	r4,196(sp)
   40c88:	003f1d06 	br	40900 <__alt_data_end+0xfffdb100>
   40c8c:	8025883a 	mov	r18,r16
   40c90:	dc002903 	ldbu	r16,164(sp)
   40c94:	e011883a 	mov	r8,fp
   40c98:	84003fcc 	andi	r16,r16,255
   40c9c:	8007531e 	bne	r16,zero,429ec <___vfprintf_internal_r+0x2278>
   40ca0:	94800414 	ori	r18,r18,16
   40ca4:	9080080c 	andi	r2,r18,32
   40ca8:	1003a326 	beq	r2,zero,41b38 <___vfprintf_internal_r+0x13c4>
   40cac:	d9002e17 	ldw	r4,184(sp)
   40cb0:	20800117 	ldw	r2,4(r4)
   40cb4:	24c00017 	ldw	r19,0(r4)
   40cb8:	21000204 	addi	r4,r4,8
   40cbc:	d9002e15 	stw	r4,184(sp)
   40cc0:	102d883a 	mov	r22,r2
   40cc4:	10047316 	blt	r2,zero,41e94 <___vfprintf_internal_r+0x1720>
   40cc8:	d9002a17 	ldw	r4,168(sp)
   40ccc:	df002783 	ldbu	fp,158(sp)
   40cd0:	2003e416 	blt	r4,zero,41c64 <___vfprintf_internal_r+0x14f0>
   40cd4:	00ffdfc4 	movi	r3,-129
   40cd8:	9d84b03a 	or	r2,r19,r22
   40cdc:	90e4703a 	and	r18,r18,r3
   40ce0:	10018026 	beq	r2,zero,412e4 <___vfprintf_internal_r+0xb70>
   40ce4:	b003ab26 	beq	r22,zero,41b94 <___vfprintf_internal_r+0x1420>
   40ce8:	dc402915 	stw	r17,164(sp)
   40cec:	dc001e04 	addi	r16,sp,120
   40cf0:	b023883a 	mov	r17,r22
   40cf4:	402d883a 	mov	r22,r8
   40cf8:	9809883a 	mov	r4,r19
   40cfc:	880b883a 	mov	r5,r17
   40d00:	01800284 	movi	r6,10
   40d04:	000f883a 	mov	r7,zero
   40d08:	004a5300 	call	4a530 <__umoddi3>
   40d0c:	10800c04 	addi	r2,r2,48
   40d10:	843fffc4 	addi	r16,r16,-1
   40d14:	9809883a 	mov	r4,r19
   40d18:	880b883a 	mov	r5,r17
   40d1c:	80800005 	stb	r2,0(r16)
   40d20:	01800284 	movi	r6,10
   40d24:	000f883a 	mov	r7,zero
   40d28:	0049f340 	call	49f34 <__udivdi3>
   40d2c:	1027883a 	mov	r19,r2
   40d30:	10c4b03a 	or	r2,r2,r3
   40d34:	1823883a 	mov	r17,r3
   40d38:	103fef1e 	bne	r2,zero,40cf8 <__alt_data_end+0xfffdb4f8>
   40d3c:	d8c02817 	ldw	r3,160(sp)
   40d40:	dc402917 	ldw	r17,164(sp)
   40d44:	b011883a 	mov	r8,r22
   40d48:	1c07c83a 	sub	r3,r3,r16
   40d4c:	d8c02b15 	stw	r3,172(sp)
   40d50:	00005f06 	br	40ed0 <___vfprintf_internal_r+0x75c>
   40d54:	8025883a 	mov	r18,r16
   40d58:	dc002903 	ldbu	r16,164(sp)
   40d5c:	e011883a 	mov	r8,fp
   40d60:	84003fcc 	andi	r16,r16,255
   40d64:	80071e1e 	bne	r16,zero,429e0 <___vfprintf_internal_r+0x226c>
   40d68:	9080020c 	andi	r2,r18,8
   40d6c:	1004af26 	beq	r2,zero,4202c <___vfprintf_internal_r+0x18b8>
   40d70:	d9002e17 	ldw	r4,184(sp)
   40d74:	d9402e17 	ldw	r5,184(sp)
   40d78:	d8802e17 	ldw	r2,184(sp)
   40d7c:	21000017 	ldw	r4,0(r4)
   40d80:	29400117 	ldw	r5,4(r5)
   40d84:	10800204 	addi	r2,r2,8
   40d88:	d9003615 	stw	r4,216(sp)
   40d8c:	d9403815 	stw	r5,224(sp)
   40d90:	d8802e15 	stw	r2,184(sp)
   40d94:	d9003617 	ldw	r4,216(sp)
   40d98:	d9403817 	ldw	r5,224(sp)
   40d9c:	da003d15 	stw	r8,244(sp)
   40da0:	04000044 	movi	r16,1
   40da4:	0046ff00 	call	46ff0 <__fpclassifyd>
   40da8:	da003d17 	ldw	r8,244(sp)
   40dac:	1404441e 	bne	r2,r16,41ec0 <___vfprintf_internal_r+0x174c>
   40db0:	d9003617 	ldw	r4,216(sp)
   40db4:	d9403817 	ldw	r5,224(sp)
   40db8:	000d883a 	mov	r6,zero
   40dbc:	000f883a 	mov	r7,zero
   40dc0:	004c0880 	call	4c088 <__ledf2>
   40dc4:	da003d17 	ldw	r8,244(sp)
   40dc8:	1005e316 	blt	r2,zero,42558 <___vfprintf_internal_r+0x1de4>
   40dcc:	df002783 	ldbu	fp,158(sp)
   40dd0:	008011c4 	movi	r2,71
   40dd4:	1445580e 	bge	r2,r17,42338 <___vfprintf_internal_r+0x1bc4>
   40dd8:	040001b4 	movhi	r16,6
   40ddc:	8422fb04 	addi	r16,r16,-29716
   40de0:	00c000c4 	movi	r3,3
   40de4:	00bfdfc4 	movi	r2,-129
   40de8:	d8c02915 	stw	r3,164(sp)
   40dec:	90a4703a 	and	r18,r18,r2
   40df0:	d8c02b15 	stw	r3,172(sp)
   40df4:	d8002a15 	stw	zero,168(sp)
   40df8:	d8003215 	stw	zero,200(sp)
   40dfc:	00003a06 	br	40ee8 <___vfprintf_internal_r+0x774>
   40e00:	84000214 	ori	r16,r16,8
   40e04:	ac400007 	ldb	r17,0(r21)
   40e08:	003ebc06 	br	408fc <__alt_data_end+0xfffdb0fc>
   40e0c:	8025883a 	mov	r18,r16
   40e10:	dc002903 	ldbu	r16,164(sp)
   40e14:	e011883a 	mov	r8,fp
   40e18:	84003fcc 	andi	r16,r16,255
   40e1c:	8007001e 	bne	r16,zero,42a20 <___vfprintf_internal_r+0x22ac>
   40e20:	94800414 	ori	r18,r18,16
   40e24:	9080080c 	andi	r2,r18,32
   40e28:	1002fa26 	beq	r2,zero,41a14 <___vfprintf_internal_r+0x12a0>
   40e2c:	d9002e17 	ldw	r4,184(sp)
   40e30:	d9402a17 	ldw	r5,168(sp)
   40e34:	d8002785 	stb	zero,158(sp)
   40e38:	20800204 	addi	r2,r4,8
   40e3c:	24c00017 	ldw	r19,0(r4)
   40e40:	25800117 	ldw	r22,4(r4)
   40e44:	2804b116 	blt	r5,zero,4210c <___vfprintf_internal_r+0x1998>
   40e48:	013fdfc4 	movi	r4,-129
   40e4c:	9d86b03a 	or	r3,r19,r22
   40e50:	d8802e15 	stw	r2,184(sp)
   40e54:	9124703a 	and	r18,r18,r4
   40e58:	1802fb1e 	bne	r3,zero,41a48 <___vfprintf_internal_r+0x12d4>
   40e5c:	d8c02a17 	ldw	r3,168(sp)
   40e60:	0039883a 	mov	fp,zero
   40e64:	1805e526 	beq	r3,zero,425fc <___vfprintf_internal_r+0x1e88>
   40e68:	0027883a 	mov	r19,zero
   40e6c:	002d883a 	mov	r22,zero
   40e70:	dc001e04 	addi	r16,sp,120
   40e74:	9806d0fa 	srli	r3,r19,3
   40e78:	b008977a 	slli	r4,r22,29
   40e7c:	b02cd0fa 	srli	r22,r22,3
   40e80:	9cc001cc 	andi	r19,r19,7
   40e84:	98800c04 	addi	r2,r19,48
   40e88:	843fffc4 	addi	r16,r16,-1
   40e8c:	20e6b03a 	or	r19,r4,r3
   40e90:	80800005 	stb	r2,0(r16)
   40e94:	9d86b03a 	or	r3,r19,r22
   40e98:	183ff61e 	bne	r3,zero,40e74 <__alt_data_end+0xfffdb674>
   40e9c:	90c0004c 	andi	r3,r18,1
   40ea0:	18014126 	beq	r3,zero,413a8 <___vfprintf_internal_r+0xc34>
   40ea4:	10803fcc 	andi	r2,r2,255
   40ea8:	1080201c 	xori	r2,r2,128
   40eac:	10bfe004 	addi	r2,r2,-128
   40eb0:	00c00c04 	movi	r3,48
   40eb4:	10c13c26 	beq	r2,r3,413a8 <___vfprintf_internal_r+0xc34>
   40eb8:	80ffffc5 	stb	r3,-1(r16)
   40ebc:	d8c02817 	ldw	r3,160(sp)
   40ec0:	80bfffc4 	addi	r2,r16,-1
   40ec4:	1021883a 	mov	r16,r2
   40ec8:	1887c83a 	sub	r3,r3,r2
   40ecc:	d8c02b15 	stw	r3,172(sp)
   40ed0:	d8802b17 	ldw	r2,172(sp)
   40ed4:	d9002a17 	ldw	r4,168(sp)
   40ed8:	1100010e 	bge	r2,r4,40ee0 <___vfprintf_internal_r+0x76c>
   40edc:	2005883a 	mov	r2,r4
   40ee0:	d8802915 	stw	r2,164(sp)
   40ee4:	d8003215 	stw	zero,200(sp)
   40ee8:	e7003fcc 	andi	fp,fp,255
   40eec:	e700201c 	xori	fp,fp,128
   40ef0:	e73fe004 	addi	fp,fp,-128
   40ef4:	e0000326 	beq	fp,zero,40f04 <___vfprintf_internal_r+0x790>
   40ef8:	d8c02917 	ldw	r3,164(sp)
   40efc:	18c00044 	addi	r3,r3,1
   40f00:	d8c02915 	stw	r3,164(sp)
   40f04:	90c0008c 	andi	r3,r18,2
   40f08:	d8c02c15 	stw	r3,176(sp)
   40f0c:	18000326 	beq	r3,zero,40f1c <___vfprintf_internal_r+0x7a8>
   40f10:	d8c02917 	ldw	r3,164(sp)
   40f14:	18c00084 	addi	r3,r3,2
   40f18:	d8c02915 	stw	r3,164(sp)
   40f1c:	90c0210c 	andi	r3,r18,132
   40f20:	d8c03015 	stw	r3,192(sp)
   40f24:	1801c51e 	bne	r3,zero,4163c <___vfprintf_internal_r+0xec8>
   40f28:	d9003117 	ldw	r4,196(sp)
   40f2c:	d8c02917 	ldw	r3,164(sp)
   40f30:	20e7c83a 	sub	r19,r4,r3
   40f34:	04c1c10e 	bge	zero,r19,4163c <___vfprintf_internal_r+0xec8>
   40f38:	02400404 	movi	r9,16
   40f3c:	d8c02017 	ldw	r3,128(sp)
   40f40:	d8801f17 	ldw	r2,124(sp)
   40f44:	4cc52f0e 	bge	r9,r19,42404 <___vfprintf_internal_r+0x1c90>
   40f48:	014001b4 	movhi	r5,6
   40f4c:	29630e84 	addi	r5,r5,-29638
   40f50:	dc403b15 	stw	r17,236(sp)
   40f54:	d9403515 	stw	r5,212(sp)
   40f58:	9823883a 	mov	r17,r19
   40f5c:	482d883a 	mov	r22,r9
   40f60:	9027883a 	mov	r19,r18
   40f64:	070001c4 	movi	fp,7
   40f68:	8025883a 	mov	r18,r16
   40f6c:	dc002d17 	ldw	r16,180(sp)
   40f70:	00000306 	br	40f80 <___vfprintf_internal_r+0x80c>
   40f74:	8c7ffc04 	addi	r17,r17,-16
   40f78:	42000204 	addi	r8,r8,8
   40f7c:	b440130e 	bge	r22,r17,40fcc <___vfprintf_internal_r+0x858>
   40f80:	010001b4 	movhi	r4,6
   40f84:	18c00404 	addi	r3,r3,16
   40f88:	10800044 	addi	r2,r2,1
   40f8c:	21230e84 	addi	r4,r4,-29638
   40f90:	41000015 	stw	r4,0(r8)
   40f94:	45800115 	stw	r22,4(r8)
   40f98:	d8c02015 	stw	r3,128(sp)
   40f9c:	d8801f15 	stw	r2,124(sp)
   40fa0:	e0bff40e 	bge	fp,r2,40f74 <__alt_data_end+0xfffdb774>
   40fa4:	d9801e04 	addi	r6,sp,120
   40fa8:	b80b883a 	mov	r5,r23
   40fac:	8009883a 	mov	r4,r16
   40fb0:	00474640 	call	47464 <__sprint_r>
   40fb4:	103ef31e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   40fb8:	8c7ffc04 	addi	r17,r17,-16
   40fbc:	d8c02017 	ldw	r3,128(sp)
   40fc0:	d8801f17 	ldw	r2,124(sp)
   40fc4:	da000404 	addi	r8,sp,16
   40fc8:	b47fed16 	blt	r22,r17,40f80 <__alt_data_end+0xfffdb780>
   40fcc:	9021883a 	mov	r16,r18
   40fd0:	9825883a 	mov	r18,r19
   40fd4:	8827883a 	mov	r19,r17
   40fd8:	dc403b17 	ldw	r17,236(sp)
   40fdc:	d9403517 	ldw	r5,212(sp)
   40fe0:	98c7883a 	add	r3,r19,r3
   40fe4:	10800044 	addi	r2,r2,1
   40fe8:	41400015 	stw	r5,0(r8)
   40fec:	44c00115 	stw	r19,4(r8)
   40ff0:	d8c02015 	stw	r3,128(sp)
   40ff4:	d8801f15 	stw	r2,124(sp)
   40ff8:	010001c4 	movi	r4,7
   40ffc:	2082c516 	blt	r4,r2,41b14 <___vfprintf_internal_r+0x13a0>
   41000:	df002787 	ldb	fp,158(sp)
   41004:	42000204 	addi	r8,r8,8
   41008:	e0000c26 	beq	fp,zero,4103c <___vfprintf_internal_r+0x8c8>
   4100c:	d8801f17 	ldw	r2,124(sp)
   41010:	d9002784 	addi	r4,sp,158
   41014:	18c00044 	addi	r3,r3,1
   41018:	10800044 	addi	r2,r2,1
   4101c:	41000015 	stw	r4,0(r8)
   41020:	01000044 	movi	r4,1
   41024:	41000115 	stw	r4,4(r8)
   41028:	d8c02015 	stw	r3,128(sp)
   4102c:	d8801f15 	stw	r2,124(sp)
   41030:	010001c4 	movi	r4,7
   41034:	20825e16 	blt	r4,r2,419b0 <___vfprintf_internal_r+0x123c>
   41038:	42000204 	addi	r8,r8,8
   4103c:	d8802c17 	ldw	r2,176(sp)
   41040:	10000c26 	beq	r2,zero,41074 <___vfprintf_internal_r+0x900>
   41044:	d8801f17 	ldw	r2,124(sp)
   41048:	d9002704 	addi	r4,sp,156
   4104c:	18c00084 	addi	r3,r3,2
   41050:	10800044 	addi	r2,r2,1
   41054:	41000015 	stw	r4,0(r8)
   41058:	01000084 	movi	r4,2
   4105c:	41000115 	stw	r4,4(r8)
   41060:	d8c02015 	stw	r3,128(sp)
   41064:	d8801f15 	stw	r2,124(sp)
   41068:	010001c4 	movi	r4,7
   4106c:	20825816 	blt	r4,r2,419d0 <___vfprintf_internal_r+0x125c>
   41070:	42000204 	addi	r8,r8,8
   41074:	d9003017 	ldw	r4,192(sp)
   41078:	00802004 	movi	r2,128
   4107c:	2081bb26 	beq	r4,r2,4176c <___vfprintf_internal_r+0xff8>
   41080:	d9402a17 	ldw	r5,168(sp)
   41084:	d8802b17 	ldw	r2,172(sp)
   41088:	28adc83a 	sub	r22,r5,r2
   4108c:	0580310e 	bge	zero,r22,41154 <___vfprintf_internal_r+0x9e0>
   41090:	07000404 	movi	fp,16
   41094:	d8801f17 	ldw	r2,124(sp)
   41098:	e584360e 	bge	fp,r22,42174 <___vfprintf_internal_r+0x1a00>
   4109c:	014001b4 	movhi	r5,6
   410a0:	29630a84 	addi	r5,r5,-29654
   410a4:	dc402a15 	stw	r17,168(sp)
   410a8:	d9402c15 	stw	r5,176(sp)
   410ac:	b023883a 	mov	r17,r22
   410b0:	04c001c4 	movi	r19,7
   410b4:	a82d883a 	mov	r22,r21
   410b8:	902b883a 	mov	r21,r18
   410bc:	8025883a 	mov	r18,r16
   410c0:	dc002d17 	ldw	r16,180(sp)
   410c4:	00000306 	br	410d4 <___vfprintf_internal_r+0x960>
   410c8:	8c7ffc04 	addi	r17,r17,-16
   410cc:	42000204 	addi	r8,r8,8
   410d0:	e440110e 	bge	fp,r17,41118 <___vfprintf_internal_r+0x9a4>
   410d4:	18c00404 	addi	r3,r3,16
   410d8:	10800044 	addi	r2,r2,1
   410dc:	45000015 	stw	r20,0(r8)
   410e0:	47000115 	stw	fp,4(r8)
   410e4:	d8c02015 	stw	r3,128(sp)
   410e8:	d8801f15 	stw	r2,124(sp)
   410ec:	98bff60e 	bge	r19,r2,410c8 <__alt_data_end+0xfffdb8c8>
   410f0:	d9801e04 	addi	r6,sp,120
   410f4:	b80b883a 	mov	r5,r23
   410f8:	8009883a 	mov	r4,r16
   410fc:	00474640 	call	47464 <__sprint_r>
   41100:	103ea01e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   41104:	8c7ffc04 	addi	r17,r17,-16
   41108:	d8c02017 	ldw	r3,128(sp)
   4110c:	d8801f17 	ldw	r2,124(sp)
   41110:	da000404 	addi	r8,sp,16
   41114:	e47fef16 	blt	fp,r17,410d4 <__alt_data_end+0xfffdb8d4>
   41118:	9021883a 	mov	r16,r18
   4111c:	a825883a 	mov	r18,r21
   41120:	b02b883a 	mov	r21,r22
   41124:	882d883a 	mov	r22,r17
   41128:	dc402a17 	ldw	r17,168(sp)
   4112c:	d9002c17 	ldw	r4,176(sp)
   41130:	1d87883a 	add	r3,r3,r22
   41134:	10800044 	addi	r2,r2,1
   41138:	41000015 	stw	r4,0(r8)
   4113c:	45800115 	stw	r22,4(r8)
   41140:	d8c02015 	stw	r3,128(sp)
   41144:	d8801f15 	stw	r2,124(sp)
   41148:	010001c4 	movi	r4,7
   4114c:	20821016 	blt	r4,r2,41990 <___vfprintf_internal_r+0x121c>
   41150:	42000204 	addi	r8,r8,8
   41154:	9080400c 	andi	r2,r18,256
   41158:	10013a1e 	bne	r2,zero,41644 <___vfprintf_internal_r+0xed0>
   4115c:	d9402b17 	ldw	r5,172(sp)
   41160:	d8801f17 	ldw	r2,124(sp)
   41164:	44000015 	stw	r16,0(r8)
   41168:	1947883a 	add	r3,r3,r5
   4116c:	10800044 	addi	r2,r2,1
   41170:	41400115 	stw	r5,4(r8)
   41174:	d8c02015 	stw	r3,128(sp)
   41178:	d8801f15 	stw	r2,124(sp)
   4117c:	010001c4 	movi	r4,7
   41180:	2081f516 	blt	r4,r2,41958 <___vfprintf_internal_r+0x11e4>
   41184:	42000204 	addi	r8,r8,8
   41188:	9480010c 	andi	r18,r18,4
   4118c:	90003226 	beq	r18,zero,41258 <___vfprintf_internal_r+0xae4>
   41190:	d9403117 	ldw	r5,196(sp)
   41194:	d8802917 	ldw	r2,164(sp)
   41198:	28a1c83a 	sub	r16,r5,r2
   4119c:	04002e0e 	bge	zero,r16,41258 <___vfprintf_internal_r+0xae4>
   411a0:	04400404 	movi	r17,16
   411a4:	d8801f17 	ldw	r2,124(sp)
   411a8:	8c04c40e 	bge	r17,r16,424bc <___vfprintf_internal_r+0x1d48>
   411ac:	014001b4 	movhi	r5,6
   411b0:	29630e84 	addi	r5,r5,-29638
   411b4:	d9403515 	stw	r5,212(sp)
   411b8:	048001c4 	movi	r18,7
   411bc:	dcc02d17 	ldw	r19,180(sp)
   411c0:	00000306 	br	411d0 <___vfprintf_internal_r+0xa5c>
   411c4:	843ffc04 	addi	r16,r16,-16
   411c8:	42000204 	addi	r8,r8,8
   411cc:	8c00130e 	bge	r17,r16,4121c <___vfprintf_internal_r+0xaa8>
   411d0:	010001b4 	movhi	r4,6
   411d4:	18c00404 	addi	r3,r3,16
   411d8:	10800044 	addi	r2,r2,1
   411dc:	21230e84 	addi	r4,r4,-29638
   411e0:	41000015 	stw	r4,0(r8)
   411e4:	44400115 	stw	r17,4(r8)
   411e8:	d8c02015 	stw	r3,128(sp)
   411ec:	d8801f15 	stw	r2,124(sp)
   411f0:	90bff40e 	bge	r18,r2,411c4 <__alt_data_end+0xfffdb9c4>
   411f4:	d9801e04 	addi	r6,sp,120
   411f8:	b80b883a 	mov	r5,r23
   411fc:	9809883a 	mov	r4,r19
   41200:	00474640 	call	47464 <__sprint_r>
   41204:	103e5f1e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   41208:	843ffc04 	addi	r16,r16,-16
   4120c:	d8c02017 	ldw	r3,128(sp)
   41210:	d8801f17 	ldw	r2,124(sp)
   41214:	da000404 	addi	r8,sp,16
   41218:	8c3fed16 	blt	r17,r16,411d0 <__alt_data_end+0xfffdb9d0>
   4121c:	d9403517 	ldw	r5,212(sp)
   41220:	1c07883a 	add	r3,r3,r16
   41224:	10800044 	addi	r2,r2,1
   41228:	41400015 	stw	r5,0(r8)
   4122c:	44000115 	stw	r16,4(r8)
   41230:	d8c02015 	stw	r3,128(sp)
   41234:	d8801f15 	stw	r2,124(sp)
   41238:	010001c4 	movi	r4,7
   4123c:	2080060e 	bge	r4,r2,41258 <___vfprintf_internal_r+0xae4>
   41240:	d9002d17 	ldw	r4,180(sp)
   41244:	d9801e04 	addi	r6,sp,120
   41248:	b80b883a 	mov	r5,r23
   4124c:	00474640 	call	47464 <__sprint_r>
   41250:	103e4c1e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   41254:	d8c02017 	ldw	r3,128(sp)
   41258:	d8803117 	ldw	r2,196(sp)
   4125c:	d9002917 	ldw	r4,164(sp)
   41260:	1100010e 	bge	r2,r4,41268 <___vfprintf_internal_r+0xaf4>
   41264:	2005883a 	mov	r2,r4
   41268:	d9402f17 	ldw	r5,188(sp)
   4126c:	288b883a 	add	r5,r5,r2
   41270:	d9402f15 	stw	r5,188(sp)
   41274:	1801c01e 	bne	r3,zero,41978 <___vfprintf_internal_r+0x1204>
   41278:	a8800007 	ldb	r2,0(r21)
   4127c:	d8001f15 	stw	zero,124(sp)
   41280:	da000404 	addi	r8,sp,16
   41284:	103d751e 	bne	r2,zero,4085c <__alt_data_end+0xfffdb05c>
   41288:	a823883a 	mov	r17,r21
   4128c:	003d8b06 	br	408bc <__alt_data_end+0xfffdb0bc>
   41290:	8025883a 	mov	r18,r16
   41294:	dc002903 	ldbu	r16,164(sp)
   41298:	e011883a 	mov	r8,fp
   4129c:	84003fcc 	andi	r16,r16,255
   412a0:	8005e51e 	bne	r16,zero,42a38 <___vfprintf_internal_r+0x22c4>
   412a4:	94800414 	ori	r18,r18,16
   412a8:	9080080c 	andi	r2,r18,32
   412ac:	10022b26 	beq	r2,zero,41b5c <___vfprintf_internal_r+0x13e8>
   412b0:	d9002e17 	ldw	r4,184(sp)
   412b4:	d9402a17 	ldw	r5,168(sp)
   412b8:	d8002785 	stb	zero,158(sp)
   412bc:	20c00204 	addi	r3,r4,8
   412c0:	24c00017 	ldw	r19,0(r4)
   412c4:	25800117 	ldw	r22,4(r4)
   412c8:	28042e16 	blt	r5,zero,42384 <___vfprintf_internal_r+0x1c10>
   412cc:	013fdfc4 	movi	r4,-129
   412d0:	9d84b03a 	or	r2,r19,r22
   412d4:	d8c02e15 	stw	r3,184(sp)
   412d8:	9124703a 	and	r18,r18,r4
   412dc:	0039883a 	mov	fp,zero
   412e0:	103e801e 	bne	r2,zero,40ce4 <__alt_data_end+0xfffdb4e4>
   412e4:	d9002a17 	ldw	r4,168(sp)
   412e8:	2002e01e 	bne	r4,zero,41e6c <___vfprintf_internal_r+0x16f8>
   412ec:	d8002a15 	stw	zero,168(sp)
   412f0:	d8002b15 	stw	zero,172(sp)
   412f4:	dc001e04 	addi	r16,sp,120
   412f8:	003ef506 	br	40ed0 <__alt_data_end+0xfffdb6d0>
   412fc:	8025883a 	mov	r18,r16
   41300:	dc002903 	ldbu	r16,164(sp)
   41304:	e011883a 	mov	r8,fp
   41308:	84003fcc 	andi	r16,r16,255
   4130c:	8005ba1e 	bne	r16,zero,429f8 <___vfprintf_internal_r+0x2284>
   41310:	010001b4 	movhi	r4,6
   41314:	2122fe04 	addi	r4,r4,-29704
   41318:	d9003915 	stw	r4,228(sp)
   4131c:	9080080c 	andi	r2,r18,32
   41320:	10006126 	beq	r2,zero,414a8 <___vfprintf_internal_r+0xd34>
   41324:	d9402e17 	ldw	r5,184(sp)
   41328:	2cc00017 	ldw	r19,0(r5)
   4132c:	2d800117 	ldw	r22,4(r5)
   41330:	29400204 	addi	r5,r5,8
   41334:	d9402e15 	stw	r5,184(sp)
   41338:	9080004c 	andi	r2,r18,1
   4133c:	1001ac26 	beq	r2,zero,419f0 <___vfprintf_internal_r+0x127c>
   41340:	9d84b03a 	or	r2,r19,r22
   41344:	10038526 	beq	r2,zero,4215c <___vfprintf_internal_r+0x19e8>
   41348:	d8c02a17 	ldw	r3,168(sp)
   4134c:	00800c04 	movi	r2,48
   41350:	d8802705 	stb	r2,156(sp)
   41354:	dc402745 	stb	r17,157(sp)
   41358:	d8002785 	stb	zero,158(sp)
   4135c:	90800094 	ori	r2,r18,2
   41360:	18047916 	blt	r3,zero,42548 <___vfprintf_internal_r+0x1dd4>
   41364:	00bfdfc4 	movi	r2,-129
   41368:	90a4703a 	and	r18,r18,r2
   4136c:	94800094 	ori	r18,r18,2
   41370:	0039883a 	mov	fp,zero
   41374:	d9003917 	ldw	r4,228(sp)
   41378:	dc001e04 	addi	r16,sp,120
   4137c:	988003cc 	andi	r2,r19,15
   41380:	b006973a 	slli	r3,r22,28
   41384:	2085883a 	add	r2,r4,r2
   41388:	9826d13a 	srli	r19,r19,4
   4138c:	10800003 	ldbu	r2,0(r2)
   41390:	b02cd13a 	srli	r22,r22,4
   41394:	843fffc4 	addi	r16,r16,-1
   41398:	1ce6b03a 	or	r19,r3,r19
   4139c:	80800005 	stb	r2,0(r16)
   413a0:	9d84b03a 	or	r2,r19,r22
   413a4:	103ff51e 	bne	r2,zero,4137c <__alt_data_end+0xfffdbb7c>
   413a8:	d8c02817 	ldw	r3,160(sp)
   413ac:	1c07c83a 	sub	r3,r3,r16
   413b0:	d8c02b15 	stw	r3,172(sp)
   413b4:	003ec606 	br	40ed0 <__alt_data_end+0xfffdb6d0>
   413b8:	8025883a 	mov	r18,r16
   413bc:	dc002903 	ldbu	r16,164(sp)
   413c0:	e011883a 	mov	r8,fp
   413c4:	84003fcc 	andi	r16,r16,255
   413c8:	803e9626 	beq	r16,zero,40e24 <__alt_data_end+0xfffdb624>
   413cc:	d8c02b03 	ldbu	r3,172(sp)
   413d0:	d8c02785 	stb	r3,158(sp)
   413d4:	003e9306 	br	40e24 <__alt_data_end+0xfffdb624>
   413d8:	00c00044 	movi	r3,1
   413dc:	d8c02905 	stb	r3,164(sp)
   413e0:	00c00ac4 	movi	r3,43
   413e4:	d8c02b05 	stb	r3,172(sp)
   413e8:	ac400007 	ldb	r17,0(r21)
   413ec:	003d4306 	br	408fc <__alt_data_end+0xfffdb0fc>
   413f0:	84000814 	ori	r16,r16,32
   413f4:	ac400007 	ldb	r17,0(r21)
   413f8:	003d4006 	br	408fc <__alt_data_end+0xfffdb0fc>
   413fc:	d8802e17 	ldw	r2,184(sp)
   41400:	8025883a 	mov	r18,r16
   41404:	d8002785 	stb	zero,158(sp)
   41408:	14000017 	ldw	r16,0(r2)
   4140c:	e011883a 	mov	r8,fp
   41410:	14c00104 	addi	r19,r2,4
   41414:	80042d26 	beq	r16,zero,424cc <___vfprintf_internal_r+0x1d58>
   41418:	d8c02a17 	ldw	r3,168(sp)
   4141c:	1803e416 	blt	r3,zero,423b0 <___vfprintf_internal_r+0x1c3c>
   41420:	180d883a 	mov	r6,r3
   41424:	000b883a 	mov	r5,zero
   41428:	8009883a 	mov	r4,r16
   4142c:	df003d15 	stw	fp,244(sp)
   41430:	0045be40 	call	45be4 <memchr>
   41434:	da003d17 	ldw	r8,244(sp)
   41438:	10046826 	beq	r2,zero,425dc <___vfprintf_internal_r+0x1e68>
   4143c:	1405c83a 	sub	r2,r2,r16
   41440:	d8802b15 	stw	r2,172(sp)
   41444:	1003e016 	blt	r2,zero,423c8 <___vfprintf_internal_r+0x1c54>
   41448:	df002783 	ldbu	fp,158(sp)
   4144c:	d8802915 	stw	r2,164(sp)
   41450:	dcc02e15 	stw	r19,184(sp)
   41454:	d8002a15 	stw	zero,168(sp)
   41458:	d8003215 	stw	zero,200(sp)
   4145c:	003ea206 	br	40ee8 <__alt_data_end+0xfffdb6e8>
   41460:	8025883a 	mov	r18,r16
   41464:	dc002903 	ldbu	r16,164(sp)
   41468:	e011883a 	mov	r8,fp
   4146c:	84003fcc 	andi	r16,r16,255
   41470:	803f8d26 	beq	r16,zero,412a8 <__alt_data_end+0xfffdbaa8>
   41474:	d8c02b03 	ldbu	r3,172(sp)
   41478:	d8c02785 	stb	r3,158(sp)
   4147c:	003f8a06 	br	412a8 <__alt_data_end+0xfffdbaa8>
   41480:	8025883a 	mov	r18,r16
   41484:	dc002903 	ldbu	r16,164(sp)
   41488:	e011883a 	mov	r8,fp
   4148c:	84003fcc 	andi	r16,r16,255
   41490:	8005661e 	bne	r16,zero,42a2c <___vfprintf_internal_r+0x22b8>
   41494:	010001b4 	movhi	r4,6
   41498:	21230304 	addi	r4,r4,-29684
   4149c:	d9003915 	stw	r4,228(sp)
   414a0:	9080080c 	andi	r2,r18,32
   414a4:	103f9f1e 	bne	r2,zero,41324 <__alt_data_end+0xfffdbb24>
   414a8:	9080040c 	andi	r2,r18,16
   414ac:	1002eb26 	beq	r2,zero,4205c <___vfprintf_internal_r+0x18e8>
   414b0:	d8802e17 	ldw	r2,184(sp)
   414b4:	002d883a 	mov	r22,zero
   414b8:	14c00017 	ldw	r19,0(r2)
   414bc:	10800104 	addi	r2,r2,4
   414c0:	d8802e15 	stw	r2,184(sp)
   414c4:	003f9c06 	br	41338 <__alt_data_end+0xfffdbb38>
   414c8:	d8802b07 	ldb	r2,172(sp)
   414cc:	1002e11e 	bne	r2,zero,42054 <___vfprintf_internal_r+0x18e0>
   414d0:	00c00044 	movi	r3,1
   414d4:	d8c02905 	stb	r3,164(sp)
   414d8:	00c00804 	movi	r3,32
   414dc:	d8c02b05 	stb	r3,172(sp)
   414e0:	ac400007 	ldb	r17,0(r21)
   414e4:	003d0506 	br	408fc <__alt_data_end+0xfffdb0fc>
   414e8:	84000054 	ori	r16,r16,1
   414ec:	ac400007 	ldb	r17,0(r21)
   414f0:	003d0206 	br	408fc <__alt_data_end+0xfffdb0fc>
   414f4:	8025883a 	mov	r18,r16
   414f8:	dc002903 	ldbu	r16,164(sp)
   414fc:	e011883a 	mov	r8,fp
   41500:	84003fcc 	andi	r16,r16,255
   41504:	803de726 	beq	r16,zero,40ca4 <__alt_data_end+0xfffdb4a4>
   41508:	d8c02b03 	ldbu	r3,172(sp)
   4150c:	d8c02785 	stb	r3,158(sp)
   41510:	003de406 	br	40ca4 <__alt_data_end+0xfffdb4a4>
   41514:	84001014 	ori	r16,r16,64
   41518:	ac400007 	ldb	r17,0(r21)
   4151c:	003cf706 	br	408fc <__alt_data_end+0xfffdb0fc>
   41520:	ac400007 	ldb	r17,0(r21)
   41524:	00801b04 	movi	r2,108
   41528:	88838f26 	beq	r17,r2,42368 <___vfprintf_internal_r+0x1bf4>
   4152c:	84000414 	ori	r16,r16,16
   41530:	003cf206 	br	408fc <__alt_data_end+0xfffdb0fc>
   41534:	8025883a 	mov	r18,r16
   41538:	dc002903 	ldbu	r16,164(sp)
   4153c:	e011883a 	mov	r8,fp
   41540:	84003fcc 	andi	r16,r16,255
   41544:	80053f1e 	bne	r16,zero,42a44 <___vfprintf_internal_r+0x22d0>
   41548:	9080080c 	andi	r2,r18,32
   4154c:	1002d226 	beq	r2,zero,42098 <___vfprintf_internal_r+0x1924>
   41550:	d9002e17 	ldw	r4,184(sp)
   41554:	d9402f17 	ldw	r5,188(sp)
   41558:	20800017 	ldw	r2,0(r4)
   4155c:	2807d7fa 	srai	r3,r5,31
   41560:	21000104 	addi	r4,r4,4
   41564:	d9002e15 	stw	r4,184(sp)
   41568:	11400015 	stw	r5,0(r2)
   4156c:	10c00115 	stw	r3,4(r2)
   41570:	003cb806 	br	40854 <__alt_data_end+0xfffdb054>
   41574:	d8c02e17 	ldw	r3,184(sp)
   41578:	d9002e17 	ldw	r4,184(sp)
   4157c:	8025883a 	mov	r18,r16
   41580:	18800017 	ldw	r2,0(r3)
   41584:	21000104 	addi	r4,r4,4
   41588:	00c00044 	movi	r3,1
   4158c:	e011883a 	mov	r8,fp
   41590:	d8c02915 	stw	r3,164(sp)
   41594:	d8002785 	stb	zero,158(sp)
   41598:	d8801405 	stb	r2,80(sp)
   4159c:	d9002e15 	stw	r4,184(sp)
   415a0:	d8c02b15 	stw	r3,172(sp)
   415a4:	d8002a15 	stw	zero,168(sp)
   415a8:	d8003215 	stw	zero,200(sp)
   415ac:	dc001404 	addi	r16,sp,80
   415b0:	0039883a 	mov	fp,zero
   415b4:	003e5306 	br	40f04 <__alt_data_end+0xfffdb704>
   415b8:	010001b4 	movhi	r4,6
   415bc:	21230304 	addi	r4,r4,-29684
   415c0:	0039883a 	mov	fp,zero
   415c4:	d9003915 	stw	r4,228(sp)
   415c8:	04401e04 	movi	r17,120
   415cc:	003f6906 	br	41374 <__alt_data_end+0xfffdbb74>
   415d0:	8025883a 	mov	r18,r16
   415d4:	dc002903 	ldbu	r16,164(sp)
   415d8:	e011883a 	mov	r8,fp
   415dc:	84003fcc 	andi	r16,r16,255
   415e0:	8005081e 	bne	r16,zero,42a04 <___vfprintf_internal_r+0x2290>
   415e4:	883d6126 	beq	r17,zero,40b6c <__alt_data_end+0xfffdb36c>
   415e8:	00c00044 	movi	r3,1
   415ec:	d8c02915 	stw	r3,164(sp)
   415f0:	dc401405 	stb	r17,80(sp)
   415f4:	d8002785 	stb	zero,158(sp)
   415f8:	003fe906 	br	415a0 <__alt_data_end+0xfffdbda0>
   415fc:	014001b4 	movhi	r5,6
   41600:	29630304 	addi	r5,r5,-29684
   41604:	d9403915 	stw	r5,228(sp)
   41608:	d8c02e15 	stw	r3,184(sp)
   4160c:	1025883a 	mov	r18,r2
   41610:	04401e04 	movi	r17,120
   41614:	9d84b03a 	or	r2,r19,r22
   41618:	1000fc1e 	bne	r2,zero,41a0c <___vfprintf_internal_r+0x1298>
   4161c:	0039883a 	mov	fp,zero
   41620:	00800084 	movi	r2,2
   41624:	10803fcc 	andi	r2,r2,255
   41628:	00c00044 	movi	r3,1
   4162c:	10c20f26 	beq	r2,r3,41e6c <___vfprintf_internal_r+0x16f8>
   41630:	00c00084 	movi	r3,2
   41634:	10fd3326 	beq	r2,r3,40b04 <__alt_data_end+0xfffdb304>
   41638:	003e0b06 	br	40e68 <__alt_data_end+0xfffdb668>
   4163c:	d8c02017 	ldw	r3,128(sp)
   41640:	003e7106 	br	41008 <__alt_data_end+0xfffdb808>
   41644:	00801944 	movi	r2,101
   41648:	14407e0e 	bge	r2,r17,41844 <___vfprintf_internal_r+0x10d0>
   4164c:	d9003617 	ldw	r4,216(sp)
   41650:	d9403817 	ldw	r5,224(sp)
   41654:	000d883a 	mov	r6,zero
   41658:	000f883a 	mov	r7,zero
   4165c:	d8c03c15 	stw	r3,240(sp)
   41660:	da003d15 	stw	r8,244(sp)
   41664:	004bf240 	call	4bf24 <__eqdf2>
   41668:	d8c03c17 	ldw	r3,240(sp)
   4166c:	da003d17 	ldw	r8,244(sp)
   41670:	1000f71e 	bne	r2,zero,41a50 <___vfprintf_internal_r+0x12dc>
   41674:	d8801f17 	ldw	r2,124(sp)
   41678:	010001b4 	movhi	r4,6
   4167c:	21230a04 	addi	r4,r4,-29656
   41680:	18c00044 	addi	r3,r3,1
   41684:	10800044 	addi	r2,r2,1
   41688:	41000015 	stw	r4,0(r8)
   4168c:	01000044 	movi	r4,1
   41690:	41000115 	stw	r4,4(r8)
   41694:	d8c02015 	stw	r3,128(sp)
   41698:	d8801f15 	stw	r2,124(sp)
   4169c:	010001c4 	movi	r4,7
   416a0:	2082b816 	blt	r4,r2,42184 <___vfprintf_internal_r+0x1a10>
   416a4:	42000204 	addi	r8,r8,8
   416a8:	d8802617 	ldw	r2,152(sp)
   416ac:	d9403317 	ldw	r5,204(sp)
   416b0:	11400216 	blt	r2,r5,416bc <___vfprintf_internal_r+0xf48>
   416b4:	9080004c 	andi	r2,r18,1
   416b8:	103eb326 	beq	r2,zero,41188 <__alt_data_end+0xfffdb988>
   416bc:	d8803717 	ldw	r2,220(sp)
   416c0:	d9003417 	ldw	r4,208(sp)
   416c4:	d9403717 	ldw	r5,220(sp)
   416c8:	1887883a 	add	r3,r3,r2
   416cc:	d8801f17 	ldw	r2,124(sp)
   416d0:	41000015 	stw	r4,0(r8)
   416d4:	41400115 	stw	r5,4(r8)
   416d8:	10800044 	addi	r2,r2,1
   416dc:	d8c02015 	stw	r3,128(sp)
   416e0:	d8801f15 	stw	r2,124(sp)
   416e4:	010001c4 	movi	r4,7
   416e8:	20832916 	blt	r4,r2,42390 <___vfprintf_internal_r+0x1c1c>
   416ec:	42000204 	addi	r8,r8,8
   416f0:	d8803317 	ldw	r2,204(sp)
   416f4:	143fffc4 	addi	r16,r2,-1
   416f8:	043ea30e 	bge	zero,r16,41188 <__alt_data_end+0xfffdb988>
   416fc:	04400404 	movi	r17,16
   41700:	d8801f17 	ldw	r2,124(sp)
   41704:	8c00880e 	bge	r17,r16,41928 <___vfprintf_internal_r+0x11b4>
   41708:	014001b4 	movhi	r5,6
   4170c:	29630a84 	addi	r5,r5,-29654
   41710:	d9402c15 	stw	r5,176(sp)
   41714:	058001c4 	movi	r22,7
   41718:	dcc02d17 	ldw	r19,180(sp)
   4171c:	00000306 	br	4172c <___vfprintf_internal_r+0xfb8>
   41720:	42000204 	addi	r8,r8,8
   41724:	843ffc04 	addi	r16,r16,-16
   41728:	8c00820e 	bge	r17,r16,41934 <___vfprintf_internal_r+0x11c0>
   4172c:	18c00404 	addi	r3,r3,16
   41730:	10800044 	addi	r2,r2,1
   41734:	45000015 	stw	r20,0(r8)
   41738:	44400115 	stw	r17,4(r8)
   4173c:	d8c02015 	stw	r3,128(sp)
   41740:	d8801f15 	stw	r2,124(sp)
   41744:	b0bff60e 	bge	r22,r2,41720 <__alt_data_end+0xfffdbf20>
   41748:	d9801e04 	addi	r6,sp,120
   4174c:	b80b883a 	mov	r5,r23
   41750:	9809883a 	mov	r4,r19
   41754:	00474640 	call	47464 <__sprint_r>
   41758:	103d0a1e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   4175c:	d8c02017 	ldw	r3,128(sp)
   41760:	d8801f17 	ldw	r2,124(sp)
   41764:	da000404 	addi	r8,sp,16
   41768:	003fee06 	br	41724 <__alt_data_end+0xfffdbf24>
   4176c:	d9403117 	ldw	r5,196(sp)
   41770:	d8802917 	ldw	r2,164(sp)
   41774:	28adc83a 	sub	r22,r5,r2
   41778:	05be410e 	bge	zero,r22,41080 <__alt_data_end+0xfffdb880>
   4177c:	07000404 	movi	fp,16
   41780:	d8801f17 	ldw	r2,124(sp)
   41784:	e5838f0e 	bge	fp,r22,425c4 <___vfprintf_internal_r+0x1e50>
   41788:	014001b4 	movhi	r5,6
   4178c:	29630a84 	addi	r5,r5,-29654
   41790:	dc403015 	stw	r17,192(sp)
   41794:	d9402c15 	stw	r5,176(sp)
   41798:	b023883a 	mov	r17,r22
   4179c:	04c001c4 	movi	r19,7
   417a0:	a82d883a 	mov	r22,r21
   417a4:	902b883a 	mov	r21,r18
   417a8:	8025883a 	mov	r18,r16
   417ac:	dc002d17 	ldw	r16,180(sp)
   417b0:	00000306 	br	417c0 <___vfprintf_internal_r+0x104c>
   417b4:	8c7ffc04 	addi	r17,r17,-16
   417b8:	42000204 	addi	r8,r8,8
   417bc:	e440110e 	bge	fp,r17,41804 <___vfprintf_internal_r+0x1090>
   417c0:	18c00404 	addi	r3,r3,16
   417c4:	10800044 	addi	r2,r2,1
   417c8:	45000015 	stw	r20,0(r8)
   417cc:	47000115 	stw	fp,4(r8)
   417d0:	d8c02015 	stw	r3,128(sp)
   417d4:	d8801f15 	stw	r2,124(sp)
   417d8:	98bff60e 	bge	r19,r2,417b4 <__alt_data_end+0xfffdbfb4>
   417dc:	d9801e04 	addi	r6,sp,120
   417e0:	b80b883a 	mov	r5,r23
   417e4:	8009883a 	mov	r4,r16
   417e8:	00474640 	call	47464 <__sprint_r>
   417ec:	103ce51e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   417f0:	8c7ffc04 	addi	r17,r17,-16
   417f4:	d8c02017 	ldw	r3,128(sp)
   417f8:	d8801f17 	ldw	r2,124(sp)
   417fc:	da000404 	addi	r8,sp,16
   41800:	e47fef16 	blt	fp,r17,417c0 <__alt_data_end+0xfffdbfc0>
   41804:	9021883a 	mov	r16,r18
   41808:	a825883a 	mov	r18,r21
   4180c:	b02b883a 	mov	r21,r22
   41810:	882d883a 	mov	r22,r17
   41814:	dc403017 	ldw	r17,192(sp)
   41818:	d9002c17 	ldw	r4,176(sp)
   4181c:	1d87883a 	add	r3,r3,r22
   41820:	10800044 	addi	r2,r2,1
   41824:	41000015 	stw	r4,0(r8)
   41828:	45800115 	stw	r22,4(r8)
   4182c:	d8c02015 	stw	r3,128(sp)
   41830:	d8801f15 	stw	r2,124(sp)
   41834:	010001c4 	movi	r4,7
   41838:	20818e16 	blt	r4,r2,41e74 <___vfprintf_internal_r+0x1700>
   4183c:	42000204 	addi	r8,r8,8
   41840:	003e0f06 	br	41080 <__alt_data_end+0xfffdb880>
   41844:	d9403317 	ldw	r5,204(sp)
   41848:	00800044 	movi	r2,1
   4184c:	18c00044 	addi	r3,r3,1
   41850:	1141530e 	bge	r2,r5,41da0 <___vfprintf_internal_r+0x162c>
   41854:	dc401f17 	ldw	r17,124(sp)
   41858:	00800044 	movi	r2,1
   4185c:	40800115 	stw	r2,4(r8)
   41860:	8c400044 	addi	r17,r17,1
   41864:	44000015 	stw	r16,0(r8)
   41868:	d8c02015 	stw	r3,128(sp)
   4186c:	dc401f15 	stw	r17,124(sp)
   41870:	008001c4 	movi	r2,7
   41874:	14416b16 	blt	r2,r17,41e24 <___vfprintf_internal_r+0x16b0>
   41878:	42000204 	addi	r8,r8,8
   4187c:	d8803717 	ldw	r2,220(sp)
   41880:	d9003417 	ldw	r4,208(sp)
   41884:	8c400044 	addi	r17,r17,1
   41888:	10c7883a 	add	r3,r2,r3
   4188c:	40800115 	stw	r2,4(r8)
   41890:	41000015 	stw	r4,0(r8)
   41894:	d8c02015 	stw	r3,128(sp)
   41898:	dc401f15 	stw	r17,124(sp)
   4189c:	008001c4 	movi	r2,7
   418a0:	14416916 	blt	r2,r17,41e48 <___vfprintf_internal_r+0x16d4>
   418a4:	45800204 	addi	r22,r8,8
   418a8:	d9003617 	ldw	r4,216(sp)
   418ac:	d9403817 	ldw	r5,224(sp)
   418b0:	000d883a 	mov	r6,zero
   418b4:	000f883a 	mov	r7,zero
   418b8:	d8c03c15 	stw	r3,240(sp)
   418bc:	004bf240 	call	4bf24 <__eqdf2>
   418c0:	d8c03c17 	ldw	r3,240(sp)
   418c4:	1000bc26 	beq	r2,zero,41bb8 <___vfprintf_internal_r+0x1444>
   418c8:	d9403317 	ldw	r5,204(sp)
   418cc:	84000044 	addi	r16,r16,1
   418d0:	8c400044 	addi	r17,r17,1
   418d4:	28bfffc4 	addi	r2,r5,-1
   418d8:	1887883a 	add	r3,r3,r2
   418dc:	b0800115 	stw	r2,4(r22)
   418e0:	b4000015 	stw	r16,0(r22)
   418e4:	d8c02015 	stw	r3,128(sp)
   418e8:	dc401f15 	stw	r17,124(sp)
   418ec:	008001c4 	movi	r2,7
   418f0:	14414316 	blt	r2,r17,41e00 <___vfprintf_internal_r+0x168c>
   418f4:	b5800204 	addi	r22,r22,8
   418f8:	d9003a17 	ldw	r4,232(sp)
   418fc:	df0022c4 	addi	fp,sp,139
   41900:	8c400044 	addi	r17,r17,1
   41904:	20c7883a 	add	r3,r4,r3
   41908:	b7000015 	stw	fp,0(r22)
   4190c:	b1000115 	stw	r4,4(r22)
   41910:	d8c02015 	stw	r3,128(sp)
   41914:	dc401f15 	stw	r17,124(sp)
   41918:	008001c4 	movi	r2,7
   4191c:	14400e16 	blt	r2,r17,41958 <___vfprintf_internal_r+0x11e4>
   41920:	b2000204 	addi	r8,r22,8
   41924:	003e1806 	br	41188 <__alt_data_end+0xfffdb988>
   41928:	010001b4 	movhi	r4,6
   4192c:	21230a84 	addi	r4,r4,-29654
   41930:	d9002c15 	stw	r4,176(sp)
   41934:	d9002c17 	ldw	r4,176(sp)
   41938:	1c07883a 	add	r3,r3,r16
   4193c:	44000115 	stw	r16,4(r8)
   41940:	41000015 	stw	r4,0(r8)
   41944:	10800044 	addi	r2,r2,1
   41948:	d8c02015 	stw	r3,128(sp)
   4194c:	d8801f15 	stw	r2,124(sp)
   41950:	010001c4 	movi	r4,7
   41954:	20be0b0e 	bge	r4,r2,41184 <__alt_data_end+0xfffdb984>
   41958:	d9002d17 	ldw	r4,180(sp)
   4195c:	d9801e04 	addi	r6,sp,120
   41960:	b80b883a 	mov	r5,r23
   41964:	00474640 	call	47464 <__sprint_r>
   41968:	103c861e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   4196c:	d8c02017 	ldw	r3,128(sp)
   41970:	da000404 	addi	r8,sp,16
   41974:	003e0406 	br	41188 <__alt_data_end+0xfffdb988>
   41978:	d9002d17 	ldw	r4,180(sp)
   4197c:	d9801e04 	addi	r6,sp,120
   41980:	b80b883a 	mov	r5,r23
   41984:	00474640 	call	47464 <__sprint_r>
   41988:	103e3b26 	beq	r2,zero,41278 <__alt_data_end+0xfffdba78>
   4198c:	003c7d06 	br	40b84 <__alt_data_end+0xfffdb384>
   41990:	d9002d17 	ldw	r4,180(sp)
   41994:	d9801e04 	addi	r6,sp,120
   41998:	b80b883a 	mov	r5,r23
   4199c:	00474640 	call	47464 <__sprint_r>
   419a0:	103c781e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   419a4:	d8c02017 	ldw	r3,128(sp)
   419a8:	da000404 	addi	r8,sp,16
   419ac:	003de906 	br	41154 <__alt_data_end+0xfffdb954>
   419b0:	d9002d17 	ldw	r4,180(sp)
   419b4:	d9801e04 	addi	r6,sp,120
   419b8:	b80b883a 	mov	r5,r23
   419bc:	00474640 	call	47464 <__sprint_r>
   419c0:	103c701e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   419c4:	d8c02017 	ldw	r3,128(sp)
   419c8:	da000404 	addi	r8,sp,16
   419cc:	003d9b06 	br	4103c <__alt_data_end+0xfffdb83c>
   419d0:	d9002d17 	ldw	r4,180(sp)
   419d4:	d9801e04 	addi	r6,sp,120
   419d8:	b80b883a 	mov	r5,r23
   419dc:	00474640 	call	47464 <__sprint_r>
   419e0:	103c681e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   419e4:	d8c02017 	ldw	r3,128(sp)
   419e8:	da000404 	addi	r8,sp,16
   419ec:	003da106 	br	41074 <__alt_data_end+0xfffdb874>
   419f0:	d9402a17 	ldw	r5,168(sp)
   419f4:	d8002785 	stb	zero,158(sp)
   419f8:	283f0616 	blt	r5,zero,41614 <__alt_data_end+0xfffdbe14>
   419fc:	00ffdfc4 	movi	r3,-129
   41a00:	9d84b03a 	or	r2,r19,r22
   41a04:	90e4703a 	and	r18,r18,r3
   41a08:	103c3b26 	beq	r2,zero,40af8 <__alt_data_end+0xfffdb2f8>
   41a0c:	0039883a 	mov	fp,zero
   41a10:	003e5806 	br	41374 <__alt_data_end+0xfffdbb74>
   41a14:	9080040c 	andi	r2,r18,16
   41a18:	1001b326 	beq	r2,zero,420e8 <___vfprintf_internal_r+0x1974>
   41a1c:	d8c02e17 	ldw	r3,184(sp)
   41a20:	d9002a17 	ldw	r4,168(sp)
   41a24:	d8002785 	stb	zero,158(sp)
   41a28:	18800104 	addi	r2,r3,4
   41a2c:	1cc00017 	ldw	r19,0(r3)
   41a30:	002d883a 	mov	r22,zero
   41a34:	2001b516 	blt	r4,zero,4210c <___vfprintf_internal_r+0x1998>
   41a38:	00ffdfc4 	movi	r3,-129
   41a3c:	d8802e15 	stw	r2,184(sp)
   41a40:	90e4703a 	and	r18,r18,r3
   41a44:	983d0526 	beq	r19,zero,40e5c <__alt_data_end+0xfffdb65c>
   41a48:	0039883a 	mov	fp,zero
   41a4c:	003d0806 	br	40e70 <__alt_data_end+0xfffdb670>
   41a50:	dc402617 	ldw	r17,152(sp)
   41a54:	0441d30e 	bge	zero,r17,421a4 <___vfprintf_internal_r+0x1a30>
   41a58:	dc403217 	ldw	r17,200(sp)
   41a5c:	d8803317 	ldw	r2,204(sp)
   41a60:	1440010e 	bge	r2,r17,41a68 <___vfprintf_internal_r+0x12f4>
   41a64:	1023883a 	mov	r17,r2
   41a68:	04400a0e 	bge	zero,r17,41a94 <___vfprintf_internal_r+0x1320>
   41a6c:	d8801f17 	ldw	r2,124(sp)
   41a70:	1c47883a 	add	r3,r3,r17
   41a74:	44000015 	stw	r16,0(r8)
   41a78:	10800044 	addi	r2,r2,1
   41a7c:	44400115 	stw	r17,4(r8)
   41a80:	d8c02015 	stw	r3,128(sp)
   41a84:	d8801f15 	stw	r2,124(sp)
   41a88:	010001c4 	movi	r4,7
   41a8c:	20826516 	blt	r4,r2,42424 <___vfprintf_internal_r+0x1cb0>
   41a90:	42000204 	addi	r8,r8,8
   41a94:	88026116 	blt	r17,zero,4241c <___vfprintf_internal_r+0x1ca8>
   41a98:	d9003217 	ldw	r4,200(sp)
   41a9c:	2463c83a 	sub	r17,r4,r17
   41aa0:	04407b0e 	bge	zero,r17,41c90 <___vfprintf_internal_r+0x151c>
   41aa4:	05800404 	movi	r22,16
   41aa8:	d8801f17 	ldw	r2,124(sp)
   41aac:	b4419d0e 	bge	r22,r17,42124 <___vfprintf_internal_r+0x19b0>
   41ab0:	010001b4 	movhi	r4,6
   41ab4:	21230a84 	addi	r4,r4,-29654
   41ab8:	d9002c15 	stw	r4,176(sp)
   41abc:	070001c4 	movi	fp,7
   41ac0:	dcc02d17 	ldw	r19,180(sp)
   41ac4:	00000306 	br	41ad4 <___vfprintf_internal_r+0x1360>
   41ac8:	42000204 	addi	r8,r8,8
   41acc:	8c7ffc04 	addi	r17,r17,-16
   41ad0:	b441970e 	bge	r22,r17,42130 <___vfprintf_internal_r+0x19bc>
   41ad4:	18c00404 	addi	r3,r3,16
   41ad8:	10800044 	addi	r2,r2,1
   41adc:	45000015 	stw	r20,0(r8)
   41ae0:	45800115 	stw	r22,4(r8)
   41ae4:	d8c02015 	stw	r3,128(sp)
   41ae8:	d8801f15 	stw	r2,124(sp)
   41aec:	e0bff60e 	bge	fp,r2,41ac8 <__alt_data_end+0xfffdc2c8>
   41af0:	d9801e04 	addi	r6,sp,120
   41af4:	b80b883a 	mov	r5,r23
   41af8:	9809883a 	mov	r4,r19
   41afc:	00474640 	call	47464 <__sprint_r>
   41b00:	103c201e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   41b04:	d8c02017 	ldw	r3,128(sp)
   41b08:	d8801f17 	ldw	r2,124(sp)
   41b0c:	da000404 	addi	r8,sp,16
   41b10:	003fee06 	br	41acc <__alt_data_end+0xfffdc2cc>
   41b14:	d9002d17 	ldw	r4,180(sp)
   41b18:	d9801e04 	addi	r6,sp,120
   41b1c:	b80b883a 	mov	r5,r23
   41b20:	00474640 	call	47464 <__sprint_r>
   41b24:	103c171e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   41b28:	d8c02017 	ldw	r3,128(sp)
   41b2c:	df002787 	ldb	fp,158(sp)
   41b30:	da000404 	addi	r8,sp,16
   41b34:	003d3406 	br	41008 <__alt_data_end+0xfffdb808>
   41b38:	9080040c 	andi	r2,r18,16
   41b3c:	10016126 	beq	r2,zero,420c4 <___vfprintf_internal_r+0x1950>
   41b40:	d9402e17 	ldw	r5,184(sp)
   41b44:	2cc00017 	ldw	r19,0(r5)
   41b48:	29400104 	addi	r5,r5,4
   41b4c:	d9402e15 	stw	r5,184(sp)
   41b50:	982dd7fa 	srai	r22,r19,31
   41b54:	b005883a 	mov	r2,r22
   41b58:	003c5a06 	br	40cc4 <__alt_data_end+0xfffdb4c4>
   41b5c:	9080040c 	andi	r2,r18,16
   41b60:	10003526 	beq	r2,zero,41c38 <___vfprintf_internal_r+0x14c4>
   41b64:	d8c02e17 	ldw	r3,184(sp)
   41b68:	d9002a17 	ldw	r4,168(sp)
   41b6c:	d8002785 	stb	zero,158(sp)
   41b70:	18800104 	addi	r2,r3,4
   41b74:	1cc00017 	ldw	r19,0(r3)
   41b78:	002d883a 	mov	r22,zero
   41b7c:	20003716 	blt	r4,zero,41c5c <___vfprintf_internal_r+0x14e8>
   41b80:	00ffdfc4 	movi	r3,-129
   41b84:	d8802e15 	stw	r2,184(sp)
   41b88:	90e4703a 	and	r18,r18,r3
   41b8c:	0039883a 	mov	fp,zero
   41b90:	983dd426 	beq	r19,zero,412e4 <__alt_data_end+0xfffdbae4>
   41b94:	00800244 	movi	r2,9
   41b98:	14fc5336 	bltu	r2,r19,40ce8 <__alt_data_end+0xfffdb4e8>
   41b9c:	d8c02817 	ldw	r3,160(sp)
   41ba0:	dc001dc4 	addi	r16,sp,119
   41ba4:	9cc00c04 	addi	r19,r19,48
   41ba8:	1c07c83a 	sub	r3,r3,r16
   41bac:	dcc01dc5 	stb	r19,119(sp)
   41bb0:	d8c02b15 	stw	r3,172(sp)
   41bb4:	003cc606 	br	40ed0 <__alt_data_end+0xfffdb6d0>
   41bb8:	d8803317 	ldw	r2,204(sp)
   41bbc:	143fffc4 	addi	r16,r2,-1
   41bc0:	043f4d0e 	bge	zero,r16,418f8 <__alt_data_end+0xfffdc0f8>
   41bc4:	07000404 	movi	fp,16
   41bc8:	e400810e 	bge	fp,r16,41dd0 <___vfprintf_internal_r+0x165c>
   41bcc:	014001b4 	movhi	r5,6
   41bd0:	29630a84 	addi	r5,r5,-29654
   41bd4:	d9402c15 	stw	r5,176(sp)
   41bd8:	01c001c4 	movi	r7,7
   41bdc:	dcc02d17 	ldw	r19,180(sp)
   41be0:	00000306 	br	41bf0 <___vfprintf_internal_r+0x147c>
   41be4:	b5800204 	addi	r22,r22,8
   41be8:	843ffc04 	addi	r16,r16,-16
   41bec:	e4007b0e 	bge	fp,r16,41ddc <___vfprintf_internal_r+0x1668>
   41bf0:	18c00404 	addi	r3,r3,16
   41bf4:	8c400044 	addi	r17,r17,1
   41bf8:	b5000015 	stw	r20,0(r22)
   41bfc:	b7000115 	stw	fp,4(r22)
   41c00:	d8c02015 	stw	r3,128(sp)
   41c04:	dc401f15 	stw	r17,124(sp)
   41c08:	3c7ff60e 	bge	r7,r17,41be4 <__alt_data_end+0xfffdc3e4>
   41c0c:	d9801e04 	addi	r6,sp,120
   41c10:	b80b883a 	mov	r5,r23
   41c14:	9809883a 	mov	r4,r19
   41c18:	d9c03c15 	stw	r7,240(sp)
   41c1c:	00474640 	call	47464 <__sprint_r>
   41c20:	d9c03c17 	ldw	r7,240(sp)
   41c24:	103bd71e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   41c28:	d8c02017 	ldw	r3,128(sp)
   41c2c:	dc401f17 	ldw	r17,124(sp)
   41c30:	dd800404 	addi	r22,sp,16
   41c34:	003fec06 	br	41be8 <__alt_data_end+0xfffdc3e8>
   41c38:	9080100c 	andi	r2,r18,64
   41c3c:	d8002785 	stb	zero,158(sp)
   41c40:	10010e26 	beq	r2,zero,4207c <___vfprintf_internal_r+0x1908>
   41c44:	d9402e17 	ldw	r5,184(sp)
   41c48:	d8c02a17 	ldw	r3,168(sp)
   41c4c:	002d883a 	mov	r22,zero
   41c50:	28800104 	addi	r2,r5,4
   41c54:	2cc0000b 	ldhu	r19,0(r5)
   41c58:	183fc90e 	bge	r3,zero,41b80 <__alt_data_end+0xfffdc380>
   41c5c:	d8802e15 	stw	r2,184(sp)
   41c60:	0039883a 	mov	fp,zero
   41c64:	9d84b03a 	or	r2,r19,r22
   41c68:	103c1e1e 	bne	r2,zero,40ce4 <__alt_data_end+0xfffdb4e4>
   41c6c:	00800044 	movi	r2,1
   41c70:	003e6c06 	br	41624 <__alt_data_end+0xfffdbe24>
   41c74:	d9002d17 	ldw	r4,180(sp)
   41c78:	d9801e04 	addi	r6,sp,120
   41c7c:	b80b883a 	mov	r5,r23
   41c80:	00474640 	call	47464 <__sprint_r>
   41c84:	103bbf1e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   41c88:	d8c02017 	ldw	r3,128(sp)
   41c8c:	da000404 	addi	r8,sp,16
   41c90:	d9003217 	ldw	r4,200(sp)
   41c94:	d8802617 	ldw	r2,152(sp)
   41c98:	d9403317 	ldw	r5,204(sp)
   41c9c:	8123883a 	add	r17,r16,r4
   41ca0:	11400216 	blt	r2,r5,41cac <___vfprintf_internal_r+0x1538>
   41ca4:	9100004c 	andi	r4,r18,1
   41ca8:	20000d26 	beq	r4,zero,41ce0 <___vfprintf_internal_r+0x156c>
   41cac:	d9003717 	ldw	r4,220(sp)
   41cb0:	d9403417 	ldw	r5,208(sp)
   41cb4:	1907883a 	add	r3,r3,r4
   41cb8:	d9001f17 	ldw	r4,124(sp)
   41cbc:	41400015 	stw	r5,0(r8)
   41cc0:	d9403717 	ldw	r5,220(sp)
   41cc4:	21000044 	addi	r4,r4,1
   41cc8:	d8c02015 	stw	r3,128(sp)
   41ccc:	41400115 	stw	r5,4(r8)
   41cd0:	d9001f15 	stw	r4,124(sp)
   41cd4:	014001c4 	movi	r5,7
   41cd8:	2901e816 	blt	r5,r4,4247c <___vfprintf_internal_r+0x1d08>
   41cdc:	42000204 	addi	r8,r8,8
   41ce0:	d9003317 	ldw	r4,204(sp)
   41ce4:	8121883a 	add	r16,r16,r4
   41ce8:	2085c83a 	sub	r2,r4,r2
   41cec:	8461c83a 	sub	r16,r16,r17
   41cf0:	1400010e 	bge	r2,r16,41cf8 <___vfprintf_internal_r+0x1584>
   41cf4:	1021883a 	mov	r16,r2
   41cf8:	04000a0e 	bge	zero,r16,41d24 <___vfprintf_internal_r+0x15b0>
   41cfc:	d9001f17 	ldw	r4,124(sp)
   41d00:	1c07883a 	add	r3,r3,r16
   41d04:	44400015 	stw	r17,0(r8)
   41d08:	21000044 	addi	r4,r4,1
   41d0c:	44000115 	stw	r16,4(r8)
   41d10:	d8c02015 	stw	r3,128(sp)
   41d14:	d9001f15 	stw	r4,124(sp)
   41d18:	014001c4 	movi	r5,7
   41d1c:	2901fb16 	blt	r5,r4,4250c <___vfprintf_internal_r+0x1d98>
   41d20:	42000204 	addi	r8,r8,8
   41d24:	8001f716 	blt	r16,zero,42504 <___vfprintf_internal_r+0x1d90>
   41d28:	1421c83a 	sub	r16,r2,r16
   41d2c:	043d160e 	bge	zero,r16,41188 <__alt_data_end+0xfffdb988>
   41d30:	04400404 	movi	r17,16
   41d34:	d8801f17 	ldw	r2,124(sp)
   41d38:	8c3efb0e 	bge	r17,r16,41928 <__alt_data_end+0xfffdc128>
   41d3c:	014001b4 	movhi	r5,6
   41d40:	29630a84 	addi	r5,r5,-29654
   41d44:	d9402c15 	stw	r5,176(sp)
   41d48:	058001c4 	movi	r22,7
   41d4c:	dcc02d17 	ldw	r19,180(sp)
   41d50:	00000306 	br	41d60 <___vfprintf_internal_r+0x15ec>
   41d54:	42000204 	addi	r8,r8,8
   41d58:	843ffc04 	addi	r16,r16,-16
   41d5c:	8c3ef50e 	bge	r17,r16,41934 <__alt_data_end+0xfffdc134>
   41d60:	18c00404 	addi	r3,r3,16
   41d64:	10800044 	addi	r2,r2,1
   41d68:	45000015 	stw	r20,0(r8)
   41d6c:	44400115 	stw	r17,4(r8)
   41d70:	d8c02015 	stw	r3,128(sp)
   41d74:	d8801f15 	stw	r2,124(sp)
   41d78:	b0bff60e 	bge	r22,r2,41d54 <__alt_data_end+0xfffdc554>
   41d7c:	d9801e04 	addi	r6,sp,120
   41d80:	b80b883a 	mov	r5,r23
   41d84:	9809883a 	mov	r4,r19
   41d88:	00474640 	call	47464 <__sprint_r>
   41d8c:	103b7d1e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   41d90:	d8c02017 	ldw	r3,128(sp)
   41d94:	d8801f17 	ldw	r2,124(sp)
   41d98:	da000404 	addi	r8,sp,16
   41d9c:	003fee06 	br	41d58 <__alt_data_end+0xfffdc558>
   41da0:	9088703a 	and	r4,r18,r2
   41da4:	203eab1e 	bne	r4,zero,41854 <__alt_data_end+0xfffdc054>
   41da8:	dc401f17 	ldw	r17,124(sp)
   41dac:	40800115 	stw	r2,4(r8)
   41db0:	44000015 	stw	r16,0(r8)
   41db4:	8c400044 	addi	r17,r17,1
   41db8:	d8c02015 	stw	r3,128(sp)
   41dbc:	dc401f15 	stw	r17,124(sp)
   41dc0:	008001c4 	movi	r2,7
   41dc4:	14400e16 	blt	r2,r17,41e00 <___vfprintf_internal_r+0x168c>
   41dc8:	45800204 	addi	r22,r8,8
   41dcc:	003eca06 	br	418f8 <__alt_data_end+0xfffdc0f8>
   41dd0:	010001b4 	movhi	r4,6
   41dd4:	21230a84 	addi	r4,r4,-29654
   41dd8:	d9002c15 	stw	r4,176(sp)
   41ddc:	d8802c17 	ldw	r2,176(sp)
   41de0:	1c07883a 	add	r3,r3,r16
   41de4:	8c400044 	addi	r17,r17,1
   41de8:	b0800015 	stw	r2,0(r22)
   41dec:	b4000115 	stw	r16,4(r22)
   41df0:	d8c02015 	stw	r3,128(sp)
   41df4:	dc401f15 	stw	r17,124(sp)
   41df8:	008001c4 	movi	r2,7
   41dfc:	147ebd0e 	bge	r2,r17,418f4 <__alt_data_end+0xfffdc0f4>
   41e00:	d9002d17 	ldw	r4,180(sp)
   41e04:	d9801e04 	addi	r6,sp,120
   41e08:	b80b883a 	mov	r5,r23
   41e0c:	00474640 	call	47464 <__sprint_r>
   41e10:	103b5c1e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   41e14:	d8c02017 	ldw	r3,128(sp)
   41e18:	dc401f17 	ldw	r17,124(sp)
   41e1c:	dd800404 	addi	r22,sp,16
   41e20:	003eb506 	br	418f8 <__alt_data_end+0xfffdc0f8>
   41e24:	d9002d17 	ldw	r4,180(sp)
   41e28:	d9801e04 	addi	r6,sp,120
   41e2c:	b80b883a 	mov	r5,r23
   41e30:	00474640 	call	47464 <__sprint_r>
   41e34:	103b531e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   41e38:	d8c02017 	ldw	r3,128(sp)
   41e3c:	dc401f17 	ldw	r17,124(sp)
   41e40:	da000404 	addi	r8,sp,16
   41e44:	003e8d06 	br	4187c <__alt_data_end+0xfffdc07c>
   41e48:	d9002d17 	ldw	r4,180(sp)
   41e4c:	d9801e04 	addi	r6,sp,120
   41e50:	b80b883a 	mov	r5,r23
   41e54:	00474640 	call	47464 <__sprint_r>
   41e58:	103b4a1e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   41e5c:	d8c02017 	ldw	r3,128(sp)
   41e60:	dc401f17 	ldw	r17,124(sp)
   41e64:	dd800404 	addi	r22,sp,16
   41e68:	003e8f06 	br	418a8 <__alt_data_end+0xfffdc0a8>
   41e6c:	0027883a 	mov	r19,zero
   41e70:	003f4a06 	br	41b9c <__alt_data_end+0xfffdc39c>
   41e74:	d9002d17 	ldw	r4,180(sp)
   41e78:	d9801e04 	addi	r6,sp,120
   41e7c:	b80b883a 	mov	r5,r23
   41e80:	00474640 	call	47464 <__sprint_r>
   41e84:	103b3f1e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   41e88:	d8c02017 	ldw	r3,128(sp)
   41e8c:	da000404 	addi	r8,sp,16
   41e90:	003c7b06 	br	41080 <__alt_data_end+0xfffdb880>
   41e94:	d9402a17 	ldw	r5,168(sp)
   41e98:	04e7c83a 	sub	r19,zero,r19
   41e9c:	07000b44 	movi	fp,45
   41ea0:	9804c03a 	cmpne	r2,r19,zero
   41ea4:	05adc83a 	sub	r22,zero,r22
   41ea8:	df002785 	stb	fp,158(sp)
   41eac:	b0adc83a 	sub	r22,r22,r2
   41eb0:	28017b16 	blt	r5,zero,424a0 <___vfprintf_internal_r+0x1d2c>
   41eb4:	00bfdfc4 	movi	r2,-129
   41eb8:	90a4703a 	and	r18,r18,r2
   41ebc:	003b8906 	br	40ce4 <__alt_data_end+0xfffdb4e4>
   41ec0:	d9003617 	ldw	r4,216(sp)
   41ec4:	d9403817 	ldw	r5,224(sp)
   41ec8:	da003d15 	stw	r8,244(sp)
   41ecc:	0046ff00 	call	46ff0 <__fpclassifyd>
   41ed0:	da003d17 	ldw	r8,244(sp)
   41ed4:	1000f026 	beq	r2,zero,42298 <___vfprintf_internal_r+0x1b24>
   41ed8:	d9002a17 	ldw	r4,168(sp)
   41edc:	05bff7c4 	movi	r22,-33
   41ee0:	00bfffc4 	movi	r2,-1
   41ee4:	8dac703a 	and	r22,r17,r22
   41ee8:	20820026 	beq	r4,r2,426ec <___vfprintf_internal_r+0x1f78>
   41eec:	008011c4 	movi	r2,71
   41ef0:	b081f726 	beq	r22,r2,426d0 <___vfprintf_internal_r+0x1f5c>
   41ef4:	d9003817 	ldw	r4,224(sp)
   41ef8:	90c04014 	ori	r3,r18,256
   41efc:	d8c02c15 	stw	r3,176(sp)
   41f00:	20021516 	blt	r4,zero,42758 <___vfprintf_internal_r+0x1fe4>
   41f04:	dcc03817 	ldw	r19,224(sp)
   41f08:	d8002905 	stb	zero,164(sp)
   41f0c:	00801984 	movi	r2,102
   41f10:	8881f926 	beq	r17,r2,426f8 <___vfprintf_internal_r+0x1f84>
   41f14:	00801184 	movi	r2,70
   41f18:	88821c26 	beq	r17,r2,4278c <___vfprintf_internal_r+0x2018>
   41f1c:	00801144 	movi	r2,69
   41f20:	b081ef26 	beq	r22,r2,426e0 <___vfprintf_internal_r+0x1f6c>
   41f24:	d8c02a17 	ldw	r3,168(sp)
   41f28:	d8802104 	addi	r2,sp,132
   41f2c:	d8800315 	stw	r2,12(sp)
   41f30:	d9403617 	ldw	r5,216(sp)
   41f34:	d8802504 	addi	r2,sp,148
   41f38:	d9002d17 	ldw	r4,180(sp)
   41f3c:	d8800215 	stw	r2,8(sp)
   41f40:	d8802604 	addi	r2,sp,152
   41f44:	d8c00015 	stw	r3,0(sp)
   41f48:	d8800115 	stw	r2,4(sp)
   41f4c:	01c00084 	movi	r7,2
   41f50:	980d883a 	mov	r6,r19
   41f54:	d8c03c15 	stw	r3,240(sp)
   41f58:	da003d15 	stw	r8,244(sp)
   41f5c:	0042ea40 	call	42ea4 <_dtoa_r>
   41f60:	1021883a 	mov	r16,r2
   41f64:	008019c4 	movi	r2,103
   41f68:	d8c03c17 	ldw	r3,240(sp)
   41f6c:	da003d17 	ldw	r8,244(sp)
   41f70:	88817126 	beq	r17,r2,42538 <___vfprintf_internal_r+0x1dc4>
   41f74:	008011c4 	movi	r2,71
   41f78:	88829126 	beq	r17,r2,429c0 <___vfprintf_internal_r+0x224c>
   41f7c:	80f9883a 	add	fp,r16,r3
   41f80:	d9003617 	ldw	r4,216(sp)
   41f84:	000d883a 	mov	r6,zero
   41f88:	000f883a 	mov	r7,zero
   41f8c:	980b883a 	mov	r5,r19
   41f90:	da003d15 	stw	r8,244(sp)
   41f94:	004bf240 	call	4bf24 <__eqdf2>
   41f98:	da003d17 	ldw	r8,244(sp)
   41f9c:	10018d26 	beq	r2,zero,425d4 <___vfprintf_internal_r+0x1e60>
   41fa0:	d8802117 	ldw	r2,132(sp)
   41fa4:	1700062e 	bgeu	r2,fp,41fc0 <___vfprintf_internal_r+0x184c>
   41fa8:	01000c04 	movi	r4,48
   41fac:	10c00044 	addi	r3,r2,1
   41fb0:	d8c02115 	stw	r3,132(sp)
   41fb4:	11000005 	stb	r4,0(r2)
   41fb8:	d8802117 	ldw	r2,132(sp)
   41fbc:	173ffb36 	bltu	r2,fp,41fac <__alt_data_end+0xfffdc7ac>
   41fc0:	1405c83a 	sub	r2,r2,r16
   41fc4:	d8803315 	stw	r2,204(sp)
   41fc8:	008011c4 	movi	r2,71
   41fcc:	b0817626 	beq	r22,r2,425a8 <___vfprintf_internal_r+0x1e34>
   41fd0:	00801944 	movi	r2,101
   41fd4:	1442800e 	bge	r2,r17,429d8 <___vfprintf_internal_r+0x2264>
   41fd8:	d8c02617 	ldw	r3,152(sp)
   41fdc:	00801984 	movi	r2,102
   41fe0:	d8c03215 	stw	r3,200(sp)
   41fe4:	8881fe26 	beq	r17,r2,427e0 <___vfprintf_internal_r+0x206c>
   41fe8:	d8c03217 	ldw	r3,200(sp)
   41fec:	d9003317 	ldw	r4,204(sp)
   41ff0:	1901dd16 	blt	r3,r4,42768 <___vfprintf_internal_r+0x1ff4>
   41ff4:	9480004c 	andi	r18,r18,1
   41ff8:	90022b1e 	bne	r18,zero,428a8 <___vfprintf_internal_r+0x2134>
   41ffc:	1805883a 	mov	r2,r3
   42000:	18028316 	blt	r3,zero,42a10 <___vfprintf_internal_r+0x229c>
   42004:	d8c03217 	ldw	r3,200(sp)
   42008:	044019c4 	movi	r17,103
   4200c:	d8c02b15 	stw	r3,172(sp)
   42010:	df002907 	ldb	fp,164(sp)
   42014:	e001531e 	bne	fp,zero,42564 <___vfprintf_internal_r+0x1df0>
   42018:	df002783 	ldbu	fp,158(sp)
   4201c:	d8802915 	stw	r2,164(sp)
   42020:	dc802c17 	ldw	r18,176(sp)
   42024:	d8002a15 	stw	zero,168(sp)
   42028:	003baf06 	br	40ee8 <__alt_data_end+0xfffdb6e8>
   4202c:	d8c02e17 	ldw	r3,184(sp)
   42030:	d9002e17 	ldw	r4,184(sp)
   42034:	d9402e17 	ldw	r5,184(sp)
   42038:	18c00017 	ldw	r3,0(r3)
   4203c:	21000117 	ldw	r4,4(r4)
   42040:	29400204 	addi	r5,r5,8
   42044:	d8c03615 	stw	r3,216(sp)
   42048:	d9003815 	stw	r4,224(sp)
   4204c:	d9402e15 	stw	r5,184(sp)
   42050:	003b5006 	br	40d94 <__alt_data_end+0xfffdb594>
   42054:	ac400007 	ldb	r17,0(r21)
   42058:	003a2806 	br	408fc <__alt_data_end+0xfffdb0fc>
   4205c:	9080100c 	andi	r2,r18,64
   42060:	1000a826 	beq	r2,zero,42304 <___vfprintf_internal_r+0x1b90>
   42064:	d8c02e17 	ldw	r3,184(sp)
   42068:	002d883a 	mov	r22,zero
   4206c:	1cc0000b 	ldhu	r19,0(r3)
   42070:	18c00104 	addi	r3,r3,4
   42074:	d8c02e15 	stw	r3,184(sp)
   42078:	003caf06 	br	41338 <__alt_data_end+0xfffdbb38>
   4207c:	d9002e17 	ldw	r4,184(sp)
   42080:	d9402a17 	ldw	r5,168(sp)
   42084:	002d883a 	mov	r22,zero
   42088:	20800104 	addi	r2,r4,4
   4208c:	24c00017 	ldw	r19,0(r4)
   42090:	283ebb0e 	bge	r5,zero,41b80 <__alt_data_end+0xfffdc380>
   42094:	003ef106 	br	41c5c <__alt_data_end+0xfffdc45c>
   42098:	9080040c 	andi	r2,r18,16
   4209c:	1000921e 	bne	r2,zero,422e8 <___vfprintf_internal_r+0x1b74>
   420a0:	9480100c 	andi	r18,r18,64
   420a4:	90013926 	beq	r18,zero,4258c <___vfprintf_internal_r+0x1e18>
   420a8:	d9402e17 	ldw	r5,184(sp)
   420ac:	d8c02f17 	ldw	r3,188(sp)
   420b0:	28800017 	ldw	r2,0(r5)
   420b4:	29400104 	addi	r5,r5,4
   420b8:	d9402e15 	stw	r5,184(sp)
   420bc:	10c0000d 	sth	r3,0(r2)
   420c0:	0039e406 	br	40854 <__alt_data_end+0xfffdb054>
   420c4:	9080100c 	andi	r2,r18,64
   420c8:	10008026 	beq	r2,zero,422cc <___vfprintf_internal_r+0x1b58>
   420cc:	d8802e17 	ldw	r2,184(sp)
   420d0:	14c0000f 	ldh	r19,0(r2)
   420d4:	10800104 	addi	r2,r2,4
   420d8:	d8802e15 	stw	r2,184(sp)
   420dc:	982dd7fa 	srai	r22,r19,31
   420e0:	b005883a 	mov	r2,r22
   420e4:	003af706 	br	40cc4 <__alt_data_end+0xfffdb4c4>
   420e8:	9080100c 	andi	r2,r18,64
   420ec:	d8002785 	stb	zero,158(sp)
   420f0:	10008a1e 	bne	r2,zero,4231c <___vfprintf_internal_r+0x1ba8>
   420f4:	d9002e17 	ldw	r4,184(sp)
   420f8:	d9402a17 	ldw	r5,168(sp)
   420fc:	002d883a 	mov	r22,zero
   42100:	20800104 	addi	r2,r4,4
   42104:	24c00017 	ldw	r19,0(r4)
   42108:	283e4b0e 	bge	r5,zero,41a38 <__alt_data_end+0xfffdc238>
   4210c:	9d86b03a 	or	r3,r19,r22
   42110:	d8802e15 	stw	r2,184(sp)
   42114:	183e4c1e 	bne	r3,zero,41a48 <__alt_data_end+0xfffdc248>
   42118:	0039883a 	mov	fp,zero
   4211c:	0005883a 	mov	r2,zero
   42120:	003d4006 	br	41624 <__alt_data_end+0xfffdbe24>
   42124:	014001b4 	movhi	r5,6
   42128:	29630a84 	addi	r5,r5,-29654
   4212c:	d9402c15 	stw	r5,176(sp)
   42130:	d9402c17 	ldw	r5,176(sp)
   42134:	1c47883a 	add	r3,r3,r17
   42138:	10800044 	addi	r2,r2,1
   4213c:	41400015 	stw	r5,0(r8)
   42140:	44400115 	stw	r17,4(r8)
   42144:	d8c02015 	stw	r3,128(sp)
   42148:	d8801f15 	stw	r2,124(sp)
   4214c:	010001c4 	movi	r4,7
   42150:	20bec816 	blt	r4,r2,41c74 <__alt_data_end+0xfffdc474>
   42154:	42000204 	addi	r8,r8,8
   42158:	003ecd06 	br	41c90 <__alt_data_end+0xfffdc490>
   4215c:	d9002a17 	ldw	r4,168(sp)
   42160:	d8002785 	stb	zero,158(sp)
   42164:	203d2d16 	blt	r4,zero,4161c <__alt_data_end+0xfffdbe1c>
   42168:	00bfdfc4 	movi	r2,-129
   4216c:	90a4703a 	and	r18,r18,r2
   42170:	003a6106 	br	40af8 <__alt_data_end+0xfffdb2f8>
   42174:	010001b4 	movhi	r4,6
   42178:	21230a84 	addi	r4,r4,-29654
   4217c:	d9002c15 	stw	r4,176(sp)
   42180:	003bea06 	br	4112c <__alt_data_end+0xfffdb92c>
   42184:	d9002d17 	ldw	r4,180(sp)
   42188:	d9801e04 	addi	r6,sp,120
   4218c:	b80b883a 	mov	r5,r23
   42190:	00474640 	call	47464 <__sprint_r>
   42194:	103a7b1e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   42198:	d8c02017 	ldw	r3,128(sp)
   4219c:	da000404 	addi	r8,sp,16
   421a0:	003d4106 	br	416a8 <__alt_data_end+0xfffdbea8>
   421a4:	d8801f17 	ldw	r2,124(sp)
   421a8:	014001b4 	movhi	r5,6
   421ac:	01000044 	movi	r4,1
   421b0:	18c00044 	addi	r3,r3,1
   421b4:	10800044 	addi	r2,r2,1
   421b8:	29630a04 	addi	r5,r5,-29656
   421bc:	41000115 	stw	r4,4(r8)
   421c0:	41400015 	stw	r5,0(r8)
   421c4:	d8c02015 	stw	r3,128(sp)
   421c8:	d8801f15 	stw	r2,124(sp)
   421cc:	010001c4 	movi	r4,7
   421d0:	20805c16 	blt	r4,r2,42344 <___vfprintf_internal_r+0x1bd0>
   421d4:	42000204 	addi	r8,r8,8
   421d8:	8800041e 	bne	r17,zero,421ec <___vfprintf_internal_r+0x1a78>
   421dc:	d8803317 	ldw	r2,204(sp)
   421e0:	1000021e 	bne	r2,zero,421ec <___vfprintf_internal_r+0x1a78>
   421e4:	9080004c 	andi	r2,r18,1
   421e8:	103be726 	beq	r2,zero,41188 <__alt_data_end+0xfffdb988>
   421ec:	d9003717 	ldw	r4,220(sp)
   421f0:	d8801f17 	ldw	r2,124(sp)
   421f4:	d9403417 	ldw	r5,208(sp)
   421f8:	20c7883a 	add	r3,r4,r3
   421fc:	10800044 	addi	r2,r2,1
   42200:	41000115 	stw	r4,4(r8)
   42204:	41400015 	stw	r5,0(r8)
   42208:	d8c02015 	stw	r3,128(sp)
   4220c:	d8801f15 	stw	r2,124(sp)
   42210:	010001c4 	movi	r4,7
   42214:	20812116 	blt	r4,r2,4269c <___vfprintf_internal_r+0x1f28>
   42218:	42000204 	addi	r8,r8,8
   4221c:	0463c83a 	sub	r17,zero,r17
   42220:	0440730e 	bge	zero,r17,423f0 <___vfprintf_internal_r+0x1c7c>
   42224:	05800404 	movi	r22,16
   42228:	b440860e 	bge	r22,r17,42444 <___vfprintf_internal_r+0x1cd0>
   4222c:	014001b4 	movhi	r5,6
   42230:	29630a84 	addi	r5,r5,-29654
   42234:	d9402c15 	stw	r5,176(sp)
   42238:	070001c4 	movi	fp,7
   4223c:	dcc02d17 	ldw	r19,180(sp)
   42240:	00000306 	br	42250 <___vfprintf_internal_r+0x1adc>
   42244:	42000204 	addi	r8,r8,8
   42248:	8c7ffc04 	addi	r17,r17,-16
   4224c:	b440800e 	bge	r22,r17,42450 <___vfprintf_internal_r+0x1cdc>
   42250:	18c00404 	addi	r3,r3,16
   42254:	10800044 	addi	r2,r2,1
   42258:	45000015 	stw	r20,0(r8)
   4225c:	45800115 	stw	r22,4(r8)
   42260:	d8c02015 	stw	r3,128(sp)
   42264:	d8801f15 	stw	r2,124(sp)
   42268:	e0bff60e 	bge	fp,r2,42244 <__alt_data_end+0xfffdca44>
   4226c:	d9801e04 	addi	r6,sp,120
   42270:	b80b883a 	mov	r5,r23
   42274:	9809883a 	mov	r4,r19
   42278:	00474640 	call	47464 <__sprint_r>
   4227c:	103a411e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   42280:	d8c02017 	ldw	r3,128(sp)
   42284:	d8801f17 	ldw	r2,124(sp)
   42288:	da000404 	addi	r8,sp,16
   4228c:	003fee06 	br	42248 <__alt_data_end+0xfffdca48>
   42290:	00bfffc4 	movi	r2,-1
   42294:	003a3f06 	br	40b94 <__alt_data_end+0xfffdb394>
   42298:	008011c4 	movi	r2,71
   4229c:	1440b816 	blt	r2,r17,42580 <___vfprintf_internal_r+0x1e0c>
   422a0:	040001b4 	movhi	r16,6
   422a4:	8422fc04 	addi	r16,r16,-29712
   422a8:	00c000c4 	movi	r3,3
   422ac:	00bfdfc4 	movi	r2,-129
   422b0:	d8c02915 	stw	r3,164(sp)
   422b4:	90a4703a 	and	r18,r18,r2
   422b8:	df002783 	ldbu	fp,158(sp)
   422bc:	d8c02b15 	stw	r3,172(sp)
   422c0:	d8002a15 	stw	zero,168(sp)
   422c4:	d8003215 	stw	zero,200(sp)
   422c8:	003b0706 	br	40ee8 <__alt_data_end+0xfffdb6e8>
   422cc:	d8c02e17 	ldw	r3,184(sp)
   422d0:	1cc00017 	ldw	r19,0(r3)
   422d4:	18c00104 	addi	r3,r3,4
   422d8:	d8c02e15 	stw	r3,184(sp)
   422dc:	982dd7fa 	srai	r22,r19,31
   422e0:	b005883a 	mov	r2,r22
   422e4:	003a7706 	br	40cc4 <__alt_data_end+0xfffdb4c4>
   422e8:	d8c02e17 	ldw	r3,184(sp)
   422ec:	d9002f17 	ldw	r4,188(sp)
   422f0:	18800017 	ldw	r2,0(r3)
   422f4:	18c00104 	addi	r3,r3,4
   422f8:	d8c02e15 	stw	r3,184(sp)
   422fc:	11000015 	stw	r4,0(r2)
   42300:	00395406 	br	40854 <__alt_data_end+0xfffdb054>
   42304:	d9002e17 	ldw	r4,184(sp)
   42308:	002d883a 	mov	r22,zero
   4230c:	24c00017 	ldw	r19,0(r4)
   42310:	21000104 	addi	r4,r4,4
   42314:	d9002e15 	stw	r4,184(sp)
   42318:	003c0706 	br	41338 <__alt_data_end+0xfffdbb38>
   4231c:	d9402e17 	ldw	r5,184(sp)
   42320:	d8c02a17 	ldw	r3,168(sp)
   42324:	002d883a 	mov	r22,zero
   42328:	28800104 	addi	r2,r5,4
   4232c:	2cc0000b 	ldhu	r19,0(r5)
   42330:	183dc10e 	bge	r3,zero,41a38 <__alt_data_end+0xfffdc238>
   42334:	003f7506 	br	4210c <__alt_data_end+0xfffdc90c>
   42338:	040001b4 	movhi	r16,6
   4233c:	8422fa04 	addi	r16,r16,-29720
   42340:	003aa706 	br	40de0 <__alt_data_end+0xfffdb5e0>
   42344:	d9002d17 	ldw	r4,180(sp)
   42348:	d9801e04 	addi	r6,sp,120
   4234c:	b80b883a 	mov	r5,r23
   42350:	00474640 	call	47464 <__sprint_r>
   42354:	103a0b1e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   42358:	dc402617 	ldw	r17,152(sp)
   4235c:	d8c02017 	ldw	r3,128(sp)
   42360:	da000404 	addi	r8,sp,16
   42364:	003f9c06 	br	421d8 <__alt_data_end+0xfffdc9d8>
   42368:	ac400043 	ldbu	r17,1(r21)
   4236c:	84000814 	ori	r16,r16,32
   42370:	ad400044 	addi	r21,r21,1
   42374:	8c403fcc 	andi	r17,r17,255
   42378:	8c40201c 	xori	r17,r17,128
   4237c:	8c7fe004 	addi	r17,r17,-128
   42380:	00395e06 	br	408fc <__alt_data_end+0xfffdb0fc>
   42384:	d8c02e15 	stw	r3,184(sp)
   42388:	0039883a 	mov	fp,zero
   4238c:	003e3506 	br	41c64 <__alt_data_end+0xfffdc464>
   42390:	d9002d17 	ldw	r4,180(sp)
   42394:	d9801e04 	addi	r6,sp,120
   42398:	b80b883a 	mov	r5,r23
   4239c:	00474640 	call	47464 <__sprint_r>
   423a0:	1039f81e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   423a4:	d8c02017 	ldw	r3,128(sp)
   423a8:	da000404 	addi	r8,sp,16
   423ac:	003cd006 	br	416f0 <__alt_data_end+0xfffdbef0>
   423b0:	8009883a 	mov	r4,r16
   423b4:	df003d15 	stw	fp,244(sp)
   423b8:	00472d00 	call	472d0 <strlen>
   423bc:	d8802b15 	stw	r2,172(sp)
   423c0:	da003d17 	ldw	r8,244(sp)
   423c4:	103c200e 	bge	r2,zero,41448 <__alt_data_end+0xfffdbc48>
   423c8:	0005883a 	mov	r2,zero
   423cc:	003c1e06 	br	41448 <__alt_data_end+0xfffdbc48>
   423d0:	d9002d17 	ldw	r4,180(sp)
   423d4:	d9801e04 	addi	r6,sp,120
   423d8:	b80b883a 	mov	r5,r23
   423dc:	00474640 	call	47464 <__sprint_r>
   423e0:	1039e81e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   423e4:	d8c02017 	ldw	r3,128(sp)
   423e8:	d8801f17 	ldw	r2,124(sp)
   423ec:	da000404 	addi	r8,sp,16
   423f0:	d9403317 	ldw	r5,204(sp)
   423f4:	10800044 	addi	r2,r2,1
   423f8:	44000015 	stw	r16,0(r8)
   423fc:	28c7883a 	add	r3,r5,r3
   42400:	003b5b06 	br	41170 <__alt_data_end+0xfffdb970>
   42404:	010001b4 	movhi	r4,6
   42408:	21230e84 	addi	r4,r4,-29638
   4240c:	d9003515 	stw	r4,212(sp)
   42410:	003af206 	br	40fdc <__alt_data_end+0xfffdb7dc>
   42414:	013fffc4 	movi	r4,-1
   42418:	003a0806 	br	40c3c <__alt_data_end+0xfffdb43c>
   4241c:	0023883a 	mov	r17,zero
   42420:	003d9d06 	br	41a98 <__alt_data_end+0xfffdc298>
   42424:	d9002d17 	ldw	r4,180(sp)
   42428:	d9801e04 	addi	r6,sp,120
   4242c:	b80b883a 	mov	r5,r23
   42430:	00474640 	call	47464 <__sprint_r>
   42434:	1039d31e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   42438:	d8c02017 	ldw	r3,128(sp)
   4243c:	da000404 	addi	r8,sp,16
   42440:	003d9406 	br	41a94 <__alt_data_end+0xfffdc294>
   42444:	010001b4 	movhi	r4,6
   42448:	21230a84 	addi	r4,r4,-29654
   4244c:	d9002c15 	stw	r4,176(sp)
   42450:	d9002c17 	ldw	r4,176(sp)
   42454:	1c47883a 	add	r3,r3,r17
   42458:	10800044 	addi	r2,r2,1
   4245c:	41000015 	stw	r4,0(r8)
   42460:	44400115 	stw	r17,4(r8)
   42464:	d8c02015 	stw	r3,128(sp)
   42468:	d8801f15 	stw	r2,124(sp)
   4246c:	010001c4 	movi	r4,7
   42470:	20bfd716 	blt	r4,r2,423d0 <__alt_data_end+0xfffdcbd0>
   42474:	42000204 	addi	r8,r8,8
   42478:	003fdd06 	br	423f0 <__alt_data_end+0xfffdcbf0>
   4247c:	d9002d17 	ldw	r4,180(sp)
   42480:	d9801e04 	addi	r6,sp,120
   42484:	b80b883a 	mov	r5,r23
   42488:	00474640 	call	47464 <__sprint_r>
   4248c:	1039bd1e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   42490:	d8802617 	ldw	r2,152(sp)
   42494:	d8c02017 	ldw	r3,128(sp)
   42498:	da000404 	addi	r8,sp,16
   4249c:	003e1006 	br	41ce0 <__alt_data_end+0xfffdc4e0>
   424a0:	00800044 	movi	r2,1
   424a4:	10803fcc 	andi	r2,r2,255
   424a8:	00c00044 	movi	r3,1
   424ac:	10fa0d26 	beq	r2,r3,40ce4 <__alt_data_end+0xfffdb4e4>
   424b0:	00c00084 	movi	r3,2
   424b4:	10fbaf26 	beq	r2,r3,41374 <__alt_data_end+0xfffdbb74>
   424b8:	003a6d06 	br	40e70 <__alt_data_end+0xfffdb670>
   424bc:	010001b4 	movhi	r4,6
   424c0:	21230e84 	addi	r4,r4,-29638
   424c4:	d9003515 	stw	r4,212(sp)
   424c8:	003b5406 	br	4121c <__alt_data_end+0xfffdba1c>
   424cc:	d8802a17 	ldw	r2,168(sp)
   424d0:	00c00184 	movi	r3,6
   424d4:	1880012e 	bgeu	r3,r2,424dc <___vfprintf_internal_r+0x1d68>
   424d8:	1805883a 	mov	r2,r3
   424dc:	d8802b15 	stw	r2,172(sp)
   424e0:	1000ef16 	blt	r2,zero,428a0 <___vfprintf_internal_r+0x212c>
   424e4:	040001b4 	movhi	r16,6
   424e8:	d8802915 	stw	r2,164(sp)
   424ec:	dcc02e15 	stw	r19,184(sp)
   424f0:	d8002a15 	stw	zero,168(sp)
   424f4:	d8003215 	stw	zero,200(sp)
   424f8:	84230804 	addi	r16,r16,-29664
   424fc:	0039883a 	mov	fp,zero
   42500:	003a8006 	br	40f04 <__alt_data_end+0xfffdb704>
   42504:	0021883a 	mov	r16,zero
   42508:	003e0706 	br	41d28 <__alt_data_end+0xfffdc528>
   4250c:	d9002d17 	ldw	r4,180(sp)
   42510:	d9801e04 	addi	r6,sp,120
   42514:	b80b883a 	mov	r5,r23
   42518:	00474640 	call	47464 <__sprint_r>
   4251c:	1039991e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   42520:	d8802617 	ldw	r2,152(sp)
   42524:	d9403317 	ldw	r5,204(sp)
   42528:	d8c02017 	ldw	r3,128(sp)
   4252c:	da000404 	addi	r8,sp,16
   42530:	2885c83a 	sub	r2,r5,r2
   42534:	003dfb06 	br	41d24 <__alt_data_end+0xfffdc524>
   42538:	9080004c 	andi	r2,r18,1
   4253c:	103e8f1e 	bne	r2,zero,41f7c <__alt_data_end+0xfffdc77c>
   42540:	d8802117 	ldw	r2,132(sp)
   42544:	003e9e06 	br	41fc0 <__alt_data_end+0xfffdc7c0>
   42548:	1025883a 	mov	r18,r2
   4254c:	0039883a 	mov	fp,zero
   42550:	00800084 	movi	r2,2
   42554:	003fd306 	br	424a4 <__alt_data_end+0xfffdcca4>
   42558:	07000b44 	movi	fp,45
   4255c:	df002785 	stb	fp,158(sp)
   42560:	003a1b06 	br	40dd0 <__alt_data_end+0xfffdb5d0>
   42564:	00c00b44 	movi	r3,45
   42568:	d8c02785 	stb	r3,158(sp)
   4256c:	d8802915 	stw	r2,164(sp)
   42570:	dc802c17 	ldw	r18,176(sp)
   42574:	d8002a15 	stw	zero,168(sp)
   42578:	07000b44 	movi	fp,45
   4257c:	003a5e06 	br	40ef8 <__alt_data_end+0xfffdb6f8>
   42580:	040001b4 	movhi	r16,6
   42584:	8422fd04 	addi	r16,r16,-29708
   42588:	003f4706 	br	422a8 <__alt_data_end+0xfffdcaa8>
   4258c:	d9002e17 	ldw	r4,184(sp)
   42590:	d9402f17 	ldw	r5,188(sp)
   42594:	20800017 	ldw	r2,0(r4)
   42598:	21000104 	addi	r4,r4,4
   4259c:	d9002e15 	stw	r4,184(sp)
   425a0:	11400015 	stw	r5,0(r2)
   425a4:	0038ab06 	br	40854 <__alt_data_end+0xfffdb054>
   425a8:	dd802617 	ldw	r22,152(sp)
   425ac:	00bfff44 	movi	r2,-3
   425b0:	b0801c16 	blt	r22,r2,42624 <___vfprintf_internal_r+0x1eb0>
   425b4:	d9402a17 	ldw	r5,168(sp)
   425b8:	2d801a16 	blt	r5,r22,42624 <___vfprintf_internal_r+0x1eb0>
   425bc:	dd803215 	stw	r22,200(sp)
   425c0:	003e8906 	br	41fe8 <__alt_data_end+0xfffdc7e8>
   425c4:	010001b4 	movhi	r4,6
   425c8:	21230a84 	addi	r4,r4,-29654
   425cc:	d9002c15 	stw	r4,176(sp)
   425d0:	003c9106 	br	41818 <__alt_data_end+0xfffdc018>
   425d4:	e005883a 	mov	r2,fp
   425d8:	003e7906 	br	41fc0 <__alt_data_end+0xfffdc7c0>
   425dc:	d9002a17 	ldw	r4,168(sp)
   425e0:	df002783 	ldbu	fp,158(sp)
   425e4:	dcc02e15 	stw	r19,184(sp)
   425e8:	d9002915 	stw	r4,164(sp)
   425ec:	d9002b15 	stw	r4,172(sp)
   425f0:	d8002a15 	stw	zero,168(sp)
   425f4:	d8003215 	stw	zero,200(sp)
   425f8:	003a3b06 	br	40ee8 <__alt_data_end+0xfffdb6e8>
   425fc:	9080004c 	andi	r2,r18,1
   42600:	0039883a 	mov	fp,zero
   42604:	10000426 	beq	r2,zero,42618 <___vfprintf_internal_r+0x1ea4>
   42608:	00800c04 	movi	r2,48
   4260c:	dc001dc4 	addi	r16,sp,119
   42610:	d8801dc5 	stb	r2,119(sp)
   42614:	003b6406 	br	413a8 <__alt_data_end+0xfffdbba8>
   42618:	d8002b15 	stw	zero,172(sp)
   4261c:	dc001e04 	addi	r16,sp,120
   42620:	003a2b06 	br	40ed0 <__alt_data_end+0xfffdb6d0>
   42624:	8c7fff84 	addi	r17,r17,-2
   42628:	b5bfffc4 	addi	r22,r22,-1
   4262c:	dd802615 	stw	r22,152(sp)
   42630:	dc4022c5 	stb	r17,139(sp)
   42634:	b000bf16 	blt	r22,zero,42934 <___vfprintf_internal_r+0x21c0>
   42638:	00800ac4 	movi	r2,43
   4263c:	d8802305 	stb	r2,140(sp)
   42640:	00800244 	movi	r2,9
   42644:	15807016 	blt	r2,r22,42808 <___vfprintf_internal_r+0x2094>
   42648:	00800c04 	movi	r2,48
   4264c:	b5800c04 	addi	r22,r22,48
   42650:	d8802345 	stb	r2,141(sp)
   42654:	dd802385 	stb	r22,142(sp)
   42658:	d88023c4 	addi	r2,sp,143
   4265c:	df0022c4 	addi	fp,sp,139
   42660:	d8c03317 	ldw	r3,204(sp)
   42664:	1739c83a 	sub	fp,r2,fp
   42668:	d9003317 	ldw	r4,204(sp)
   4266c:	e0c7883a 	add	r3,fp,r3
   42670:	df003a15 	stw	fp,232(sp)
   42674:	d8c02b15 	stw	r3,172(sp)
   42678:	00800044 	movi	r2,1
   4267c:	1100b30e 	bge	r2,r4,4294c <___vfprintf_internal_r+0x21d8>
   42680:	d8c02b17 	ldw	r3,172(sp)
   42684:	18c00044 	addi	r3,r3,1
   42688:	d8c02b15 	stw	r3,172(sp)
   4268c:	1805883a 	mov	r2,r3
   42690:	1800ac16 	blt	r3,zero,42944 <___vfprintf_internal_r+0x21d0>
   42694:	d8003215 	stw	zero,200(sp)
   42698:	003e5d06 	br	42010 <__alt_data_end+0xfffdc810>
   4269c:	d9002d17 	ldw	r4,180(sp)
   426a0:	d9801e04 	addi	r6,sp,120
   426a4:	b80b883a 	mov	r5,r23
   426a8:	00474640 	call	47464 <__sprint_r>
   426ac:	1039351e 	bne	r2,zero,40b84 <__alt_data_end+0xfffdb384>
   426b0:	dc402617 	ldw	r17,152(sp)
   426b4:	d8c02017 	ldw	r3,128(sp)
   426b8:	d8801f17 	ldw	r2,124(sp)
   426bc:	da000404 	addi	r8,sp,16
   426c0:	003ed606 	br	4221c <__alt_data_end+0xfffdca1c>
   426c4:	182b883a 	mov	r21,r3
   426c8:	d8002a15 	stw	zero,168(sp)
   426cc:	00388c06 	br	40900 <__alt_data_end+0xfffdb100>
   426d0:	d8802a17 	ldw	r2,168(sp)
   426d4:	103e071e 	bne	r2,zero,41ef4 <__alt_data_end+0xfffdc6f4>
   426d8:	dc002a15 	stw	r16,168(sp)
   426dc:	003e0506 	br	41ef4 <__alt_data_end+0xfffdc6f4>
   426e0:	d9002a17 	ldw	r4,168(sp)
   426e4:	20c00044 	addi	r3,r4,1
   426e8:	003e0f06 	br	41f28 <__alt_data_end+0xfffdc728>
   426ec:	01400184 	movi	r5,6
   426f0:	d9402a15 	stw	r5,168(sp)
   426f4:	003dff06 	br	41ef4 <__alt_data_end+0xfffdc6f4>
   426f8:	d8802104 	addi	r2,sp,132
   426fc:	d8800315 	stw	r2,12(sp)
   42700:	d8802504 	addi	r2,sp,148
   42704:	d8800215 	stw	r2,8(sp)
   42708:	d8802604 	addi	r2,sp,152
   4270c:	d8800115 	stw	r2,4(sp)
   42710:	d8802a17 	ldw	r2,168(sp)
   42714:	d9403617 	ldw	r5,216(sp)
   42718:	d9002d17 	ldw	r4,180(sp)
   4271c:	d8800015 	stw	r2,0(sp)
   42720:	01c000c4 	movi	r7,3
   42724:	980d883a 	mov	r6,r19
   42728:	da003d15 	stw	r8,244(sp)
   4272c:	0042ea40 	call	42ea4 <_dtoa_r>
   42730:	d8c02a17 	ldw	r3,168(sp)
   42734:	da003d17 	ldw	r8,244(sp)
   42738:	1021883a 	mov	r16,r2
   4273c:	10f9883a 	add	fp,r2,r3
   42740:	81000007 	ldb	r4,0(r16)
   42744:	00800c04 	movi	r2,48
   42748:	20805e26 	beq	r4,r2,428c4 <___vfprintf_internal_r+0x2150>
   4274c:	d8c02617 	ldw	r3,152(sp)
   42750:	e0f9883a 	add	fp,fp,r3
   42754:	003e0a06 	br	41f80 <__alt_data_end+0xfffdc780>
   42758:	00c00b44 	movi	r3,45
   4275c:	24e0003c 	xorhi	r19,r4,32768
   42760:	d8c02905 	stb	r3,164(sp)
   42764:	003de906 	br	41f0c <__alt_data_end+0xfffdc70c>
   42768:	d8c03217 	ldw	r3,200(sp)
   4276c:	00c07a0e 	bge	zero,r3,42958 <___vfprintf_internal_r+0x21e4>
   42770:	00800044 	movi	r2,1
   42774:	d9003317 	ldw	r4,204(sp)
   42778:	1105883a 	add	r2,r2,r4
   4277c:	d8802b15 	stw	r2,172(sp)
   42780:	10004e16 	blt	r2,zero,428bc <___vfprintf_internal_r+0x2148>
   42784:	044019c4 	movi	r17,103
   42788:	003e2106 	br	42010 <__alt_data_end+0xfffdc810>
   4278c:	d9002a17 	ldw	r4,168(sp)
   42790:	d8802104 	addi	r2,sp,132
   42794:	d8800315 	stw	r2,12(sp)
   42798:	d9000015 	stw	r4,0(sp)
   4279c:	d8802504 	addi	r2,sp,148
   427a0:	d9403617 	ldw	r5,216(sp)
   427a4:	d9002d17 	ldw	r4,180(sp)
   427a8:	d8800215 	stw	r2,8(sp)
   427ac:	d8802604 	addi	r2,sp,152
   427b0:	d8800115 	stw	r2,4(sp)
   427b4:	01c000c4 	movi	r7,3
   427b8:	980d883a 	mov	r6,r19
   427bc:	da003d15 	stw	r8,244(sp)
   427c0:	0042ea40 	call	42ea4 <_dtoa_r>
   427c4:	d8c02a17 	ldw	r3,168(sp)
   427c8:	da003d17 	ldw	r8,244(sp)
   427cc:	1021883a 	mov	r16,r2
   427d0:	00801184 	movi	r2,70
   427d4:	80f9883a 	add	fp,r16,r3
   427d8:	88bfd926 	beq	r17,r2,42740 <__alt_data_end+0xfffdcf40>
   427dc:	003de806 	br	41f80 <__alt_data_end+0xfffdc780>
   427e0:	d9002a17 	ldw	r4,168(sp)
   427e4:	00c04d0e 	bge	zero,r3,4291c <___vfprintf_internal_r+0x21a8>
   427e8:	2000441e 	bne	r4,zero,428fc <___vfprintf_internal_r+0x2188>
   427ec:	9480004c 	andi	r18,r18,1
   427f0:	9000421e 	bne	r18,zero,428fc <___vfprintf_internal_r+0x2188>
   427f4:	1805883a 	mov	r2,r3
   427f8:	18006f16 	blt	r3,zero,429b8 <___vfprintf_internal_r+0x2244>
   427fc:	d8c03217 	ldw	r3,200(sp)
   42800:	d8c02b15 	stw	r3,172(sp)
   42804:	003e0206 	br	42010 <__alt_data_end+0xfffdc810>
   42808:	df0022c4 	addi	fp,sp,139
   4280c:	dc002a15 	stw	r16,168(sp)
   42810:	4027883a 	mov	r19,r8
   42814:	e021883a 	mov	r16,fp
   42818:	b009883a 	mov	r4,r22
   4281c:	01400284 	movi	r5,10
   42820:	004ab780 	call	4ab78 <__modsi3>
   42824:	10800c04 	addi	r2,r2,48
   42828:	843fffc4 	addi	r16,r16,-1
   4282c:	b009883a 	mov	r4,r22
   42830:	01400284 	movi	r5,10
   42834:	80800005 	stb	r2,0(r16)
   42838:	004aaf40 	call	4aaf4 <__divsi3>
   4283c:	102d883a 	mov	r22,r2
   42840:	00800244 	movi	r2,9
   42844:	15bff416 	blt	r2,r22,42818 <__alt_data_end+0xfffdd018>
   42848:	9811883a 	mov	r8,r19
   4284c:	b0800c04 	addi	r2,r22,48
   42850:	8027883a 	mov	r19,r16
   42854:	997fffc4 	addi	r5,r19,-1
   42858:	98bfffc5 	stb	r2,-1(r19)
   4285c:	dc002a17 	ldw	r16,168(sp)
   42860:	2f006d2e 	bgeu	r5,fp,42a18 <___vfprintf_internal_r+0x22a4>
   42864:	d9c02384 	addi	r7,sp,142
   42868:	3ccfc83a 	sub	r7,r7,r19
   4286c:	d9002344 	addi	r4,sp,141
   42870:	e1cf883a 	add	r7,fp,r7
   42874:	00000106 	br	4287c <___vfprintf_internal_r+0x2108>
   42878:	28800003 	ldbu	r2,0(r5)
   4287c:	20800005 	stb	r2,0(r4)
   42880:	21000044 	addi	r4,r4,1
   42884:	29400044 	addi	r5,r5,1
   42888:	393ffb1e 	bne	r7,r4,42878 <__alt_data_end+0xfffdd078>
   4288c:	d8802304 	addi	r2,sp,140
   42890:	14c5c83a 	sub	r2,r2,r19
   42894:	d8c02344 	addi	r3,sp,141
   42898:	1885883a 	add	r2,r3,r2
   4289c:	003f7006 	br	42660 <__alt_data_end+0xfffdce60>
   428a0:	0005883a 	mov	r2,zero
   428a4:	003f0f06 	br	424e4 <__alt_data_end+0xfffdcce4>
   428a8:	d8c03217 	ldw	r3,200(sp)
   428ac:	18c00044 	addi	r3,r3,1
   428b0:	d8c02b15 	stw	r3,172(sp)
   428b4:	1805883a 	mov	r2,r3
   428b8:	183fb20e 	bge	r3,zero,42784 <__alt_data_end+0xfffdcf84>
   428bc:	0005883a 	mov	r2,zero
   428c0:	003fb006 	br	42784 <__alt_data_end+0xfffdcf84>
   428c4:	d9003617 	ldw	r4,216(sp)
   428c8:	000d883a 	mov	r6,zero
   428cc:	000f883a 	mov	r7,zero
   428d0:	980b883a 	mov	r5,r19
   428d4:	d8c03c15 	stw	r3,240(sp)
   428d8:	da003d15 	stw	r8,244(sp)
   428dc:	004bf240 	call	4bf24 <__eqdf2>
   428e0:	d8c03c17 	ldw	r3,240(sp)
   428e4:	da003d17 	ldw	r8,244(sp)
   428e8:	103f9826 	beq	r2,zero,4274c <__alt_data_end+0xfffdcf4c>
   428ec:	00800044 	movi	r2,1
   428f0:	10c7c83a 	sub	r3,r2,r3
   428f4:	d8c02615 	stw	r3,152(sp)
   428f8:	003f9506 	br	42750 <__alt_data_end+0xfffdcf50>
   428fc:	d9002a17 	ldw	r4,168(sp)
   42900:	d8c03217 	ldw	r3,200(sp)
   42904:	20800044 	addi	r2,r4,1
   42908:	1885883a 	add	r2,r3,r2
   4290c:	d8802b15 	stw	r2,172(sp)
   42910:	103dbf0e 	bge	r2,zero,42010 <__alt_data_end+0xfffdc810>
   42914:	0005883a 	mov	r2,zero
   42918:	003dbd06 	br	42010 <__alt_data_end+0xfffdc810>
   4291c:	2000201e 	bne	r4,zero,429a0 <___vfprintf_internal_r+0x222c>
   42920:	9480004c 	andi	r18,r18,1
   42924:	90001e1e 	bne	r18,zero,429a0 <___vfprintf_internal_r+0x222c>
   42928:	00800044 	movi	r2,1
   4292c:	d8802b15 	stw	r2,172(sp)
   42930:	003db706 	br	42010 <__alt_data_end+0xfffdc810>
   42934:	00800b44 	movi	r2,45
   42938:	05adc83a 	sub	r22,zero,r22
   4293c:	d8802305 	stb	r2,140(sp)
   42940:	003f3f06 	br	42640 <__alt_data_end+0xfffdce40>
   42944:	0005883a 	mov	r2,zero
   42948:	003f5206 	br	42694 <__alt_data_end+0xfffdce94>
   4294c:	90a4703a 	and	r18,r18,r2
   42950:	903f4e26 	beq	r18,zero,4268c <__alt_data_end+0xfffdce8c>
   42954:	003f4a06 	br	42680 <__alt_data_end+0xfffdce80>
   42958:	00800084 	movi	r2,2
   4295c:	10c5c83a 	sub	r2,r2,r3
   42960:	003f8406 	br	42774 <__alt_data_end+0xfffdcf74>
   42964:	d9402e17 	ldw	r5,184(sp)
   42968:	d9002e17 	ldw	r4,184(sp)
   4296c:	ac400043 	ldbu	r17,1(r21)
   42970:	29400017 	ldw	r5,0(r5)
   42974:	20800104 	addi	r2,r4,4
   42978:	d8802e15 	stw	r2,184(sp)
   4297c:	d9402a15 	stw	r5,168(sp)
   42980:	182b883a 	mov	r21,r3
   42984:	283e7b0e 	bge	r5,zero,42374 <__alt_data_end+0xfffdcb74>
   42988:	8c403fcc 	andi	r17,r17,255
   4298c:	017fffc4 	movi	r5,-1
   42990:	8c40201c 	xori	r17,r17,128
   42994:	d9402a15 	stw	r5,168(sp)
   42998:	8c7fe004 	addi	r17,r17,-128
   4299c:	0037d706 	br	408fc <__alt_data_end+0xfffdb0fc>
   429a0:	d8c02a17 	ldw	r3,168(sp)
   429a4:	18c00084 	addi	r3,r3,2
   429a8:	d8c02b15 	stw	r3,172(sp)
   429ac:	1805883a 	mov	r2,r3
   429b0:	183d970e 	bge	r3,zero,42010 <__alt_data_end+0xfffdc810>
   429b4:	003fd706 	br	42914 <__alt_data_end+0xfffdd114>
   429b8:	0005883a 	mov	r2,zero
   429bc:	003f8f06 	br	427fc <__alt_data_end+0xfffdcffc>
   429c0:	9080004c 	andi	r2,r18,1
   429c4:	103f821e 	bne	r2,zero,427d0 <__alt_data_end+0xfffdcfd0>
   429c8:	d8802117 	ldw	r2,132(sp)
   429cc:	1405c83a 	sub	r2,r2,r16
   429d0:	d8803315 	stw	r2,204(sp)
   429d4:	b47ef426 	beq	r22,r17,425a8 <__alt_data_end+0xfffdcda8>
   429d8:	dd802617 	ldw	r22,152(sp)
   429dc:	003f1206 	br	42628 <__alt_data_end+0xfffdce28>
   429e0:	d8c02b03 	ldbu	r3,172(sp)
   429e4:	d8c02785 	stb	r3,158(sp)
   429e8:	0038df06 	br	40d68 <__alt_data_end+0xfffdb568>
   429ec:	d8c02b03 	ldbu	r3,172(sp)
   429f0:	d8c02785 	stb	r3,158(sp)
   429f4:	0038aa06 	br	40ca0 <__alt_data_end+0xfffdb4a0>
   429f8:	d8c02b03 	ldbu	r3,172(sp)
   429fc:	d8c02785 	stb	r3,158(sp)
   42a00:	003a4306 	br	41310 <__alt_data_end+0xfffdbb10>
   42a04:	d8c02b03 	ldbu	r3,172(sp)
   42a08:	d8c02785 	stb	r3,158(sp)
   42a0c:	003af506 	br	415e4 <__alt_data_end+0xfffdbde4>
   42a10:	0005883a 	mov	r2,zero
   42a14:	003d7b06 	br	42004 <__alt_data_end+0xfffdc804>
   42a18:	d8802344 	addi	r2,sp,141
   42a1c:	003f1006 	br	42660 <__alt_data_end+0xfffdce60>
   42a20:	d8c02b03 	ldbu	r3,172(sp)
   42a24:	d8c02785 	stb	r3,158(sp)
   42a28:	0038fd06 	br	40e20 <__alt_data_end+0xfffdb620>
   42a2c:	d8c02b03 	ldbu	r3,172(sp)
   42a30:	d8c02785 	stb	r3,158(sp)
   42a34:	003a9706 	br	41494 <__alt_data_end+0xfffdbc94>
   42a38:	d8c02b03 	ldbu	r3,172(sp)
   42a3c:	d8c02785 	stb	r3,158(sp)
   42a40:	003a1806 	br	412a4 <__alt_data_end+0xfffdbaa4>
   42a44:	d8c02b03 	ldbu	r3,172(sp)
   42a48:	d8c02785 	stb	r3,158(sp)
   42a4c:	003abe06 	br	41548 <__alt_data_end+0xfffdbd48>

00042a50 <__vfprintf_internal>:
   42a50:	008001b4 	movhi	r2,6
   42a54:	10aaaf04 	addi	r2,r2,-21828
   42a58:	300f883a 	mov	r7,r6
   42a5c:	280d883a 	mov	r6,r5
   42a60:	200b883a 	mov	r5,r4
   42a64:	11000017 	ldw	r4,0(r2)
   42a68:	00407741 	jmpi	40774 <___vfprintf_internal_r>

00042a6c <__sbprintf>:
   42a6c:	2880030b 	ldhu	r2,12(r5)
   42a70:	2ac01917 	ldw	r11,100(r5)
   42a74:	2a80038b 	ldhu	r10,14(r5)
   42a78:	2a400717 	ldw	r9,28(r5)
   42a7c:	2a000917 	ldw	r8,36(r5)
   42a80:	defee204 	addi	sp,sp,-1144
   42a84:	00c10004 	movi	r3,1024
   42a88:	dc011a15 	stw	r16,1128(sp)
   42a8c:	10bfff4c 	andi	r2,r2,65533
   42a90:	2821883a 	mov	r16,r5
   42a94:	d8cb883a 	add	r5,sp,r3
   42a98:	dc811c15 	stw	r18,1136(sp)
   42a9c:	dc411b15 	stw	r17,1132(sp)
   42aa0:	dfc11d15 	stw	ra,1140(sp)
   42aa4:	2025883a 	mov	r18,r4
   42aa8:	d881030d 	sth	r2,1036(sp)
   42aac:	dac11915 	stw	r11,1124(sp)
   42ab0:	da81038d 	sth	r10,1038(sp)
   42ab4:	da410715 	stw	r9,1052(sp)
   42ab8:	da010915 	stw	r8,1060(sp)
   42abc:	dec10015 	stw	sp,1024(sp)
   42ac0:	dec10415 	stw	sp,1040(sp)
   42ac4:	d8c10215 	stw	r3,1032(sp)
   42ac8:	d8c10515 	stw	r3,1044(sp)
   42acc:	d8010615 	stw	zero,1048(sp)
   42ad0:	00407740 	call	40774 <___vfprintf_internal_r>
   42ad4:	1023883a 	mov	r17,r2
   42ad8:	10000416 	blt	r2,zero,42aec <__sbprintf+0x80>
   42adc:	d9410004 	addi	r5,sp,1024
   42ae0:	9009883a 	mov	r4,r18
   42ae4:	00447480 	call	44748 <_fflush_r>
   42ae8:	10000d1e 	bne	r2,zero,42b20 <__sbprintf+0xb4>
   42aec:	d881030b 	ldhu	r2,1036(sp)
   42af0:	1080100c 	andi	r2,r2,64
   42af4:	10000326 	beq	r2,zero,42b04 <__sbprintf+0x98>
   42af8:	8080030b 	ldhu	r2,12(r16)
   42afc:	10801014 	ori	r2,r2,64
   42b00:	8080030d 	sth	r2,12(r16)
   42b04:	8805883a 	mov	r2,r17
   42b08:	dfc11d17 	ldw	ra,1140(sp)
   42b0c:	dc811c17 	ldw	r18,1136(sp)
   42b10:	dc411b17 	ldw	r17,1132(sp)
   42b14:	dc011a17 	ldw	r16,1128(sp)
   42b18:	dec11e04 	addi	sp,sp,1144
   42b1c:	f800283a 	ret
   42b20:	047fffc4 	movi	r17,-1
   42b24:	003ff106 	br	42aec <__alt_data_end+0xfffdd2ec>

00042b28 <__swsetup_r>:
   42b28:	008001b4 	movhi	r2,6
   42b2c:	defffd04 	addi	sp,sp,-12
   42b30:	10aaaf04 	addi	r2,r2,-21828
   42b34:	dc400115 	stw	r17,4(sp)
   42b38:	2023883a 	mov	r17,r4
   42b3c:	11000017 	ldw	r4,0(r2)
   42b40:	dc000015 	stw	r16,0(sp)
   42b44:	dfc00215 	stw	ra,8(sp)
   42b48:	2821883a 	mov	r16,r5
   42b4c:	20000226 	beq	r4,zero,42b58 <__swsetup_r+0x30>
   42b50:	20800e17 	ldw	r2,56(r4)
   42b54:	10003126 	beq	r2,zero,42c1c <__swsetup_r+0xf4>
   42b58:	8080030b 	ldhu	r2,12(r16)
   42b5c:	10c0020c 	andi	r3,r2,8
   42b60:	1009883a 	mov	r4,r2
   42b64:	18000f26 	beq	r3,zero,42ba4 <__swsetup_r+0x7c>
   42b68:	80c00417 	ldw	r3,16(r16)
   42b6c:	18001526 	beq	r3,zero,42bc4 <__swsetup_r+0x9c>
   42b70:	1100004c 	andi	r4,r2,1
   42b74:	20001c1e 	bne	r4,zero,42be8 <__swsetup_r+0xc0>
   42b78:	1080008c 	andi	r2,r2,2
   42b7c:	1000291e 	bne	r2,zero,42c24 <__swsetup_r+0xfc>
   42b80:	80800517 	ldw	r2,20(r16)
   42b84:	80800215 	stw	r2,8(r16)
   42b88:	18001c26 	beq	r3,zero,42bfc <__swsetup_r+0xd4>
   42b8c:	0005883a 	mov	r2,zero
   42b90:	dfc00217 	ldw	ra,8(sp)
   42b94:	dc400117 	ldw	r17,4(sp)
   42b98:	dc000017 	ldw	r16,0(sp)
   42b9c:	dec00304 	addi	sp,sp,12
   42ba0:	f800283a 	ret
   42ba4:	2080040c 	andi	r2,r4,16
   42ba8:	10002e26 	beq	r2,zero,42c64 <__swsetup_r+0x13c>
   42bac:	2080010c 	andi	r2,r4,4
   42bb0:	10001e1e 	bne	r2,zero,42c2c <__swsetup_r+0x104>
   42bb4:	80c00417 	ldw	r3,16(r16)
   42bb8:	20800214 	ori	r2,r4,8
   42bbc:	8080030d 	sth	r2,12(r16)
   42bc0:	183feb1e 	bne	r3,zero,42b70 <__alt_data_end+0xfffdd370>
   42bc4:	1100a00c 	andi	r4,r2,640
   42bc8:	01408004 	movi	r5,512
   42bcc:	217fe826 	beq	r4,r5,42b70 <__alt_data_end+0xfffdd370>
   42bd0:	800b883a 	mov	r5,r16
   42bd4:	8809883a 	mov	r4,r17
   42bd8:	004521c0 	call	4521c <__smakebuf_r>
   42bdc:	8080030b 	ldhu	r2,12(r16)
   42be0:	80c00417 	ldw	r3,16(r16)
   42be4:	003fe206 	br	42b70 <__alt_data_end+0xfffdd370>
   42be8:	80800517 	ldw	r2,20(r16)
   42bec:	80000215 	stw	zero,8(r16)
   42bf0:	0085c83a 	sub	r2,zero,r2
   42bf4:	80800615 	stw	r2,24(r16)
   42bf8:	183fe41e 	bne	r3,zero,42b8c <__alt_data_end+0xfffdd38c>
   42bfc:	80c0030b 	ldhu	r3,12(r16)
   42c00:	0005883a 	mov	r2,zero
   42c04:	1900200c 	andi	r4,r3,128
   42c08:	203fe126 	beq	r4,zero,42b90 <__alt_data_end+0xfffdd390>
   42c0c:	18c01014 	ori	r3,r3,64
   42c10:	80c0030d 	sth	r3,12(r16)
   42c14:	00bfffc4 	movi	r2,-1
   42c18:	003fdd06 	br	42b90 <__alt_data_end+0xfffdd390>
   42c1c:	0044b340 	call	44b34 <__sinit>
   42c20:	003fcd06 	br	42b58 <__alt_data_end+0xfffdd358>
   42c24:	0005883a 	mov	r2,zero
   42c28:	003fd606 	br	42b84 <__alt_data_end+0xfffdd384>
   42c2c:	81400c17 	ldw	r5,48(r16)
   42c30:	28000626 	beq	r5,zero,42c4c <__swsetup_r+0x124>
   42c34:	80801004 	addi	r2,r16,64
   42c38:	28800326 	beq	r5,r2,42c48 <__swsetup_r+0x120>
   42c3c:	8809883a 	mov	r4,r17
   42c40:	0044ca80 	call	44ca8 <_free_r>
   42c44:	8100030b 	ldhu	r4,12(r16)
   42c48:	80000c15 	stw	zero,48(r16)
   42c4c:	80c00417 	ldw	r3,16(r16)
   42c50:	00bff6c4 	movi	r2,-37
   42c54:	1108703a 	and	r4,r2,r4
   42c58:	80000115 	stw	zero,4(r16)
   42c5c:	80c00015 	stw	r3,0(r16)
   42c60:	003fd506 	br	42bb8 <__alt_data_end+0xfffdd3b8>
   42c64:	00800244 	movi	r2,9
   42c68:	88800015 	stw	r2,0(r17)
   42c6c:	20801014 	ori	r2,r4,64
   42c70:	8080030d 	sth	r2,12(r16)
   42c74:	00bfffc4 	movi	r2,-1
   42c78:	003fc506 	br	42b90 <__alt_data_end+0xfffdd390>

00042c7c <quorem>:
   42c7c:	defff204 	addi	sp,sp,-56
   42c80:	ddc00b15 	stw	r23,44(sp)
   42c84:	20800417 	ldw	r2,16(r4)
   42c88:	2dc00417 	ldw	r23,16(r5)
   42c8c:	dfc00d15 	stw	ra,52(sp)
   42c90:	df000c15 	stw	fp,48(sp)
   42c94:	dd800a15 	stw	r22,40(sp)
   42c98:	dd400915 	stw	r21,36(sp)
   42c9c:	dd000815 	stw	r20,32(sp)
   42ca0:	dcc00715 	stw	r19,28(sp)
   42ca4:	dc800615 	stw	r18,24(sp)
   42ca8:	dc400515 	stw	r17,20(sp)
   42cac:	dc000415 	stw	r16,16(sp)
   42cb0:	15c07a16 	blt	r2,r23,42e9c <quorem+0x220>
   42cb4:	bdffffc4 	addi	r23,r23,-1
   42cb8:	bde9883a 	add	r20,r23,r23
   42cbc:	28c00504 	addi	r3,r5,20
   42cc0:	a529883a 	add	r20,r20,r20
   42cc4:	1d39883a 	add	fp,r3,r20
   42cc8:	24c00504 	addi	r19,r4,20
   42ccc:	d9400215 	stw	r5,8(sp)
   42cd0:	9d29883a 	add	r20,r19,r20
   42cd4:	e1400017 	ldw	r5,0(fp)
   42cd8:	d9000015 	stw	r4,0(sp)
   42cdc:	a1000017 	ldw	r4,0(r20)
   42ce0:	29400044 	addi	r5,r5,1
   42ce4:	d8c00115 	stw	r3,4(sp)
   42ce8:	dd000315 	stw	r20,12(sp)
   42cec:	004abec0 	call	4abec <__udivsi3>
   42cf0:	1025883a 	mov	r18,r2
   42cf4:	10003026 	beq	r2,zero,42db8 <quorem+0x13c>
   42cf8:	dc400117 	ldw	r17,4(sp)
   42cfc:	9829883a 	mov	r20,r19
   42d00:	002d883a 	mov	r22,zero
   42d04:	0021883a 	mov	r16,zero
   42d08:	8d400017 	ldw	r21,0(r17)
   42d0c:	900b883a 	mov	r5,r18
   42d10:	8c400104 	addi	r17,r17,4
   42d14:	a93fffcc 	andi	r4,r21,65535
   42d18:	00406e00 	call	406e0 <__mulsi3>
   42d1c:	a808d43a 	srli	r4,r21,16
   42d20:	900b883a 	mov	r5,r18
   42d24:	15ad883a 	add	r22,r2,r22
   42d28:	00406e00 	call	406e0 <__mulsi3>
   42d2c:	a1000017 	ldw	r4,0(r20)
   42d30:	b00cd43a 	srli	r6,r22,16
   42d34:	b0ffffcc 	andi	r3,r22,65535
   42d38:	217fffcc 	andi	r5,r4,65535
   42d3c:	2c21883a 	add	r16,r5,r16
   42d40:	80c7c83a 	sub	r3,r16,r3
   42d44:	2008d43a 	srli	r4,r4,16
   42d48:	1185883a 	add	r2,r2,r6
   42d4c:	1821d43a 	srai	r16,r3,16
   42d50:	117fffcc 	andi	r5,r2,65535
   42d54:	2149c83a 	sub	r4,r4,r5
   42d58:	2421883a 	add	r16,r4,r16
   42d5c:	8008943a 	slli	r4,r16,16
   42d60:	18ffffcc 	andi	r3,r3,65535
   42d64:	102cd43a 	srli	r22,r2,16
   42d68:	20c8b03a 	or	r4,r4,r3
   42d6c:	a1000015 	stw	r4,0(r20)
   42d70:	8021d43a 	srai	r16,r16,16
   42d74:	a5000104 	addi	r20,r20,4
   42d78:	e47fe32e 	bgeu	fp,r17,42d08 <__alt_data_end+0xfffdd508>
   42d7c:	d8c00317 	ldw	r3,12(sp)
   42d80:	18800017 	ldw	r2,0(r3)
   42d84:	10000c1e 	bne	r2,zero,42db8 <quorem+0x13c>
   42d88:	18bfff04 	addi	r2,r3,-4
   42d8c:	9880082e 	bgeu	r19,r2,42db0 <quorem+0x134>
   42d90:	18ffff17 	ldw	r3,-4(r3)
   42d94:	18000326 	beq	r3,zero,42da4 <quorem+0x128>
   42d98:	00000506 	br	42db0 <quorem+0x134>
   42d9c:	10c00017 	ldw	r3,0(r2)
   42da0:	1800031e 	bne	r3,zero,42db0 <quorem+0x134>
   42da4:	10bfff04 	addi	r2,r2,-4
   42da8:	bdffffc4 	addi	r23,r23,-1
   42dac:	98bffb36 	bltu	r19,r2,42d9c <__alt_data_end+0xfffdd59c>
   42db0:	d8c00017 	ldw	r3,0(sp)
   42db4:	1dc00415 	stw	r23,16(r3)
   42db8:	d9400217 	ldw	r5,8(sp)
   42dbc:	d9000017 	ldw	r4,0(sp)
   42dc0:	00468bc0 	call	468bc <__mcmp>
   42dc4:	10002816 	blt	r2,zero,42e68 <quorem+0x1ec>
   42dc8:	dc400117 	ldw	r17,4(sp)
   42dcc:	94800044 	addi	r18,r18,1
   42dd0:	980d883a 	mov	r6,r19
   42dd4:	0007883a 	mov	r3,zero
   42dd8:	31000017 	ldw	r4,0(r6)
   42ddc:	89400017 	ldw	r5,0(r17)
   42de0:	31800104 	addi	r6,r6,4
   42de4:	20bfffcc 	andi	r2,r4,65535
   42de8:	10c7883a 	add	r3,r2,r3
   42dec:	28bfffcc 	andi	r2,r5,65535
   42df0:	1885c83a 	sub	r2,r3,r2
   42df4:	280ad43a 	srli	r5,r5,16
   42df8:	2008d43a 	srli	r4,r4,16
   42dfc:	1007d43a 	srai	r3,r2,16
   42e00:	10bfffcc 	andi	r2,r2,65535
   42e04:	2149c83a 	sub	r4,r4,r5
   42e08:	20c9883a 	add	r4,r4,r3
   42e0c:	200a943a 	slli	r5,r4,16
   42e10:	8c400104 	addi	r17,r17,4
   42e14:	2007d43a 	srai	r3,r4,16
   42e18:	2884b03a 	or	r2,r5,r2
   42e1c:	30bfff15 	stw	r2,-4(r6)
   42e20:	e47fed2e 	bgeu	fp,r17,42dd8 <__alt_data_end+0xfffdd5d8>
   42e24:	bdc5883a 	add	r2,r23,r23
   42e28:	1085883a 	add	r2,r2,r2
   42e2c:	9887883a 	add	r3,r19,r2
   42e30:	18800017 	ldw	r2,0(r3)
   42e34:	10000c1e 	bne	r2,zero,42e68 <quorem+0x1ec>
   42e38:	18bfff04 	addi	r2,r3,-4
   42e3c:	9880082e 	bgeu	r19,r2,42e60 <quorem+0x1e4>
   42e40:	18ffff17 	ldw	r3,-4(r3)
   42e44:	18000326 	beq	r3,zero,42e54 <quorem+0x1d8>
   42e48:	00000506 	br	42e60 <quorem+0x1e4>
   42e4c:	10c00017 	ldw	r3,0(r2)
   42e50:	1800031e 	bne	r3,zero,42e60 <quorem+0x1e4>
   42e54:	10bfff04 	addi	r2,r2,-4
   42e58:	bdffffc4 	addi	r23,r23,-1
   42e5c:	98bffb36 	bltu	r19,r2,42e4c <__alt_data_end+0xfffdd64c>
   42e60:	d8c00017 	ldw	r3,0(sp)
   42e64:	1dc00415 	stw	r23,16(r3)
   42e68:	9005883a 	mov	r2,r18
   42e6c:	dfc00d17 	ldw	ra,52(sp)
   42e70:	df000c17 	ldw	fp,48(sp)
   42e74:	ddc00b17 	ldw	r23,44(sp)
   42e78:	dd800a17 	ldw	r22,40(sp)
   42e7c:	dd400917 	ldw	r21,36(sp)
   42e80:	dd000817 	ldw	r20,32(sp)
   42e84:	dcc00717 	ldw	r19,28(sp)
   42e88:	dc800617 	ldw	r18,24(sp)
   42e8c:	dc400517 	ldw	r17,20(sp)
   42e90:	dc000417 	ldw	r16,16(sp)
   42e94:	dec00e04 	addi	sp,sp,56
   42e98:	f800283a 	ret
   42e9c:	0005883a 	mov	r2,zero
   42ea0:	003ff206 	br	42e6c <__alt_data_end+0xfffdd66c>

00042ea4 <_dtoa_r>:
   42ea4:	20801017 	ldw	r2,64(r4)
   42ea8:	deffde04 	addi	sp,sp,-136
   42eac:	df002015 	stw	fp,128(sp)
   42eb0:	dcc01b15 	stw	r19,108(sp)
   42eb4:	dc801a15 	stw	r18,104(sp)
   42eb8:	dc401915 	stw	r17,100(sp)
   42ebc:	dc001815 	stw	r16,96(sp)
   42ec0:	dfc02115 	stw	ra,132(sp)
   42ec4:	ddc01f15 	stw	r23,124(sp)
   42ec8:	dd801e15 	stw	r22,120(sp)
   42ecc:	dd401d15 	stw	r21,116(sp)
   42ed0:	dd001c15 	stw	r20,112(sp)
   42ed4:	d9c00315 	stw	r7,12(sp)
   42ed8:	2039883a 	mov	fp,r4
   42edc:	3023883a 	mov	r17,r6
   42ee0:	2825883a 	mov	r18,r5
   42ee4:	dc002417 	ldw	r16,144(sp)
   42ee8:	3027883a 	mov	r19,r6
   42eec:	10000826 	beq	r2,zero,42f10 <_dtoa_r+0x6c>
   42ef0:	21801117 	ldw	r6,68(r4)
   42ef4:	00c00044 	movi	r3,1
   42ef8:	100b883a 	mov	r5,r2
   42efc:	1986983a 	sll	r3,r3,r6
   42f00:	11800115 	stw	r6,4(r2)
   42f04:	10c00215 	stw	r3,8(r2)
   42f08:	0045fe00 	call	45fe0 <_Bfree>
   42f0c:	e0001015 	stw	zero,64(fp)
   42f10:	88002e16 	blt	r17,zero,42fcc <_dtoa_r+0x128>
   42f14:	80000015 	stw	zero,0(r16)
   42f18:	889ffc2c 	andhi	r2,r17,32752
   42f1c:	00dffc34 	movhi	r3,32752
   42f20:	10c01c26 	beq	r2,r3,42f94 <_dtoa_r+0xf0>
   42f24:	000d883a 	mov	r6,zero
   42f28:	000f883a 	mov	r7,zero
   42f2c:	9009883a 	mov	r4,r18
   42f30:	980b883a 	mov	r5,r19
   42f34:	004bf240 	call	4bf24 <__eqdf2>
   42f38:	10002b1e 	bne	r2,zero,42fe8 <_dtoa_r+0x144>
   42f3c:	d9c02317 	ldw	r7,140(sp)
   42f40:	00800044 	movi	r2,1
   42f44:	38800015 	stw	r2,0(r7)
   42f48:	d8802517 	ldw	r2,148(sp)
   42f4c:	10019e26 	beq	r2,zero,435c8 <_dtoa_r+0x724>
   42f50:	d8c02517 	ldw	r3,148(sp)
   42f54:	008001b4 	movhi	r2,6
   42f58:	10a30a44 	addi	r2,r2,-29655
   42f5c:	18800015 	stw	r2,0(r3)
   42f60:	10bfffc4 	addi	r2,r2,-1
   42f64:	dfc02117 	ldw	ra,132(sp)
   42f68:	df002017 	ldw	fp,128(sp)
   42f6c:	ddc01f17 	ldw	r23,124(sp)
   42f70:	dd801e17 	ldw	r22,120(sp)
   42f74:	dd401d17 	ldw	r21,116(sp)
   42f78:	dd001c17 	ldw	r20,112(sp)
   42f7c:	dcc01b17 	ldw	r19,108(sp)
   42f80:	dc801a17 	ldw	r18,104(sp)
   42f84:	dc401917 	ldw	r17,100(sp)
   42f88:	dc001817 	ldw	r16,96(sp)
   42f8c:	dec02204 	addi	sp,sp,136
   42f90:	f800283a 	ret
   42f94:	d8c02317 	ldw	r3,140(sp)
   42f98:	0089c3c4 	movi	r2,9999
   42f9c:	18800015 	stw	r2,0(r3)
   42fa0:	90017726 	beq	r18,zero,43580 <_dtoa_r+0x6dc>
   42fa4:	008001b4 	movhi	r2,6
   42fa8:	10a31604 	addi	r2,r2,-29608
   42fac:	d9002517 	ldw	r4,148(sp)
   42fb0:	203fec26 	beq	r4,zero,42f64 <__alt_data_end+0xfffdd764>
   42fb4:	10c000c7 	ldb	r3,3(r2)
   42fb8:	1801781e 	bne	r3,zero,4359c <_dtoa_r+0x6f8>
   42fbc:	10c000c4 	addi	r3,r2,3
   42fc0:	d9802517 	ldw	r6,148(sp)
   42fc4:	30c00015 	stw	r3,0(r6)
   42fc8:	003fe606 	br	42f64 <__alt_data_end+0xfffdd764>
   42fcc:	04e00034 	movhi	r19,32768
   42fd0:	9cffffc4 	addi	r19,r19,-1
   42fd4:	00800044 	movi	r2,1
   42fd8:	8ce6703a 	and	r19,r17,r19
   42fdc:	80800015 	stw	r2,0(r16)
   42fe0:	9823883a 	mov	r17,r19
   42fe4:	003fcc06 	br	42f18 <__alt_data_end+0xfffdd718>
   42fe8:	d8800204 	addi	r2,sp,8
   42fec:	d8800015 	stw	r2,0(sp)
   42ff0:	d9c00104 	addi	r7,sp,4
   42ff4:	900b883a 	mov	r5,r18
   42ff8:	980d883a 	mov	r6,r19
   42ffc:	e009883a 	mov	r4,fp
   43000:	8820d53a 	srli	r16,r17,20
   43004:	0046c880 	call	46c88 <__d2b>
   43008:	d8800915 	stw	r2,36(sp)
   4300c:	8001651e 	bne	r16,zero,435a4 <_dtoa_r+0x700>
   43010:	dd800217 	ldw	r22,8(sp)
   43014:	dc000117 	ldw	r16,4(sp)
   43018:	00800804 	movi	r2,32
   4301c:	b421883a 	add	r16,r22,r16
   43020:	80c10c84 	addi	r3,r16,1074
   43024:	10c2d10e 	bge	r2,r3,43b6c <_dtoa_r+0xcc8>
   43028:	00801004 	movi	r2,64
   4302c:	81010484 	addi	r4,r16,1042
   43030:	10c7c83a 	sub	r3,r2,r3
   43034:	9108d83a 	srl	r4,r18,r4
   43038:	88e2983a 	sll	r17,r17,r3
   4303c:	2448b03a 	or	r4,r4,r17
   43040:	004d4400 	call	4d440 <__floatunsidf>
   43044:	017f8434 	movhi	r5,65040
   43048:	01800044 	movi	r6,1
   4304c:	1009883a 	mov	r4,r2
   43050:	194b883a 	add	r5,r3,r5
   43054:	843fffc4 	addi	r16,r16,-1
   43058:	d9801115 	stw	r6,68(sp)
   4305c:	000d883a 	mov	r6,zero
   43060:	01cffe34 	movhi	r7,16376
   43064:	004c9e80 	call	4c9e8 <__subdf3>
   43068:	0198dbf4 	movhi	r6,25455
   4306c:	01cff4f4 	movhi	r7,16339
   43070:	3190d844 	addi	r6,r6,17249
   43074:	39e1e9c4 	addi	r7,r7,-30809
   43078:	1009883a 	mov	r4,r2
   4307c:	180b883a 	mov	r5,r3
   43080:	004c17c0 	call	4c17c <__muldf3>
   43084:	01a2d874 	movhi	r6,35681
   43088:	01cff1f4 	movhi	r7,16327
   4308c:	31b22cc4 	addi	r6,r6,-14157
   43090:	39e28a04 	addi	r7,r7,-30168
   43094:	180b883a 	mov	r5,r3
   43098:	1009883a 	mov	r4,r2
   4309c:	004aca80 	call	4aca8 <__adddf3>
   430a0:	8009883a 	mov	r4,r16
   430a4:	1029883a 	mov	r20,r2
   430a8:	1823883a 	mov	r17,r3
   430ac:	004d3640 	call	4d364 <__floatsidf>
   430b0:	019427f4 	movhi	r6,20639
   430b4:	01cff4f4 	movhi	r7,16339
   430b8:	319e7ec4 	addi	r6,r6,31227
   430bc:	39d104c4 	addi	r7,r7,17427
   430c0:	1009883a 	mov	r4,r2
   430c4:	180b883a 	mov	r5,r3
   430c8:	004c17c0 	call	4c17c <__muldf3>
   430cc:	100d883a 	mov	r6,r2
   430d0:	180f883a 	mov	r7,r3
   430d4:	a009883a 	mov	r4,r20
   430d8:	880b883a 	mov	r5,r17
   430dc:	004aca80 	call	4aca8 <__adddf3>
   430e0:	1009883a 	mov	r4,r2
   430e4:	180b883a 	mov	r5,r3
   430e8:	1029883a 	mov	r20,r2
   430ec:	1823883a 	mov	r17,r3
   430f0:	004d2e40 	call	4d2e4 <__fixdfsi>
   430f4:	000d883a 	mov	r6,zero
   430f8:	000f883a 	mov	r7,zero
   430fc:	a009883a 	mov	r4,r20
   43100:	880b883a 	mov	r5,r17
   43104:	d8800515 	stw	r2,20(sp)
   43108:	004c0880 	call	4c088 <__ledf2>
   4310c:	10028716 	blt	r2,zero,43b2c <_dtoa_r+0xc88>
   43110:	d8c00517 	ldw	r3,20(sp)
   43114:	00800584 	movi	r2,22
   43118:	10c27536 	bltu	r2,r3,43af0 <_dtoa_r+0xc4c>
   4311c:	180490fa 	slli	r2,r3,3
   43120:	00c001b4 	movhi	r3,6
   43124:	18e33204 	addi	r3,r3,-29496
   43128:	1885883a 	add	r2,r3,r2
   4312c:	11000017 	ldw	r4,0(r2)
   43130:	11400117 	ldw	r5,4(r2)
   43134:	900d883a 	mov	r6,r18
   43138:	980f883a 	mov	r7,r19
   4313c:	004bfac0 	call	4bfac <__gedf2>
   43140:	00828d0e 	bge	zero,r2,43b78 <_dtoa_r+0xcd4>
   43144:	d9000517 	ldw	r4,20(sp)
   43148:	d8000e15 	stw	zero,56(sp)
   4314c:	213fffc4 	addi	r4,r4,-1
   43150:	d9000515 	stw	r4,20(sp)
   43154:	b42dc83a 	sub	r22,r22,r16
   43158:	b5bfffc4 	addi	r22,r22,-1
   4315c:	b0026f16 	blt	r22,zero,43b1c <_dtoa_r+0xc78>
   43160:	d8000815 	stw	zero,32(sp)
   43164:	d9c00517 	ldw	r7,20(sp)
   43168:	38026416 	blt	r7,zero,43afc <_dtoa_r+0xc58>
   4316c:	b1ed883a 	add	r22,r22,r7
   43170:	d9c00d15 	stw	r7,52(sp)
   43174:	d8000a15 	stw	zero,40(sp)
   43178:	d9800317 	ldw	r6,12(sp)
   4317c:	00800244 	movi	r2,9
   43180:	11811436 	bltu	r2,r6,435d4 <_dtoa_r+0x730>
   43184:	00800144 	movi	r2,5
   43188:	1184e10e 	bge	r2,r6,44510 <_dtoa_r+0x166c>
   4318c:	31bfff04 	addi	r6,r6,-4
   43190:	d9800315 	stw	r6,12(sp)
   43194:	0023883a 	mov	r17,zero
   43198:	d9800317 	ldw	r6,12(sp)
   4319c:	008000c4 	movi	r2,3
   431a0:	30836726 	beq	r6,r2,43f40 <_dtoa_r+0x109c>
   431a4:	1183410e 	bge	r2,r6,43eac <_dtoa_r+0x1008>
   431a8:	d9c00317 	ldw	r7,12(sp)
   431ac:	00800104 	movi	r2,4
   431b0:	38827c26 	beq	r7,r2,43ba4 <_dtoa_r+0xd00>
   431b4:	00800144 	movi	r2,5
   431b8:	3884c41e 	bne	r7,r2,444cc <_dtoa_r+0x1628>
   431bc:	00800044 	movi	r2,1
   431c0:	d8800b15 	stw	r2,44(sp)
   431c4:	d8c00517 	ldw	r3,20(sp)
   431c8:	d9002217 	ldw	r4,136(sp)
   431cc:	1907883a 	add	r3,r3,r4
   431d0:	19800044 	addi	r6,r3,1
   431d4:	d8c00c15 	stw	r3,48(sp)
   431d8:	d9800615 	stw	r6,24(sp)
   431dc:	0183a40e 	bge	zero,r6,44070 <_dtoa_r+0x11cc>
   431e0:	d9800617 	ldw	r6,24(sp)
   431e4:	3021883a 	mov	r16,r6
   431e8:	e0001115 	stw	zero,68(fp)
   431ec:	008005c4 	movi	r2,23
   431f0:	1184c92e 	bgeu	r2,r6,44518 <_dtoa_r+0x1674>
   431f4:	00c00044 	movi	r3,1
   431f8:	00800104 	movi	r2,4
   431fc:	1085883a 	add	r2,r2,r2
   43200:	11000504 	addi	r4,r2,20
   43204:	180b883a 	mov	r5,r3
   43208:	18c00044 	addi	r3,r3,1
   4320c:	313ffb2e 	bgeu	r6,r4,431fc <__alt_data_end+0xfffdd9fc>
   43210:	e1401115 	stw	r5,68(fp)
   43214:	e009883a 	mov	r4,fp
   43218:	0045f380 	call	45f38 <_Balloc>
   4321c:	d8800715 	stw	r2,28(sp)
   43220:	e0801015 	stw	r2,64(fp)
   43224:	00800384 	movi	r2,14
   43228:	1400f736 	bltu	r2,r16,43608 <_dtoa_r+0x764>
   4322c:	8800f626 	beq	r17,zero,43608 <_dtoa_r+0x764>
   43230:	d9c00517 	ldw	r7,20(sp)
   43234:	01c39a0e 	bge	zero,r7,440a0 <_dtoa_r+0x11fc>
   43238:	388003cc 	andi	r2,r7,15
   4323c:	100490fa 	slli	r2,r2,3
   43240:	382bd13a 	srai	r21,r7,4
   43244:	00c001b4 	movhi	r3,6
   43248:	18e33204 	addi	r3,r3,-29496
   4324c:	1885883a 	add	r2,r3,r2
   43250:	a8c0040c 	andi	r3,r21,16
   43254:	12400017 	ldw	r9,0(r2)
   43258:	12000117 	ldw	r8,4(r2)
   4325c:	18037926 	beq	r3,zero,44044 <_dtoa_r+0x11a0>
   43260:	008001b4 	movhi	r2,6
   43264:	10a32804 	addi	r2,r2,-29536
   43268:	11800817 	ldw	r6,32(r2)
   4326c:	11c00917 	ldw	r7,36(r2)
   43270:	9009883a 	mov	r4,r18
   43274:	980b883a 	mov	r5,r19
   43278:	da001715 	stw	r8,92(sp)
   4327c:	da401615 	stw	r9,88(sp)
   43280:	004b5540 	call	4b554 <__divdf3>
   43284:	da001717 	ldw	r8,92(sp)
   43288:	da401617 	ldw	r9,88(sp)
   4328c:	ad4003cc 	andi	r21,r21,15
   43290:	040000c4 	movi	r16,3
   43294:	1023883a 	mov	r17,r2
   43298:	1829883a 	mov	r20,r3
   4329c:	a8001126 	beq	r21,zero,432e4 <_dtoa_r+0x440>
   432a0:	05c001b4 	movhi	r23,6
   432a4:	bde32804 	addi	r23,r23,-29536
   432a8:	4805883a 	mov	r2,r9
   432ac:	4007883a 	mov	r3,r8
   432b0:	a980004c 	andi	r6,r21,1
   432b4:	1009883a 	mov	r4,r2
   432b8:	a82bd07a 	srai	r21,r21,1
   432bc:	180b883a 	mov	r5,r3
   432c0:	30000426 	beq	r6,zero,432d4 <_dtoa_r+0x430>
   432c4:	b9800017 	ldw	r6,0(r23)
   432c8:	b9c00117 	ldw	r7,4(r23)
   432cc:	84000044 	addi	r16,r16,1
   432d0:	004c17c0 	call	4c17c <__muldf3>
   432d4:	bdc00204 	addi	r23,r23,8
   432d8:	a83ff51e 	bne	r21,zero,432b0 <__alt_data_end+0xfffddab0>
   432dc:	1013883a 	mov	r9,r2
   432e0:	1811883a 	mov	r8,r3
   432e4:	480d883a 	mov	r6,r9
   432e8:	400f883a 	mov	r7,r8
   432ec:	8809883a 	mov	r4,r17
   432f0:	a00b883a 	mov	r5,r20
   432f4:	004b5540 	call	4b554 <__divdf3>
   432f8:	d8800f15 	stw	r2,60(sp)
   432fc:	d8c01015 	stw	r3,64(sp)
   43300:	d8c00e17 	ldw	r3,56(sp)
   43304:	18000626 	beq	r3,zero,43320 <_dtoa_r+0x47c>
   43308:	d9000f17 	ldw	r4,60(sp)
   4330c:	d9401017 	ldw	r5,64(sp)
   43310:	000d883a 	mov	r6,zero
   43314:	01cffc34 	movhi	r7,16368
   43318:	004c0880 	call	4c088 <__ledf2>
   4331c:	10040b16 	blt	r2,zero,4434c <_dtoa_r+0x14a8>
   43320:	8009883a 	mov	r4,r16
   43324:	004d3640 	call	4d364 <__floatsidf>
   43328:	d9800f17 	ldw	r6,60(sp)
   4332c:	d9c01017 	ldw	r7,64(sp)
   43330:	1009883a 	mov	r4,r2
   43334:	180b883a 	mov	r5,r3
   43338:	004c17c0 	call	4c17c <__muldf3>
   4333c:	000d883a 	mov	r6,zero
   43340:	01d00734 	movhi	r7,16412
   43344:	1009883a 	mov	r4,r2
   43348:	180b883a 	mov	r5,r3
   4334c:	004aca80 	call	4aca8 <__adddf3>
   43350:	1021883a 	mov	r16,r2
   43354:	d8800617 	ldw	r2,24(sp)
   43358:	047f3034 	movhi	r17,64704
   4335c:	1c63883a 	add	r17,r3,r17
   43360:	10031826 	beq	r2,zero,43fc4 <_dtoa_r+0x1120>
   43364:	d8c00517 	ldw	r3,20(sp)
   43368:	db000617 	ldw	r12,24(sp)
   4336c:	d8c01315 	stw	r3,76(sp)
   43370:	d9000b17 	ldw	r4,44(sp)
   43374:	20038f26 	beq	r4,zero,441b4 <_dtoa_r+0x1310>
   43378:	60bfffc4 	addi	r2,r12,-1
   4337c:	100490fa 	slli	r2,r2,3
   43380:	00c001b4 	movhi	r3,6
   43384:	18e33204 	addi	r3,r3,-29496
   43388:	1885883a 	add	r2,r3,r2
   4338c:	11800017 	ldw	r6,0(r2)
   43390:	11c00117 	ldw	r7,4(r2)
   43394:	d8800717 	ldw	r2,28(sp)
   43398:	0009883a 	mov	r4,zero
   4339c:	014ff834 	movhi	r5,16352
   433a0:	db001615 	stw	r12,88(sp)
   433a4:	15c00044 	addi	r23,r2,1
   433a8:	004b5540 	call	4b554 <__divdf3>
   433ac:	800d883a 	mov	r6,r16
   433b0:	880f883a 	mov	r7,r17
   433b4:	1009883a 	mov	r4,r2
   433b8:	180b883a 	mov	r5,r3
   433bc:	004c9e80 	call	4c9e8 <__subdf3>
   433c0:	d9401017 	ldw	r5,64(sp)
   433c4:	d9000f17 	ldw	r4,60(sp)
   433c8:	102b883a 	mov	r21,r2
   433cc:	d8c01215 	stw	r3,72(sp)
   433d0:	004d2e40 	call	4d2e4 <__fixdfsi>
   433d4:	1009883a 	mov	r4,r2
   433d8:	1029883a 	mov	r20,r2
   433dc:	004d3640 	call	4d364 <__floatsidf>
   433e0:	d9000f17 	ldw	r4,60(sp)
   433e4:	d9401017 	ldw	r5,64(sp)
   433e8:	100d883a 	mov	r6,r2
   433ec:	180f883a 	mov	r7,r3
   433f0:	004c9e80 	call	4c9e8 <__subdf3>
   433f4:	1823883a 	mov	r17,r3
   433f8:	d8c00717 	ldw	r3,28(sp)
   433fc:	d9401217 	ldw	r5,72(sp)
   43400:	a2000c04 	addi	r8,r20,48
   43404:	1021883a 	mov	r16,r2
   43408:	1a000005 	stb	r8,0(r3)
   4340c:	800d883a 	mov	r6,r16
   43410:	880f883a 	mov	r7,r17
   43414:	a809883a 	mov	r4,r21
   43418:	4029883a 	mov	r20,r8
   4341c:	004bfac0 	call	4bfac <__gedf2>
   43420:	00841d16 	blt	zero,r2,44498 <_dtoa_r+0x15f4>
   43424:	800d883a 	mov	r6,r16
   43428:	880f883a 	mov	r7,r17
   4342c:	0009883a 	mov	r4,zero
   43430:	014ffc34 	movhi	r5,16368
   43434:	004c9e80 	call	4c9e8 <__subdf3>
   43438:	d9401217 	ldw	r5,72(sp)
   4343c:	100d883a 	mov	r6,r2
   43440:	180f883a 	mov	r7,r3
   43444:	a809883a 	mov	r4,r21
   43448:	004bfac0 	call	4bfac <__gedf2>
   4344c:	db001617 	ldw	r12,88(sp)
   43450:	00840e16 	blt	zero,r2,4448c <_dtoa_r+0x15e8>
   43454:	00800044 	movi	r2,1
   43458:	13006b0e 	bge	r2,r12,43608 <_dtoa_r+0x764>
   4345c:	d9000717 	ldw	r4,28(sp)
   43460:	dd800f15 	stw	r22,60(sp)
   43464:	dcc01015 	stw	r19,64(sp)
   43468:	2319883a 	add	r12,r4,r12
   4346c:	dcc01217 	ldw	r19,72(sp)
   43470:	602d883a 	mov	r22,r12
   43474:	dc801215 	stw	r18,72(sp)
   43478:	b825883a 	mov	r18,r23
   4347c:	00000906 	br	434a4 <_dtoa_r+0x600>
   43480:	004c9e80 	call	4c9e8 <__subdf3>
   43484:	a80d883a 	mov	r6,r21
   43488:	980f883a 	mov	r7,r19
   4348c:	1009883a 	mov	r4,r2
   43490:	180b883a 	mov	r5,r3
   43494:	004c0880 	call	4c088 <__ledf2>
   43498:	1003e816 	blt	r2,zero,4443c <_dtoa_r+0x1598>
   4349c:	b825883a 	mov	r18,r23
   434a0:	bd83e926 	beq	r23,r22,44448 <_dtoa_r+0x15a4>
   434a4:	a809883a 	mov	r4,r21
   434a8:	980b883a 	mov	r5,r19
   434ac:	000d883a 	mov	r6,zero
   434b0:	01d00934 	movhi	r7,16420
   434b4:	004c17c0 	call	4c17c <__muldf3>
   434b8:	000d883a 	mov	r6,zero
   434bc:	01d00934 	movhi	r7,16420
   434c0:	8009883a 	mov	r4,r16
   434c4:	880b883a 	mov	r5,r17
   434c8:	102b883a 	mov	r21,r2
   434cc:	1827883a 	mov	r19,r3
   434d0:	004c17c0 	call	4c17c <__muldf3>
   434d4:	180b883a 	mov	r5,r3
   434d8:	1009883a 	mov	r4,r2
   434dc:	1821883a 	mov	r16,r3
   434e0:	1023883a 	mov	r17,r2
   434e4:	004d2e40 	call	4d2e4 <__fixdfsi>
   434e8:	1009883a 	mov	r4,r2
   434ec:	1029883a 	mov	r20,r2
   434f0:	004d3640 	call	4d364 <__floatsidf>
   434f4:	8809883a 	mov	r4,r17
   434f8:	800b883a 	mov	r5,r16
   434fc:	100d883a 	mov	r6,r2
   43500:	180f883a 	mov	r7,r3
   43504:	004c9e80 	call	4c9e8 <__subdf3>
   43508:	a5000c04 	addi	r20,r20,48
   4350c:	a80d883a 	mov	r6,r21
   43510:	980f883a 	mov	r7,r19
   43514:	1009883a 	mov	r4,r2
   43518:	180b883a 	mov	r5,r3
   4351c:	95000005 	stb	r20,0(r18)
   43520:	1021883a 	mov	r16,r2
   43524:	1823883a 	mov	r17,r3
   43528:	004c0880 	call	4c088 <__ledf2>
   4352c:	bdc00044 	addi	r23,r23,1
   43530:	800d883a 	mov	r6,r16
   43534:	880f883a 	mov	r7,r17
   43538:	0009883a 	mov	r4,zero
   4353c:	014ffc34 	movhi	r5,16368
   43540:	103fcf0e 	bge	r2,zero,43480 <__alt_data_end+0xfffddc80>
   43544:	d8c01317 	ldw	r3,76(sp)
   43548:	d8c00515 	stw	r3,20(sp)
   4354c:	d9400917 	ldw	r5,36(sp)
   43550:	e009883a 	mov	r4,fp
   43554:	0045fe00 	call	45fe0 <_Bfree>
   43558:	d9000517 	ldw	r4,20(sp)
   4355c:	d9802317 	ldw	r6,140(sp)
   43560:	d9c02517 	ldw	r7,148(sp)
   43564:	b8000005 	stb	zero,0(r23)
   43568:	20800044 	addi	r2,r4,1
   4356c:	30800015 	stw	r2,0(r6)
   43570:	3802aa26 	beq	r7,zero,4401c <_dtoa_r+0x1178>
   43574:	3dc00015 	stw	r23,0(r7)
   43578:	d8800717 	ldw	r2,28(sp)
   4357c:	003e7906 	br	42f64 <__alt_data_end+0xfffdd764>
   43580:	00800434 	movhi	r2,16
   43584:	10bfffc4 	addi	r2,r2,-1
   43588:	88a2703a 	and	r17,r17,r2
   4358c:	883e851e 	bne	r17,zero,42fa4 <__alt_data_end+0xfffdd7a4>
   43590:	008001b4 	movhi	r2,6
   43594:	10a31304 	addi	r2,r2,-29620
   43598:	003e8406 	br	42fac <__alt_data_end+0xfffdd7ac>
   4359c:	10c00204 	addi	r3,r2,8
   435a0:	003e8706 	br	42fc0 <__alt_data_end+0xfffdd7c0>
   435a4:	01400434 	movhi	r5,16
   435a8:	297fffc4 	addi	r5,r5,-1
   435ac:	994a703a 	and	r5,r19,r5
   435b0:	9009883a 	mov	r4,r18
   435b4:	843f0044 	addi	r16,r16,-1023
   435b8:	294ffc34 	orhi	r5,r5,16368
   435bc:	dd800217 	ldw	r22,8(sp)
   435c0:	d8001115 	stw	zero,68(sp)
   435c4:	003ea506 	br	4305c <__alt_data_end+0xfffdd85c>
   435c8:	008001b4 	movhi	r2,6
   435cc:	10a30a04 	addi	r2,r2,-29656
   435d0:	003e6406 	br	42f64 <__alt_data_end+0xfffdd764>
   435d4:	e0001115 	stw	zero,68(fp)
   435d8:	000b883a 	mov	r5,zero
   435dc:	e009883a 	mov	r4,fp
   435e0:	0045f380 	call	45f38 <_Balloc>
   435e4:	01bfffc4 	movi	r6,-1
   435e8:	01c00044 	movi	r7,1
   435ec:	d8800715 	stw	r2,28(sp)
   435f0:	d9800c15 	stw	r6,48(sp)
   435f4:	e0801015 	stw	r2,64(fp)
   435f8:	d8000315 	stw	zero,12(sp)
   435fc:	d9c00b15 	stw	r7,44(sp)
   43600:	d9800615 	stw	r6,24(sp)
   43604:	d8002215 	stw	zero,136(sp)
   43608:	d8800117 	ldw	r2,4(sp)
   4360c:	10008916 	blt	r2,zero,43834 <_dtoa_r+0x990>
   43610:	d9000517 	ldw	r4,20(sp)
   43614:	00c00384 	movi	r3,14
   43618:	19008616 	blt	r3,r4,43834 <_dtoa_r+0x990>
   4361c:	200490fa 	slli	r2,r4,3
   43620:	00c001b4 	movhi	r3,6
   43624:	d9802217 	ldw	r6,136(sp)
   43628:	18e33204 	addi	r3,r3,-29496
   4362c:	1885883a 	add	r2,r3,r2
   43630:	14000017 	ldw	r16,0(r2)
   43634:	14400117 	ldw	r17,4(r2)
   43638:	30016316 	blt	r6,zero,43bc8 <_dtoa_r+0xd24>
   4363c:	800d883a 	mov	r6,r16
   43640:	880f883a 	mov	r7,r17
   43644:	9009883a 	mov	r4,r18
   43648:	980b883a 	mov	r5,r19
   4364c:	004b5540 	call	4b554 <__divdf3>
   43650:	180b883a 	mov	r5,r3
   43654:	1009883a 	mov	r4,r2
   43658:	004d2e40 	call	4d2e4 <__fixdfsi>
   4365c:	1009883a 	mov	r4,r2
   43660:	102b883a 	mov	r21,r2
   43664:	004d3640 	call	4d364 <__floatsidf>
   43668:	800d883a 	mov	r6,r16
   4366c:	880f883a 	mov	r7,r17
   43670:	1009883a 	mov	r4,r2
   43674:	180b883a 	mov	r5,r3
   43678:	004c17c0 	call	4c17c <__muldf3>
   4367c:	100d883a 	mov	r6,r2
   43680:	180f883a 	mov	r7,r3
   43684:	9009883a 	mov	r4,r18
   43688:	980b883a 	mov	r5,r19
   4368c:	004c9e80 	call	4c9e8 <__subdf3>
   43690:	d9c00717 	ldw	r7,28(sp)
   43694:	1009883a 	mov	r4,r2
   43698:	a8800c04 	addi	r2,r21,48
   4369c:	38800005 	stb	r2,0(r7)
   436a0:	3dc00044 	addi	r23,r7,1
   436a4:	d9c00617 	ldw	r7,24(sp)
   436a8:	01800044 	movi	r6,1
   436ac:	180b883a 	mov	r5,r3
   436b0:	2005883a 	mov	r2,r4
   436b4:	39803826 	beq	r7,r6,43798 <_dtoa_r+0x8f4>
   436b8:	000d883a 	mov	r6,zero
   436bc:	01d00934 	movhi	r7,16420
   436c0:	004c17c0 	call	4c17c <__muldf3>
   436c4:	000d883a 	mov	r6,zero
   436c8:	000f883a 	mov	r7,zero
   436cc:	1009883a 	mov	r4,r2
   436d0:	180b883a 	mov	r5,r3
   436d4:	1025883a 	mov	r18,r2
   436d8:	1827883a 	mov	r19,r3
   436dc:	004bf240 	call	4bf24 <__eqdf2>
   436e0:	103f9a26 	beq	r2,zero,4354c <__alt_data_end+0xfffddd4c>
   436e4:	d9c00617 	ldw	r7,24(sp)
   436e8:	d8c00717 	ldw	r3,28(sp)
   436ec:	b829883a 	mov	r20,r23
   436f0:	38bfffc4 	addi	r2,r7,-1
   436f4:	18ad883a 	add	r22,r3,r2
   436f8:	00000a06 	br	43724 <_dtoa_r+0x880>
   436fc:	004c17c0 	call	4c17c <__muldf3>
   43700:	000d883a 	mov	r6,zero
   43704:	000f883a 	mov	r7,zero
   43708:	1009883a 	mov	r4,r2
   4370c:	180b883a 	mov	r5,r3
   43710:	1025883a 	mov	r18,r2
   43714:	1827883a 	mov	r19,r3
   43718:	b829883a 	mov	r20,r23
   4371c:	004bf240 	call	4bf24 <__eqdf2>
   43720:	103f8a26 	beq	r2,zero,4354c <__alt_data_end+0xfffddd4c>
   43724:	800d883a 	mov	r6,r16
   43728:	880f883a 	mov	r7,r17
   4372c:	9009883a 	mov	r4,r18
   43730:	980b883a 	mov	r5,r19
   43734:	004b5540 	call	4b554 <__divdf3>
   43738:	180b883a 	mov	r5,r3
   4373c:	1009883a 	mov	r4,r2
   43740:	004d2e40 	call	4d2e4 <__fixdfsi>
   43744:	1009883a 	mov	r4,r2
   43748:	102b883a 	mov	r21,r2
   4374c:	004d3640 	call	4d364 <__floatsidf>
   43750:	800d883a 	mov	r6,r16
   43754:	880f883a 	mov	r7,r17
   43758:	1009883a 	mov	r4,r2
   4375c:	180b883a 	mov	r5,r3
   43760:	004c17c0 	call	4c17c <__muldf3>
   43764:	100d883a 	mov	r6,r2
   43768:	180f883a 	mov	r7,r3
   4376c:	9009883a 	mov	r4,r18
   43770:	980b883a 	mov	r5,r19
   43774:	004c9e80 	call	4c9e8 <__subdf3>
   43778:	aa000c04 	addi	r8,r21,48
   4377c:	a2000005 	stb	r8,0(r20)
   43780:	000d883a 	mov	r6,zero
   43784:	01d00934 	movhi	r7,16420
   43788:	1009883a 	mov	r4,r2
   4378c:	180b883a 	mov	r5,r3
   43790:	a5c00044 	addi	r23,r20,1
   43794:	b53fd91e 	bne	r22,r20,436fc <__alt_data_end+0xfffddefc>
   43798:	100d883a 	mov	r6,r2
   4379c:	180f883a 	mov	r7,r3
   437a0:	1009883a 	mov	r4,r2
   437a4:	180b883a 	mov	r5,r3
   437a8:	004aca80 	call	4aca8 <__adddf3>
   437ac:	100d883a 	mov	r6,r2
   437b0:	180f883a 	mov	r7,r3
   437b4:	8009883a 	mov	r4,r16
   437b8:	880b883a 	mov	r5,r17
   437bc:	1027883a 	mov	r19,r2
   437c0:	1825883a 	mov	r18,r3
   437c4:	004c0880 	call	4c088 <__ledf2>
   437c8:	10000816 	blt	r2,zero,437ec <_dtoa_r+0x948>
   437cc:	980d883a 	mov	r6,r19
   437d0:	900f883a 	mov	r7,r18
   437d4:	8009883a 	mov	r4,r16
   437d8:	880b883a 	mov	r5,r17
   437dc:	004bf240 	call	4bf24 <__eqdf2>
   437e0:	103f5a1e 	bne	r2,zero,4354c <__alt_data_end+0xfffddd4c>
   437e4:	ad40004c 	andi	r21,r21,1
   437e8:	a83f5826 	beq	r21,zero,4354c <__alt_data_end+0xfffddd4c>
   437ec:	bd3fffc3 	ldbu	r20,-1(r23)
   437f0:	b8bfffc4 	addi	r2,r23,-1
   437f4:	1007883a 	mov	r3,r2
   437f8:	01400e44 	movi	r5,57
   437fc:	d9800717 	ldw	r6,28(sp)
   43800:	00000506 	br	43818 <_dtoa_r+0x974>
   43804:	18ffffc4 	addi	r3,r3,-1
   43808:	11824726 	beq	r2,r6,44128 <_dtoa_r+0x1284>
   4380c:	1d000003 	ldbu	r20,0(r3)
   43810:	102f883a 	mov	r23,r2
   43814:	10bfffc4 	addi	r2,r2,-1
   43818:	a1003fcc 	andi	r4,r20,255
   4381c:	2100201c 	xori	r4,r4,128
   43820:	213fe004 	addi	r4,r4,-128
   43824:	217ff726 	beq	r4,r5,43804 <__alt_data_end+0xfffde004>
   43828:	a2000044 	addi	r8,r20,1
   4382c:	12000005 	stb	r8,0(r2)
   43830:	003f4606 	br	4354c <__alt_data_end+0xfffddd4c>
   43834:	d9000b17 	ldw	r4,44(sp)
   43838:	2000c826 	beq	r4,zero,43b5c <_dtoa_r+0xcb8>
   4383c:	d9800317 	ldw	r6,12(sp)
   43840:	00c00044 	movi	r3,1
   43844:	1980f90e 	bge	r3,r6,43c2c <_dtoa_r+0xd88>
   43848:	d8800617 	ldw	r2,24(sp)
   4384c:	d8c00a17 	ldw	r3,40(sp)
   43850:	157fffc4 	addi	r21,r2,-1
   43854:	1d41f316 	blt	r3,r21,44024 <_dtoa_r+0x1180>
   43858:	1d6bc83a 	sub	r21,r3,r21
   4385c:	d9c00617 	ldw	r7,24(sp)
   43860:	3802aa16 	blt	r7,zero,4430c <_dtoa_r+0x1468>
   43864:	dd000817 	ldw	r20,32(sp)
   43868:	d8800617 	ldw	r2,24(sp)
   4386c:	d8c00817 	ldw	r3,32(sp)
   43870:	01400044 	movi	r5,1
   43874:	e009883a 	mov	r4,fp
   43878:	1887883a 	add	r3,r3,r2
   4387c:	d8c00815 	stw	r3,32(sp)
   43880:	b0ad883a 	add	r22,r22,r2
   43884:	004636c0 	call	4636c <__i2b>
   43888:	1023883a 	mov	r17,r2
   4388c:	a0000826 	beq	r20,zero,438b0 <_dtoa_r+0xa0c>
   43890:	0580070e 	bge	zero,r22,438b0 <_dtoa_r+0xa0c>
   43894:	a005883a 	mov	r2,r20
   43898:	b500b916 	blt	r22,r20,43b80 <_dtoa_r+0xcdc>
   4389c:	d9000817 	ldw	r4,32(sp)
   438a0:	a0a9c83a 	sub	r20,r20,r2
   438a4:	b0adc83a 	sub	r22,r22,r2
   438a8:	2089c83a 	sub	r4,r4,r2
   438ac:	d9000815 	stw	r4,32(sp)
   438b0:	d9800a17 	ldw	r6,40(sp)
   438b4:	0181810e 	bge	zero,r6,43ebc <_dtoa_r+0x1018>
   438b8:	d9c00b17 	ldw	r7,44(sp)
   438bc:	3800b326 	beq	r7,zero,43b8c <_dtoa_r+0xce8>
   438c0:	a800b226 	beq	r21,zero,43b8c <_dtoa_r+0xce8>
   438c4:	880b883a 	mov	r5,r17
   438c8:	a80d883a 	mov	r6,r21
   438cc:	e009883a 	mov	r4,fp
   438d0:	00466340 	call	46634 <__pow5mult>
   438d4:	d9800917 	ldw	r6,36(sp)
   438d8:	100b883a 	mov	r5,r2
   438dc:	e009883a 	mov	r4,fp
   438e0:	1023883a 	mov	r17,r2
   438e4:	00463a80 	call	463a8 <__multiply>
   438e8:	1021883a 	mov	r16,r2
   438ec:	d8800a17 	ldw	r2,40(sp)
   438f0:	d9400917 	ldw	r5,36(sp)
   438f4:	e009883a 	mov	r4,fp
   438f8:	1545c83a 	sub	r2,r2,r21
   438fc:	d8800a15 	stw	r2,40(sp)
   43900:	0045fe00 	call	45fe0 <_Bfree>
   43904:	d8c00a17 	ldw	r3,40(sp)
   43908:	18009f1e 	bne	r3,zero,43b88 <_dtoa_r+0xce4>
   4390c:	05c00044 	movi	r23,1
   43910:	e009883a 	mov	r4,fp
   43914:	b80b883a 	mov	r5,r23
   43918:	004636c0 	call	4636c <__i2b>
   4391c:	d9000d17 	ldw	r4,52(sp)
   43920:	102b883a 	mov	r21,r2
   43924:	2000ce26 	beq	r4,zero,43c60 <_dtoa_r+0xdbc>
   43928:	200d883a 	mov	r6,r4
   4392c:	100b883a 	mov	r5,r2
   43930:	e009883a 	mov	r4,fp
   43934:	00466340 	call	46634 <__pow5mult>
   43938:	d9800317 	ldw	r6,12(sp)
   4393c:	102b883a 	mov	r21,r2
   43940:	b981810e 	bge	r23,r6,43f48 <_dtoa_r+0x10a4>
   43944:	0027883a 	mov	r19,zero
   43948:	a8800417 	ldw	r2,16(r21)
   4394c:	05c00804 	movi	r23,32
   43950:	10800104 	addi	r2,r2,4
   43954:	1085883a 	add	r2,r2,r2
   43958:	1085883a 	add	r2,r2,r2
   4395c:	a885883a 	add	r2,r21,r2
   43960:	11000017 	ldw	r4,0(r2)
   43964:	00462540 	call	46254 <__hi0bits>
   43968:	b885c83a 	sub	r2,r23,r2
   4396c:	1585883a 	add	r2,r2,r22
   43970:	108007cc 	andi	r2,r2,31
   43974:	1000b326 	beq	r2,zero,43c44 <_dtoa_r+0xda0>
   43978:	00c00804 	movi	r3,32
   4397c:	1887c83a 	sub	r3,r3,r2
   43980:	01000104 	movi	r4,4
   43984:	20c2cd0e 	bge	r4,r3,444bc <_dtoa_r+0x1618>
   43988:	00c00704 	movi	r3,28
   4398c:	1885c83a 	sub	r2,r3,r2
   43990:	d8c00817 	ldw	r3,32(sp)
   43994:	a0a9883a 	add	r20,r20,r2
   43998:	b0ad883a 	add	r22,r22,r2
   4399c:	1887883a 	add	r3,r3,r2
   439a0:	d8c00815 	stw	r3,32(sp)
   439a4:	d9800817 	ldw	r6,32(sp)
   439a8:	0180040e 	bge	zero,r6,439bc <_dtoa_r+0xb18>
   439ac:	800b883a 	mov	r5,r16
   439b0:	e009883a 	mov	r4,fp
   439b4:	00467740 	call	46774 <__lshift>
   439b8:	1021883a 	mov	r16,r2
   439bc:	0580050e 	bge	zero,r22,439d4 <_dtoa_r+0xb30>
   439c0:	a80b883a 	mov	r5,r21
   439c4:	b00d883a 	mov	r6,r22
   439c8:	e009883a 	mov	r4,fp
   439cc:	00467740 	call	46774 <__lshift>
   439d0:	102b883a 	mov	r21,r2
   439d4:	d9c00e17 	ldw	r7,56(sp)
   439d8:	3801211e 	bne	r7,zero,43e60 <_dtoa_r+0xfbc>
   439dc:	d9800617 	ldw	r6,24(sp)
   439e0:	0181380e 	bge	zero,r6,43ec4 <_dtoa_r+0x1020>
   439e4:	d8c00b17 	ldw	r3,44(sp)
   439e8:	1800ab1e 	bne	r3,zero,43c98 <_dtoa_r+0xdf4>
   439ec:	dc800717 	ldw	r18,28(sp)
   439f0:	dcc00617 	ldw	r19,24(sp)
   439f4:	9029883a 	mov	r20,r18
   439f8:	00000206 	br	43a04 <_dtoa_r+0xb60>
   439fc:	00460080 	call	46008 <__multadd>
   43a00:	1021883a 	mov	r16,r2
   43a04:	a80b883a 	mov	r5,r21
   43a08:	8009883a 	mov	r4,r16
   43a0c:	0042c7c0 	call	42c7c <quorem>
   43a10:	10800c04 	addi	r2,r2,48
   43a14:	90800005 	stb	r2,0(r18)
   43a18:	94800044 	addi	r18,r18,1
   43a1c:	9507c83a 	sub	r3,r18,r20
   43a20:	000f883a 	mov	r7,zero
   43a24:	01800284 	movi	r6,10
   43a28:	800b883a 	mov	r5,r16
   43a2c:	e009883a 	mov	r4,fp
   43a30:	1cfff216 	blt	r3,r19,439fc <__alt_data_end+0xfffde1fc>
   43a34:	1011883a 	mov	r8,r2
   43a38:	d8800617 	ldw	r2,24(sp)
   43a3c:	0082370e 	bge	zero,r2,4431c <_dtoa_r+0x1478>
   43a40:	d9000717 	ldw	r4,28(sp)
   43a44:	0025883a 	mov	r18,zero
   43a48:	20af883a 	add	r23,r4,r2
   43a4c:	01800044 	movi	r6,1
   43a50:	800b883a 	mov	r5,r16
   43a54:	e009883a 	mov	r4,fp
   43a58:	da001715 	stw	r8,92(sp)
   43a5c:	00467740 	call	46774 <__lshift>
   43a60:	a80b883a 	mov	r5,r21
   43a64:	1009883a 	mov	r4,r2
   43a68:	d8800915 	stw	r2,36(sp)
   43a6c:	00468bc0 	call	468bc <__mcmp>
   43a70:	da001717 	ldw	r8,92(sp)
   43a74:	0081800e 	bge	zero,r2,44078 <_dtoa_r+0x11d4>
   43a78:	b93fffc3 	ldbu	r4,-1(r23)
   43a7c:	b8bfffc4 	addi	r2,r23,-1
   43a80:	1007883a 	mov	r3,r2
   43a84:	01800e44 	movi	r6,57
   43a88:	d9c00717 	ldw	r7,28(sp)
   43a8c:	00000506 	br	43aa4 <_dtoa_r+0xc00>
   43a90:	18ffffc4 	addi	r3,r3,-1
   43a94:	11c12326 	beq	r2,r7,43f24 <_dtoa_r+0x1080>
   43a98:	19000003 	ldbu	r4,0(r3)
   43a9c:	102f883a 	mov	r23,r2
   43aa0:	10bfffc4 	addi	r2,r2,-1
   43aa4:	21403fcc 	andi	r5,r4,255
   43aa8:	2940201c 	xori	r5,r5,128
   43aac:	297fe004 	addi	r5,r5,-128
   43ab0:	29bff726 	beq	r5,r6,43a90 <__alt_data_end+0xfffde290>
   43ab4:	21000044 	addi	r4,r4,1
   43ab8:	11000005 	stb	r4,0(r2)
   43abc:	a80b883a 	mov	r5,r21
   43ac0:	e009883a 	mov	r4,fp
   43ac4:	0045fe00 	call	45fe0 <_Bfree>
   43ac8:	883ea026 	beq	r17,zero,4354c <__alt_data_end+0xfffddd4c>
   43acc:	90000426 	beq	r18,zero,43ae0 <_dtoa_r+0xc3c>
   43ad0:	94400326 	beq	r18,r17,43ae0 <_dtoa_r+0xc3c>
   43ad4:	900b883a 	mov	r5,r18
   43ad8:	e009883a 	mov	r4,fp
   43adc:	0045fe00 	call	45fe0 <_Bfree>
   43ae0:	880b883a 	mov	r5,r17
   43ae4:	e009883a 	mov	r4,fp
   43ae8:	0045fe00 	call	45fe0 <_Bfree>
   43aec:	003e9706 	br	4354c <__alt_data_end+0xfffddd4c>
   43af0:	01800044 	movi	r6,1
   43af4:	d9800e15 	stw	r6,56(sp)
   43af8:	003d9606 	br	43154 <__alt_data_end+0xfffdd954>
   43afc:	d8800817 	ldw	r2,32(sp)
   43b00:	d8c00517 	ldw	r3,20(sp)
   43b04:	d8000d15 	stw	zero,52(sp)
   43b08:	10c5c83a 	sub	r2,r2,r3
   43b0c:	00c9c83a 	sub	r4,zero,r3
   43b10:	d8800815 	stw	r2,32(sp)
   43b14:	d9000a15 	stw	r4,40(sp)
   43b18:	003d9706 	br	43178 <__alt_data_end+0xfffdd978>
   43b1c:	05adc83a 	sub	r22,zero,r22
   43b20:	dd800815 	stw	r22,32(sp)
   43b24:	002d883a 	mov	r22,zero
   43b28:	003d8e06 	br	43164 <__alt_data_end+0xfffdd964>
   43b2c:	d9000517 	ldw	r4,20(sp)
   43b30:	004d3640 	call	4d364 <__floatsidf>
   43b34:	100d883a 	mov	r6,r2
   43b38:	180f883a 	mov	r7,r3
   43b3c:	a009883a 	mov	r4,r20
   43b40:	880b883a 	mov	r5,r17
   43b44:	004bf240 	call	4bf24 <__eqdf2>
   43b48:	103d7126 	beq	r2,zero,43110 <__alt_data_end+0xfffdd910>
   43b4c:	d9c00517 	ldw	r7,20(sp)
   43b50:	39ffffc4 	addi	r7,r7,-1
   43b54:	d9c00515 	stw	r7,20(sp)
   43b58:	003d6d06 	br	43110 <__alt_data_end+0xfffdd910>
   43b5c:	dd400a17 	ldw	r21,40(sp)
   43b60:	dd000817 	ldw	r20,32(sp)
   43b64:	0023883a 	mov	r17,zero
   43b68:	003f4806 	br	4388c <__alt_data_end+0xfffde08c>
   43b6c:	10e3c83a 	sub	r17,r2,r3
   43b70:	9448983a 	sll	r4,r18,r17
   43b74:	003d3206 	br	43040 <__alt_data_end+0xfffdd840>
   43b78:	d8000e15 	stw	zero,56(sp)
   43b7c:	003d7506 	br	43154 <__alt_data_end+0xfffdd954>
   43b80:	b005883a 	mov	r2,r22
   43b84:	003f4506 	br	4389c <__alt_data_end+0xfffde09c>
   43b88:	dc000915 	stw	r16,36(sp)
   43b8c:	d9800a17 	ldw	r6,40(sp)
   43b90:	d9400917 	ldw	r5,36(sp)
   43b94:	e009883a 	mov	r4,fp
   43b98:	00466340 	call	46634 <__pow5mult>
   43b9c:	1021883a 	mov	r16,r2
   43ba0:	003f5a06 	br	4390c <__alt_data_end+0xfffde10c>
   43ba4:	01c00044 	movi	r7,1
   43ba8:	d9c00b15 	stw	r7,44(sp)
   43bac:	d8802217 	ldw	r2,136(sp)
   43bb0:	0081280e 	bge	zero,r2,44054 <_dtoa_r+0x11b0>
   43bb4:	100d883a 	mov	r6,r2
   43bb8:	1021883a 	mov	r16,r2
   43bbc:	d8800c15 	stw	r2,48(sp)
   43bc0:	d8800615 	stw	r2,24(sp)
   43bc4:	003d8806 	br	431e8 <__alt_data_end+0xfffdd9e8>
   43bc8:	d8800617 	ldw	r2,24(sp)
   43bcc:	00be9b16 	blt	zero,r2,4363c <__alt_data_end+0xfffdde3c>
   43bd0:	10010f1e 	bne	r2,zero,44010 <_dtoa_r+0x116c>
   43bd4:	880b883a 	mov	r5,r17
   43bd8:	000d883a 	mov	r6,zero
   43bdc:	01d00534 	movhi	r7,16404
   43be0:	8009883a 	mov	r4,r16
   43be4:	004c17c0 	call	4c17c <__muldf3>
   43be8:	900d883a 	mov	r6,r18
   43bec:	980f883a 	mov	r7,r19
   43bf0:	1009883a 	mov	r4,r2
   43bf4:	180b883a 	mov	r5,r3
   43bf8:	004bfac0 	call	4bfac <__gedf2>
   43bfc:	002b883a 	mov	r21,zero
   43c00:	0023883a 	mov	r17,zero
   43c04:	1000bf16 	blt	r2,zero,43f04 <_dtoa_r+0x1060>
   43c08:	d9802217 	ldw	r6,136(sp)
   43c0c:	ddc00717 	ldw	r23,28(sp)
   43c10:	018c303a 	nor	r6,zero,r6
   43c14:	d9800515 	stw	r6,20(sp)
   43c18:	a80b883a 	mov	r5,r21
   43c1c:	e009883a 	mov	r4,fp
   43c20:	0045fe00 	call	45fe0 <_Bfree>
   43c24:	883e4926 	beq	r17,zero,4354c <__alt_data_end+0xfffddd4c>
   43c28:	003fad06 	br	43ae0 <__alt_data_end+0xfffde2e0>
   43c2c:	d9c01117 	ldw	r7,68(sp)
   43c30:	3801bc26 	beq	r7,zero,44324 <_dtoa_r+0x1480>
   43c34:	10810cc4 	addi	r2,r2,1075
   43c38:	dd400a17 	ldw	r21,40(sp)
   43c3c:	dd000817 	ldw	r20,32(sp)
   43c40:	003f0a06 	br	4386c <__alt_data_end+0xfffde06c>
   43c44:	00800704 	movi	r2,28
   43c48:	d9000817 	ldw	r4,32(sp)
   43c4c:	a0a9883a 	add	r20,r20,r2
   43c50:	b0ad883a 	add	r22,r22,r2
   43c54:	2089883a 	add	r4,r4,r2
   43c58:	d9000815 	stw	r4,32(sp)
   43c5c:	003f5106 	br	439a4 <__alt_data_end+0xfffde1a4>
   43c60:	d8c00317 	ldw	r3,12(sp)
   43c64:	b8c1fc0e 	bge	r23,r3,44458 <_dtoa_r+0x15b4>
   43c68:	0027883a 	mov	r19,zero
   43c6c:	b805883a 	mov	r2,r23
   43c70:	003f3e06 	br	4396c <__alt_data_end+0xfffde16c>
   43c74:	880b883a 	mov	r5,r17
   43c78:	e009883a 	mov	r4,fp
   43c7c:	000f883a 	mov	r7,zero
   43c80:	01800284 	movi	r6,10
   43c84:	00460080 	call	46008 <__multadd>
   43c88:	d9000c17 	ldw	r4,48(sp)
   43c8c:	1023883a 	mov	r17,r2
   43c90:	0102040e 	bge	zero,r4,444a4 <_dtoa_r+0x1600>
   43c94:	d9000615 	stw	r4,24(sp)
   43c98:	0500050e 	bge	zero,r20,43cb0 <_dtoa_r+0xe0c>
   43c9c:	880b883a 	mov	r5,r17
   43ca0:	a00d883a 	mov	r6,r20
   43ca4:	e009883a 	mov	r4,fp
   43ca8:	00467740 	call	46774 <__lshift>
   43cac:	1023883a 	mov	r17,r2
   43cb0:	9801241e 	bne	r19,zero,44144 <_dtoa_r+0x12a0>
   43cb4:	8829883a 	mov	r20,r17
   43cb8:	d9000617 	ldw	r4,24(sp)
   43cbc:	dcc00717 	ldw	r19,28(sp)
   43cc0:	9480004c 	andi	r18,r18,1
   43cc4:	20bfffc4 	addi	r2,r4,-1
   43cc8:	9885883a 	add	r2,r19,r2
   43ccc:	d8800415 	stw	r2,16(sp)
   43cd0:	dc800615 	stw	r18,24(sp)
   43cd4:	a80b883a 	mov	r5,r21
   43cd8:	8009883a 	mov	r4,r16
   43cdc:	0042c7c0 	call	42c7c <quorem>
   43ce0:	880b883a 	mov	r5,r17
   43ce4:	8009883a 	mov	r4,r16
   43ce8:	102f883a 	mov	r23,r2
   43cec:	00468bc0 	call	468bc <__mcmp>
   43cf0:	a80b883a 	mov	r5,r21
   43cf4:	a00d883a 	mov	r6,r20
   43cf8:	e009883a 	mov	r4,fp
   43cfc:	102d883a 	mov	r22,r2
   43d00:	004691c0 	call	4691c <__mdiff>
   43d04:	1007883a 	mov	r3,r2
   43d08:	10800317 	ldw	r2,12(r2)
   43d0c:	bc800c04 	addi	r18,r23,48
   43d10:	180b883a 	mov	r5,r3
   43d14:	10004e1e 	bne	r2,zero,43e50 <_dtoa_r+0xfac>
   43d18:	8009883a 	mov	r4,r16
   43d1c:	d8c01615 	stw	r3,88(sp)
   43d20:	00468bc0 	call	468bc <__mcmp>
   43d24:	d8c01617 	ldw	r3,88(sp)
   43d28:	e009883a 	mov	r4,fp
   43d2c:	d8801615 	stw	r2,88(sp)
   43d30:	180b883a 	mov	r5,r3
   43d34:	0045fe00 	call	45fe0 <_Bfree>
   43d38:	d8801617 	ldw	r2,88(sp)
   43d3c:	1000041e 	bne	r2,zero,43d50 <_dtoa_r+0xeac>
   43d40:	d9800317 	ldw	r6,12(sp)
   43d44:	3000021e 	bne	r6,zero,43d50 <_dtoa_r+0xeac>
   43d48:	d8c00617 	ldw	r3,24(sp)
   43d4c:	18003726 	beq	r3,zero,43e2c <_dtoa_r+0xf88>
   43d50:	b0002016 	blt	r22,zero,43dd4 <_dtoa_r+0xf30>
   43d54:	b000041e 	bne	r22,zero,43d68 <_dtoa_r+0xec4>
   43d58:	d9000317 	ldw	r4,12(sp)
   43d5c:	2000021e 	bne	r4,zero,43d68 <_dtoa_r+0xec4>
   43d60:	d8c00617 	ldw	r3,24(sp)
   43d64:	18001b26 	beq	r3,zero,43dd4 <_dtoa_r+0xf30>
   43d68:	00810716 	blt	zero,r2,44188 <_dtoa_r+0x12e4>
   43d6c:	d8c00417 	ldw	r3,16(sp)
   43d70:	9d800044 	addi	r22,r19,1
   43d74:	9c800005 	stb	r18,0(r19)
   43d78:	b02f883a 	mov	r23,r22
   43d7c:	98c10626 	beq	r19,r3,44198 <_dtoa_r+0x12f4>
   43d80:	800b883a 	mov	r5,r16
   43d84:	000f883a 	mov	r7,zero
   43d88:	01800284 	movi	r6,10
   43d8c:	e009883a 	mov	r4,fp
   43d90:	00460080 	call	46008 <__multadd>
   43d94:	1021883a 	mov	r16,r2
   43d98:	000f883a 	mov	r7,zero
   43d9c:	01800284 	movi	r6,10
   43da0:	880b883a 	mov	r5,r17
   43da4:	e009883a 	mov	r4,fp
   43da8:	8d002526 	beq	r17,r20,43e40 <_dtoa_r+0xf9c>
   43dac:	00460080 	call	46008 <__multadd>
   43db0:	a00b883a 	mov	r5,r20
   43db4:	000f883a 	mov	r7,zero
   43db8:	01800284 	movi	r6,10
   43dbc:	e009883a 	mov	r4,fp
   43dc0:	1023883a 	mov	r17,r2
   43dc4:	00460080 	call	46008 <__multadd>
   43dc8:	1029883a 	mov	r20,r2
   43dcc:	b027883a 	mov	r19,r22
   43dd0:	003fc006 	br	43cd4 <__alt_data_end+0xfffde4d4>
   43dd4:	9011883a 	mov	r8,r18
   43dd8:	00800e0e 	bge	zero,r2,43e14 <_dtoa_r+0xf70>
   43ddc:	800b883a 	mov	r5,r16
   43de0:	01800044 	movi	r6,1
   43de4:	e009883a 	mov	r4,fp
   43de8:	da001715 	stw	r8,92(sp)
   43dec:	00467740 	call	46774 <__lshift>
   43df0:	a80b883a 	mov	r5,r21
   43df4:	1009883a 	mov	r4,r2
   43df8:	1021883a 	mov	r16,r2
   43dfc:	00468bc0 	call	468bc <__mcmp>
   43e00:	da001717 	ldw	r8,92(sp)
   43e04:	0081960e 	bge	zero,r2,44460 <_dtoa_r+0x15bc>
   43e08:	00800e44 	movi	r2,57
   43e0c:	40817026 	beq	r8,r2,443d0 <_dtoa_r+0x152c>
   43e10:	ba000c44 	addi	r8,r23,49
   43e14:	8825883a 	mov	r18,r17
   43e18:	9dc00044 	addi	r23,r19,1
   43e1c:	9a000005 	stb	r8,0(r19)
   43e20:	a023883a 	mov	r17,r20
   43e24:	dc000915 	stw	r16,36(sp)
   43e28:	003f2406 	br	43abc <__alt_data_end+0xfffde2bc>
   43e2c:	00800e44 	movi	r2,57
   43e30:	9011883a 	mov	r8,r18
   43e34:	90816626 	beq	r18,r2,443d0 <_dtoa_r+0x152c>
   43e38:	05bff516 	blt	zero,r22,43e10 <__alt_data_end+0xfffde610>
   43e3c:	003ff506 	br	43e14 <__alt_data_end+0xfffde614>
   43e40:	00460080 	call	46008 <__multadd>
   43e44:	1023883a 	mov	r17,r2
   43e48:	1029883a 	mov	r20,r2
   43e4c:	003fdf06 	br	43dcc <__alt_data_end+0xfffde5cc>
   43e50:	e009883a 	mov	r4,fp
   43e54:	0045fe00 	call	45fe0 <_Bfree>
   43e58:	00800044 	movi	r2,1
   43e5c:	003fbc06 	br	43d50 <__alt_data_end+0xfffde550>
   43e60:	a80b883a 	mov	r5,r21
   43e64:	8009883a 	mov	r4,r16
   43e68:	00468bc0 	call	468bc <__mcmp>
   43e6c:	103edb0e 	bge	r2,zero,439dc <__alt_data_end+0xfffde1dc>
   43e70:	800b883a 	mov	r5,r16
   43e74:	000f883a 	mov	r7,zero
   43e78:	01800284 	movi	r6,10
   43e7c:	e009883a 	mov	r4,fp
   43e80:	00460080 	call	46008 <__multadd>
   43e84:	1021883a 	mov	r16,r2
   43e88:	d8800517 	ldw	r2,20(sp)
   43e8c:	d8c00b17 	ldw	r3,44(sp)
   43e90:	10bfffc4 	addi	r2,r2,-1
   43e94:	d8800515 	stw	r2,20(sp)
   43e98:	183f761e 	bne	r3,zero,43c74 <__alt_data_end+0xfffde474>
   43e9c:	d9000c17 	ldw	r4,48(sp)
   43ea0:	0101730e 	bge	zero,r4,44470 <_dtoa_r+0x15cc>
   43ea4:	d9000615 	stw	r4,24(sp)
   43ea8:	003ed006 	br	439ec <__alt_data_end+0xfffde1ec>
   43eac:	00800084 	movi	r2,2
   43eb0:	3081861e 	bne	r6,r2,444cc <_dtoa_r+0x1628>
   43eb4:	d8000b15 	stw	zero,44(sp)
   43eb8:	003f3c06 	br	43bac <__alt_data_end+0xfffde3ac>
   43ebc:	dc000917 	ldw	r16,36(sp)
   43ec0:	003e9206 	br	4390c <__alt_data_end+0xfffde10c>
   43ec4:	d9c00317 	ldw	r7,12(sp)
   43ec8:	00800084 	movi	r2,2
   43ecc:	11fec50e 	bge	r2,r7,439e4 <__alt_data_end+0xfffde1e4>
   43ed0:	d9000617 	ldw	r4,24(sp)
   43ed4:	20013c1e 	bne	r4,zero,443c8 <_dtoa_r+0x1524>
   43ed8:	a80b883a 	mov	r5,r21
   43edc:	000f883a 	mov	r7,zero
   43ee0:	01800144 	movi	r6,5
   43ee4:	e009883a 	mov	r4,fp
   43ee8:	00460080 	call	46008 <__multadd>
   43eec:	100b883a 	mov	r5,r2
   43ef0:	8009883a 	mov	r4,r16
   43ef4:	102b883a 	mov	r21,r2
   43ef8:	00468bc0 	call	468bc <__mcmp>
   43efc:	dc000915 	stw	r16,36(sp)
   43f00:	00bf410e 	bge	zero,r2,43c08 <__alt_data_end+0xfffde408>
   43f04:	d9c00717 	ldw	r7,28(sp)
   43f08:	00800c44 	movi	r2,49
   43f0c:	38800005 	stb	r2,0(r7)
   43f10:	d8800517 	ldw	r2,20(sp)
   43f14:	3dc00044 	addi	r23,r7,1
   43f18:	10800044 	addi	r2,r2,1
   43f1c:	d8800515 	stw	r2,20(sp)
   43f20:	003f3d06 	br	43c18 <__alt_data_end+0xfffde418>
   43f24:	d9800517 	ldw	r6,20(sp)
   43f28:	d9c00717 	ldw	r7,28(sp)
   43f2c:	00800c44 	movi	r2,49
   43f30:	31800044 	addi	r6,r6,1
   43f34:	d9800515 	stw	r6,20(sp)
   43f38:	38800005 	stb	r2,0(r7)
   43f3c:	003edf06 	br	43abc <__alt_data_end+0xfffde2bc>
   43f40:	d8000b15 	stw	zero,44(sp)
   43f44:	003c9f06 	br	431c4 <__alt_data_end+0xfffdd9c4>
   43f48:	903e7e1e 	bne	r18,zero,43944 <__alt_data_end+0xfffde144>
   43f4c:	00800434 	movhi	r2,16
   43f50:	10bfffc4 	addi	r2,r2,-1
   43f54:	9884703a 	and	r2,r19,r2
   43f58:	1000ea1e 	bne	r2,zero,44304 <_dtoa_r+0x1460>
   43f5c:	9cdffc2c 	andhi	r19,r19,32752
   43f60:	9800e826 	beq	r19,zero,44304 <_dtoa_r+0x1460>
   43f64:	d9c00817 	ldw	r7,32(sp)
   43f68:	b5800044 	addi	r22,r22,1
   43f6c:	04c00044 	movi	r19,1
   43f70:	39c00044 	addi	r7,r7,1
   43f74:	d9c00815 	stw	r7,32(sp)
   43f78:	d8800d17 	ldw	r2,52(sp)
   43f7c:	103e721e 	bne	r2,zero,43948 <__alt_data_end+0xfffde148>
   43f80:	00800044 	movi	r2,1
   43f84:	003e7906 	br	4396c <__alt_data_end+0xfffde16c>
   43f88:	8009883a 	mov	r4,r16
   43f8c:	004d3640 	call	4d364 <__floatsidf>
   43f90:	d9800f17 	ldw	r6,60(sp)
   43f94:	d9c01017 	ldw	r7,64(sp)
   43f98:	1009883a 	mov	r4,r2
   43f9c:	180b883a 	mov	r5,r3
   43fa0:	004c17c0 	call	4c17c <__muldf3>
   43fa4:	000d883a 	mov	r6,zero
   43fa8:	01d00734 	movhi	r7,16412
   43fac:	1009883a 	mov	r4,r2
   43fb0:	180b883a 	mov	r5,r3
   43fb4:	004aca80 	call	4aca8 <__adddf3>
   43fb8:	047f3034 	movhi	r17,64704
   43fbc:	1021883a 	mov	r16,r2
   43fc0:	1c63883a 	add	r17,r3,r17
   43fc4:	d9000f17 	ldw	r4,60(sp)
   43fc8:	d9401017 	ldw	r5,64(sp)
   43fcc:	000d883a 	mov	r6,zero
   43fd0:	01d00534 	movhi	r7,16404
   43fd4:	004c9e80 	call	4c9e8 <__subdf3>
   43fd8:	800d883a 	mov	r6,r16
   43fdc:	880f883a 	mov	r7,r17
   43fe0:	1009883a 	mov	r4,r2
   43fe4:	180b883a 	mov	r5,r3
   43fe8:	102b883a 	mov	r21,r2
   43fec:	1829883a 	mov	r20,r3
   43ff0:	004bfac0 	call	4bfac <__gedf2>
   43ff4:	00806c16 	blt	zero,r2,441a8 <_dtoa_r+0x1304>
   43ff8:	89e0003c 	xorhi	r7,r17,32768
   43ffc:	800d883a 	mov	r6,r16
   44000:	a809883a 	mov	r4,r21
   44004:	a00b883a 	mov	r5,r20
   44008:	004c0880 	call	4c088 <__ledf2>
   4400c:	103d7e0e 	bge	r2,zero,43608 <__alt_data_end+0xfffdde08>
   44010:	002b883a 	mov	r21,zero
   44014:	0023883a 	mov	r17,zero
   44018:	003efb06 	br	43c08 <__alt_data_end+0xfffde408>
   4401c:	d8800717 	ldw	r2,28(sp)
   44020:	003bd006 	br	42f64 <__alt_data_end+0xfffdd764>
   44024:	d9000a17 	ldw	r4,40(sp)
   44028:	d9800d17 	ldw	r6,52(sp)
   4402c:	dd400a15 	stw	r21,40(sp)
   44030:	a905c83a 	sub	r2,r21,r4
   44034:	308d883a 	add	r6,r6,r2
   44038:	d9800d15 	stw	r6,52(sp)
   4403c:	002b883a 	mov	r21,zero
   44040:	003e0606 	br	4385c <__alt_data_end+0xfffde05c>
   44044:	9023883a 	mov	r17,r18
   44048:	9829883a 	mov	r20,r19
   4404c:	04000084 	movi	r16,2
   44050:	003c9206 	br	4329c <__alt_data_end+0xfffdda9c>
   44054:	04000044 	movi	r16,1
   44058:	dc000c15 	stw	r16,48(sp)
   4405c:	dc000615 	stw	r16,24(sp)
   44060:	dc002215 	stw	r16,136(sp)
   44064:	e0001115 	stw	zero,68(fp)
   44068:	000b883a 	mov	r5,zero
   4406c:	003c6906 	br	43214 <__alt_data_end+0xfffdda14>
   44070:	3021883a 	mov	r16,r6
   44074:	003ffb06 	br	44064 <__alt_data_end+0xfffde864>
   44078:	1000021e 	bne	r2,zero,44084 <_dtoa_r+0x11e0>
   4407c:	4200004c 	andi	r8,r8,1
   44080:	403e7d1e 	bne	r8,zero,43a78 <__alt_data_end+0xfffde278>
   44084:	01000c04 	movi	r4,48
   44088:	00000106 	br	44090 <_dtoa_r+0x11ec>
   4408c:	102f883a 	mov	r23,r2
   44090:	b8bfffc4 	addi	r2,r23,-1
   44094:	10c00007 	ldb	r3,0(r2)
   44098:	193ffc26 	beq	r3,r4,4408c <__alt_data_end+0xfffde88c>
   4409c:	003e8706 	br	43abc <__alt_data_end+0xfffde2bc>
   440a0:	d8800517 	ldw	r2,20(sp)
   440a4:	00a3c83a 	sub	r17,zero,r2
   440a8:	8800a426 	beq	r17,zero,4433c <_dtoa_r+0x1498>
   440ac:	888003cc 	andi	r2,r17,15
   440b0:	100490fa 	slli	r2,r2,3
   440b4:	00c001b4 	movhi	r3,6
   440b8:	18e33204 	addi	r3,r3,-29496
   440bc:	1885883a 	add	r2,r3,r2
   440c0:	11800017 	ldw	r6,0(r2)
   440c4:	11c00117 	ldw	r7,4(r2)
   440c8:	9009883a 	mov	r4,r18
   440cc:	980b883a 	mov	r5,r19
   440d0:	8823d13a 	srai	r17,r17,4
   440d4:	004c17c0 	call	4c17c <__muldf3>
   440d8:	d8800f15 	stw	r2,60(sp)
   440dc:	d8c01015 	stw	r3,64(sp)
   440e0:	8800e826 	beq	r17,zero,44484 <_dtoa_r+0x15e0>
   440e4:	050001b4 	movhi	r20,6
   440e8:	a5232804 	addi	r20,r20,-29536
   440ec:	04000084 	movi	r16,2
   440f0:	8980004c 	andi	r6,r17,1
   440f4:	1009883a 	mov	r4,r2
   440f8:	8823d07a 	srai	r17,r17,1
   440fc:	180b883a 	mov	r5,r3
   44100:	30000426 	beq	r6,zero,44114 <_dtoa_r+0x1270>
   44104:	a1800017 	ldw	r6,0(r20)
   44108:	a1c00117 	ldw	r7,4(r20)
   4410c:	84000044 	addi	r16,r16,1
   44110:	004c17c0 	call	4c17c <__muldf3>
   44114:	a5000204 	addi	r20,r20,8
   44118:	883ff51e 	bne	r17,zero,440f0 <__alt_data_end+0xfffde8f0>
   4411c:	d8800f15 	stw	r2,60(sp)
   44120:	d8c01015 	stw	r3,64(sp)
   44124:	003c7606 	br	43300 <__alt_data_end+0xfffddb00>
   44128:	00c00c04 	movi	r3,48
   4412c:	10c00005 	stb	r3,0(r2)
   44130:	d8c00517 	ldw	r3,20(sp)
   44134:	bd3fffc3 	ldbu	r20,-1(r23)
   44138:	18c00044 	addi	r3,r3,1
   4413c:	d8c00515 	stw	r3,20(sp)
   44140:	003db906 	br	43828 <__alt_data_end+0xfffde028>
   44144:	89400117 	ldw	r5,4(r17)
   44148:	e009883a 	mov	r4,fp
   4414c:	0045f380 	call	45f38 <_Balloc>
   44150:	89800417 	ldw	r6,16(r17)
   44154:	89400304 	addi	r5,r17,12
   44158:	11000304 	addi	r4,r2,12
   4415c:	31800084 	addi	r6,r6,2
   44160:	318d883a 	add	r6,r6,r6
   44164:	318d883a 	add	r6,r6,r6
   44168:	1027883a 	mov	r19,r2
   4416c:	0045cc80 	call	45cc8 <memcpy>
   44170:	01800044 	movi	r6,1
   44174:	980b883a 	mov	r5,r19
   44178:	e009883a 	mov	r4,fp
   4417c:	00467740 	call	46774 <__lshift>
   44180:	1029883a 	mov	r20,r2
   44184:	003ecc06 	br	43cb8 <__alt_data_end+0xfffde4b8>
   44188:	00800e44 	movi	r2,57
   4418c:	90809026 	beq	r18,r2,443d0 <_dtoa_r+0x152c>
   44190:	92000044 	addi	r8,r18,1
   44194:	003f1f06 	br	43e14 <__alt_data_end+0xfffde614>
   44198:	9011883a 	mov	r8,r18
   4419c:	8825883a 	mov	r18,r17
   441a0:	a023883a 	mov	r17,r20
   441a4:	003e2906 	br	43a4c <__alt_data_end+0xfffde24c>
   441a8:	002b883a 	mov	r21,zero
   441ac:	0023883a 	mov	r17,zero
   441b0:	003f5406 	br	43f04 <__alt_data_end+0xfffde704>
   441b4:	61bfffc4 	addi	r6,r12,-1
   441b8:	300490fa 	slli	r2,r6,3
   441bc:	00c001b4 	movhi	r3,6
   441c0:	18e33204 	addi	r3,r3,-29496
   441c4:	1885883a 	add	r2,r3,r2
   441c8:	11000017 	ldw	r4,0(r2)
   441cc:	11400117 	ldw	r5,4(r2)
   441d0:	d8800717 	ldw	r2,28(sp)
   441d4:	880f883a 	mov	r7,r17
   441d8:	d9801215 	stw	r6,72(sp)
   441dc:	800d883a 	mov	r6,r16
   441e0:	db001615 	stw	r12,88(sp)
   441e4:	15c00044 	addi	r23,r2,1
   441e8:	004c17c0 	call	4c17c <__muldf3>
   441ec:	d9401017 	ldw	r5,64(sp)
   441f0:	d9000f17 	ldw	r4,60(sp)
   441f4:	d8c01515 	stw	r3,84(sp)
   441f8:	d8801415 	stw	r2,80(sp)
   441fc:	004d2e40 	call	4d2e4 <__fixdfsi>
   44200:	1009883a 	mov	r4,r2
   44204:	1021883a 	mov	r16,r2
   44208:	004d3640 	call	4d364 <__floatsidf>
   4420c:	d9000f17 	ldw	r4,60(sp)
   44210:	d9401017 	ldw	r5,64(sp)
   44214:	100d883a 	mov	r6,r2
   44218:	180f883a 	mov	r7,r3
   4421c:	004c9e80 	call	4c9e8 <__subdf3>
   44220:	1829883a 	mov	r20,r3
   44224:	d8c00717 	ldw	r3,28(sp)
   44228:	84000c04 	addi	r16,r16,48
   4422c:	1023883a 	mov	r17,r2
   44230:	1c000005 	stb	r16,0(r3)
   44234:	db001617 	ldw	r12,88(sp)
   44238:	00800044 	movi	r2,1
   4423c:	60802226 	beq	r12,r2,442c8 <_dtoa_r+0x1424>
   44240:	d9c00717 	ldw	r7,28(sp)
   44244:	8805883a 	mov	r2,r17
   44248:	b82b883a 	mov	r21,r23
   4424c:	3b19883a 	add	r12,r7,r12
   44250:	6023883a 	mov	r17,r12
   44254:	a007883a 	mov	r3,r20
   44258:	dc800f15 	stw	r18,60(sp)
   4425c:	000d883a 	mov	r6,zero
   44260:	01d00934 	movhi	r7,16420
   44264:	1009883a 	mov	r4,r2
   44268:	180b883a 	mov	r5,r3
   4426c:	004c17c0 	call	4c17c <__muldf3>
   44270:	180b883a 	mov	r5,r3
   44274:	1009883a 	mov	r4,r2
   44278:	1829883a 	mov	r20,r3
   4427c:	1025883a 	mov	r18,r2
   44280:	004d2e40 	call	4d2e4 <__fixdfsi>
   44284:	1009883a 	mov	r4,r2
   44288:	1021883a 	mov	r16,r2
   4428c:	004d3640 	call	4d364 <__floatsidf>
   44290:	100d883a 	mov	r6,r2
   44294:	180f883a 	mov	r7,r3
   44298:	9009883a 	mov	r4,r18
   4429c:	a00b883a 	mov	r5,r20
   442a0:	84000c04 	addi	r16,r16,48
   442a4:	004c9e80 	call	4c9e8 <__subdf3>
   442a8:	ad400044 	addi	r21,r21,1
   442ac:	ac3fffc5 	stb	r16,-1(r21)
   442b0:	ac7fea1e 	bne	r21,r17,4425c <__alt_data_end+0xfffdea5c>
   442b4:	1023883a 	mov	r17,r2
   442b8:	d8801217 	ldw	r2,72(sp)
   442bc:	dc800f17 	ldw	r18,60(sp)
   442c0:	1829883a 	mov	r20,r3
   442c4:	b8af883a 	add	r23,r23,r2
   442c8:	d9001417 	ldw	r4,80(sp)
   442cc:	d9401517 	ldw	r5,84(sp)
   442d0:	000d883a 	mov	r6,zero
   442d4:	01cff834 	movhi	r7,16352
   442d8:	004aca80 	call	4aca8 <__adddf3>
   442dc:	880d883a 	mov	r6,r17
   442e0:	a00f883a 	mov	r7,r20
   442e4:	1009883a 	mov	r4,r2
   442e8:	180b883a 	mov	r5,r3
   442ec:	004c0880 	call	4c088 <__ledf2>
   442f0:	10003e0e 	bge	r2,zero,443ec <_dtoa_r+0x1548>
   442f4:	d9001317 	ldw	r4,76(sp)
   442f8:	bd3fffc3 	ldbu	r20,-1(r23)
   442fc:	d9000515 	stw	r4,20(sp)
   44300:	003d3b06 	br	437f0 <__alt_data_end+0xfffddff0>
   44304:	0027883a 	mov	r19,zero
   44308:	003f1b06 	br	43f78 <__alt_data_end+0xfffde778>
   4430c:	d8800817 	ldw	r2,32(sp)
   44310:	11e9c83a 	sub	r20,r2,r7
   44314:	0005883a 	mov	r2,zero
   44318:	003d5406 	br	4386c <__alt_data_end+0xfffde06c>
   4431c:	00800044 	movi	r2,1
   44320:	003dc706 	br	43a40 <__alt_data_end+0xfffde240>
   44324:	d8c00217 	ldw	r3,8(sp)
   44328:	00800d84 	movi	r2,54
   4432c:	dd400a17 	ldw	r21,40(sp)
   44330:	10c5c83a 	sub	r2,r2,r3
   44334:	dd000817 	ldw	r20,32(sp)
   44338:	003d4c06 	br	4386c <__alt_data_end+0xfffde06c>
   4433c:	dc800f15 	stw	r18,60(sp)
   44340:	dcc01015 	stw	r19,64(sp)
   44344:	04000084 	movi	r16,2
   44348:	003bed06 	br	43300 <__alt_data_end+0xfffddb00>
   4434c:	d9000617 	ldw	r4,24(sp)
   44350:	203f0d26 	beq	r4,zero,43f88 <__alt_data_end+0xfffde788>
   44354:	d9800c17 	ldw	r6,48(sp)
   44358:	01bcab0e 	bge	zero,r6,43608 <__alt_data_end+0xfffdde08>
   4435c:	d9401017 	ldw	r5,64(sp)
   44360:	d9000f17 	ldw	r4,60(sp)
   44364:	000d883a 	mov	r6,zero
   44368:	01d00934 	movhi	r7,16420
   4436c:	004c17c0 	call	4c17c <__muldf3>
   44370:	81000044 	addi	r4,r16,1
   44374:	d8800f15 	stw	r2,60(sp)
   44378:	d8c01015 	stw	r3,64(sp)
   4437c:	004d3640 	call	4d364 <__floatsidf>
   44380:	d9800f17 	ldw	r6,60(sp)
   44384:	d9c01017 	ldw	r7,64(sp)
   44388:	1009883a 	mov	r4,r2
   4438c:	180b883a 	mov	r5,r3
   44390:	004c17c0 	call	4c17c <__muldf3>
   44394:	01d00734 	movhi	r7,16412
   44398:	000d883a 	mov	r6,zero
   4439c:	1009883a 	mov	r4,r2
   443a0:	180b883a 	mov	r5,r3
   443a4:	004aca80 	call	4aca8 <__adddf3>
   443a8:	d9c00517 	ldw	r7,20(sp)
   443ac:	047f3034 	movhi	r17,64704
   443b0:	1021883a 	mov	r16,r2
   443b4:	39ffffc4 	addi	r7,r7,-1
   443b8:	d9c01315 	stw	r7,76(sp)
   443bc:	1c63883a 	add	r17,r3,r17
   443c0:	db000c17 	ldw	r12,48(sp)
   443c4:	003bea06 	br	43370 <__alt_data_end+0xfffddb70>
   443c8:	dc000915 	stw	r16,36(sp)
   443cc:	003e0e06 	br	43c08 <__alt_data_end+0xfffde408>
   443d0:	01000e44 	movi	r4,57
   443d4:	8825883a 	mov	r18,r17
   443d8:	9dc00044 	addi	r23,r19,1
   443dc:	99000005 	stb	r4,0(r19)
   443e0:	a023883a 	mov	r17,r20
   443e4:	dc000915 	stw	r16,36(sp)
   443e8:	003da406 	br	43a7c <__alt_data_end+0xfffde27c>
   443ec:	d9801417 	ldw	r6,80(sp)
   443f0:	d9c01517 	ldw	r7,84(sp)
   443f4:	0009883a 	mov	r4,zero
   443f8:	014ff834 	movhi	r5,16352
   443fc:	004c9e80 	call	4c9e8 <__subdf3>
   44400:	880d883a 	mov	r6,r17
   44404:	a00f883a 	mov	r7,r20
   44408:	1009883a 	mov	r4,r2
   4440c:	180b883a 	mov	r5,r3
   44410:	004bfac0 	call	4bfac <__gedf2>
   44414:	00bc7c0e 	bge	zero,r2,43608 <__alt_data_end+0xfffdde08>
   44418:	01000c04 	movi	r4,48
   4441c:	00000106 	br	44424 <_dtoa_r+0x1580>
   44420:	102f883a 	mov	r23,r2
   44424:	b8bfffc4 	addi	r2,r23,-1
   44428:	10c00007 	ldb	r3,0(r2)
   4442c:	193ffc26 	beq	r3,r4,44420 <__alt_data_end+0xfffdec20>
   44430:	d9801317 	ldw	r6,76(sp)
   44434:	d9800515 	stw	r6,20(sp)
   44438:	003c4406 	br	4354c <__alt_data_end+0xfffddd4c>
   4443c:	d9801317 	ldw	r6,76(sp)
   44440:	d9800515 	stw	r6,20(sp)
   44444:	003cea06 	br	437f0 <__alt_data_end+0xfffddff0>
   44448:	dd800f17 	ldw	r22,60(sp)
   4444c:	dcc01017 	ldw	r19,64(sp)
   44450:	dc801217 	ldw	r18,72(sp)
   44454:	003c6c06 	br	43608 <__alt_data_end+0xfffdde08>
   44458:	903e031e 	bne	r18,zero,43c68 <__alt_data_end+0xfffde468>
   4445c:	003ebb06 	br	43f4c <__alt_data_end+0xfffde74c>
   44460:	103e6c1e 	bne	r2,zero,43e14 <__alt_data_end+0xfffde614>
   44464:	4080004c 	andi	r2,r8,1
   44468:	103e6a26 	beq	r2,zero,43e14 <__alt_data_end+0xfffde614>
   4446c:	003e6606 	br	43e08 <__alt_data_end+0xfffde608>
   44470:	d8c00317 	ldw	r3,12(sp)
   44474:	00800084 	movi	r2,2
   44478:	10c02916 	blt	r2,r3,44520 <_dtoa_r+0x167c>
   4447c:	d9000c17 	ldw	r4,48(sp)
   44480:	003e8806 	br	43ea4 <__alt_data_end+0xfffde6a4>
   44484:	04000084 	movi	r16,2
   44488:	003b9d06 	br	43300 <__alt_data_end+0xfffddb00>
   4448c:	d9001317 	ldw	r4,76(sp)
   44490:	d9000515 	stw	r4,20(sp)
   44494:	003cd606 	br	437f0 <__alt_data_end+0xfffddff0>
   44498:	d8801317 	ldw	r2,76(sp)
   4449c:	d8800515 	stw	r2,20(sp)
   444a0:	003c2a06 	br	4354c <__alt_data_end+0xfffddd4c>
   444a4:	d9800317 	ldw	r6,12(sp)
   444a8:	00800084 	movi	r2,2
   444ac:	11801516 	blt	r2,r6,44504 <_dtoa_r+0x1660>
   444b0:	d9c00c17 	ldw	r7,48(sp)
   444b4:	d9c00615 	stw	r7,24(sp)
   444b8:	003df706 	br	43c98 <__alt_data_end+0xfffde498>
   444bc:	193d3926 	beq	r3,r4,439a4 <__alt_data_end+0xfffde1a4>
   444c0:	00c00f04 	movi	r3,60
   444c4:	1885c83a 	sub	r2,r3,r2
   444c8:	003ddf06 	br	43c48 <__alt_data_end+0xfffde448>
   444cc:	e009883a 	mov	r4,fp
   444d0:	e0001115 	stw	zero,68(fp)
   444d4:	000b883a 	mov	r5,zero
   444d8:	0045f380 	call	45f38 <_Balloc>
   444dc:	d8800715 	stw	r2,28(sp)
   444e0:	d8c00717 	ldw	r3,28(sp)
   444e4:	00bfffc4 	movi	r2,-1
   444e8:	01000044 	movi	r4,1
   444ec:	d8800c15 	stw	r2,48(sp)
   444f0:	e0c01015 	stw	r3,64(fp)
   444f4:	d9000b15 	stw	r4,44(sp)
   444f8:	d8800615 	stw	r2,24(sp)
   444fc:	d8002215 	stw	zero,136(sp)
   44500:	003c4106 	br	43608 <__alt_data_end+0xfffdde08>
   44504:	d8c00c17 	ldw	r3,48(sp)
   44508:	d8c00615 	stw	r3,24(sp)
   4450c:	003e7006 	br	43ed0 <__alt_data_end+0xfffde6d0>
   44510:	04400044 	movi	r17,1
   44514:	003b2006 	br	43198 <__alt_data_end+0xfffdd998>
   44518:	000b883a 	mov	r5,zero
   4451c:	003b3d06 	br	43214 <__alt_data_end+0xfffdda14>
   44520:	d8800c17 	ldw	r2,48(sp)
   44524:	d8800615 	stw	r2,24(sp)
   44528:	003e6906 	br	43ed0 <__alt_data_end+0xfffde6d0>

0004452c <__sflush_r>:
   4452c:	2880030b 	ldhu	r2,12(r5)
   44530:	defffb04 	addi	sp,sp,-20
   44534:	dcc00315 	stw	r19,12(sp)
   44538:	dc400115 	stw	r17,4(sp)
   4453c:	dfc00415 	stw	ra,16(sp)
   44540:	dc800215 	stw	r18,8(sp)
   44544:	dc000015 	stw	r16,0(sp)
   44548:	10c0020c 	andi	r3,r2,8
   4454c:	2823883a 	mov	r17,r5
   44550:	2027883a 	mov	r19,r4
   44554:	1800311e 	bne	r3,zero,4461c <__sflush_r+0xf0>
   44558:	28c00117 	ldw	r3,4(r5)
   4455c:	10820014 	ori	r2,r2,2048
   44560:	2880030d 	sth	r2,12(r5)
   44564:	00c04b0e 	bge	zero,r3,44694 <__sflush_r+0x168>
   44568:	8a000a17 	ldw	r8,40(r17)
   4456c:	40002326 	beq	r8,zero,445fc <__sflush_r+0xd0>
   44570:	9c000017 	ldw	r16,0(r19)
   44574:	10c4000c 	andi	r3,r2,4096
   44578:	98000015 	stw	zero,0(r19)
   4457c:	18004826 	beq	r3,zero,446a0 <__sflush_r+0x174>
   44580:	89801417 	ldw	r6,80(r17)
   44584:	10c0010c 	andi	r3,r2,4
   44588:	18000626 	beq	r3,zero,445a4 <__sflush_r+0x78>
   4458c:	88c00117 	ldw	r3,4(r17)
   44590:	88800c17 	ldw	r2,48(r17)
   44594:	30cdc83a 	sub	r6,r6,r3
   44598:	10000226 	beq	r2,zero,445a4 <__sflush_r+0x78>
   4459c:	88800f17 	ldw	r2,60(r17)
   445a0:	308dc83a 	sub	r6,r6,r2
   445a4:	89400717 	ldw	r5,28(r17)
   445a8:	000f883a 	mov	r7,zero
   445ac:	9809883a 	mov	r4,r19
   445b0:	403ee83a 	callr	r8
   445b4:	00ffffc4 	movi	r3,-1
   445b8:	10c04426 	beq	r2,r3,446cc <__sflush_r+0x1a0>
   445bc:	88c0030b 	ldhu	r3,12(r17)
   445c0:	89000417 	ldw	r4,16(r17)
   445c4:	88000115 	stw	zero,4(r17)
   445c8:	197dffcc 	andi	r5,r3,63487
   445cc:	8940030d 	sth	r5,12(r17)
   445d0:	89000015 	stw	r4,0(r17)
   445d4:	18c4000c 	andi	r3,r3,4096
   445d8:	18002c1e 	bne	r3,zero,4468c <__sflush_r+0x160>
   445dc:	89400c17 	ldw	r5,48(r17)
   445e0:	9c000015 	stw	r16,0(r19)
   445e4:	28000526 	beq	r5,zero,445fc <__sflush_r+0xd0>
   445e8:	88801004 	addi	r2,r17,64
   445ec:	28800226 	beq	r5,r2,445f8 <__sflush_r+0xcc>
   445f0:	9809883a 	mov	r4,r19
   445f4:	0044ca80 	call	44ca8 <_free_r>
   445f8:	88000c15 	stw	zero,48(r17)
   445fc:	0005883a 	mov	r2,zero
   44600:	dfc00417 	ldw	ra,16(sp)
   44604:	dcc00317 	ldw	r19,12(sp)
   44608:	dc800217 	ldw	r18,8(sp)
   4460c:	dc400117 	ldw	r17,4(sp)
   44610:	dc000017 	ldw	r16,0(sp)
   44614:	dec00504 	addi	sp,sp,20
   44618:	f800283a 	ret
   4461c:	2c800417 	ldw	r18,16(r5)
   44620:	903ff626 	beq	r18,zero,445fc <__alt_data_end+0xfffdedfc>
   44624:	2c000017 	ldw	r16,0(r5)
   44628:	108000cc 	andi	r2,r2,3
   4462c:	2c800015 	stw	r18,0(r5)
   44630:	84a1c83a 	sub	r16,r16,r18
   44634:	1000131e 	bne	r2,zero,44684 <__sflush_r+0x158>
   44638:	28800517 	ldw	r2,20(r5)
   4463c:	88800215 	stw	r2,8(r17)
   44640:	04000316 	blt	zero,r16,44650 <__sflush_r+0x124>
   44644:	003fed06 	br	445fc <__alt_data_end+0xfffdedfc>
   44648:	90a5883a 	add	r18,r18,r2
   4464c:	043feb0e 	bge	zero,r16,445fc <__alt_data_end+0xfffdedfc>
   44650:	88800917 	ldw	r2,36(r17)
   44654:	89400717 	ldw	r5,28(r17)
   44658:	800f883a 	mov	r7,r16
   4465c:	900d883a 	mov	r6,r18
   44660:	9809883a 	mov	r4,r19
   44664:	103ee83a 	callr	r2
   44668:	80a1c83a 	sub	r16,r16,r2
   4466c:	00bff616 	blt	zero,r2,44648 <__alt_data_end+0xfffdee48>
   44670:	88c0030b 	ldhu	r3,12(r17)
   44674:	00bfffc4 	movi	r2,-1
   44678:	18c01014 	ori	r3,r3,64
   4467c:	88c0030d 	sth	r3,12(r17)
   44680:	003fdf06 	br	44600 <__alt_data_end+0xfffdee00>
   44684:	0005883a 	mov	r2,zero
   44688:	003fec06 	br	4463c <__alt_data_end+0xfffdee3c>
   4468c:	88801415 	stw	r2,80(r17)
   44690:	003fd206 	br	445dc <__alt_data_end+0xfffdeddc>
   44694:	28c00f17 	ldw	r3,60(r5)
   44698:	00ffb316 	blt	zero,r3,44568 <__alt_data_end+0xfffded68>
   4469c:	003fd706 	br	445fc <__alt_data_end+0xfffdedfc>
   446a0:	89400717 	ldw	r5,28(r17)
   446a4:	000d883a 	mov	r6,zero
   446a8:	01c00044 	movi	r7,1
   446ac:	9809883a 	mov	r4,r19
   446b0:	403ee83a 	callr	r8
   446b4:	100d883a 	mov	r6,r2
   446b8:	00bfffc4 	movi	r2,-1
   446bc:	30801426 	beq	r6,r2,44710 <__sflush_r+0x1e4>
   446c0:	8880030b 	ldhu	r2,12(r17)
   446c4:	8a000a17 	ldw	r8,40(r17)
   446c8:	003fae06 	br	44584 <__alt_data_end+0xfffded84>
   446cc:	98c00017 	ldw	r3,0(r19)
   446d0:	183fba26 	beq	r3,zero,445bc <__alt_data_end+0xfffdedbc>
   446d4:	01000744 	movi	r4,29
   446d8:	19000626 	beq	r3,r4,446f4 <__sflush_r+0x1c8>
   446dc:	01000584 	movi	r4,22
   446e0:	19000426 	beq	r3,r4,446f4 <__sflush_r+0x1c8>
   446e4:	88c0030b 	ldhu	r3,12(r17)
   446e8:	18c01014 	ori	r3,r3,64
   446ec:	88c0030d 	sth	r3,12(r17)
   446f0:	003fc306 	br	44600 <__alt_data_end+0xfffdee00>
   446f4:	8880030b 	ldhu	r2,12(r17)
   446f8:	88c00417 	ldw	r3,16(r17)
   446fc:	88000115 	stw	zero,4(r17)
   44700:	10bdffcc 	andi	r2,r2,63487
   44704:	8880030d 	sth	r2,12(r17)
   44708:	88c00015 	stw	r3,0(r17)
   4470c:	003fb306 	br	445dc <__alt_data_end+0xfffdeddc>
   44710:	98800017 	ldw	r2,0(r19)
   44714:	103fea26 	beq	r2,zero,446c0 <__alt_data_end+0xfffdeec0>
   44718:	00c00744 	movi	r3,29
   4471c:	10c00226 	beq	r2,r3,44728 <__sflush_r+0x1fc>
   44720:	00c00584 	movi	r3,22
   44724:	10c0031e 	bne	r2,r3,44734 <__sflush_r+0x208>
   44728:	9c000015 	stw	r16,0(r19)
   4472c:	0005883a 	mov	r2,zero
   44730:	003fb306 	br	44600 <__alt_data_end+0xfffdee00>
   44734:	88c0030b 	ldhu	r3,12(r17)
   44738:	3005883a 	mov	r2,r6
   4473c:	18c01014 	ori	r3,r3,64
   44740:	88c0030d 	sth	r3,12(r17)
   44744:	003fae06 	br	44600 <__alt_data_end+0xfffdee00>

00044748 <_fflush_r>:
   44748:	defffd04 	addi	sp,sp,-12
   4474c:	dc000115 	stw	r16,4(sp)
   44750:	dfc00215 	stw	ra,8(sp)
   44754:	2021883a 	mov	r16,r4
   44758:	20000226 	beq	r4,zero,44764 <_fflush_r+0x1c>
   4475c:	20800e17 	ldw	r2,56(r4)
   44760:	10000c26 	beq	r2,zero,44794 <_fflush_r+0x4c>
   44764:	2880030f 	ldh	r2,12(r5)
   44768:	1000051e 	bne	r2,zero,44780 <_fflush_r+0x38>
   4476c:	0005883a 	mov	r2,zero
   44770:	dfc00217 	ldw	ra,8(sp)
   44774:	dc000117 	ldw	r16,4(sp)
   44778:	dec00304 	addi	sp,sp,12
   4477c:	f800283a 	ret
   44780:	8009883a 	mov	r4,r16
   44784:	dfc00217 	ldw	ra,8(sp)
   44788:	dc000117 	ldw	r16,4(sp)
   4478c:	dec00304 	addi	sp,sp,12
   44790:	004452c1 	jmpi	4452c <__sflush_r>
   44794:	d9400015 	stw	r5,0(sp)
   44798:	0044b340 	call	44b34 <__sinit>
   4479c:	d9400017 	ldw	r5,0(sp)
   447a0:	003ff006 	br	44764 <__alt_data_end+0xfffdef64>

000447a4 <fflush>:
   447a4:	20000526 	beq	r4,zero,447bc <fflush+0x18>
   447a8:	008001b4 	movhi	r2,6
   447ac:	10aaaf04 	addi	r2,r2,-21828
   447b0:	200b883a 	mov	r5,r4
   447b4:	11000017 	ldw	r4,0(r2)
   447b8:	00447481 	jmpi	44748 <_fflush_r>
   447bc:	008001b4 	movhi	r2,6
   447c0:	10aaae04 	addi	r2,r2,-21832
   447c4:	11000017 	ldw	r4,0(r2)
   447c8:	01400134 	movhi	r5,4
   447cc:	2951d204 	addi	r5,r5,18248
   447d0:	004507c1 	jmpi	4507c <_fwalk_reent>

000447d4 <__fp_unlock>:
   447d4:	0005883a 	mov	r2,zero
   447d8:	f800283a 	ret

000447dc <_cleanup_r>:
   447dc:	01400174 	movhi	r5,5
   447e0:	2962fc04 	addi	r5,r5,-29712
   447e4:	004507c1 	jmpi	4507c <_fwalk_reent>

000447e8 <__sinit.part.1>:
   447e8:	defff704 	addi	sp,sp,-36
   447ec:	00c00134 	movhi	r3,4
   447f0:	dfc00815 	stw	ra,32(sp)
   447f4:	ddc00715 	stw	r23,28(sp)
   447f8:	dd800615 	stw	r22,24(sp)
   447fc:	dd400515 	stw	r21,20(sp)
   44800:	dd000415 	stw	r20,16(sp)
   44804:	dcc00315 	stw	r19,12(sp)
   44808:	dc800215 	stw	r18,8(sp)
   4480c:	dc400115 	stw	r17,4(sp)
   44810:	dc000015 	stw	r16,0(sp)
   44814:	18d1f704 	addi	r3,r3,18396
   44818:	24000117 	ldw	r16,4(r4)
   4481c:	20c00f15 	stw	r3,60(r4)
   44820:	2080bb04 	addi	r2,r4,748
   44824:	00c000c4 	movi	r3,3
   44828:	20c0b915 	stw	r3,740(r4)
   4482c:	2080ba15 	stw	r2,744(r4)
   44830:	2000b815 	stw	zero,736(r4)
   44834:	05c00204 	movi	r23,8
   44838:	00800104 	movi	r2,4
   4483c:	2025883a 	mov	r18,r4
   44840:	b80d883a 	mov	r6,r23
   44844:	81001704 	addi	r4,r16,92
   44848:	000b883a 	mov	r5,zero
   4484c:	80000015 	stw	zero,0(r16)
   44850:	80000115 	stw	zero,4(r16)
   44854:	80000215 	stw	zero,8(r16)
   44858:	8080030d 	sth	r2,12(r16)
   4485c:	80001915 	stw	zero,100(r16)
   44860:	8000038d 	sth	zero,14(r16)
   44864:	80000415 	stw	zero,16(r16)
   44868:	80000515 	stw	zero,20(r16)
   4486c:	80000615 	stw	zero,24(r16)
   44870:	0045e100 	call	45e10 <memset>
   44874:	05800134 	movhi	r22,4
   44878:	94400217 	ldw	r17,8(r18)
   4487c:	05400134 	movhi	r21,4
   44880:	05000134 	movhi	r20,4
   44884:	04c00134 	movhi	r19,4
   44888:	b59c2e04 	addi	r22,r22,28856
   4488c:	ad5c4504 	addi	r21,r21,28948
   44890:	a51c6404 	addi	r20,r20,29072
   44894:	9cdc7b04 	addi	r19,r19,29164
   44898:	85800815 	stw	r22,32(r16)
   4489c:	85400915 	stw	r21,36(r16)
   448a0:	85000a15 	stw	r20,40(r16)
   448a4:	84c00b15 	stw	r19,44(r16)
   448a8:	84000715 	stw	r16,28(r16)
   448ac:	00800284 	movi	r2,10
   448b0:	8880030d 	sth	r2,12(r17)
   448b4:	00800044 	movi	r2,1
   448b8:	b80d883a 	mov	r6,r23
   448bc:	89001704 	addi	r4,r17,92
   448c0:	000b883a 	mov	r5,zero
   448c4:	88000015 	stw	zero,0(r17)
   448c8:	88000115 	stw	zero,4(r17)
   448cc:	88000215 	stw	zero,8(r17)
   448d0:	88001915 	stw	zero,100(r17)
   448d4:	8880038d 	sth	r2,14(r17)
   448d8:	88000415 	stw	zero,16(r17)
   448dc:	88000515 	stw	zero,20(r17)
   448e0:	88000615 	stw	zero,24(r17)
   448e4:	0045e100 	call	45e10 <memset>
   448e8:	94000317 	ldw	r16,12(r18)
   448ec:	00800484 	movi	r2,18
   448f0:	8c400715 	stw	r17,28(r17)
   448f4:	8d800815 	stw	r22,32(r17)
   448f8:	8d400915 	stw	r21,36(r17)
   448fc:	8d000a15 	stw	r20,40(r17)
   44900:	8cc00b15 	stw	r19,44(r17)
   44904:	8080030d 	sth	r2,12(r16)
   44908:	00800084 	movi	r2,2
   4490c:	80000015 	stw	zero,0(r16)
   44910:	80000115 	stw	zero,4(r16)
   44914:	80000215 	stw	zero,8(r16)
   44918:	80001915 	stw	zero,100(r16)
   4491c:	8080038d 	sth	r2,14(r16)
   44920:	80000415 	stw	zero,16(r16)
   44924:	80000515 	stw	zero,20(r16)
   44928:	80000615 	stw	zero,24(r16)
   4492c:	b80d883a 	mov	r6,r23
   44930:	000b883a 	mov	r5,zero
   44934:	81001704 	addi	r4,r16,92
   44938:	0045e100 	call	45e10 <memset>
   4493c:	00800044 	movi	r2,1
   44940:	84000715 	stw	r16,28(r16)
   44944:	85800815 	stw	r22,32(r16)
   44948:	85400915 	stw	r21,36(r16)
   4494c:	85000a15 	stw	r20,40(r16)
   44950:	84c00b15 	stw	r19,44(r16)
   44954:	90800e15 	stw	r2,56(r18)
   44958:	dfc00817 	ldw	ra,32(sp)
   4495c:	ddc00717 	ldw	r23,28(sp)
   44960:	dd800617 	ldw	r22,24(sp)
   44964:	dd400517 	ldw	r21,20(sp)
   44968:	dd000417 	ldw	r20,16(sp)
   4496c:	dcc00317 	ldw	r19,12(sp)
   44970:	dc800217 	ldw	r18,8(sp)
   44974:	dc400117 	ldw	r17,4(sp)
   44978:	dc000017 	ldw	r16,0(sp)
   4497c:	dec00904 	addi	sp,sp,36
   44980:	f800283a 	ret

00044984 <__fp_lock>:
   44984:	0005883a 	mov	r2,zero
   44988:	f800283a 	ret

0004498c <__sfmoreglue>:
   4498c:	defffc04 	addi	sp,sp,-16
   44990:	dc800215 	stw	r18,8(sp)
   44994:	2825883a 	mov	r18,r5
   44998:	dc000015 	stw	r16,0(sp)
   4499c:	01401a04 	movi	r5,104
   449a0:	2021883a 	mov	r16,r4
   449a4:	913fffc4 	addi	r4,r18,-1
   449a8:	dfc00315 	stw	ra,12(sp)
   449ac:	dc400115 	stw	r17,4(sp)
   449b0:	00406e00 	call	406e0 <__mulsi3>
   449b4:	8009883a 	mov	r4,r16
   449b8:	11401d04 	addi	r5,r2,116
   449bc:	1023883a 	mov	r17,r2
   449c0:	00453d80 	call	453d8 <_malloc_r>
   449c4:	1021883a 	mov	r16,r2
   449c8:	10000726 	beq	r2,zero,449e8 <__sfmoreglue+0x5c>
   449cc:	11000304 	addi	r4,r2,12
   449d0:	10000015 	stw	zero,0(r2)
   449d4:	14800115 	stw	r18,4(r2)
   449d8:	11000215 	stw	r4,8(r2)
   449dc:	89801a04 	addi	r6,r17,104
   449e0:	000b883a 	mov	r5,zero
   449e4:	0045e100 	call	45e10 <memset>
   449e8:	8005883a 	mov	r2,r16
   449ec:	dfc00317 	ldw	ra,12(sp)
   449f0:	dc800217 	ldw	r18,8(sp)
   449f4:	dc400117 	ldw	r17,4(sp)
   449f8:	dc000017 	ldw	r16,0(sp)
   449fc:	dec00404 	addi	sp,sp,16
   44a00:	f800283a 	ret

00044a04 <__sfp>:
   44a04:	defffb04 	addi	sp,sp,-20
   44a08:	dc000015 	stw	r16,0(sp)
   44a0c:	040001b4 	movhi	r16,6
   44a10:	842aae04 	addi	r16,r16,-21832
   44a14:	dcc00315 	stw	r19,12(sp)
   44a18:	2027883a 	mov	r19,r4
   44a1c:	81000017 	ldw	r4,0(r16)
   44a20:	dfc00415 	stw	ra,16(sp)
   44a24:	dc800215 	stw	r18,8(sp)
   44a28:	20800e17 	ldw	r2,56(r4)
   44a2c:	dc400115 	stw	r17,4(sp)
   44a30:	1000021e 	bne	r2,zero,44a3c <__sfp+0x38>
   44a34:	00447e80 	call	447e8 <__sinit.part.1>
   44a38:	81000017 	ldw	r4,0(r16)
   44a3c:	2480b804 	addi	r18,r4,736
   44a40:	047fffc4 	movi	r17,-1
   44a44:	91000117 	ldw	r4,4(r18)
   44a48:	94000217 	ldw	r16,8(r18)
   44a4c:	213fffc4 	addi	r4,r4,-1
   44a50:	20000a16 	blt	r4,zero,44a7c <__sfp+0x78>
   44a54:	8080030f 	ldh	r2,12(r16)
   44a58:	10000c26 	beq	r2,zero,44a8c <__sfp+0x88>
   44a5c:	80c01d04 	addi	r3,r16,116
   44a60:	00000206 	br	44a6c <__sfp+0x68>
   44a64:	18bfe60f 	ldh	r2,-104(r3)
   44a68:	10000826 	beq	r2,zero,44a8c <__sfp+0x88>
   44a6c:	213fffc4 	addi	r4,r4,-1
   44a70:	1c3ffd04 	addi	r16,r3,-12
   44a74:	18c01a04 	addi	r3,r3,104
   44a78:	247ffa1e 	bne	r4,r17,44a64 <__alt_data_end+0xfffdf264>
   44a7c:	90800017 	ldw	r2,0(r18)
   44a80:	10001d26 	beq	r2,zero,44af8 <__sfp+0xf4>
   44a84:	1025883a 	mov	r18,r2
   44a88:	003fee06 	br	44a44 <__alt_data_end+0xfffdf244>
   44a8c:	00bfffc4 	movi	r2,-1
   44a90:	8080038d 	sth	r2,14(r16)
   44a94:	00800044 	movi	r2,1
   44a98:	8080030d 	sth	r2,12(r16)
   44a9c:	80001915 	stw	zero,100(r16)
   44aa0:	80000015 	stw	zero,0(r16)
   44aa4:	80000215 	stw	zero,8(r16)
   44aa8:	80000115 	stw	zero,4(r16)
   44aac:	80000415 	stw	zero,16(r16)
   44ab0:	80000515 	stw	zero,20(r16)
   44ab4:	80000615 	stw	zero,24(r16)
   44ab8:	01800204 	movi	r6,8
   44abc:	000b883a 	mov	r5,zero
   44ac0:	81001704 	addi	r4,r16,92
   44ac4:	0045e100 	call	45e10 <memset>
   44ac8:	8005883a 	mov	r2,r16
   44acc:	80000c15 	stw	zero,48(r16)
   44ad0:	80000d15 	stw	zero,52(r16)
   44ad4:	80001115 	stw	zero,68(r16)
   44ad8:	80001215 	stw	zero,72(r16)
   44adc:	dfc00417 	ldw	ra,16(sp)
   44ae0:	dcc00317 	ldw	r19,12(sp)
   44ae4:	dc800217 	ldw	r18,8(sp)
   44ae8:	dc400117 	ldw	r17,4(sp)
   44aec:	dc000017 	ldw	r16,0(sp)
   44af0:	dec00504 	addi	sp,sp,20
   44af4:	f800283a 	ret
   44af8:	01400104 	movi	r5,4
   44afc:	9809883a 	mov	r4,r19
   44b00:	004498c0 	call	4498c <__sfmoreglue>
   44b04:	90800015 	stw	r2,0(r18)
   44b08:	103fde1e 	bne	r2,zero,44a84 <__alt_data_end+0xfffdf284>
   44b0c:	00800304 	movi	r2,12
   44b10:	98800015 	stw	r2,0(r19)
   44b14:	0005883a 	mov	r2,zero
   44b18:	003ff006 	br	44adc <__alt_data_end+0xfffdf2dc>

00044b1c <_cleanup>:
   44b1c:	008001b4 	movhi	r2,6
   44b20:	10aaae04 	addi	r2,r2,-21832
   44b24:	11000017 	ldw	r4,0(r2)
   44b28:	01400174 	movhi	r5,5
   44b2c:	2962fc04 	addi	r5,r5,-29712
   44b30:	004507c1 	jmpi	4507c <_fwalk_reent>

00044b34 <__sinit>:
   44b34:	20800e17 	ldw	r2,56(r4)
   44b38:	10000126 	beq	r2,zero,44b40 <__sinit+0xc>
   44b3c:	f800283a 	ret
   44b40:	00447e81 	jmpi	447e8 <__sinit.part.1>

00044b44 <__sfp_lock_acquire>:
   44b44:	f800283a 	ret

00044b48 <__sfp_lock_release>:
   44b48:	f800283a 	ret

00044b4c <__sinit_lock_acquire>:
   44b4c:	f800283a 	ret

00044b50 <__sinit_lock_release>:
   44b50:	f800283a 	ret

00044b54 <__fp_lock_all>:
   44b54:	008001b4 	movhi	r2,6
   44b58:	10aaaf04 	addi	r2,r2,-21828
   44b5c:	11000017 	ldw	r4,0(r2)
   44b60:	01400134 	movhi	r5,4
   44b64:	29526104 	addi	r5,r5,18820
   44b68:	0044fb81 	jmpi	44fb8 <_fwalk>

00044b6c <__fp_unlock_all>:
   44b6c:	008001b4 	movhi	r2,6
   44b70:	10aaaf04 	addi	r2,r2,-21828
   44b74:	11000017 	ldw	r4,0(r2)
   44b78:	01400134 	movhi	r5,4
   44b7c:	2951f504 	addi	r5,r5,18388
   44b80:	0044fb81 	jmpi	44fb8 <_fwalk>

00044b84 <_malloc_trim_r>:
   44b84:	defffb04 	addi	sp,sp,-20
   44b88:	dcc00315 	stw	r19,12(sp)
   44b8c:	04c001b4 	movhi	r19,6
   44b90:	dc800215 	stw	r18,8(sp)
   44b94:	dc400115 	stw	r17,4(sp)
   44b98:	dc000015 	stw	r16,0(sp)
   44b9c:	dfc00415 	stw	ra,16(sp)
   44ba0:	2821883a 	mov	r16,r5
   44ba4:	9ce52704 	addi	r19,r19,-27492
   44ba8:	2025883a 	mov	r18,r4
   44bac:	004e0200 	call	4e020 <__malloc_lock>
   44bb0:	98800217 	ldw	r2,8(r19)
   44bb4:	14400117 	ldw	r17,4(r2)
   44bb8:	00bfff04 	movi	r2,-4
   44bbc:	88a2703a 	and	r17,r17,r2
   44bc0:	8c21c83a 	sub	r16,r17,r16
   44bc4:	8403fbc4 	addi	r16,r16,4079
   44bc8:	8020d33a 	srli	r16,r16,12
   44bcc:	0083ffc4 	movi	r2,4095
   44bd0:	843fffc4 	addi	r16,r16,-1
   44bd4:	8020933a 	slli	r16,r16,12
   44bd8:	1400060e 	bge	r2,r16,44bf4 <_malloc_trim_r+0x70>
   44bdc:	000b883a 	mov	r5,zero
   44be0:	9009883a 	mov	r4,r18
   44be4:	00470640 	call	47064 <_sbrk_r>
   44be8:	98c00217 	ldw	r3,8(r19)
   44bec:	1c47883a 	add	r3,r3,r17
   44bf0:	10c00a26 	beq	r2,r3,44c1c <_malloc_trim_r+0x98>
   44bf4:	9009883a 	mov	r4,r18
   44bf8:	004e1400 	call	4e140 <__malloc_unlock>
   44bfc:	0005883a 	mov	r2,zero
   44c00:	dfc00417 	ldw	ra,16(sp)
   44c04:	dcc00317 	ldw	r19,12(sp)
   44c08:	dc800217 	ldw	r18,8(sp)
   44c0c:	dc400117 	ldw	r17,4(sp)
   44c10:	dc000017 	ldw	r16,0(sp)
   44c14:	dec00504 	addi	sp,sp,20
   44c18:	f800283a 	ret
   44c1c:	040bc83a 	sub	r5,zero,r16
   44c20:	9009883a 	mov	r4,r18
   44c24:	00470640 	call	47064 <_sbrk_r>
   44c28:	00ffffc4 	movi	r3,-1
   44c2c:	10c00d26 	beq	r2,r3,44c64 <_malloc_trim_r+0xe0>
   44c30:	00c001b4 	movhi	r3,6
   44c34:	18f1e304 	addi	r3,r3,-14452
   44c38:	18800017 	ldw	r2,0(r3)
   44c3c:	99000217 	ldw	r4,8(r19)
   44c40:	8c23c83a 	sub	r17,r17,r16
   44c44:	8c400054 	ori	r17,r17,1
   44c48:	1421c83a 	sub	r16,r2,r16
   44c4c:	24400115 	stw	r17,4(r4)
   44c50:	9009883a 	mov	r4,r18
   44c54:	1c000015 	stw	r16,0(r3)
   44c58:	004e1400 	call	4e140 <__malloc_unlock>
   44c5c:	00800044 	movi	r2,1
   44c60:	003fe706 	br	44c00 <__alt_data_end+0xfffdf400>
   44c64:	000b883a 	mov	r5,zero
   44c68:	9009883a 	mov	r4,r18
   44c6c:	00470640 	call	47064 <_sbrk_r>
   44c70:	99000217 	ldw	r4,8(r19)
   44c74:	014003c4 	movi	r5,15
   44c78:	1107c83a 	sub	r3,r2,r4
   44c7c:	28ffdd0e 	bge	r5,r3,44bf4 <__alt_data_end+0xfffdf3f4>
   44c80:	014001b4 	movhi	r5,6
   44c84:	296ab104 	addi	r5,r5,-21820
   44c88:	29400017 	ldw	r5,0(r5)
   44c8c:	18c00054 	ori	r3,r3,1
   44c90:	20c00115 	stw	r3,4(r4)
   44c94:	00c001b4 	movhi	r3,6
   44c98:	1145c83a 	sub	r2,r2,r5
   44c9c:	18f1e304 	addi	r3,r3,-14452
   44ca0:	18800015 	stw	r2,0(r3)
   44ca4:	003fd306 	br	44bf4 <__alt_data_end+0xfffdf3f4>

00044ca8 <_free_r>:
   44ca8:	28004126 	beq	r5,zero,44db0 <_free_r+0x108>
   44cac:	defffd04 	addi	sp,sp,-12
   44cb0:	dc400115 	stw	r17,4(sp)
   44cb4:	dc000015 	stw	r16,0(sp)
   44cb8:	2023883a 	mov	r17,r4
   44cbc:	2821883a 	mov	r16,r5
   44cc0:	dfc00215 	stw	ra,8(sp)
   44cc4:	004e0200 	call	4e020 <__malloc_lock>
   44cc8:	81ffff17 	ldw	r7,-4(r16)
   44ccc:	00bfff84 	movi	r2,-2
   44cd0:	010001b4 	movhi	r4,6
   44cd4:	81bffe04 	addi	r6,r16,-8
   44cd8:	3884703a 	and	r2,r7,r2
   44cdc:	21252704 	addi	r4,r4,-27492
   44ce0:	308b883a 	add	r5,r6,r2
   44ce4:	2a400117 	ldw	r9,4(r5)
   44ce8:	22000217 	ldw	r8,8(r4)
   44cec:	00ffff04 	movi	r3,-4
   44cf0:	48c6703a 	and	r3,r9,r3
   44cf4:	2a005726 	beq	r5,r8,44e54 <_free_r+0x1ac>
   44cf8:	28c00115 	stw	r3,4(r5)
   44cfc:	39c0004c 	andi	r7,r7,1
   44d00:	3800091e 	bne	r7,zero,44d28 <_free_r+0x80>
   44d04:	823ffe17 	ldw	r8,-8(r16)
   44d08:	22400204 	addi	r9,r4,8
   44d0c:	320dc83a 	sub	r6,r6,r8
   44d10:	31c00217 	ldw	r7,8(r6)
   44d14:	1205883a 	add	r2,r2,r8
   44d18:	3a406526 	beq	r7,r9,44eb0 <_free_r+0x208>
   44d1c:	32000317 	ldw	r8,12(r6)
   44d20:	3a000315 	stw	r8,12(r7)
   44d24:	41c00215 	stw	r7,8(r8)
   44d28:	28cf883a 	add	r7,r5,r3
   44d2c:	39c00117 	ldw	r7,4(r7)
   44d30:	39c0004c 	andi	r7,r7,1
   44d34:	38003a26 	beq	r7,zero,44e20 <_free_r+0x178>
   44d38:	10c00054 	ori	r3,r2,1
   44d3c:	30c00115 	stw	r3,4(r6)
   44d40:	3087883a 	add	r3,r6,r2
   44d44:	18800015 	stw	r2,0(r3)
   44d48:	00c07fc4 	movi	r3,511
   44d4c:	18801936 	bltu	r3,r2,44db4 <_free_r+0x10c>
   44d50:	1004d0fa 	srli	r2,r2,3
   44d54:	01c00044 	movi	r7,1
   44d58:	21400117 	ldw	r5,4(r4)
   44d5c:	10c00044 	addi	r3,r2,1
   44d60:	18c7883a 	add	r3,r3,r3
   44d64:	1005d0ba 	srai	r2,r2,2
   44d68:	18c7883a 	add	r3,r3,r3
   44d6c:	18c7883a 	add	r3,r3,r3
   44d70:	1907883a 	add	r3,r3,r4
   44d74:	3884983a 	sll	r2,r7,r2
   44d78:	19c00017 	ldw	r7,0(r3)
   44d7c:	1a3ffe04 	addi	r8,r3,-8
   44d80:	1144b03a 	or	r2,r2,r5
   44d84:	32000315 	stw	r8,12(r6)
   44d88:	31c00215 	stw	r7,8(r6)
   44d8c:	20800115 	stw	r2,4(r4)
   44d90:	19800015 	stw	r6,0(r3)
   44d94:	39800315 	stw	r6,12(r7)
   44d98:	8809883a 	mov	r4,r17
   44d9c:	dfc00217 	ldw	ra,8(sp)
   44da0:	dc400117 	ldw	r17,4(sp)
   44da4:	dc000017 	ldw	r16,0(sp)
   44da8:	dec00304 	addi	sp,sp,12
   44dac:	004e1401 	jmpi	4e140 <__malloc_unlock>
   44db0:	f800283a 	ret
   44db4:	100ad27a 	srli	r5,r2,9
   44db8:	00c00104 	movi	r3,4
   44dbc:	19404a36 	bltu	r3,r5,44ee8 <_free_r+0x240>
   44dc0:	100ad1ba 	srli	r5,r2,6
   44dc4:	28c00e44 	addi	r3,r5,57
   44dc8:	18c7883a 	add	r3,r3,r3
   44dcc:	29400e04 	addi	r5,r5,56
   44dd0:	18c7883a 	add	r3,r3,r3
   44dd4:	18c7883a 	add	r3,r3,r3
   44dd8:	1909883a 	add	r4,r3,r4
   44ddc:	20c00017 	ldw	r3,0(r4)
   44de0:	01c001b4 	movhi	r7,6
   44de4:	213ffe04 	addi	r4,r4,-8
   44de8:	39e52704 	addi	r7,r7,-27492
   44dec:	20c04426 	beq	r4,r3,44f00 <_free_r+0x258>
   44df0:	01ffff04 	movi	r7,-4
   44df4:	19400117 	ldw	r5,4(r3)
   44df8:	29ca703a 	and	r5,r5,r7
   44dfc:	1140022e 	bgeu	r2,r5,44e08 <_free_r+0x160>
   44e00:	18c00217 	ldw	r3,8(r3)
   44e04:	20fffb1e 	bne	r4,r3,44df4 <__alt_data_end+0xfffdf5f4>
   44e08:	19000317 	ldw	r4,12(r3)
   44e0c:	31000315 	stw	r4,12(r6)
   44e10:	30c00215 	stw	r3,8(r6)
   44e14:	21800215 	stw	r6,8(r4)
   44e18:	19800315 	stw	r6,12(r3)
   44e1c:	003fde06 	br	44d98 <__alt_data_end+0xfffdf598>
   44e20:	29c00217 	ldw	r7,8(r5)
   44e24:	10c5883a 	add	r2,r2,r3
   44e28:	00c001b4 	movhi	r3,6
   44e2c:	18e52904 	addi	r3,r3,-27484
   44e30:	38c03b26 	beq	r7,r3,44f20 <_free_r+0x278>
   44e34:	2a000317 	ldw	r8,12(r5)
   44e38:	11400054 	ori	r5,r2,1
   44e3c:	3087883a 	add	r3,r6,r2
   44e40:	3a000315 	stw	r8,12(r7)
   44e44:	41c00215 	stw	r7,8(r8)
   44e48:	31400115 	stw	r5,4(r6)
   44e4c:	18800015 	stw	r2,0(r3)
   44e50:	003fbd06 	br	44d48 <__alt_data_end+0xfffdf548>
   44e54:	39c0004c 	andi	r7,r7,1
   44e58:	10c5883a 	add	r2,r2,r3
   44e5c:	3800071e 	bne	r7,zero,44e7c <_free_r+0x1d4>
   44e60:	81fffe17 	ldw	r7,-8(r16)
   44e64:	31cdc83a 	sub	r6,r6,r7
   44e68:	30c00317 	ldw	r3,12(r6)
   44e6c:	31400217 	ldw	r5,8(r6)
   44e70:	11c5883a 	add	r2,r2,r7
   44e74:	28c00315 	stw	r3,12(r5)
   44e78:	19400215 	stw	r5,8(r3)
   44e7c:	10c00054 	ori	r3,r2,1
   44e80:	30c00115 	stw	r3,4(r6)
   44e84:	00c001b4 	movhi	r3,6
   44e88:	18eab204 	addi	r3,r3,-21816
   44e8c:	18c00017 	ldw	r3,0(r3)
   44e90:	21800215 	stw	r6,8(r4)
   44e94:	10ffc036 	bltu	r2,r3,44d98 <__alt_data_end+0xfffdf598>
   44e98:	008001b4 	movhi	r2,6
   44e9c:	10b1c104 	addi	r2,r2,-14588
   44ea0:	11400017 	ldw	r5,0(r2)
   44ea4:	8809883a 	mov	r4,r17
   44ea8:	0044b840 	call	44b84 <_malloc_trim_r>
   44eac:	003fba06 	br	44d98 <__alt_data_end+0xfffdf598>
   44eb0:	28c9883a 	add	r4,r5,r3
   44eb4:	21000117 	ldw	r4,4(r4)
   44eb8:	2100004c 	andi	r4,r4,1
   44ebc:	2000391e 	bne	r4,zero,44fa4 <_free_r+0x2fc>
   44ec0:	29c00217 	ldw	r7,8(r5)
   44ec4:	29000317 	ldw	r4,12(r5)
   44ec8:	1885883a 	add	r2,r3,r2
   44ecc:	10c00054 	ori	r3,r2,1
   44ed0:	39000315 	stw	r4,12(r7)
   44ed4:	21c00215 	stw	r7,8(r4)
   44ed8:	30c00115 	stw	r3,4(r6)
   44edc:	308d883a 	add	r6,r6,r2
   44ee0:	30800015 	stw	r2,0(r6)
   44ee4:	003fac06 	br	44d98 <__alt_data_end+0xfffdf598>
   44ee8:	00c00504 	movi	r3,20
   44eec:	19401536 	bltu	r3,r5,44f44 <_free_r+0x29c>
   44ef0:	28c01704 	addi	r3,r5,92
   44ef4:	18c7883a 	add	r3,r3,r3
   44ef8:	294016c4 	addi	r5,r5,91
   44efc:	003fb406 	br	44dd0 <__alt_data_end+0xfffdf5d0>
   44f00:	280bd0ba 	srai	r5,r5,2
   44f04:	00c00044 	movi	r3,1
   44f08:	38800117 	ldw	r2,4(r7)
   44f0c:	194a983a 	sll	r5,r3,r5
   44f10:	2007883a 	mov	r3,r4
   44f14:	2884b03a 	or	r2,r5,r2
   44f18:	38800115 	stw	r2,4(r7)
   44f1c:	003fbb06 	br	44e0c <__alt_data_end+0xfffdf60c>
   44f20:	21800515 	stw	r6,20(r4)
   44f24:	21800415 	stw	r6,16(r4)
   44f28:	10c00054 	ori	r3,r2,1
   44f2c:	31c00315 	stw	r7,12(r6)
   44f30:	31c00215 	stw	r7,8(r6)
   44f34:	30c00115 	stw	r3,4(r6)
   44f38:	308d883a 	add	r6,r6,r2
   44f3c:	30800015 	stw	r2,0(r6)
   44f40:	003f9506 	br	44d98 <__alt_data_end+0xfffdf598>
   44f44:	00c01504 	movi	r3,84
   44f48:	19400536 	bltu	r3,r5,44f60 <_free_r+0x2b8>
   44f4c:	100ad33a 	srli	r5,r2,12
   44f50:	28c01bc4 	addi	r3,r5,111
   44f54:	18c7883a 	add	r3,r3,r3
   44f58:	29401b84 	addi	r5,r5,110
   44f5c:	003f9c06 	br	44dd0 <__alt_data_end+0xfffdf5d0>
   44f60:	00c05504 	movi	r3,340
   44f64:	19400536 	bltu	r3,r5,44f7c <_free_r+0x2d4>
   44f68:	100ad3fa 	srli	r5,r2,15
   44f6c:	28c01e04 	addi	r3,r5,120
   44f70:	18c7883a 	add	r3,r3,r3
   44f74:	29401dc4 	addi	r5,r5,119
   44f78:	003f9506 	br	44dd0 <__alt_data_end+0xfffdf5d0>
   44f7c:	00c15504 	movi	r3,1364
   44f80:	19400536 	bltu	r3,r5,44f98 <_free_r+0x2f0>
   44f84:	100ad4ba 	srli	r5,r2,18
   44f88:	28c01f44 	addi	r3,r5,125
   44f8c:	18c7883a 	add	r3,r3,r3
   44f90:	29401f04 	addi	r5,r5,124
   44f94:	003f8e06 	br	44dd0 <__alt_data_end+0xfffdf5d0>
   44f98:	00c03f84 	movi	r3,254
   44f9c:	01401f84 	movi	r5,126
   44fa0:	003f8b06 	br	44dd0 <__alt_data_end+0xfffdf5d0>
   44fa4:	10c00054 	ori	r3,r2,1
   44fa8:	30c00115 	stw	r3,4(r6)
   44fac:	308d883a 	add	r6,r6,r2
   44fb0:	30800015 	stw	r2,0(r6)
   44fb4:	003f7806 	br	44d98 <__alt_data_end+0xfffdf598>

00044fb8 <_fwalk>:
   44fb8:	defff704 	addi	sp,sp,-36
   44fbc:	dd000415 	stw	r20,16(sp)
   44fc0:	dfc00815 	stw	ra,32(sp)
   44fc4:	ddc00715 	stw	r23,28(sp)
   44fc8:	dd800615 	stw	r22,24(sp)
   44fcc:	dd400515 	stw	r21,20(sp)
   44fd0:	dcc00315 	stw	r19,12(sp)
   44fd4:	dc800215 	stw	r18,8(sp)
   44fd8:	dc400115 	stw	r17,4(sp)
   44fdc:	dc000015 	stw	r16,0(sp)
   44fe0:	2500b804 	addi	r20,r4,736
   44fe4:	a0002326 	beq	r20,zero,45074 <_fwalk+0xbc>
   44fe8:	282b883a 	mov	r21,r5
   44fec:	002f883a 	mov	r23,zero
   44ff0:	05800044 	movi	r22,1
   44ff4:	04ffffc4 	movi	r19,-1
   44ff8:	a4400117 	ldw	r17,4(r20)
   44ffc:	a4800217 	ldw	r18,8(r20)
   45000:	8c7fffc4 	addi	r17,r17,-1
   45004:	88000d16 	blt	r17,zero,4503c <_fwalk+0x84>
   45008:	94000304 	addi	r16,r18,12
   4500c:	94800384 	addi	r18,r18,14
   45010:	8080000b 	ldhu	r2,0(r16)
   45014:	8c7fffc4 	addi	r17,r17,-1
   45018:	813ffd04 	addi	r4,r16,-12
   4501c:	b080042e 	bgeu	r22,r2,45030 <_fwalk+0x78>
   45020:	9080000f 	ldh	r2,0(r18)
   45024:	14c00226 	beq	r2,r19,45030 <_fwalk+0x78>
   45028:	a83ee83a 	callr	r21
   4502c:	b8aeb03a 	or	r23,r23,r2
   45030:	84001a04 	addi	r16,r16,104
   45034:	94801a04 	addi	r18,r18,104
   45038:	8cfff51e 	bne	r17,r19,45010 <__alt_data_end+0xfffdf810>
   4503c:	a5000017 	ldw	r20,0(r20)
   45040:	a03fed1e 	bne	r20,zero,44ff8 <__alt_data_end+0xfffdf7f8>
   45044:	b805883a 	mov	r2,r23
   45048:	dfc00817 	ldw	ra,32(sp)
   4504c:	ddc00717 	ldw	r23,28(sp)
   45050:	dd800617 	ldw	r22,24(sp)
   45054:	dd400517 	ldw	r21,20(sp)
   45058:	dd000417 	ldw	r20,16(sp)
   4505c:	dcc00317 	ldw	r19,12(sp)
   45060:	dc800217 	ldw	r18,8(sp)
   45064:	dc400117 	ldw	r17,4(sp)
   45068:	dc000017 	ldw	r16,0(sp)
   4506c:	dec00904 	addi	sp,sp,36
   45070:	f800283a 	ret
   45074:	002f883a 	mov	r23,zero
   45078:	003ff206 	br	45044 <__alt_data_end+0xfffdf844>

0004507c <_fwalk_reent>:
   4507c:	defff704 	addi	sp,sp,-36
   45080:	dd000415 	stw	r20,16(sp)
   45084:	dfc00815 	stw	ra,32(sp)
   45088:	ddc00715 	stw	r23,28(sp)
   4508c:	dd800615 	stw	r22,24(sp)
   45090:	dd400515 	stw	r21,20(sp)
   45094:	dcc00315 	stw	r19,12(sp)
   45098:	dc800215 	stw	r18,8(sp)
   4509c:	dc400115 	stw	r17,4(sp)
   450a0:	dc000015 	stw	r16,0(sp)
   450a4:	2500b804 	addi	r20,r4,736
   450a8:	a0002326 	beq	r20,zero,45138 <_fwalk_reent+0xbc>
   450ac:	282b883a 	mov	r21,r5
   450b0:	2027883a 	mov	r19,r4
   450b4:	002f883a 	mov	r23,zero
   450b8:	05800044 	movi	r22,1
   450bc:	04bfffc4 	movi	r18,-1
   450c0:	a4400117 	ldw	r17,4(r20)
   450c4:	a4000217 	ldw	r16,8(r20)
   450c8:	8c7fffc4 	addi	r17,r17,-1
   450cc:	88000c16 	blt	r17,zero,45100 <_fwalk_reent+0x84>
   450d0:	84000304 	addi	r16,r16,12
   450d4:	8080000b 	ldhu	r2,0(r16)
   450d8:	8c7fffc4 	addi	r17,r17,-1
   450dc:	817ffd04 	addi	r5,r16,-12
   450e0:	b080052e 	bgeu	r22,r2,450f8 <_fwalk_reent+0x7c>
   450e4:	8080008f 	ldh	r2,2(r16)
   450e8:	9809883a 	mov	r4,r19
   450ec:	14800226 	beq	r2,r18,450f8 <_fwalk_reent+0x7c>
   450f0:	a83ee83a 	callr	r21
   450f4:	b8aeb03a 	or	r23,r23,r2
   450f8:	84001a04 	addi	r16,r16,104
   450fc:	8cbff51e 	bne	r17,r18,450d4 <__alt_data_end+0xfffdf8d4>
   45100:	a5000017 	ldw	r20,0(r20)
   45104:	a03fee1e 	bne	r20,zero,450c0 <__alt_data_end+0xfffdf8c0>
   45108:	b805883a 	mov	r2,r23
   4510c:	dfc00817 	ldw	ra,32(sp)
   45110:	ddc00717 	ldw	r23,28(sp)
   45114:	dd800617 	ldw	r22,24(sp)
   45118:	dd400517 	ldw	r21,20(sp)
   4511c:	dd000417 	ldw	r20,16(sp)
   45120:	dcc00317 	ldw	r19,12(sp)
   45124:	dc800217 	ldw	r18,8(sp)
   45128:	dc400117 	ldw	r17,4(sp)
   4512c:	dc000017 	ldw	r16,0(sp)
   45130:	dec00904 	addi	sp,sp,36
   45134:	f800283a 	ret
   45138:	002f883a 	mov	r23,zero
   4513c:	003ff206 	br	45108 <__alt_data_end+0xfffdf908>

00045140 <_setlocale_r>:
   45140:	30001b26 	beq	r6,zero,451b0 <_setlocale_r+0x70>
   45144:	014001b4 	movhi	r5,6
   45148:	defffe04 	addi	sp,sp,-8
   4514c:	29631804 	addi	r5,r5,-29600
   45150:	3009883a 	mov	r4,r6
   45154:	dc000015 	stw	r16,0(sp)
   45158:	dfc00115 	stw	ra,4(sp)
   4515c:	3021883a 	mov	r16,r6
   45160:	00471f40 	call	471f4 <strcmp>
   45164:	1000061e 	bne	r2,zero,45180 <_setlocale_r+0x40>
   45168:	008001b4 	movhi	r2,6
   4516c:	10a31704 	addi	r2,r2,-29604
   45170:	dfc00117 	ldw	ra,4(sp)
   45174:	dc000017 	ldw	r16,0(sp)
   45178:	dec00204 	addi	sp,sp,8
   4517c:	f800283a 	ret
   45180:	014001b4 	movhi	r5,6
   45184:	29631704 	addi	r5,r5,-29604
   45188:	8009883a 	mov	r4,r16
   4518c:	00471f40 	call	471f4 <strcmp>
   45190:	103ff526 	beq	r2,zero,45168 <__alt_data_end+0xfffdf968>
   45194:	014001b4 	movhi	r5,6
   45198:	29630204 	addi	r5,r5,-29688
   4519c:	8009883a 	mov	r4,r16
   451a0:	00471f40 	call	471f4 <strcmp>
   451a4:	103ff026 	beq	r2,zero,45168 <__alt_data_end+0xfffdf968>
   451a8:	0005883a 	mov	r2,zero
   451ac:	003ff006 	br	45170 <__alt_data_end+0xfffdf970>
   451b0:	008001b4 	movhi	r2,6
   451b4:	10a31704 	addi	r2,r2,-29604
   451b8:	f800283a 	ret

000451bc <__locale_charset>:
   451bc:	008001b4 	movhi	r2,6
   451c0:	10a51104 	addi	r2,r2,-27580
   451c4:	f800283a 	ret

000451c8 <__locale_mb_cur_max>:
   451c8:	008001b4 	movhi	r2,6
   451cc:	10aab004 	addi	r2,r2,-21824
   451d0:	10800017 	ldw	r2,0(r2)
   451d4:	f800283a 	ret

000451d8 <__locale_msgcharset>:
   451d8:	008001b4 	movhi	r2,6
   451dc:	10a50904 	addi	r2,r2,-27612
   451e0:	f800283a 	ret

000451e4 <__locale_cjk_lang>:
   451e4:	0005883a 	mov	r2,zero
   451e8:	f800283a 	ret

000451ec <_localeconv_r>:
   451ec:	008001b4 	movhi	r2,6
   451f0:	10a51904 	addi	r2,r2,-27548
   451f4:	f800283a 	ret

000451f8 <setlocale>:
   451f8:	008001b4 	movhi	r2,6
   451fc:	10aaaf04 	addi	r2,r2,-21828
   45200:	280d883a 	mov	r6,r5
   45204:	200b883a 	mov	r5,r4
   45208:	11000017 	ldw	r4,0(r2)
   4520c:	00451401 	jmpi	45140 <_setlocale_r>

00045210 <localeconv>:
   45210:	008001b4 	movhi	r2,6
   45214:	10a51904 	addi	r2,r2,-27548
   45218:	f800283a 	ret

0004521c <__smakebuf_r>:
   4521c:	2880030b 	ldhu	r2,12(r5)
   45220:	10c0008c 	andi	r3,r2,2
   45224:	1800411e 	bne	r3,zero,4532c <__smakebuf_r+0x110>
   45228:	deffec04 	addi	sp,sp,-80
   4522c:	dc000f15 	stw	r16,60(sp)
   45230:	2821883a 	mov	r16,r5
   45234:	2940038f 	ldh	r5,14(r5)
   45238:	dc401015 	stw	r17,64(sp)
   4523c:	dfc01315 	stw	ra,76(sp)
   45240:	dcc01215 	stw	r19,72(sp)
   45244:	dc801115 	stw	r18,68(sp)
   45248:	2023883a 	mov	r17,r4
   4524c:	28001c16 	blt	r5,zero,452c0 <__smakebuf_r+0xa4>
   45250:	d80d883a 	mov	r6,sp
   45254:	0048efc0 	call	48efc <_fstat_r>
   45258:	10001816 	blt	r2,zero,452bc <__smakebuf_r+0xa0>
   4525c:	d8800117 	ldw	r2,4(sp)
   45260:	00e00014 	movui	r3,32768
   45264:	10bc000c 	andi	r2,r2,61440
   45268:	14c80020 	cmpeqi	r19,r2,8192
   4526c:	10c03726 	beq	r2,r3,4534c <__smakebuf_r+0x130>
   45270:	80c0030b 	ldhu	r3,12(r16)
   45274:	18c20014 	ori	r3,r3,2048
   45278:	80c0030d 	sth	r3,12(r16)
   4527c:	00c80004 	movi	r3,8192
   45280:	10c0521e 	bne	r2,r3,453cc <__smakebuf_r+0x1b0>
   45284:	8140038f 	ldh	r5,14(r16)
   45288:	8809883a 	mov	r4,r17
   4528c:	00494200 	call	49420 <_isatty_r>
   45290:	10004c26 	beq	r2,zero,453c4 <__smakebuf_r+0x1a8>
   45294:	8080030b 	ldhu	r2,12(r16)
   45298:	80c010c4 	addi	r3,r16,67
   4529c:	80c00015 	stw	r3,0(r16)
   452a0:	10800054 	ori	r2,r2,1
   452a4:	8080030d 	sth	r2,12(r16)
   452a8:	00800044 	movi	r2,1
   452ac:	80c00415 	stw	r3,16(r16)
   452b0:	80800515 	stw	r2,20(r16)
   452b4:	04810004 	movi	r18,1024
   452b8:	00000706 	br	452d8 <__smakebuf_r+0xbc>
   452bc:	8080030b 	ldhu	r2,12(r16)
   452c0:	10c0200c 	andi	r3,r2,128
   452c4:	18001f1e 	bne	r3,zero,45344 <__smakebuf_r+0x128>
   452c8:	04810004 	movi	r18,1024
   452cc:	10820014 	ori	r2,r2,2048
   452d0:	8080030d 	sth	r2,12(r16)
   452d4:	0027883a 	mov	r19,zero
   452d8:	900b883a 	mov	r5,r18
   452dc:	8809883a 	mov	r4,r17
   452e0:	00453d80 	call	453d8 <_malloc_r>
   452e4:	10002c26 	beq	r2,zero,45398 <__smakebuf_r+0x17c>
   452e8:	80c0030b 	ldhu	r3,12(r16)
   452ec:	01000134 	movhi	r4,4
   452f0:	2111f704 	addi	r4,r4,18396
   452f4:	89000f15 	stw	r4,60(r17)
   452f8:	18c02014 	ori	r3,r3,128
   452fc:	80c0030d 	sth	r3,12(r16)
   45300:	80800015 	stw	r2,0(r16)
   45304:	80800415 	stw	r2,16(r16)
   45308:	84800515 	stw	r18,20(r16)
   4530c:	98001a1e 	bne	r19,zero,45378 <__smakebuf_r+0x15c>
   45310:	dfc01317 	ldw	ra,76(sp)
   45314:	dcc01217 	ldw	r19,72(sp)
   45318:	dc801117 	ldw	r18,68(sp)
   4531c:	dc401017 	ldw	r17,64(sp)
   45320:	dc000f17 	ldw	r16,60(sp)
   45324:	dec01404 	addi	sp,sp,80
   45328:	f800283a 	ret
   4532c:	288010c4 	addi	r2,r5,67
   45330:	28800015 	stw	r2,0(r5)
   45334:	28800415 	stw	r2,16(r5)
   45338:	00800044 	movi	r2,1
   4533c:	28800515 	stw	r2,20(r5)
   45340:	f800283a 	ret
   45344:	04801004 	movi	r18,64
   45348:	003fe006 	br	452cc <__alt_data_end+0xfffdfacc>
   4534c:	81000a17 	ldw	r4,40(r16)
   45350:	00c00134 	movhi	r3,4
   45354:	18dc6404 	addi	r3,r3,29072
   45358:	20ffc51e 	bne	r4,r3,45270 <__alt_data_end+0xfffdfa70>
   4535c:	8080030b 	ldhu	r2,12(r16)
   45360:	04810004 	movi	r18,1024
   45364:	84801315 	stw	r18,76(r16)
   45368:	1484b03a 	or	r2,r2,r18
   4536c:	8080030d 	sth	r2,12(r16)
   45370:	0027883a 	mov	r19,zero
   45374:	003fd806 	br	452d8 <__alt_data_end+0xfffdfad8>
   45378:	8140038f 	ldh	r5,14(r16)
   4537c:	8809883a 	mov	r4,r17
   45380:	00494200 	call	49420 <_isatty_r>
   45384:	103fe226 	beq	r2,zero,45310 <__alt_data_end+0xfffdfb10>
   45388:	8080030b 	ldhu	r2,12(r16)
   4538c:	10800054 	ori	r2,r2,1
   45390:	8080030d 	sth	r2,12(r16)
   45394:	003fde06 	br	45310 <__alt_data_end+0xfffdfb10>
   45398:	8080030b 	ldhu	r2,12(r16)
   4539c:	10c0800c 	andi	r3,r2,512
   453a0:	183fdb1e 	bne	r3,zero,45310 <__alt_data_end+0xfffdfb10>
   453a4:	10800094 	ori	r2,r2,2
   453a8:	80c010c4 	addi	r3,r16,67
   453ac:	8080030d 	sth	r2,12(r16)
   453b0:	00800044 	movi	r2,1
   453b4:	80c00015 	stw	r3,0(r16)
   453b8:	80c00415 	stw	r3,16(r16)
   453bc:	80800515 	stw	r2,20(r16)
   453c0:	003fd306 	br	45310 <__alt_data_end+0xfffdfb10>
   453c4:	04810004 	movi	r18,1024
   453c8:	003fc306 	br	452d8 <__alt_data_end+0xfffdfad8>
   453cc:	0027883a 	mov	r19,zero
   453d0:	04810004 	movi	r18,1024
   453d4:	003fc006 	br	452d8 <__alt_data_end+0xfffdfad8>

000453d8 <_malloc_r>:
   453d8:	defff504 	addi	sp,sp,-44
   453dc:	dc800315 	stw	r18,12(sp)
   453e0:	dfc00a15 	stw	ra,40(sp)
   453e4:	df000915 	stw	fp,36(sp)
   453e8:	ddc00815 	stw	r23,32(sp)
   453ec:	dd800715 	stw	r22,28(sp)
   453f0:	dd400615 	stw	r21,24(sp)
   453f4:	dd000515 	stw	r20,20(sp)
   453f8:	dcc00415 	stw	r19,16(sp)
   453fc:	dc400215 	stw	r17,8(sp)
   45400:	dc000115 	stw	r16,4(sp)
   45404:	288002c4 	addi	r2,r5,11
   45408:	00c00584 	movi	r3,22
   4540c:	2025883a 	mov	r18,r4
   45410:	18807f2e 	bgeu	r3,r2,45610 <_malloc_r+0x238>
   45414:	047ffe04 	movi	r17,-8
   45418:	1462703a 	and	r17,r2,r17
   4541c:	8800a316 	blt	r17,zero,456ac <_malloc_r+0x2d4>
   45420:	8940a236 	bltu	r17,r5,456ac <_malloc_r+0x2d4>
   45424:	004e0200 	call	4e020 <__malloc_lock>
   45428:	00807dc4 	movi	r2,503
   4542c:	1441e92e 	bgeu	r2,r17,45bd4 <_malloc_r+0x7fc>
   45430:	8804d27a 	srli	r2,r17,9
   45434:	1000a126 	beq	r2,zero,456bc <_malloc_r+0x2e4>
   45438:	00c00104 	movi	r3,4
   4543c:	18811e36 	bltu	r3,r2,458b8 <_malloc_r+0x4e0>
   45440:	8804d1ba 	srli	r2,r17,6
   45444:	12000e44 	addi	r8,r2,57
   45448:	11c00e04 	addi	r7,r2,56
   4544c:	4209883a 	add	r4,r8,r8
   45450:	04c001b4 	movhi	r19,6
   45454:	2109883a 	add	r4,r4,r4
   45458:	9ce52704 	addi	r19,r19,-27492
   4545c:	2109883a 	add	r4,r4,r4
   45460:	9909883a 	add	r4,r19,r4
   45464:	24000117 	ldw	r16,4(r4)
   45468:	213ffe04 	addi	r4,r4,-8
   4546c:	24009726 	beq	r4,r16,456cc <_malloc_r+0x2f4>
   45470:	80800117 	ldw	r2,4(r16)
   45474:	01bfff04 	movi	r6,-4
   45478:	014003c4 	movi	r5,15
   4547c:	1184703a 	and	r2,r2,r6
   45480:	1447c83a 	sub	r3,r2,r17
   45484:	28c00716 	blt	r5,r3,454a4 <_malloc_r+0xcc>
   45488:	1800920e 	bge	r3,zero,456d4 <_malloc_r+0x2fc>
   4548c:	84000317 	ldw	r16,12(r16)
   45490:	24008e26 	beq	r4,r16,456cc <_malloc_r+0x2f4>
   45494:	80800117 	ldw	r2,4(r16)
   45498:	1184703a 	and	r2,r2,r6
   4549c:	1447c83a 	sub	r3,r2,r17
   454a0:	28fff90e 	bge	r5,r3,45488 <__alt_data_end+0xfffdfc88>
   454a4:	3809883a 	mov	r4,r7
   454a8:	018001b4 	movhi	r6,6
   454ac:	9c000417 	ldw	r16,16(r19)
   454b0:	31a52704 	addi	r6,r6,-27492
   454b4:	32000204 	addi	r8,r6,8
   454b8:	82013426 	beq	r16,r8,4598c <_malloc_r+0x5b4>
   454bc:	80c00117 	ldw	r3,4(r16)
   454c0:	00bfff04 	movi	r2,-4
   454c4:	188e703a 	and	r7,r3,r2
   454c8:	3c45c83a 	sub	r2,r7,r17
   454cc:	00c003c4 	movi	r3,15
   454d0:	18811f16 	blt	r3,r2,45950 <_malloc_r+0x578>
   454d4:	32000515 	stw	r8,20(r6)
   454d8:	32000415 	stw	r8,16(r6)
   454dc:	10007f0e 	bge	r2,zero,456dc <_malloc_r+0x304>
   454e0:	00807fc4 	movi	r2,511
   454e4:	11c0fd36 	bltu	r2,r7,458dc <_malloc_r+0x504>
   454e8:	3806d0fa 	srli	r3,r7,3
   454ec:	01c00044 	movi	r7,1
   454f0:	30800117 	ldw	r2,4(r6)
   454f4:	19400044 	addi	r5,r3,1
   454f8:	294b883a 	add	r5,r5,r5
   454fc:	1807d0ba 	srai	r3,r3,2
   45500:	294b883a 	add	r5,r5,r5
   45504:	294b883a 	add	r5,r5,r5
   45508:	298b883a 	add	r5,r5,r6
   4550c:	38c6983a 	sll	r3,r7,r3
   45510:	29c00017 	ldw	r7,0(r5)
   45514:	2a7ffe04 	addi	r9,r5,-8
   45518:	1886b03a 	or	r3,r3,r2
   4551c:	82400315 	stw	r9,12(r16)
   45520:	81c00215 	stw	r7,8(r16)
   45524:	30c00115 	stw	r3,4(r6)
   45528:	2c000015 	stw	r16,0(r5)
   4552c:	3c000315 	stw	r16,12(r7)
   45530:	2005d0ba 	srai	r2,r4,2
   45534:	01400044 	movi	r5,1
   45538:	288a983a 	sll	r5,r5,r2
   4553c:	19406f36 	bltu	r3,r5,456fc <_malloc_r+0x324>
   45540:	28c4703a 	and	r2,r5,r3
   45544:	10000a1e 	bne	r2,zero,45570 <_malloc_r+0x198>
   45548:	00bfff04 	movi	r2,-4
   4554c:	294b883a 	add	r5,r5,r5
   45550:	2088703a 	and	r4,r4,r2
   45554:	28c4703a 	and	r2,r5,r3
   45558:	21000104 	addi	r4,r4,4
   4555c:	1000041e 	bne	r2,zero,45570 <_malloc_r+0x198>
   45560:	294b883a 	add	r5,r5,r5
   45564:	28c4703a 	and	r2,r5,r3
   45568:	21000104 	addi	r4,r4,4
   4556c:	103ffc26 	beq	r2,zero,45560 <__alt_data_end+0xfffdfd60>
   45570:	02bfff04 	movi	r10,-4
   45574:	024003c4 	movi	r9,15
   45578:	21800044 	addi	r6,r4,1
   4557c:	318d883a 	add	r6,r6,r6
   45580:	318d883a 	add	r6,r6,r6
   45584:	318d883a 	add	r6,r6,r6
   45588:	998d883a 	add	r6,r19,r6
   4558c:	333ffe04 	addi	r12,r6,-8
   45590:	2017883a 	mov	r11,r4
   45594:	31800104 	addi	r6,r6,4
   45598:	34000017 	ldw	r16,0(r6)
   4559c:	31fffd04 	addi	r7,r6,-12
   455a0:	81c0041e 	bne	r16,r7,455b4 <_malloc_r+0x1dc>
   455a4:	0000fb06 	br	45994 <_malloc_r+0x5bc>
   455a8:	1801030e 	bge	r3,zero,459b8 <_malloc_r+0x5e0>
   455ac:	84000317 	ldw	r16,12(r16)
   455b0:	81c0f826 	beq	r16,r7,45994 <_malloc_r+0x5bc>
   455b4:	80800117 	ldw	r2,4(r16)
   455b8:	1284703a 	and	r2,r2,r10
   455bc:	1447c83a 	sub	r3,r2,r17
   455c0:	48fff90e 	bge	r9,r3,455a8 <__alt_data_end+0xfffdfda8>
   455c4:	80800317 	ldw	r2,12(r16)
   455c8:	81000217 	ldw	r4,8(r16)
   455cc:	89400054 	ori	r5,r17,1
   455d0:	81400115 	stw	r5,4(r16)
   455d4:	20800315 	stw	r2,12(r4)
   455d8:	11000215 	stw	r4,8(r2)
   455dc:	8463883a 	add	r17,r16,r17
   455e0:	9c400515 	stw	r17,20(r19)
   455e4:	9c400415 	stw	r17,16(r19)
   455e8:	18800054 	ori	r2,r3,1
   455ec:	88800115 	stw	r2,4(r17)
   455f0:	8a000315 	stw	r8,12(r17)
   455f4:	8a000215 	stw	r8,8(r17)
   455f8:	88e3883a 	add	r17,r17,r3
   455fc:	88c00015 	stw	r3,0(r17)
   45600:	9009883a 	mov	r4,r18
   45604:	004e1400 	call	4e140 <__malloc_unlock>
   45608:	80800204 	addi	r2,r16,8
   4560c:	00001b06 	br	4567c <_malloc_r+0x2a4>
   45610:	04400404 	movi	r17,16
   45614:	89402536 	bltu	r17,r5,456ac <_malloc_r+0x2d4>
   45618:	004e0200 	call	4e020 <__malloc_lock>
   4561c:	00800184 	movi	r2,6
   45620:	01000084 	movi	r4,2
   45624:	04c001b4 	movhi	r19,6
   45628:	1085883a 	add	r2,r2,r2
   4562c:	9ce52704 	addi	r19,r19,-27492
   45630:	1085883a 	add	r2,r2,r2
   45634:	9885883a 	add	r2,r19,r2
   45638:	14000117 	ldw	r16,4(r2)
   4563c:	10fffe04 	addi	r3,r2,-8
   45640:	80c0d926 	beq	r16,r3,459a8 <_malloc_r+0x5d0>
   45644:	80c00117 	ldw	r3,4(r16)
   45648:	81000317 	ldw	r4,12(r16)
   4564c:	00bfff04 	movi	r2,-4
   45650:	1884703a 	and	r2,r3,r2
   45654:	81400217 	ldw	r5,8(r16)
   45658:	8085883a 	add	r2,r16,r2
   4565c:	10c00117 	ldw	r3,4(r2)
   45660:	29000315 	stw	r4,12(r5)
   45664:	21400215 	stw	r5,8(r4)
   45668:	18c00054 	ori	r3,r3,1
   4566c:	10c00115 	stw	r3,4(r2)
   45670:	9009883a 	mov	r4,r18
   45674:	004e1400 	call	4e140 <__malloc_unlock>
   45678:	80800204 	addi	r2,r16,8
   4567c:	dfc00a17 	ldw	ra,40(sp)
   45680:	df000917 	ldw	fp,36(sp)
   45684:	ddc00817 	ldw	r23,32(sp)
   45688:	dd800717 	ldw	r22,28(sp)
   4568c:	dd400617 	ldw	r21,24(sp)
   45690:	dd000517 	ldw	r20,20(sp)
   45694:	dcc00417 	ldw	r19,16(sp)
   45698:	dc800317 	ldw	r18,12(sp)
   4569c:	dc400217 	ldw	r17,8(sp)
   456a0:	dc000117 	ldw	r16,4(sp)
   456a4:	dec00b04 	addi	sp,sp,44
   456a8:	f800283a 	ret
   456ac:	00800304 	movi	r2,12
   456b0:	90800015 	stw	r2,0(r18)
   456b4:	0005883a 	mov	r2,zero
   456b8:	003ff006 	br	4567c <__alt_data_end+0xfffdfe7c>
   456bc:	01002004 	movi	r4,128
   456c0:	02001004 	movi	r8,64
   456c4:	01c00fc4 	movi	r7,63
   456c8:	003f6106 	br	45450 <__alt_data_end+0xfffdfc50>
   456cc:	4009883a 	mov	r4,r8
   456d0:	003f7506 	br	454a8 <__alt_data_end+0xfffdfca8>
   456d4:	81000317 	ldw	r4,12(r16)
   456d8:	003fde06 	br	45654 <__alt_data_end+0xfffdfe54>
   456dc:	81c5883a 	add	r2,r16,r7
   456e0:	11400117 	ldw	r5,4(r2)
   456e4:	9009883a 	mov	r4,r18
   456e8:	29400054 	ori	r5,r5,1
   456ec:	11400115 	stw	r5,4(r2)
   456f0:	004e1400 	call	4e140 <__malloc_unlock>
   456f4:	80800204 	addi	r2,r16,8
   456f8:	003fe006 	br	4567c <__alt_data_end+0xfffdfe7c>
   456fc:	9c000217 	ldw	r16,8(r19)
   45700:	00bfff04 	movi	r2,-4
   45704:	85800117 	ldw	r22,4(r16)
   45708:	b0ac703a 	and	r22,r22,r2
   4570c:	b4400336 	bltu	r22,r17,4571c <_malloc_r+0x344>
   45710:	b445c83a 	sub	r2,r22,r17
   45714:	00c003c4 	movi	r3,15
   45718:	18805d16 	blt	r3,r2,45890 <_malloc_r+0x4b8>
   4571c:	05c001b4 	movhi	r23,6
   45720:	008001b4 	movhi	r2,6
   45724:	10b1c104 	addi	r2,r2,-14588
   45728:	bdeab104 	addi	r23,r23,-21820
   4572c:	15400017 	ldw	r21,0(r2)
   45730:	b8c00017 	ldw	r3,0(r23)
   45734:	00bfffc4 	movi	r2,-1
   45738:	858d883a 	add	r6,r16,r22
   4573c:	8d6b883a 	add	r21,r17,r21
   45740:	1880ea26 	beq	r3,r2,45aec <_malloc_r+0x714>
   45744:	ad4403c4 	addi	r21,r21,4111
   45748:	00bc0004 	movi	r2,-4096
   4574c:	a8aa703a 	and	r21,r21,r2
   45750:	a80b883a 	mov	r5,r21
   45754:	9009883a 	mov	r4,r18
   45758:	d9800015 	stw	r6,0(sp)
   4575c:	00470640 	call	47064 <_sbrk_r>
   45760:	1029883a 	mov	r20,r2
   45764:	00bfffc4 	movi	r2,-1
   45768:	d9800017 	ldw	r6,0(sp)
   4576c:	a080e826 	beq	r20,r2,45b10 <_malloc_r+0x738>
   45770:	a180a636 	bltu	r20,r6,45a0c <_malloc_r+0x634>
   45774:	070001b4 	movhi	fp,6
   45778:	e731e304 	addi	fp,fp,-14452
   4577c:	e0800017 	ldw	r2,0(fp)
   45780:	a887883a 	add	r3,r21,r2
   45784:	e0c00015 	stw	r3,0(fp)
   45788:	3500e626 	beq	r6,r20,45b24 <_malloc_r+0x74c>
   4578c:	b9000017 	ldw	r4,0(r23)
   45790:	00bfffc4 	movi	r2,-1
   45794:	2080ee26 	beq	r4,r2,45b50 <_malloc_r+0x778>
   45798:	a185c83a 	sub	r2,r20,r6
   4579c:	10c5883a 	add	r2,r2,r3
   457a0:	e0800015 	stw	r2,0(fp)
   457a4:	a0c001cc 	andi	r3,r20,7
   457a8:	1800bc26 	beq	r3,zero,45a9c <_malloc_r+0x6c4>
   457ac:	a0e9c83a 	sub	r20,r20,r3
   457b0:	00840204 	movi	r2,4104
   457b4:	a5000204 	addi	r20,r20,8
   457b8:	10c7c83a 	sub	r3,r2,r3
   457bc:	a545883a 	add	r2,r20,r21
   457c0:	1083ffcc 	andi	r2,r2,4095
   457c4:	18abc83a 	sub	r21,r3,r2
   457c8:	a80b883a 	mov	r5,r21
   457cc:	9009883a 	mov	r4,r18
   457d0:	00470640 	call	47064 <_sbrk_r>
   457d4:	00ffffc4 	movi	r3,-1
   457d8:	10c0e126 	beq	r2,r3,45b60 <_malloc_r+0x788>
   457dc:	1505c83a 	sub	r2,r2,r20
   457e0:	1545883a 	add	r2,r2,r21
   457e4:	10800054 	ori	r2,r2,1
   457e8:	e0c00017 	ldw	r3,0(fp)
   457ec:	9d000215 	stw	r20,8(r19)
   457f0:	a0800115 	stw	r2,4(r20)
   457f4:	a8c7883a 	add	r3,r21,r3
   457f8:	e0c00015 	stw	r3,0(fp)
   457fc:	84c00e26 	beq	r16,r19,45838 <_malloc_r+0x460>
   45800:	018003c4 	movi	r6,15
   45804:	3580a72e 	bgeu	r6,r22,45aa4 <_malloc_r+0x6cc>
   45808:	81400117 	ldw	r5,4(r16)
   4580c:	013ffe04 	movi	r4,-8
   45810:	b0bffd04 	addi	r2,r22,-12
   45814:	1104703a 	and	r2,r2,r4
   45818:	2900004c 	andi	r4,r5,1
   4581c:	2088b03a 	or	r4,r4,r2
   45820:	81000115 	stw	r4,4(r16)
   45824:	01400144 	movi	r5,5
   45828:	8089883a 	add	r4,r16,r2
   4582c:	21400115 	stw	r5,4(r4)
   45830:	21400215 	stw	r5,8(r4)
   45834:	3080cd36 	bltu	r6,r2,45b6c <_malloc_r+0x794>
   45838:	008001b4 	movhi	r2,6
   4583c:	10b1c004 	addi	r2,r2,-14592
   45840:	11000017 	ldw	r4,0(r2)
   45844:	20c0012e 	bgeu	r4,r3,4584c <_malloc_r+0x474>
   45848:	10c00015 	stw	r3,0(r2)
   4584c:	008001b4 	movhi	r2,6
   45850:	10b1bf04 	addi	r2,r2,-14596
   45854:	11000017 	ldw	r4,0(r2)
   45858:	9c000217 	ldw	r16,8(r19)
   4585c:	20c0012e 	bgeu	r4,r3,45864 <_malloc_r+0x48c>
   45860:	10c00015 	stw	r3,0(r2)
   45864:	80c00117 	ldw	r3,4(r16)
   45868:	00bfff04 	movi	r2,-4
   4586c:	1886703a 	and	r3,r3,r2
   45870:	1c45c83a 	sub	r2,r3,r17
   45874:	1c400236 	bltu	r3,r17,45880 <_malloc_r+0x4a8>
   45878:	00c003c4 	movi	r3,15
   4587c:	18800416 	blt	r3,r2,45890 <_malloc_r+0x4b8>
   45880:	9009883a 	mov	r4,r18
   45884:	004e1400 	call	4e140 <__malloc_unlock>
   45888:	0005883a 	mov	r2,zero
   4588c:	003f7b06 	br	4567c <__alt_data_end+0xfffdfe7c>
   45890:	88c00054 	ori	r3,r17,1
   45894:	80c00115 	stw	r3,4(r16)
   45898:	8463883a 	add	r17,r16,r17
   4589c:	10800054 	ori	r2,r2,1
   458a0:	9c400215 	stw	r17,8(r19)
   458a4:	88800115 	stw	r2,4(r17)
   458a8:	9009883a 	mov	r4,r18
   458ac:	004e1400 	call	4e140 <__malloc_unlock>
   458b0:	80800204 	addi	r2,r16,8
   458b4:	003f7106 	br	4567c <__alt_data_end+0xfffdfe7c>
   458b8:	00c00504 	movi	r3,20
   458bc:	18804a2e 	bgeu	r3,r2,459e8 <_malloc_r+0x610>
   458c0:	00c01504 	movi	r3,84
   458c4:	18806e36 	bltu	r3,r2,45a80 <_malloc_r+0x6a8>
   458c8:	8804d33a 	srli	r2,r17,12
   458cc:	12001bc4 	addi	r8,r2,111
   458d0:	11c01b84 	addi	r7,r2,110
   458d4:	4209883a 	add	r4,r8,r8
   458d8:	003edd06 	br	45450 <__alt_data_end+0xfffdfc50>
   458dc:	3804d27a 	srli	r2,r7,9
   458e0:	00c00104 	movi	r3,4
   458e4:	1880442e 	bgeu	r3,r2,459f8 <_malloc_r+0x620>
   458e8:	00c00504 	movi	r3,20
   458ec:	18808136 	bltu	r3,r2,45af4 <_malloc_r+0x71c>
   458f0:	11401704 	addi	r5,r2,92
   458f4:	10c016c4 	addi	r3,r2,91
   458f8:	294b883a 	add	r5,r5,r5
   458fc:	294b883a 	add	r5,r5,r5
   45900:	294b883a 	add	r5,r5,r5
   45904:	994b883a 	add	r5,r19,r5
   45908:	28800017 	ldw	r2,0(r5)
   4590c:	018001b4 	movhi	r6,6
   45910:	297ffe04 	addi	r5,r5,-8
   45914:	31a52704 	addi	r6,r6,-27492
   45918:	28806526 	beq	r5,r2,45ab0 <_malloc_r+0x6d8>
   4591c:	01bfff04 	movi	r6,-4
   45920:	10c00117 	ldw	r3,4(r2)
   45924:	1986703a 	and	r3,r3,r6
   45928:	38c0022e 	bgeu	r7,r3,45934 <_malloc_r+0x55c>
   4592c:	10800217 	ldw	r2,8(r2)
   45930:	28bffb1e 	bne	r5,r2,45920 <__alt_data_end+0xfffe0120>
   45934:	11400317 	ldw	r5,12(r2)
   45938:	98c00117 	ldw	r3,4(r19)
   4593c:	81400315 	stw	r5,12(r16)
   45940:	80800215 	stw	r2,8(r16)
   45944:	2c000215 	stw	r16,8(r5)
   45948:	14000315 	stw	r16,12(r2)
   4594c:	003ef806 	br	45530 <__alt_data_end+0xfffdfd30>
   45950:	88c00054 	ori	r3,r17,1
   45954:	80c00115 	stw	r3,4(r16)
   45958:	8463883a 	add	r17,r16,r17
   4595c:	34400515 	stw	r17,20(r6)
   45960:	34400415 	stw	r17,16(r6)
   45964:	10c00054 	ori	r3,r2,1
   45968:	8a000315 	stw	r8,12(r17)
   4596c:	8a000215 	stw	r8,8(r17)
   45970:	88c00115 	stw	r3,4(r17)
   45974:	88a3883a 	add	r17,r17,r2
   45978:	88800015 	stw	r2,0(r17)
   4597c:	9009883a 	mov	r4,r18
   45980:	004e1400 	call	4e140 <__malloc_unlock>
   45984:	80800204 	addi	r2,r16,8
   45988:	003f3c06 	br	4567c <__alt_data_end+0xfffdfe7c>
   4598c:	30c00117 	ldw	r3,4(r6)
   45990:	003ee706 	br	45530 <__alt_data_end+0xfffdfd30>
   45994:	5ac00044 	addi	r11,r11,1
   45998:	588000cc 	andi	r2,r11,3
   4599c:	31800204 	addi	r6,r6,8
   459a0:	103efd1e 	bne	r2,zero,45598 <__alt_data_end+0xfffdfd98>
   459a4:	00002406 	br	45a38 <_malloc_r+0x660>
   459a8:	14000317 	ldw	r16,12(r2)
   459ac:	143f251e 	bne	r2,r16,45644 <__alt_data_end+0xfffdfe44>
   459b0:	21000084 	addi	r4,r4,2
   459b4:	003ebc06 	br	454a8 <__alt_data_end+0xfffdfca8>
   459b8:	8085883a 	add	r2,r16,r2
   459bc:	10c00117 	ldw	r3,4(r2)
   459c0:	81000317 	ldw	r4,12(r16)
   459c4:	81400217 	ldw	r5,8(r16)
   459c8:	18c00054 	ori	r3,r3,1
   459cc:	10c00115 	stw	r3,4(r2)
   459d0:	29000315 	stw	r4,12(r5)
   459d4:	21400215 	stw	r5,8(r4)
   459d8:	9009883a 	mov	r4,r18
   459dc:	004e1400 	call	4e140 <__malloc_unlock>
   459e0:	80800204 	addi	r2,r16,8
   459e4:	003f2506 	br	4567c <__alt_data_end+0xfffdfe7c>
   459e8:	12001704 	addi	r8,r2,92
   459ec:	11c016c4 	addi	r7,r2,91
   459f0:	4209883a 	add	r4,r8,r8
   459f4:	003e9606 	br	45450 <__alt_data_end+0xfffdfc50>
   459f8:	3804d1ba 	srli	r2,r7,6
   459fc:	11400e44 	addi	r5,r2,57
   45a00:	10c00e04 	addi	r3,r2,56
   45a04:	294b883a 	add	r5,r5,r5
   45a08:	003fbc06 	br	458fc <__alt_data_end+0xfffe00fc>
   45a0c:	84ff5926 	beq	r16,r19,45774 <__alt_data_end+0xfffdff74>
   45a10:	008001b4 	movhi	r2,6
   45a14:	10a52704 	addi	r2,r2,-27492
   45a18:	14000217 	ldw	r16,8(r2)
   45a1c:	00bfff04 	movi	r2,-4
   45a20:	80c00117 	ldw	r3,4(r16)
   45a24:	1886703a 	and	r3,r3,r2
   45a28:	003f9106 	br	45870 <__alt_data_end+0xfffe0070>
   45a2c:	60800217 	ldw	r2,8(r12)
   45a30:	213fffc4 	addi	r4,r4,-1
   45a34:	1300651e 	bne	r2,r12,45bcc <_malloc_r+0x7f4>
   45a38:	208000cc 	andi	r2,r4,3
   45a3c:	633ffe04 	addi	r12,r12,-8
   45a40:	103ffa1e 	bne	r2,zero,45a2c <__alt_data_end+0xfffe022c>
   45a44:	98800117 	ldw	r2,4(r19)
   45a48:	0146303a 	nor	r3,zero,r5
   45a4c:	1884703a 	and	r2,r3,r2
   45a50:	98800115 	stw	r2,4(r19)
   45a54:	294b883a 	add	r5,r5,r5
   45a58:	117f2836 	bltu	r2,r5,456fc <__alt_data_end+0xfffdfefc>
   45a5c:	283f2726 	beq	r5,zero,456fc <__alt_data_end+0xfffdfefc>
   45a60:	2886703a 	and	r3,r5,r2
   45a64:	5809883a 	mov	r4,r11
   45a68:	183ec31e 	bne	r3,zero,45578 <__alt_data_end+0xfffdfd78>
   45a6c:	294b883a 	add	r5,r5,r5
   45a70:	2886703a 	and	r3,r5,r2
   45a74:	21000104 	addi	r4,r4,4
   45a78:	183ffc26 	beq	r3,zero,45a6c <__alt_data_end+0xfffe026c>
   45a7c:	003ebe06 	br	45578 <__alt_data_end+0xfffdfd78>
   45a80:	00c05504 	movi	r3,340
   45a84:	18801236 	bltu	r3,r2,45ad0 <_malloc_r+0x6f8>
   45a88:	8804d3fa 	srli	r2,r17,15
   45a8c:	12001e04 	addi	r8,r2,120
   45a90:	11c01dc4 	addi	r7,r2,119
   45a94:	4209883a 	add	r4,r8,r8
   45a98:	003e6d06 	br	45450 <__alt_data_end+0xfffdfc50>
   45a9c:	00c40004 	movi	r3,4096
   45aa0:	003f4606 	br	457bc <__alt_data_end+0xfffdffbc>
   45aa4:	00800044 	movi	r2,1
   45aa8:	a0800115 	stw	r2,4(r20)
   45aac:	003f7406 	br	45880 <__alt_data_end+0xfffe0080>
   45ab0:	1805d0ba 	srai	r2,r3,2
   45ab4:	01c00044 	movi	r7,1
   45ab8:	30c00117 	ldw	r3,4(r6)
   45abc:	388e983a 	sll	r7,r7,r2
   45ac0:	2805883a 	mov	r2,r5
   45ac4:	38c6b03a 	or	r3,r7,r3
   45ac8:	30c00115 	stw	r3,4(r6)
   45acc:	003f9b06 	br	4593c <__alt_data_end+0xfffe013c>
   45ad0:	00c15504 	movi	r3,1364
   45ad4:	18801a36 	bltu	r3,r2,45b40 <_malloc_r+0x768>
   45ad8:	8804d4ba 	srli	r2,r17,18
   45adc:	12001f44 	addi	r8,r2,125
   45ae0:	11c01f04 	addi	r7,r2,124
   45ae4:	4209883a 	add	r4,r8,r8
   45ae8:	003e5906 	br	45450 <__alt_data_end+0xfffdfc50>
   45aec:	ad400404 	addi	r21,r21,16
   45af0:	003f1706 	br	45750 <__alt_data_end+0xfffdff50>
   45af4:	00c01504 	movi	r3,84
   45af8:	18802336 	bltu	r3,r2,45b88 <_malloc_r+0x7b0>
   45afc:	3804d33a 	srli	r2,r7,12
   45b00:	11401bc4 	addi	r5,r2,111
   45b04:	10c01b84 	addi	r3,r2,110
   45b08:	294b883a 	add	r5,r5,r5
   45b0c:	003f7b06 	br	458fc <__alt_data_end+0xfffe00fc>
   45b10:	9c000217 	ldw	r16,8(r19)
   45b14:	00bfff04 	movi	r2,-4
   45b18:	80c00117 	ldw	r3,4(r16)
   45b1c:	1886703a 	and	r3,r3,r2
   45b20:	003f5306 	br	45870 <__alt_data_end+0xfffe0070>
   45b24:	3083ffcc 	andi	r2,r6,4095
   45b28:	103f181e 	bne	r2,zero,4578c <__alt_data_end+0xfffdff8c>
   45b2c:	99000217 	ldw	r4,8(r19)
   45b30:	b545883a 	add	r2,r22,r21
   45b34:	10800054 	ori	r2,r2,1
   45b38:	20800115 	stw	r2,4(r4)
   45b3c:	003f3e06 	br	45838 <__alt_data_end+0xfffe0038>
   45b40:	01003f84 	movi	r4,254
   45b44:	02001fc4 	movi	r8,127
   45b48:	01c01f84 	movi	r7,126
   45b4c:	003e4006 	br	45450 <__alt_data_end+0xfffdfc50>
   45b50:	008001b4 	movhi	r2,6
   45b54:	10aab104 	addi	r2,r2,-21820
   45b58:	15000015 	stw	r20,0(r2)
   45b5c:	003f1106 	br	457a4 <__alt_data_end+0xfffdffa4>
   45b60:	00800044 	movi	r2,1
   45b64:	002b883a 	mov	r21,zero
   45b68:	003f1f06 	br	457e8 <__alt_data_end+0xfffdffe8>
   45b6c:	81400204 	addi	r5,r16,8
   45b70:	9009883a 	mov	r4,r18
   45b74:	0044ca80 	call	44ca8 <_free_r>
   45b78:	008001b4 	movhi	r2,6
   45b7c:	10b1e304 	addi	r2,r2,-14452
   45b80:	10c00017 	ldw	r3,0(r2)
   45b84:	003f2c06 	br	45838 <__alt_data_end+0xfffe0038>
   45b88:	00c05504 	movi	r3,340
   45b8c:	18800536 	bltu	r3,r2,45ba4 <_malloc_r+0x7cc>
   45b90:	3804d3fa 	srli	r2,r7,15
   45b94:	11401e04 	addi	r5,r2,120
   45b98:	10c01dc4 	addi	r3,r2,119
   45b9c:	294b883a 	add	r5,r5,r5
   45ba0:	003f5606 	br	458fc <__alt_data_end+0xfffe00fc>
   45ba4:	00c15504 	movi	r3,1364
   45ba8:	18800536 	bltu	r3,r2,45bc0 <_malloc_r+0x7e8>
   45bac:	3804d4ba 	srli	r2,r7,18
   45bb0:	11401f44 	addi	r5,r2,125
   45bb4:	10c01f04 	addi	r3,r2,124
   45bb8:	294b883a 	add	r5,r5,r5
   45bbc:	003f4f06 	br	458fc <__alt_data_end+0xfffe00fc>
   45bc0:	01403f84 	movi	r5,254
   45bc4:	00c01f84 	movi	r3,126
   45bc8:	003f4c06 	br	458fc <__alt_data_end+0xfffe00fc>
   45bcc:	98800117 	ldw	r2,4(r19)
   45bd0:	003fa006 	br	45a54 <__alt_data_end+0xfffe0254>
   45bd4:	8808d0fa 	srli	r4,r17,3
   45bd8:	20800044 	addi	r2,r4,1
   45bdc:	1085883a 	add	r2,r2,r2
   45be0:	003e9006 	br	45624 <__alt_data_end+0xfffdfe24>

00045be4 <memchr>:
   45be4:	208000cc 	andi	r2,r4,3
   45be8:	280f883a 	mov	r7,r5
   45bec:	10003426 	beq	r2,zero,45cc0 <memchr+0xdc>
   45bf0:	30bfffc4 	addi	r2,r6,-1
   45bf4:	30001a26 	beq	r6,zero,45c60 <memchr+0x7c>
   45bf8:	20c00003 	ldbu	r3,0(r4)
   45bfc:	29803fcc 	andi	r6,r5,255
   45c00:	30c0051e 	bne	r6,r3,45c18 <memchr+0x34>
   45c04:	00001806 	br	45c68 <memchr+0x84>
   45c08:	10001526 	beq	r2,zero,45c60 <memchr+0x7c>
   45c0c:	20c00003 	ldbu	r3,0(r4)
   45c10:	10bfffc4 	addi	r2,r2,-1
   45c14:	30c01426 	beq	r6,r3,45c68 <memchr+0x84>
   45c18:	21000044 	addi	r4,r4,1
   45c1c:	20c000cc 	andi	r3,r4,3
   45c20:	183ff91e 	bne	r3,zero,45c08 <__alt_data_end+0xfffe0408>
   45c24:	020000c4 	movi	r8,3
   45c28:	40801136 	bltu	r8,r2,45c70 <memchr+0x8c>
   45c2c:	10000c26 	beq	r2,zero,45c60 <memchr+0x7c>
   45c30:	20c00003 	ldbu	r3,0(r4)
   45c34:	29403fcc 	andi	r5,r5,255
   45c38:	28c00b26 	beq	r5,r3,45c68 <memchr+0x84>
   45c3c:	20c00044 	addi	r3,r4,1
   45c40:	39803fcc 	andi	r6,r7,255
   45c44:	2089883a 	add	r4,r4,r2
   45c48:	00000306 	br	45c58 <memchr+0x74>
   45c4c:	18c00044 	addi	r3,r3,1
   45c50:	197fffc3 	ldbu	r5,-1(r3)
   45c54:	31400526 	beq	r6,r5,45c6c <memchr+0x88>
   45c58:	1805883a 	mov	r2,r3
   45c5c:	20fffb1e 	bne	r4,r3,45c4c <__alt_data_end+0xfffe044c>
   45c60:	0005883a 	mov	r2,zero
   45c64:	f800283a 	ret
   45c68:	2005883a 	mov	r2,r4
   45c6c:	f800283a 	ret
   45c70:	28c03fcc 	andi	r3,r5,255
   45c74:	1812923a 	slli	r9,r3,8
   45c78:	02ffbff4 	movhi	r11,65279
   45c7c:	02a02074 	movhi	r10,32897
   45c80:	48d2b03a 	or	r9,r9,r3
   45c84:	4806943a 	slli	r3,r9,16
   45c88:	5affbfc4 	addi	r11,r11,-257
   45c8c:	52a02004 	addi	r10,r10,-32640
   45c90:	48d2b03a 	or	r9,r9,r3
   45c94:	20c00017 	ldw	r3,0(r4)
   45c98:	48c6f03a 	xor	r3,r9,r3
   45c9c:	1acd883a 	add	r6,r3,r11
   45ca0:	00c6303a 	nor	r3,zero,r3
   45ca4:	30c6703a 	and	r3,r6,r3
   45ca8:	1a86703a 	and	r3,r3,r10
   45cac:	183fe01e 	bne	r3,zero,45c30 <__alt_data_end+0xfffe0430>
   45cb0:	10bfff04 	addi	r2,r2,-4
   45cb4:	21000104 	addi	r4,r4,4
   45cb8:	40bff636 	bltu	r8,r2,45c94 <__alt_data_end+0xfffe0494>
   45cbc:	003fdb06 	br	45c2c <__alt_data_end+0xfffe042c>
   45cc0:	3005883a 	mov	r2,r6
   45cc4:	003fd706 	br	45c24 <__alt_data_end+0xfffe0424>

00045cc8 <memcpy>:
   45cc8:	defffd04 	addi	sp,sp,-12
   45ccc:	dfc00215 	stw	ra,8(sp)
   45cd0:	dc400115 	stw	r17,4(sp)
   45cd4:	dc000015 	stw	r16,0(sp)
   45cd8:	00c003c4 	movi	r3,15
   45cdc:	2005883a 	mov	r2,r4
   45ce0:	1980452e 	bgeu	r3,r6,45df8 <memcpy+0x130>
   45ce4:	2906b03a 	or	r3,r5,r4
   45ce8:	18c000cc 	andi	r3,r3,3
   45cec:	1800441e 	bne	r3,zero,45e00 <memcpy+0x138>
   45cf0:	347ffc04 	addi	r17,r6,-16
   45cf4:	8822d13a 	srli	r17,r17,4
   45cf8:	28c00104 	addi	r3,r5,4
   45cfc:	23400104 	addi	r13,r4,4
   45d00:	8820913a 	slli	r16,r17,4
   45d04:	2b000204 	addi	r12,r5,8
   45d08:	22c00204 	addi	r11,r4,8
   45d0c:	84000504 	addi	r16,r16,20
   45d10:	2a800304 	addi	r10,r5,12
   45d14:	22400304 	addi	r9,r4,12
   45d18:	2c21883a 	add	r16,r5,r16
   45d1c:	2811883a 	mov	r8,r5
   45d20:	200f883a 	mov	r7,r4
   45d24:	41000017 	ldw	r4,0(r8)
   45d28:	1fc00017 	ldw	ra,0(r3)
   45d2c:	63c00017 	ldw	r15,0(r12)
   45d30:	39000015 	stw	r4,0(r7)
   45d34:	53800017 	ldw	r14,0(r10)
   45d38:	6fc00015 	stw	ra,0(r13)
   45d3c:	5bc00015 	stw	r15,0(r11)
   45d40:	4b800015 	stw	r14,0(r9)
   45d44:	18c00404 	addi	r3,r3,16
   45d48:	39c00404 	addi	r7,r7,16
   45d4c:	42000404 	addi	r8,r8,16
   45d50:	6b400404 	addi	r13,r13,16
   45d54:	63000404 	addi	r12,r12,16
   45d58:	5ac00404 	addi	r11,r11,16
   45d5c:	52800404 	addi	r10,r10,16
   45d60:	4a400404 	addi	r9,r9,16
   45d64:	1c3fef1e 	bne	r3,r16,45d24 <__alt_data_end+0xfffe0524>
   45d68:	89c00044 	addi	r7,r17,1
   45d6c:	380e913a 	slli	r7,r7,4
   45d70:	310003cc 	andi	r4,r6,15
   45d74:	02c000c4 	movi	r11,3
   45d78:	11c7883a 	add	r3,r2,r7
   45d7c:	29cb883a 	add	r5,r5,r7
   45d80:	5900212e 	bgeu	r11,r4,45e08 <memcpy+0x140>
   45d84:	1813883a 	mov	r9,r3
   45d88:	2811883a 	mov	r8,r5
   45d8c:	200f883a 	mov	r7,r4
   45d90:	42800017 	ldw	r10,0(r8)
   45d94:	4a400104 	addi	r9,r9,4
   45d98:	39ffff04 	addi	r7,r7,-4
   45d9c:	4abfff15 	stw	r10,-4(r9)
   45da0:	42000104 	addi	r8,r8,4
   45da4:	59fffa36 	bltu	r11,r7,45d90 <__alt_data_end+0xfffe0590>
   45da8:	213fff04 	addi	r4,r4,-4
   45dac:	2008d0ba 	srli	r4,r4,2
   45db0:	318000cc 	andi	r6,r6,3
   45db4:	21000044 	addi	r4,r4,1
   45db8:	2109883a 	add	r4,r4,r4
   45dbc:	2109883a 	add	r4,r4,r4
   45dc0:	1907883a 	add	r3,r3,r4
   45dc4:	290b883a 	add	r5,r5,r4
   45dc8:	30000626 	beq	r6,zero,45de4 <memcpy+0x11c>
   45dcc:	198d883a 	add	r6,r3,r6
   45dd0:	29c00003 	ldbu	r7,0(r5)
   45dd4:	18c00044 	addi	r3,r3,1
   45dd8:	29400044 	addi	r5,r5,1
   45ddc:	19ffffc5 	stb	r7,-1(r3)
   45de0:	19bffb1e 	bne	r3,r6,45dd0 <__alt_data_end+0xfffe05d0>
   45de4:	dfc00217 	ldw	ra,8(sp)
   45de8:	dc400117 	ldw	r17,4(sp)
   45dec:	dc000017 	ldw	r16,0(sp)
   45df0:	dec00304 	addi	sp,sp,12
   45df4:	f800283a 	ret
   45df8:	2007883a 	mov	r3,r4
   45dfc:	003ff206 	br	45dc8 <__alt_data_end+0xfffe05c8>
   45e00:	2007883a 	mov	r3,r4
   45e04:	003ff106 	br	45dcc <__alt_data_end+0xfffe05cc>
   45e08:	200d883a 	mov	r6,r4
   45e0c:	003fee06 	br	45dc8 <__alt_data_end+0xfffe05c8>

00045e10 <memset>:
   45e10:	20c000cc 	andi	r3,r4,3
   45e14:	2005883a 	mov	r2,r4
   45e18:	18004426 	beq	r3,zero,45f2c <memset+0x11c>
   45e1c:	31ffffc4 	addi	r7,r6,-1
   45e20:	30004026 	beq	r6,zero,45f24 <memset+0x114>
   45e24:	2813883a 	mov	r9,r5
   45e28:	200d883a 	mov	r6,r4
   45e2c:	2007883a 	mov	r3,r4
   45e30:	00000406 	br	45e44 <memset+0x34>
   45e34:	3a3fffc4 	addi	r8,r7,-1
   45e38:	31800044 	addi	r6,r6,1
   45e3c:	38003926 	beq	r7,zero,45f24 <memset+0x114>
   45e40:	400f883a 	mov	r7,r8
   45e44:	18c00044 	addi	r3,r3,1
   45e48:	32400005 	stb	r9,0(r6)
   45e4c:	1a0000cc 	andi	r8,r3,3
   45e50:	403ff81e 	bne	r8,zero,45e34 <__alt_data_end+0xfffe0634>
   45e54:	010000c4 	movi	r4,3
   45e58:	21c02d2e 	bgeu	r4,r7,45f10 <memset+0x100>
   45e5c:	29003fcc 	andi	r4,r5,255
   45e60:	200c923a 	slli	r6,r4,8
   45e64:	3108b03a 	or	r4,r6,r4
   45e68:	200c943a 	slli	r6,r4,16
   45e6c:	218cb03a 	or	r6,r4,r6
   45e70:	010003c4 	movi	r4,15
   45e74:	21c0182e 	bgeu	r4,r7,45ed8 <memset+0xc8>
   45e78:	3b3ffc04 	addi	r12,r7,-16
   45e7c:	6018d13a 	srli	r12,r12,4
   45e80:	1a000104 	addi	r8,r3,4
   45e84:	1ac00204 	addi	r11,r3,8
   45e88:	6008913a 	slli	r4,r12,4
   45e8c:	1a800304 	addi	r10,r3,12
   45e90:	1813883a 	mov	r9,r3
   45e94:	21000504 	addi	r4,r4,20
   45e98:	1909883a 	add	r4,r3,r4
   45e9c:	49800015 	stw	r6,0(r9)
   45ea0:	41800015 	stw	r6,0(r8)
   45ea4:	59800015 	stw	r6,0(r11)
   45ea8:	51800015 	stw	r6,0(r10)
   45eac:	42000404 	addi	r8,r8,16
   45eb0:	4a400404 	addi	r9,r9,16
   45eb4:	5ac00404 	addi	r11,r11,16
   45eb8:	52800404 	addi	r10,r10,16
   45ebc:	413ff71e 	bne	r8,r4,45e9c <__alt_data_end+0xfffe069c>
   45ec0:	63000044 	addi	r12,r12,1
   45ec4:	6018913a 	slli	r12,r12,4
   45ec8:	39c003cc 	andi	r7,r7,15
   45ecc:	010000c4 	movi	r4,3
   45ed0:	1b07883a 	add	r3,r3,r12
   45ed4:	21c00e2e 	bgeu	r4,r7,45f10 <memset+0x100>
   45ed8:	1813883a 	mov	r9,r3
   45edc:	3811883a 	mov	r8,r7
   45ee0:	010000c4 	movi	r4,3
   45ee4:	49800015 	stw	r6,0(r9)
   45ee8:	423fff04 	addi	r8,r8,-4
   45eec:	4a400104 	addi	r9,r9,4
   45ef0:	223ffc36 	bltu	r4,r8,45ee4 <__alt_data_end+0xfffe06e4>
   45ef4:	393fff04 	addi	r4,r7,-4
   45ef8:	2008d0ba 	srli	r4,r4,2
   45efc:	39c000cc 	andi	r7,r7,3
   45f00:	21000044 	addi	r4,r4,1
   45f04:	2109883a 	add	r4,r4,r4
   45f08:	2109883a 	add	r4,r4,r4
   45f0c:	1907883a 	add	r3,r3,r4
   45f10:	38000526 	beq	r7,zero,45f28 <memset+0x118>
   45f14:	19cf883a 	add	r7,r3,r7
   45f18:	19400005 	stb	r5,0(r3)
   45f1c:	18c00044 	addi	r3,r3,1
   45f20:	38fffd1e 	bne	r7,r3,45f18 <__alt_data_end+0xfffe0718>
   45f24:	f800283a 	ret
   45f28:	f800283a 	ret
   45f2c:	2007883a 	mov	r3,r4
   45f30:	300f883a 	mov	r7,r6
   45f34:	003fc706 	br	45e54 <__alt_data_end+0xfffe0654>

00045f38 <_Balloc>:
   45f38:	20801317 	ldw	r2,76(r4)
   45f3c:	defffc04 	addi	sp,sp,-16
   45f40:	dc400115 	stw	r17,4(sp)
   45f44:	dc000015 	stw	r16,0(sp)
   45f48:	dfc00315 	stw	ra,12(sp)
   45f4c:	dc800215 	stw	r18,8(sp)
   45f50:	2023883a 	mov	r17,r4
   45f54:	2821883a 	mov	r16,r5
   45f58:	10000f26 	beq	r2,zero,45f98 <_Balloc+0x60>
   45f5c:	8407883a 	add	r3,r16,r16
   45f60:	18c7883a 	add	r3,r3,r3
   45f64:	10c7883a 	add	r3,r2,r3
   45f68:	18800017 	ldw	r2,0(r3)
   45f6c:	10001126 	beq	r2,zero,45fb4 <_Balloc+0x7c>
   45f70:	11000017 	ldw	r4,0(r2)
   45f74:	19000015 	stw	r4,0(r3)
   45f78:	10000415 	stw	zero,16(r2)
   45f7c:	10000315 	stw	zero,12(r2)
   45f80:	dfc00317 	ldw	ra,12(sp)
   45f84:	dc800217 	ldw	r18,8(sp)
   45f88:	dc400117 	ldw	r17,4(sp)
   45f8c:	dc000017 	ldw	r16,0(sp)
   45f90:	dec00404 	addi	sp,sp,16
   45f94:	f800283a 	ret
   45f98:	01800844 	movi	r6,33
   45f9c:	01400104 	movi	r5,4
   45fa0:	0048b140 	call	48b14 <_calloc_r>
   45fa4:	88801315 	stw	r2,76(r17)
   45fa8:	103fec1e 	bne	r2,zero,45f5c <__alt_data_end+0xfffe075c>
   45fac:	0005883a 	mov	r2,zero
   45fb0:	003ff306 	br	45f80 <__alt_data_end+0xfffe0780>
   45fb4:	01400044 	movi	r5,1
   45fb8:	2c24983a 	sll	r18,r5,r16
   45fbc:	8809883a 	mov	r4,r17
   45fc0:	91800144 	addi	r6,r18,5
   45fc4:	318d883a 	add	r6,r6,r6
   45fc8:	318d883a 	add	r6,r6,r6
   45fcc:	0048b140 	call	48b14 <_calloc_r>
   45fd0:	103ff626 	beq	r2,zero,45fac <__alt_data_end+0xfffe07ac>
   45fd4:	14000115 	stw	r16,4(r2)
   45fd8:	14800215 	stw	r18,8(r2)
   45fdc:	003fe606 	br	45f78 <__alt_data_end+0xfffe0778>

00045fe0 <_Bfree>:
   45fe0:	28000826 	beq	r5,zero,46004 <_Bfree+0x24>
   45fe4:	28c00117 	ldw	r3,4(r5)
   45fe8:	20801317 	ldw	r2,76(r4)
   45fec:	18c7883a 	add	r3,r3,r3
   45ff0:	18c7883a 	add	r3,r3,r3
   45ff4:	10c5883a 	add	r2,r2,r3
   45ff8:	10c00017 	ldw	r3,0(r2)
   45ffc:	28c00015 	stw	r3,0(r5)
   46000:	11400015 	stw	r5,0(r2)
   46004:	f800283a 	ret

00046008 <__multadd>:
   46008:	defff704 	addi	sp,sp,-36
   4600c:	dc800215 	stw	r18,8(sp)
   46010:	2c800417 	ldw	r18,16(r5)
   46014:	dd800615 	stw	r22,24(sp)
   46018:	dd400515 	stw	r21,20(sp)
   4601c:	dd000415 	stw	r20,16(sp)
   46020:	dcc00315 	stw	r19,12(sp)
   46024:	dc400115 	stw	r17,4(sp)
   46028:	dc000015 	stw	r16,0(sp)
   4602c:	dfc00815 	stw	ra,32(sp)
   46030:	ddc00715 	stw	r23,28(sp)
   46034:	2827883a 	mov	r19,r5
   46038:	2029883a 	mov	r20,r4
   4603c:	3023883a 	mov	r17,r6
   46040:	3821883a 	mov	r16,r7
   46044:	2d400504 	addi	r21,r5,20
   46048:	002d883a 	mov	r22,zero
   4604c:	adc00017 	ldw	r23,0(r21)
   46050:	880b883a 	mov	r5,r17
   46054:	ad400104 	addi	r21,r21,4
   46058:	b93fffcc 	andi	r4,r23,65535
   4605c:	00406e00 	call	406e0 <__mulsi3>
   46060:	b808d43a 	srli	r4,r23,16
   46064:	880b883a 	mov	r5,r17
   46068:	1421883a 	add	r16,r2,r16
   4606c:	00406e00 	call	406e0 <__mulsi3>
   46070:	800ed43a 	srli	r7,r16,16
   46074:	80ffffcc 	andi	r3,r16,65535
   46078:	b5800044 	addi	r22,r22,1
   4607c:	11c5883a 	add	r2,r2,r7
   46080:	100e943a 	slli	r7,r2,16
   46084:	1020d43a 	srli	r16,r2,16
   46088:	38c7883a 	add	r3,r7,r3
   4608c:	a8ffff15 	stw	r3,-4(r21)
   46090:	b4bfee16 	blt	r22,r18,4604c <__alt_data_end+0xfffe084c>
   46094:	80000926 	beq	r16,zero,460bc <__multadd+0xb4>
   46098:	98800217 	ldw	r2,8(r19)
   4609c:	9080130e 	bge	r18,r2,460ec <__multadd+0xe4>
   460a0:	90800144 	addi	r2,r18,5
   460a4:	1085883a 	add	r2,r2,r2
   460a8:	1085883a 	add	r2,r2,r2
   460ac:	9885883a 	add	r2,r19,r2
   460b0:	14000015 	stw	r16,0(r2)
   460b4:	94800044 	addi	r18,r18,1
   460b8:	9c800415 	stw	r18,16(r19)
   460bc:	9805883a 	mov	r2,r19
   460c0:	dfc00817 	ldw	ra,32(sp)
   460c4:	ddc00717 	ldw	r23,28(sp)
   460c8:	dd800617 	ldw	r22,24(sp)
   460cc:	dd400517 	ldw	r21,20(sp)
   460d0:	dd000417 	ldw	r20,16(sp)
   460d4:	dcc00317 	ldw	r19,12(sp)
   460d8:	dc800217 	ldw	r18,8(sp)
   460dc:	dc400117 	ldw	r17,4(sp)
   460e0:	dc000017 	ldw	r16,0(sp)
   460e4:	dec00904 	addi	sp,sp,36
   460e8:	f800283a 	ret
   460ec:	99400117 	ldw	r5,4(r19)
   460f0:	a009883a 	mov	r4,r20
   460f4:	29400044 	addi	r5,r5,1
   460f8:	0045f380 	call	45f38 <_Balloc>
   460fc:	99800417 	ldw	r6,16(r19)
   46100:	99400304 	addi	r5,r19,12
   46104:	11000304 	addi	r4,r2,12
   46108:	31800084 	addi	r6,r6,2
   4610c:	318d883a 	add	r6,r6,r6
   46110:	318d883a 	add	r6,r6,r6
   46114:	1023883a 	mov	r17,r2
   46118:	0045cc80 	call	45cc8 <memcpy>
   4611c:	98000a26 	beq	r19,zero,46148 <__multadd+0x140>
   46120:	98c00117 	ldw	r3,4(r19)
   46124:	a0801317 	ldw	r2,76(r20)
   46128:	18c7883a 	add	r3,r3,r3
   4612c:	18c7883a 	add	r3,r3,r3
   46130:	10c5883a 	add	r2,r2,r3
   46134:	10c00017 	ldw	r3,0(r2)
   46138:	98c00015 	stw	r3,0(r19)
   4613c:	14c00015 	stw	r19,0(r2)
   46140:	8827883a 	mov	r19,r17
   46144:	003fd606 	br	460a0 <__alt_data_end+0xfffe08a0>
   46148:	8827883a 	mov	r19,r17
   4614c:	003fd406 	br	460a0 <__alt_data_end+0xfffe08a0>

00046150 <__s2b>:
   46150:	defff904 	addi	sp,sp,-28
   46154:	dc400115 	stw	r17,4(sp)
   46158:	dc000015 	stw	r16,0(sp)
   4615c:	2023883a 	mov	r17,r4
   46160:	2821883a 	mov	r16,r5
   46164:	39000204 	addi	r4,r7,8
   46168:	01400244 	movi	r5,9
   4616c:	dcc00315 	stw	r19,12(sp)
   46170:	dc800215 	stw	r18,8(sp)
   46174:	dfc00615 	stw	ra,24(sp)
   46178:	dd400515 	stw	r21,20(sp)
   4617c:	dd000415 	stw	r20,16(sp)
   46180:	3825883a 	mov	r18,r7
   46184:	3027883a 	mov	r19,r6
   46188:	004aaf40 	call	4aaf4 <__divsi3>
   4618c:	00c00044 	movi	r3,1
   46190:	000b883a 	mov	r5,zero
   46194:	1880030e 	bge	r3,r2,461a4 <__s2b+0x54>
   46198:	18c7883a 	add	r3,r3,r3
   4619c:	29400044 	addi	r5,r5,1
   461a0:	18bffd16 	blt	r3,r2,46198 <__alt_data_end+0xfffe0998>
   461a4:	8809883a 	mov	r4,r17
   461a8:	0045f380 	call	45f38 <_Balloc>
   461ac:	d8c00717 	ldw	r3,28(sp)
   461b0:	10c00515 	stw	r3,20(r2)
   461b4:	00c00044 	movi	r3,1
   461b8:	10c00415 	stw	r3,16(r2)
   461bc:	00c00244 	movi	r3,9
   461c0:	1cc0210e 	bge	r3,r19,46248 <__s2b+0xf8>
   461c4:	80eb883a 	add	r21,r16,r3
   461c8:	a829883a 	mov	r20,r21
   461cc:	84e1883a 	add	r16,r16,r19
   461d0:	a1c00007 	ldb	r7,0(r20)
   461d4:	01800284 	movi	r6,10
   461d8:	a5000044 	addi	r20,r20,1
   461dc:	100b883a 	mov	r5,r2
   461e0:	39fff404 	addi	r7,r7,-48
   461e4:	8809883a 	mov	r4,r17
   461e8:	00460080 	call	46008 <__multadd>
   461ec:	a43ff81e 	bne	r20,r16,461d0 <__alt_data_end+0xfffe09d0>
   461f0:	ace1883a 	add	r16,r21,r19
   461f4:	843ffe04 	addi	r16,r16,-8
   461f8:	9c800a0e 	bge	r19,r18,46224 <__s2b+0xd4>
   461fc:	94e5c83a 	sub	r18,r18,r19
   46200:	84a5883a 	add	r18,r16,r18
   46204:	81c00007 	ldb	r7,0(r16)
   46208:	01800284 	movi	r6,10
   4620c:	84000044 	addi	r16,r16,1
   46210:	100b883a 	mov	r5,r2
   46214:	39fff404 	addi	r7,r7,-48
   46218:	8809883a 	mov	r4,r17
   4621c:	00460080 	call	46008 <__multadd>
   46220:	84bff81e 	bne	r16,r18,46204 <__alt_data_end+0xfffe0a04>
   46224:	dfc00617 	ldw	ra,24(sp)
   46228:	dd400517 	ldw	r21,20(sp)
   4622c:	dd000417 	ldw	r20,16(sp)
   46230:	dcc00317 	ldw	r19,12(sp)
   46234:	dc800217 	ldw	r18,8(sp)
   46238:	dc400117 	ldw	r17,4(sp)
   4623c:	dc000017 	ldw	r16,0(sp)
   46240:	dec00704 	addi	sp,sp,28
   46244:	f800283a 	ret
   46248:	84000284 	addi	r16,r16,10
   4624c:	1827883a 	mov	r19,r3
   46250:	003fe906 	br	461f8 <__alt_data_end+0xfffe09f8>

00046254 <__hi0bits>:
   46254:	20bfffec 	andhi	r2,r4,65535
   46258:	1000141e 	bne	r2,zero,462ac <__hi0bits+0x58>
   4625c:	2008943a 	slli	r4,r4,16
   46260:	00800404 	movi	r2,16
   46264:	20ffc02c 	andhi	r3,r4,65280
   46268:	1800021e 	bne	r3,zero,46274 <__hi0bits+0x20>
   4626c:	2008923a 	slli	r4,r4,8
   46270:	10800204 	addi	r2,r2,8
   46274:	20fc002c 	andhi	r3,r4,61440
   46278:	1800021e 	bne	r3,zero,46284 <__hi0bits+0x30>
   4627c:	2008913a 	slli	r4,r4,4
   46280:	10800104 	addi	r2,r2,4
   46284:	20f0002c 	andhi	r3,r4,49152
   46288:	1800031e 	bne	r3,zero,46298 <__hi0bits+0x44>
   4628c:	2109883a 	add	r4,r4,r4
   46290:	10800084 	addi	r2,r2,2
   46294:	2109883a 	add	r4,r4,r4
   46298:	20000316 	blt	r4,zero,462a8 <__hi0bits+0x54>
   4629c:	2110002c 	andhi	r4,r4,16384
   462a0:	2000041e 	bne	r4,zero,462b4 <__hi0bits+0x60>
   462a4:	00800804 	movi	r2,32
   462a8:	f800283a 	ret
   462ac:	0005883a 	mov	r2,zero
   462b0:	003fec06 	br	46264 <__alt_data_end+0xfffe0a64>
   462b4:	10800044 	addi	r2,r2,1
   462b8:	f800283a 	ret

000462bc <__lo0bits>:
   462bc:	20c00017 	ldw	r3,0(r4)
   462c0:	188001cc 	andi	r2,r3,7
   462c4:	10000826 	beq	r2,zero,462e8 <__lo0bits+0x2c>
   462c8:	1880004c 	andi	r2,r3,1
   462cc:	1000211e 	bne	r2,zero,46354 <__lo0bits+0x98>
   462d0:	1880008c 	andi	r2,r3,2
   462d4:	1000211e 	bne	r2,zero,4635c <__lo0bits+0xa0>
   462d8:	1806d0ba 	srli	r3,r3,2
   462dc:	00800084 	movi	r2,2
   462e0:	20c00015 	stw	r3,0(r4)
   462e4:	f800283a 	ret
   462e8:	18bfffcc 	andi	r2,r3,65535
   462ec:	10001326 	beq	r2,zero,4633c <__lo0bits+0x80>
   462f0:	0005883a 	mov	r2,zero
   462f4:	19403fcc 	andi	r5,r3,255
   462f8:	2800021e 	bne	r5,zero,46304 <__lo0bits+0x48>
   462fc:	1806d23a 	srli	r3,r3,8
   46300:	10800204 	addi	r2,r2,8
   46304:	194003cc 	andi	r5,r3,15
   46308:	2800021e 	bne	r5,zero,46314 <__lo0bits+0x58>
   4630c:	1806d13a 	srli	r3,r3,4
   46310:	10800104 	addi	r2,r2,4
   46314:	194000cc 	andi	r5,r3,3
   46318:	2800021e 	bne	r5,zero,46324 <__lo0bits+0x68>
   4631c:	1806d0ba 	srli	r3,r3,2
   46320:	10800084 	addi	r2,r2,2
   46324:	1940004c 	andi	r5,r3,1
   46328:	2800081e 	bne	r5,zero,4634c <__lo0bits+0x90>
   4632c:	1806d07a 	srli	r3,r3,1
   46330:	1800051e 	bne	r3,zero,46348 <__lo0bits+0x8c>
   46334:	00800804 	movi	r2,32
   46338:	f800283a 	ret
   4633c:	1806d43a 	srli	r3,r3,16
   46340:	00800404 	movi	r2,16
   46344:	003feb06 	br	462f4 <__alt_data_end+0xfffe0af4>
   46348:	10800044 	addi	r2,r2,1
   4634c:	20c00015 	stw	r3,0(r4)
   46350:	f800283a 	ret
   46354:	0005883a 	mov	r2,zero
   46358:	f800283a 	ret
   4635c:	1806d07a 	srli	r3,r3,1
   46360:	00800044 	movi	r2,1
   46364:	20c00015 	stw	r3,0(r4)
   46368:	f800283a 	ret

0004636c <__i2b>:
   4636c:	defffd04 	addi	sp,sp,-12
   46370:	dc000015 	stw	r16,0(sp)
   46374:	04000044 	movi	r16,1
   46378:	dc400115 	stw	r17,4(sp)
   4637c:	2823883a 	mov	r17,r5
   46380:	800b883a 	mov	r5,r16
   46384:	dfc00215 	stw	ra,8(sp)
   46388:	0045f380 	call	45f38 <_Balloc>
   4638c:	14400515 	stw	r17,20(r2)
   46390:	14000415 	stw	r16,16(r2)
   46394:	dfc00217 	ldw	ra,8(sp)
   46398:	dc400117 	ldw	r17,4(sp)
   4639c:	dc000017 	ldw	r16,0(sp)
   463a0:	dec00304 	addi	sp,sp,12
   463a4:	f800283a 	ret

000463a8 <__multiply>:
   463a8:	deffef04 	addi	sp,sp,-68
   463ac:	dc400815 	stw	r17,32(sp)
   463b0:	dc000715 	stw	r16,28(sp)
   463b4:	34400417 	ldw	r17,16(r6)
   463b8:	2c000417 	ldw	r16,16(r5)
   463bc:	dd800d15 	stw	r22,52(sp)
   463c0:	dc800915 	stw	r18,36(sp)
   463c4:	dfc01015 	stw	ra,64(sp)
   463c8:	df000f15 	stw	fp,60(sp)
   463cc:	ddc00e15 	stw	r23,56(sp)
   463d0:	dd400c15 	stw	r21,48(sp)
   463d4:	dd000b15 	stw	r20,44(sp)
   463d8:	dcc00a15 	stw	r19,40(sp)
   463dc:	2825883a 	mov	r18,r5
   463e0:	302d883a 	mov	r22,r6
   463e4:	8440050e 	bge	r16,r17,463fc <__multiply+0x54>
   463e8:	8007883a 	mov	r3,r16
   463ec:	3025883a 	mov	r18,r6
   463f0:	8821883a 	mov	r16,r17
   463f4:	282d883a 	mov	r22,r5
   463f8:	1823883a 	mov	r17,r3
   463fc:	90800217 	ldw	r2,8(r18)
   46400:	8447883a 	add	r3,r16,r17
   46404:	d8c00215 	stw	r3,8(sp)
   46408:	91400117 	ldw	r5,4(r18)
   4640c:	10c0010e 	bge	r2,r3,46414 <__multiply+0x6c>
   46410:	29400044 	addi	r5,r5,1
   46414:	0045f380 	call	45f38 <_Balloc>
   46418:	d8c00217 	ldw	r3,8(sp)
   4641c:	d8800615 	stw	r2,24(sp)
   46420:	18eb883a 	add	r21,r3,r3
   46424:	ad6b883a 	add	r21,r21,r21
   46428:	10c00504 	addi	r3,r2,20
   4642c:	1d6b883a 	add	r21,r3,r21
   46430:	d8c00115 	stw	r3,4(sp)
   46434:	dd400315 	stw	r21,12(sp)
   46438:	1805883a 	mov	r2,r3
   4643c:	1d40042e 	bgeu	r3,r21,46450 <__multiply+0xa8>
   46440:	d8c00317 	ldw	r3,12(sp)
   46444:	10000015 	stw	zero,0(r2)
   46448:	10800104 	addi	r2,r2,4
   4644c:	10fffc36 	bltu	r2,r3,46440 <__alt_data_end+0xfffe0c40>
   46450:	8c63883a 	add	r17,r17,r17
   46454:	b5800504 	addi	r22,r22,20
   46458:	8c63883a 	add	r17,r17,r17
   4645c:	94800504 	addi	r18,r18,20
   46460:	8421883a 	add	r16,r16,r16
   46464:	b463883a 	add	r17,r22,r17
   46468:	8421883a 	add	r16,r16,r16
   4646c:	dd800015 	stw	r22,0(sp)
   46470:	dc800415 	stw	r18,16(sp)
   46474:	dc400515 	stw	r17,20(sp)
   46478:	9429883a 	add	r20,r18,r16
   4647c:	b4404f2e 	bgeu	r22,r17,465bc <__multiply+0x214>
   46480:	d8c00017 	ldw	r3,0(sp)
   46484:	1c800017 	ldw	r18,0(r3)
   46488:	947fffcc 	andi	r17,r18,65535
   4648c:	88001e26 	beq	r17,zero,46508 <__multiply+0x160>
   46490:	dd800117 	ldw	r22,4(sp)
   46494:	dd400417 	ldw	r21,16(sp)
   46498:	0027883a 	mov	r19,zero
   4649c:	ac800017 	ldw	r18,0(r21)
   464a0:	b4000017 	ldw	r16,0(r22)
   464a4:	880b883a 	mov	r5,r17
   464a8:	913fffcc 	andi	r4,r18,65535
   464ac:	00406e00 	call	406e0 <__mulsi3>
   464b0:	9008d43a 	srli	r4,r18,16
   464b4:	84bfffcc 	andi	r18,r16,65535
   464b8:	1485883a 	add	r2,r2,r18
   464bc:	14e5883a 	add	r18,r2,r19
   464c0:	8020d43a 	srli	r16,r16,16
   464c4:	9026d43a 	srli	r19,r18,16
   464c8:	880b883a 	mov	r5,r17
   464cc:	00406e00 	call	406e0 <__mulsi3>
   464d0:	1405883a 	add	r2,r2,r16
   464d4:	14e1883a 	add	r16,r2,r19
   464d8:	90ffffcc 	andi	r3,r18,65535
   464dc:	8024943a 	slli	r18,r16,16
   464e0:	ad400104 	addi	r21,r21,4
   464e4:	b005883a 	mov	r2,r22
   464e8:	90c6b03a 	or	r3,r18,r3
   464ec:	b0c00015 	stw	r3,0(r22)
   464f0:	8026d43a 	srli	r19,r16,16
   464f4:	b5800104 	addi	r22,r22,4
   464f8:	ad3fe836 	bltu	r21,r20,4649c <__alt_data_end+0xfffe0c9c>
   464fc:	d8c00017 	ldw	r3,0(sp)
   46500:	14c00115 	stw	r19,4(r2)
   46504:	1c800017 	ldw	r18,0(r3)
   46508:	9024d43a 	srli	r18,r18,16
   4650c:	90002226 	beq	r18,zero,46598 <__multiply+0x1f0>
   46510:	d8c00117 	ldw	r3,4(sp)
   46514:	dd800417 	ldw	r22,16(sp)
   46518:	002f883a 	mov	r23,zero
   4651c:	1f000017 	ldw	fp,0(r3)
   46520:	1823883a 	mov	r17,r3
   46524:	182b883a 	mov	r21,r3
   46528:	e021883a 	mov	r16,fp
   4652c:	00000106 	br	46534 <__multiply+0x18c>
   46530:	982b883a 	mov	r21,r19
   46534:	b100000b 	ldhu	r4,0(r22)
   46538:	8020d43a 	srli	r16,r16,16
   4653c:	900b883a 	mov	r5,r18
   46540:	00406e00 	call	406e0 <__mulsi3>
   46544:	1405883a 	add	r2,r2,r16
   46548:	15ef883a 	add	r23,r2,r23
   4654c:	b804943a 	slli	r2,r23,16
   46550:	e0ffffcc 	andi	r3,fp,65535
   46554:	8c400104 	addi	r17,r17,4
   46558:	10c6b03a 	or	r3,r2,r3
   4655c:	88ffff15 	stw	r3,-4(r17)
   46560:	b5800104 	addi	r22,r22,4
   46564:	b13fff17 	ldw	r4,-4(r22)
   46568:	acc00104 	addi	r19,r21,4
   4656c:	900b883a 	mov	r5,r18
   46570:	2008d43a 	srli	r4,r4,16
   46574:	9c000017 	ldw	r16,0(r19)
   46578:	00406e00 	call	406e0 <__mulsi3>
   4657c:	b806d43a 	srli	r3,r23,16
   46580:	813fffcc 	andi	r4,r16,65535
   46584:	1105883a 	add	r2,r2,r4
   46588:	10f9883a 	add	fp,r2,r3
   4658c:	e02ed43a 	srli	r23,fp,16
   46590:	b53fe736 	bltu	r22,r20,46530 <__alt_data_end+0xfffe0d30>
   46594:	af000115 	stw	fp,4(r21)
   46598:	d8c00017 	ldw	r3,0(sp)
   4659c:	d9000517 	ldw	r4,20(sp)
   465a0:	18c00104 	addi	r3,r3,4
   465a4:	d8c00015 	stw	r3,0(sp)
   465a8:	d8c00117 	ldw	r3,4(sp)
   465ac:	18c00104 	addi	r3,r3,4
   465b0:	d8c00115 	stw	r3,4(sp)
   465b4:	d8c00017 	ldw	r3,0(sp)
   465b8:	193fb136 	bltu	r3,r4,46480 <__alt_data_end+0xfffe0c80>
   465bc:	d8c00217 	ldw	r3,8(sp)
   465c0:	00c00c0e 	bge	zero,r3,465f4 <__multiply+0x24c>
   465c4:	d8c00317 	ldw	r3,12(sp)
   465c8:	18bfff17 	ldw	r2,-4(r3)
   465cc:	1d7fff04 	addi	r21,r3,-4
   465d0:	10000326 	beq	r2,zero,465e0 <__multiply+0x238>
   465d4:	00000706 	br	465f4 <__multiply+0x24c>
   465d8:	a8800017 	ldw	r2,0(r21)
   465dc:	1000051e 	bne	r2,zero,465f4 <__multiply+0x24c>
   465e0:	d8c00217 	ldw	r3,8(sp)
   465e4:	ad7fff04 	addi	r21,r21,-4
   465e8:	18ffffc4 	addi	r3,r3,-1
   465ec:	d8c00215 	stw	r3,8(sp)
   465f0:	183ff91e 	bne	r3,zero,465d8 <__alt_data_end+0xfffe0dd8>
   465f4:	d8c00617 	ldw	r3,24(sp)
   465f8:	d9000217 	ldw	r4,8(sp)
   465fc:	1805883a 	mov	r2,r3
   46600:	19000415 	stw	r4,16(r3)
   46604:	dfc01017 	ldw	ra,64(sp)
   46608:	df000f17 	ldw	fp,60(sp)
   4660c:	ddc00e17 	ldw	r23,56(sp)
   46610:	dd800d17 	ldw	r22,52(sp)
   46614:	dd400c17 	ldw	r21,48(sp)
   46618:	dd000b17 	ldw	r20,44(sp)
   4661c:	dcc00a17 	ldw	r19,40(sp)
   46620:	dc800917 	ldw	r18,36(sp)
   46624:	dc400817 	ldw	r17,32(sp)
   46628:	dc000717 	ldw	r16,28(sp)
   4662c:	dec01104 	addi	sp,sp,68
   46630:	f800283a 	ret

00046634 <__pow5mult>:
   46634:	defffa04 	addi	sp,sp,-24
   46638:	dcc00315 	stw	r19,12(sp)
   4663c:	dc000015 	stw	r16,0(sp)
   46640:	dfc00515 	stw	ra,20(sp)
   46644:	dd000415 	stw	r20,16(sp)
   46648:	dc800215 	stw	r18,8(sp)
   4664c:	dc400115 	stw	r17,4(sp)
   46650:	308000cc 	andi	r2,r6,3
   46654:	3021883a 	mov	r16,r6
   46658:	2027883a 	mov	r19,r4
   4665c:	10002f1e 	bne	r2,zero,4671c <__pow5mult+0xe8>
   46660:	2825883a 	mov	r18,r5
   46664:	8021d0ba 	srai	r16,r16,2
   46668:	80001a26 	beq	r16,zero,466d4 <__pow5mult+0xa0>
   4666c:	9c401217 	ldw	r17,72(r19)
   46670:	8800061e 	bne	r17,zero,4668c <__pow5mult+0x58>
   46674:	00003406 	br	46748 <__pow5mult+0x114>
   46678:	8021d07a 	srai	r16,r16,1
   4667c:	80001526 	beq	r16,zero,466d4 <__pow5mult+0xa0>
   46680:	88800017 	ldw	r2,0(r17)
   46684:	10001c26 	beq	r2,zero,466f8 <__pow5mult+0xc4>
   46688:	1023883a 	mov	r17,r2
   4668c:	8080004c 	andi	r2,r16,1
   46690:	103ff926 	beq	r2,zero,46678 <__alt_data_end+0xfffe0e78>
   46694:	880d883a 	mov	r6,r17
   46698:	900b883a 	mov	r5,r18
   4669c:	9809883a 	mov	r4,r19
   466a0:	00463a80 	call	463a8 <__multiply>
   466a4:	90001b26 	beq	r18,zero,46714 <__pow5mult+0xe0>
   466a8:	91000117 	ldw	r4,4(r18)
   466ac:	98c01317 	ldw	r3,76(r19)
   466b0:	8021d07a 	srai	r16,r16,1
   466b4:	2109883a 	add	r4,r4,r4
   466b8:	2109883a 	add	r4,r4,r4
   466bc:	1907883a 	add	r3,r3,r4
   466c0:	19000017 	ldw	r4,0(r3)
   466c4:	91000015 	stw	r4,0(r18)
   466c8:	1c800015 	stw	r18,0(r3)
   466cc:	1025883a 	mov	r18,r2
   466d0:	803feb1e 	bne	r16,zero,46680 <__alt_data_end+0xfffe0e80>
   466d4:	9005883a 	mov	r2,r18
   466d8:	dfc00517 	ldw	ra,20(sp)
   466dc:	dd000417 	ldw	r20,16(sp)
   466e0:	dcc00317 	ldw	r19,12(sp)
   466e4:	dc800217 	ldw	r18,8(sp)
   466e8:	dc400117 	ldw	r17,4(sp)
   466ec:	dc000017 	ldw	r16,0(sp)
   466f0:	dec00604 	addi	sp,sp,24
   466f4:	f800283a 	ret
   466f8:	880d883a 	mov	r6,r17
   466fc:	880b883a 	mov	r5,r17
   46700:	9809883a 	mov	r4,r19
   46704:	00463a80 	call	463a8 <__multiply>
   46708:	88800015 	stw	r2,0(r17)
   4670c:	10000015 	stw	zero,0(r2)
   46710:	003fdd06 	br	46688 <__alt_data_end+0xfffe0e88>
   46714:	1025883a 	mov	r18,r2
   46718:	003fd706 	br	46678 <__alt_data_end+0xfffe0e78>
   4671c:	10bfffc4 	addi	r2,r2,-1
   46720:	1085883a 	add	r2,r2,r2
   46724:	00c001b4 	movhi	r3,6
   46728:	18e31b04 	addi	r3,r3,-29588
   4672c:	1085883a 	add	r2,r2,r2
   46730:	1885883a 	add	r2,r3,r2
   46734:	11800017 	ldw	r6,0(r2)
   46738:	000f883a 	mov	r7,zero
   4673c:	00460080 	call	46008 <__multadd>
   46740:	1025883a 	mov	r18,r2
   46744:	003fc706 	br	46664 <__alt_data_end+0xfffe0e64>
   46748:	05000044 	movi	r20,1
   4674c:	a00b883a 	mov	r5,r20
   46750:	9809883a 	mov	r4,r19
   46754:	0045f380 	call	45f38 <_Balloc>
   46758:	1023883a 	mov	r17,r2
   4675c:	00809c44 	movi	r2,625
   46760:	88800515 	stw	r2,20(r17)
   46764:	8d000415 	stw	r20,16(r17)
   46768:	9c401215 	stw	r17,72(r19)
   4676c:	88000015 	stw	zero,0(r17)
   46770:	003fc606 	br	4668c <__alt_data_end+0xfffe0e8c>

00046774 <__lshift>:
   46774:	defff904 	addi	sp,sp,-28
   46778:	dd400515 	stw	r21,20(sp)
   4677c:	dcc00315 	stw	r19,12(sp)
   46780:	302bd17a 	srai	r21,r6,5
   46784:	2cc00417 	ldw	r19,16(r5)
   46788:	28800217 	ldw	r2,8(r5)
   4678c:	dd000415 	stw	r20,16(sp)
   46790:	ace7883a 	add	r19,r21,r19
   46794:	dc800215 	stw	r18,8(sp)
   46798:	dc400115 	stw	r17,4(sp)
   4679c:	dc000015 	stw	r16,0(sp)
   467a0:	dfc00615 	stw	ra,24(sp)
   467a4:	9c000044 	addi	r16,r19,1
   467a8:	2823883a 	mov	r17,r5
   467ac:	3029883a 	mov	r20,r6
   467b0:	2025883a 	mov	r18,r4
   467b4:	29400117 	ldw	r5,4(r5)
   467b8:	1400030e 	bge	r2,r16,467c8 <__lshift+0x54>
   467bc:	1085883a 	add	r2,r2,r2
   467c0:	29400044 	addi	r5,r5,1
   467c4:	143ffd16 	blt	r2,r16,467bc <__alt_data_end+0xfffe0fbc>
   467c8:	9009883a 	mov	r4,r18
   467cc:	0045f380 	call	45f38 <_Balloc>
   467d0:	10c00504 	addi	r3,r2,20
   467d4:	0540070e 	bge	zero,r21,467f4 <__lshift+0x80>
   467d8:	ad6b883a 	add	r21,r21,r21
   467dc:	ad6b883a 	add	r21,r21,r21
   467e0:	1809883a 	mov	r4,r3
   467e4:	1d47883a 	add	r3,r3,r21
   467e8:	20000015 	stw	zero,0(r4)
   467ec:	21000104 	addi	r4,r4,4
   467f0:	193ffd1e 	bne	r3,r4,467e8 <__alt_data_end+0xfffe0fe8>
   467f4:	8a000417 	ldw	r8,16(r17)
   467f8:	89000504 	addi	r4,r17,20
   467fc:	a18007cc 	andi	r6,r20,31
   46800:	4211883a 	add	r8,r8,r8
   46804:	4211883a 	add	r8,r8,r8
   46808:	2211883a 	add	r8,r4,r8
   4680c:	30002326 	beq	r6,zero,4689c <__lshift+0x128>
   46810:	02400804 	movi	r9,32
   46814:	4993c83a 	sub	r9,r9,r6
   46818:	000b883a 	mov	r5,zero
   4681c:	21c00017 	ldw	r7,0(r4)
   46820:	1815883a 	mov	r10,r3
   46824:	18c00104 	addi	r3,r3,4
   46828:	398e983a 	sll	r7,r7,r6
   4682c:	21000104 	addi	r4,r4,4
   46830:	394ab03a 	or	r5,r7,r5
   46834:	197fff15 	stw	r5,-4(r3)
   46838:	217fff17 	ldw	r5,-4(r4)
   4683c:	2a4ad83a 	srl	r5,r5,r9
   46840:	223ff636 	bltu	r4,r8,4681c <__alt_data_end+0xfffe101c>
   46844:	51400115 	stw	r5,4(r10)
   46848:	28001a1e 	bne	r5,zero,468b4 <__lshift+0x140>
   4684c:	843fffc4 	addi	r16,r16,-1
   46850:	14000415 	stw	r16,16(r2)
   46854:	88000826 	beq	r17,zero,46878 <__lshift+0x104>
   46858:	89000117 	ldw	r4,4(r17)
   4685c:	90c01317 	ldw	r3,76(r18)
   46860:	2109883a 	add	r4,r4,r4
   46864:	2109883a 	add	r4,r4,r4
   46868:	1907883a 	add	r3,r3,r4
   4686c:	19000017 	ldw	r4,0(r3)
   46870:	89000015 	stw	r4,0(r17)
   46874:	1c400015 	stw	r17,0(r3)
   46878:	dfc00617 	ldw	ra,24(sp)
   4687c:	dd400517 	ldw	r21,20(sp)
   46880:	dd000417 	ldw	r20,16(sp)
   46884:	dcc00317 	ldw	r19,12(sp)
   46888:	dc800217 	ldw	r18,8(sp)
   4688c:	dc400117 	ldw	r17,4(sp)
   46890:	dc000017 	ldw	r16,0(sp)
   46894:	dec00704 	addi	sp,sp,28
   46898:	f800283a 	ret
   4689c:	21400017 	ldw	r5,0(r4)
   468a0:	18c00104 	addi	r3,r3,4
   468a4:	21000104 	addi	r4,r4,4
   468a8:	197fff15 	stw	r5,-4(r3)
   468ac:	223ffb36 	bltu	r4,r8,4689c <__alt_data_end+0xfffe109c>
   468b0:	003fe606 	br	4684c <__alt_data_end+0xfffe104c>
   468b4:	9c000084 	addi	r16,r19,2
   468b8:	003fe406 	br	4684c <__alt_data_end+0xfffe104c>

000468bc <__mcmp>:
   468bc:	20800417 	ldw	r2,16(r4)
   468c0:	28c00417 	ldw	r3,16(r5)
   468c4:	10c5c83a 	sub	r2,r2,r3
   468c8:	1000111e 	bne	r2,zero,46910 <__mcmp+0x54>
   468cc:	18c7883a 	add	r3,r3,r3
   468d0:	18c7883a 	add	r3,r3,r3
   468d4:	21000504 	addi	r4,r4,20
   468d8:	29400504 	addi	r5,r5,20
   468dc:	20c5883a 	add	r2,r4,r3
   468e0:	28cb883a 	add	r5,r5,r3
   468e4:	00000106 	br	468ec <__mcmp+0x30>
   468e8:	20800a2e 	bgeu	r4,r2,46914 <__mcmp+0x58>
   468ec:	10bfff04 	addi	r2,r2,-4
   468f0:	297fff04 	addi	r5,r5,-4
   468f4:	11800017 	ldw	r6,0(r2)
   468f8:	28c00017 	ldw	r3,0(r5)
   468fc:	30fffa26 	beq	r6,r3,468e8 <__alt_data_end+0xfffe10e8>
   46900:	30c00236 	bltu	r6,r3,4690c <__mcmp+0x50>
   46904:	00800044 	movi	r2,1
   46908:	f800283a 	ret
   4690c:	00bfffc4 	movi	r2,-1
   46910:	f800283a 	ret
   46914:	0005883a 	mov	r2,zero
   46918:	f800283a 	ret

0004691c <__mdiff>:
   4691c:	28c00417 	ldw	r3,16(r5)
   46920:	30800417 	ldw	r2,16(r6)
   46924:	defffa04 	addi	sp,sp,-24
   46928:	dcc00315 	stw	r19,12(sp)
   4692c:	dc800215 	stw	r18,8(sp)
   46930:	dfc00515 	stw	ra,20(sp)
   46934:	dd000415 	stw	r20,16(sp)
   46938:	dc400115 	stw	r17,4(sp)
   4693c:	dc000015 	stw	r16,0(sp)
   46940:	1887c83a 	sub	r3,r3,r2
   46944:	2825883a 	mov	r18,r5
   46948:	3027883a 	mov	r19,r6
   4694c:	1800141e 	bne	r3,zero,469a0 <__mdiff+0x84>
   46950:	1085883a 	add	r2,r2,r2
   46954:	1085883a 	add	r2,r2,r2
   46958:	2a000504 	addi	r8,r5,20
   4695c:	34000504 	addi	r16,r6,20
   46960:	4087883a 	add	r3,r8,r2
   46964:	8085883a 	add	r2,r16,r2
   46968:	00000106 	br	46970 <__mdiff+0x54>
   4696c:	40c0592e 	bgeu	r8,r3,46ad4 <__mdiff+0x1b8>
   46970:	18ffff04 	addi	r3,r3,-4
   46974:	10bfff04 	addi	r2,r2,-4
   46978:	19c00017 	ldw	r7,0(r3)
   4697c:	11400017 	ldw	r5,0(r2)
   46980:	397ffa26 	beq	r7,r5,4696c <__alt_data_end+0xfffe116c>
   46984:	3940592e 	bgeu	r7,r5,46aec <__mdiff+0x1d0>
   46988:	9005883a 	mov	r2,r18
   4698c:	4023883a 	mov	r17,r8
   46990:	9825883a 	mov	r18,r19
   46994:	05000044 	movi	r20,1
   46998:	1027883a 	mov	r19,r2
   4699c:	00000406 	br	469b0 <__mdiff+0x94>
   469a0:	18005616 	blt	r3,zero,46afc <__mdiff+0x1e0>
   469a4:	34400504 	addi	r17,r6,20
   469a8:	2c000504 	addi	r16,r5,20
   469ac:	0029883a 	mov	r20,zero
   469b0:	91400117 	ldw	r5,4(r18)
   469b4:	0045f380 	call	45f38 <_Balloc>
   469b8:	92400417 	ldw	r9,16(r18)
   469bc:	9b000417 	ldw	r12,16(r19)
   469c0:	12c00504 	addi	r11,r2,20
   469c4:	4a51883a 	add	r8,r9,r9
   469c8:	6319883a 	add	r12,r12,r12
   469cc:	4211883a 	add	r8,r8,r8
   469d0:	6319883a 	add	r12,r12,r12
   469d4:	15000315 	stw	r20,12(r2)
   469d8:	8211883a 	add	r8,r16,r8
   469dc:	8b19883a 	add	r12,r17,r12
   469e0:	0007883a 	mov	r3,zero
   469e4:	81400017 	ldw	r5,0(r16)
   469e8:	89c00017 	ldw	r7,0(r17)
   469ec:	59800104 	addi	r6,r11,4
   469f0:	293fffcc 	andi	r4,r5,65535
   469f4:	20c7883a 	add	r3,r4,r3
   469f8:	393fffcc 	andi	r4,r7,65535
   469fc:	1909c83a 	sub	r4,r3,r4
   46a00:	280ad43a 	srli	r5,r5,16
   46a04:	380ed43a 	srli	r7,r7,16
   46a08:	2007d43a 	srai	r3,r4,16
   46a0c:	213fffcc 	andi	r4,r4,65535
   46a10:	29cbc83a 	sub	r5,r5,r7
   46a14:	28c7883a 	add	r3,r5,r3
   46a18:	180a943a 	slli	r5,r3,16
   46a1c:	8c400104 	addi	r17,r17,4
   46a20:	84000104 	addi	r16,r16,4
   46a24:	2908b03a 	or	r4,r5,r4
   46a28:	59000015 	stw	r4,0(r11)
   46a2c:	1807d43a 	srai	r3,r3,16
   46a30:	3015883a 	mov	r10,r6
   46a34:	3017883a 	mov	r11,r6
   46a38:	8b3fea36 	bltu	r17,r12,469e4 <__alt_data_end+0xfffe11e4>
   46a3c:	8200162e 	bgeu	r16,r8,46a98 <__mdiff+0x17c>
   46a40:	8017883a 	mov	r11,r16
   46a44:	59400017 	ldw	r5,0(r11)
   46a48:	31800104 	addi	r6,r6,4
   46a4c:	5ac00104 	addi	r11,r11,4
   46a50:	293fffcc 	andi	r4,r5,65535
   46a54:	20c7883a 	add	r3,r4,r3
   46a58:	280ed43a 	srli	r7,r5,16
   46a5c:	180bd43a 	srai	r5,r3,16
   46a60:	193fffcc 	andi	r4,r3,65535
   46a64:	3947883a 	add	r3,r7,r5
   46a68:	180a943a 	slli	r5,r3,16
   46a6c:	1807d43a 	srai	r3,r3,16
   46a70:	2908b03a 	or	r4,r5,r4
   46a74:	313fff15 	stw	r4,-4(r6)
   46a78:	5a3ff236 	bltu	r11,r8,46a44 <__alt_data_end+0xfffe1244>
   46a7c:	0406303a 	nor	r3,zero,r16
   46a80:	1a07883a 	add	r3,r3,r8
   46a84:	1806d0ba 	srli	r3,r3,2
   46a88:	18c00044 	addi	r3,r3,1
   46a8c:	18c7883a 	add	r3,r3,r3
   46a90:	18c7883a 	add	r3,r3,r3
   46a94:	50d5883a 	add	r10,r10,r3
   46a98:	50ffff04 	addi	r3,r10,-4
   46a9c:	2000041e 	bne	r4,zero,46ab0 <__mdiff+0x194>
   46aa0:	18ffff04 	addi	r3,r3,-4
   46aa4:	19000017 	ldw	r4,0(r3)
   46aa8:	4a7fffc4 	addi	r9,r9,-1
   46aac:	203ffc26 	beq	r4,zero,46aa0 <__alt_data_end+0xfffe12a0>
   46ab0:	12400415 	stw	r9,16(r2)
   46ab4:	dfc00517 	ldw	ra,20(sp)
   46ab8:	dd000417 	ldw	r20,16(sp)
   46abc:	dcc00317 	ldw	r19,12(sp)
   46ac0:	dc800217 	ldw	r18,8(sp)
   46ac4:	dc400117 	ldw	r17,4(sp)
   46ac8:	dc000017 	ldw	r16,0(sp)
   46acc:	dec00604 	addi	sp,sp,24
   46ad0:	f800283a 	ret
   46ad4:	000b883a 	mov	r5,zero
   46ad8:	0045f380 	call	45f38 <_Balloc>
   46adc:	00c00044 	movi	r3,1
   46ae0:	10c00415 	stw	r3,16(r2)
   46ae4:	10000515 	stw	zero,20(r2)
   46ae8:	003ff206 	br	46ab4 <__alt_data_end+0xfffe12b4>
   46aec:	8023883a 	mov	r17,r16
   46af0:	0029883a 	mov	r20,zero
   46af4:	4021883a 	mov	r16,r8
   46af8:	003fad06 	br	469b0 <__alt_data_end+0xfffe11b0>
   46afc:	9005883a 	mov	r2,r18
   46b00:	94400504 	addi	r17,r18,20
   46b04:	9c000504 	addi	r16,r19,20
   46b08:	9825883a 	mov	r18,r19
   46b0c:	05000044 	movi	r20,1
   46b10:	1027883a 	mov	r19,r2
   46b14:	003fa606 	br	469b0 <__alt_data_end+0xfffe11b0>

00046b18 <__ulp>:
   46b18:	295ffc2c 	andhi	r5,r5,32752
   46b1c:	00bf3034 	movhi	r2,64704
   46b20:	2887883a 	add	r3,r5,r2
   46b24:	00c0020e 	bge	zero,r3,46b30 <__ulp+0x18>
   46b28:	0005883a 	mov	r2,zero
   46b2c:	f800283a 	ret
   46b30:	00c7c83a 	sub	r3,zero,r3
   46b34:	1807d53a 	srai	r3,r3,20
   46b38:	008004c4 	movi	r2,19
   46b3c:	10c00b0e 	bge	r2,r3,46b6c <__ulp+0x54>
   46b40:	18bffb04 	addi	r2,r3,-20
   46b44:	01000784 	movi	r4,30
   46b48:	0007883a 	mov	r3,zero
   46b4c:	20800516 	blt	r4,r2,46b64 <__ulp+0x4c>
   46b50:	010007c4 	movi	r4,31
   46b54:	2089c83a 	sub	r4,r4,r2
   46b58:	00800044 	movi	r2,1
   46b5c:	1104983a 	sll	r2,r2,r4
   46b60:	f800283a 	ret
   46b64:	00800044 	movi	r2,1
   46b68:	f800283a 	ret
   46b6c:	01400234 	movhi	r5,8
   46b70:	28c7d83a 	sra	r3,r5,r3
   46b74:	0005883a 	mov	r2,zero
   46b78:	f800283a 	ret

00046b7c <__b2d>:
   46b7c:	defffa04 	addi	sp,sp,-24
   46b80:	dc000015 	stw	r16,0(sp)
   46b84:	24000417 	ldw	r16,16(r4)
   46b88:	dc400115 	stw	r17,4(sp)
   46b8c:	24400504 	addi	r17,r4,20
   46b90:	8421883a 	add	r16,r16,r16
   46b94:	8421883a 	add	r16,r16,r16
   46b98:	8c21883a 	add	r16,r17,r16
   46b9c:	dc800215 	stw	r18,8(sp)
   46ba0:	84bfff17 	ldw	r18,-4(r16)
   46ba4:	dd000415 	stw	r20,16(sp)
   46ba8:	dcc00315 	stw	r19,12(sp)
   46bac:	9009883a 	mov	r4,r18
   46bb0:	2829883a 	mov	r20,r5
   46bb4:	dfc00515 	stw	ra,20(sp)
   46bb8:	00462540 	call	46254 <__hi0bits>
   46bbc:	00c00804 	movi	r3,32
   46bc0:	1889c83a 	sub	r4,r3,r2
   46bc4:	a1000015 	stw	r4,0(r20)
   46bc8:	01000284 	movi	r4,10
   46bcc:	84ffff04 	addi	r19,r16,-4
   46bd0:	20801216 	blt	r4,r2,46c1c <__b2d+0xa0>
   46bd4:	018002c4 	movi	r6,11
   46bd8:	308dc83a 	sub	r6,r6,r2
   46bdc:	9186d83a 	srl	r3,r18,r6
   46be0:	18cffc34 	orhi	r3,r3,16368
   46be4:	8cc0212e 	bgeu	r17,r19,46c6c <__b2d+0xf0>
   46be8:	813ffe17 	ldw	r4,-8(r16)
   46bec:	218cd83a 	srl	r6,r4,r6
   46bf0:	10800544 	addi	r2,r2,21
   46bf4:	9084983a 	sll	r2,r18,r2
   46bf8:	1184b03a 	or	r2,r2,r6
   46bfc:	dfc00517 	ldw	ra,20(sp)
   46c00:	dd000417 	ldw	r20,16(sp)
   46c04:	dcc00317 	ldw	r19,12(sp)
   46c08:	dc800217 	ldw	r18,8(sp)
   46c0c:	dc400117 	ldw	r17,4(sp)
   46c10:	dc000017 	ldw	r16,0(sp)
   46c14:	dec00604 	addi	sp,sp,24
   46c18:	f800283a 	ret
   46c1c:	8cc00f2e 	bgeu	r17,r19,46c5c <__b2d+0xe0>
   46c20:	117ffd44 	addi	r5,r2,-11
   46c24:	80bffe17 	ldw	r2,-8(r16)
   46c28:	28000e26 	beq	r5,zero,46c64 <__b2d+0xe8>
   46c2c:	1949c83a 	sub	r4,r3,r5
   46c30:	9164983a 	sll	r18,r18,r5
   46c34:	1106d83a 	srl	r3,r2,r4
   46c38:	81bffe04 	addi	r6,r16,-8
   46c3c:	948ffc34 	orhi	r18,r18,16368
   46c40:	90c6b03a 	or	r3,r18,r3
   46c44:	89800e2e 	bgeu	r17,r6,46c80 <__b2d+0x104>
   46c48:	81bffd17 	ldw	r6,-12(r16)
   46c4c:	1144983a 	sll	r2,r2,r5
   46c50:	310ad83a 	srl	r5,r6,r4
   46c54:	2884b03a 	or	r2,r5,r2
   46c58:	003fe806 	br	46bfc <__alt_data_end+0xfffe13fc>
   46c5c:	10bffd44 	addi	r2,r2,-11
   46c60:	1000041e 	bne	r2,zero,46c74 <__b2d+0xf8>
   46c64:	90cffc34 	orhi	r3,r18,16368
   46c68:	003fe406 	br	46bfc <__alt_data_end+0xfffe13fc>
   46c6c:	000d883a 	mov	r6,zero
   46c70:	003fdf06 	br	46bf0 <__alt_data_end+0xfffe13f0>
   46c74:	90a4983a 	sll	r18,r18,r2
   46c78:	0005883a 	mov	r2,zero
   46c7c:	003ff906 	br	46c64 <__alt_data_end+0xfffe1464>
   46c80:	1144983a 	sll	r2,r2,r5
   46c84:	003fdd06 	br	46bfc <__alt_data_end+0xfffe13fc>

00046c88 <__d2b>:
   46c88:	defff804 	addi	sp,sp,-32
   46c8c:	dc000215 	stw	r16,8(sp)
   46c90:	3021883a 	mov	r16,r6
   46c94:	dc400315 	stw	r17,12(sp)
   46c98:	8022907a 	slli	r17,r16,1
   46c9c:	dd000615 	stw	r20,24(sp)
   46ca0:	2829883a 	mov	r20,r5
   46ca4:	01400044 	movi	r5,1
   46ca8:	dcc00515 	stw	r19,20(sp)
   46cac:	dc800415 	stw	r18,16(sp)
   46cb0:	dfc00715 	stw	ra,28(sp)
   46cb4:	3825883a 	mov	r18,r7
   46cb8:	8822d57a 	srli	r17,r17,21
   46cbc:	0045f380 	call	45f38 <_Balloc>
   46cc0:	1027883a 	mov	r19,r2
   46cc4:	00800434 	movhi	r2,16
   46cc8:	10bfffc4 	addi	r2,r2,-1
   46ccc:	808c703a 	and	r6,r16,r2
   46cd0:	88000126 	beq	r17,zero,46cd8 <__d2b+0x50>
   46cd4:	31800434 	orhi	r6,r6,16
   46cd8:	d9800015 	stw	r6,0(sp)
   46cdc:	a0002426 	beq	r20,zero,46d70 <__d2b+0xe8>
   46ce0:	d9000104 	addi	r4,sp,4
   46ce4:	dd000115 	stw	r20,4(sp)
   46ce8:	00462bc0 	call	462bc <__lo0bits>
   46cec:	d8c00017 	ldw	r3,0(sp)
   46cf0:	10002f1e 	bne	r2,zero,46db0 <__d2b+0x128>
   46cf4:	d9000117 	ldw	r4,4(sp)
   46cf8:	99000515 	stw	r4,20(r19)
   46cfc:	1821003a 	cmpeq	r16,r3,zero
   46d00:	01000084 	movi	r4,2
   46d04:	2421c83a 	sub	r16,r4,r16
   46d08:	98c00615 	stw	r3,24(r19)
   46d0c:	9c000415 	stw	r16,16(r19)
   46d10:	88001f1e 	bne	r17,zero,46d90 <__d2b+0x108>
   46d14:	10bef384 	addi	r2,r2,-1074
   46d18:	90800015 	stw	r2,0(r18)
   46d1c:	00900034 	movhi	r2,16384
   46d20:	10bfffc4 	addi	r2,r2,-1
   46d24:	8085883a 	add	r2,r16,r2
   46d28:	1085883a 	add	r2,r2,r2
   46d2c:	1085883a 	add	r2,r2,r2
   46d30:	9885883a 	add	r2,r19,r2
   46d34:	11000517 	ldw	r4,20(r2)
   46d38:	8020917a 	slli	r16,r16,5
   46d3c:	00462540 	call	46254 <__hi0bits>
   46d40:	d8c00817 	ldw	r3,32(sp)
   46d44:	8085c83a 	sub	r2,r16,r2
   46d48:	18800015 	stw	r2,0(r3)
   46d4c:	9805883a 	mov	r2,r19
   46d50:	dfc00717 	ldw	ra,28(sp)
   46d54:	dd000617 	ldw	r20,24(sp)
   46d58:	dcc00517 	ldw	r19,20(sp)
   46d5c:	dc800417 	ldw	r18,16(sp)
   46d60:	dc400317 	ldw	r17,12(sp)
   46d64:	dc000217 	ldw	r16,8(sp)
   46d68:	dec00804 	addi	sp,sp,32
   46d6c:	f800283a 	ret
   46d70:	d809883a 	mov	r4,sp
   46d74:	00462bc0 	call	462bc <__lo0bits>
   46d78:	d8c00017 	ldw	r3,0(sp)
   46d7c:	04000044 	movi	r16,1
   46d80:	9c000415 	stw	r16,16(r19)
   46d84:	98c00515 	stw	r3,20(r19)
   46d88:	10800804 	addi	r2,r2,32
   46d8c:	883fe126 	beq	r17,zero,46d14 <__alt_data_end+0xfffe1514>
   46d90:	00c00d44 	movi	r3,53
   46d94:	8c7ef344 	addi	r17,r17,-1075
   46d98:	88a3883a 	add	r17,r17,r2
   46d9c:	1885c83a 	sub	r2,r3,r2
   46da0:	d8c00817 	ldw	r3,32(sp)
   46da4:	94400015 	stw	r17,0(r18)
   46da8:	18800015 	stw	r2,0(r3)
   46dac:	003fe706 	br	46d4c <__alt_data_end+0xfffe154c>
   46db0:	01000804 	movi	r4,32
   46db4:	2089c83a 	sub	r4,r4,r2
   46db8:	1908983a 	sll	r4,r3,r4
   46dbc:	d9400117 	ldw	r5,4(sp)
   46dc0:	1886d83a 	srl	r3,r3,r2
   46dc4:	2148b03a 	or	r4,r4,r5
   46dc8:	99000515 	stw	r4,20(r19)
   46dcc:	d8c00015 	stw	r3,0(sp)
   46dd0:	003fca06 	br	46cfc <__alt_data_end+0xfffe14fc>

00046dd4 <__ratio>:
   46dd4:	defff904 	addi	sp,sp,-28
   46dd8:	dc400315 	stw	r17,12(sp)
   46ddc:	2823883a 	mov	r17,r5
   46de0:	d9400104 	addi	r5,sp,4
   46de4:	dfc00615 	stw	ra,24(sp)
   46de8:	dcc00515 	stw	r19,20(sp)
   46dec:	dc800415 	stw	r18,16(sp)
   46df0:	2027883a 	mov	r19,r4
   46df4:	dc000215 	stw	r16,8(sp)
   46df8:	0046b7c0 	call	46b7c <__b2d>
   46dfc:	d80b883a 	mov	r5,sp
   46e00:	8809883a 	mov	r4,r17
   46e04:	1025883a 	mov	r18,r2
   46e08:	1821883a 	mov	r16,r3
   46e0c:	0046b7c0 	call	46b7c <__b2d>
   46e10:	8a000417 	ldw	r8,16(r17)
   46e14:	99000417 	ldw	r4,16(r19)
   46e18:	d9400117 	ldw	r5,4(sp)
   46e1c:	2209c83a 	sub	r4,r4,r8
   46e20:	2010917a 	slli	r8,r4,5
   46e24:	d9000017 	ldw	r4,0(sp)
   46e28:	2909c83a 	sub	r4,r5,r4
   46e2c:	4109883a 	add	r4,r8,r4
   46e30:	01000e0e 	bge	zero,r4,46e6c <__ratio+0x98>
   46e34:	2008953a 	slli	r4,r4,20
   46e38:	2421883a 	add	r16,r4,r16
   46e3c:	100d883a 	mov	r6,r2
   46e40:	180f883a 	mov	r7,r3
   46e44:	9009883a 	mov	r4,r18
   46e48:	800b883a 	mov	r5,r16
   46e4c:	004b5540 	call	4b554 <__divdf3>
   46e50:	dfc00617 	ldw	ra,24(sp)
   46e54:	dcc00517 	ldw	r19,20(sp)
   46e58:	dc800417 	ldw	r18,16(sp)
   46e5c:	dc400317 	ldw	r17,12(sp)
   46e60:	dc000217 	ldw	r16,8(sp)
   46e64:	dec00704 	addi	sp,sp,28
   46e68:	f800283a 	ret
   46e6c:	2008953a 	slli	r4,r4,20
   46e70:	1907c83a 	sub	r3,r3,r4
   46e74:	003ff106 	br	46e3c <__alt_data_end+0xfffe163c>

00046e78 <_mprec_log10>:
   46e78:	defffe04 	addi	sp,sp,-8
   46e7c:	dc000015 	stw	r16,0(sp)
   46e80:	dfc00115 	stw	ra,4(sp)
   46e84:	008005c4 	movi	r2,23
   46e88:	2021883a 	mov	r16,r4
   46e8c:	11000d0e 	bge	r2,r4,46ec4 <_mprec_log10+0x4c>
   46e90:	0005883a 	mov	r2,zero
   46e94:	00cffc34 	movhi	r3,16368
   46e98:	843fffc4 	addi	r16,r16,-1
   46e9c:	000d883a 	mov	r6,zero
   46ea0:	01d00934 	movhi	r7,16420
   46ea4:	1009883a 	mov	r4,r2
   46ea8:	180b883a 	mov	r5,r3
   46eac:	004c17c0 	call	4c17c <__muldf3>
   46eb0:	803ff91e 	bne	r16,zero,46e98 <__alt_data_end+0xfffe1698>
   46eb4:	dfc00117 	ldw	ra,4(sp)
   46eb8:	dc000017 	ldw	r16,0(sp)
   46ebc:	dec00204 	addi	sp,sp,8
   46ec0:	f800283a 	ret
   46ec4:	202090fa 	slli	r16,r4,3
   46ec8:	008001b4 	movhi	r2,6
   46ecc:	10a33204 	addi	r2,r2,-29496
   46ed0:	1421883a 	add	r16,r2,r16
   46ed4:	80800017 	ldw	r2,0(r16)
   46ed8:	80c00117 	ldw	r3,4(r16)
   46edc:	dfc00117 	ldw	ra,4(sp)
   46ee0:	dc000017 	ldw	r16,0(sp)
   46ee4:	dec00204 	addi	sp,sp,8
   46ee8:	f800283a 	ret

00046eec <__copybits>:
   46eec:	297fffc4 	addi	r5,r5,-1
   46ef0:	280fd17a 	srai	r7,r5,5
   46ef4:	30c00417 	ldw	r3,16(r6)
   46ef8:	30800504 	addi	r2,r6,20
   46efc:	39c00044 	addi	r7,r7,1
   46f00:	18c7883a 	add	r3,r3,r3
   46f04:	39cf883a 	add	r7,r7,r7
   46f08:	18c7883a 	add	r3,r3,r3
   46f0c:	39cf883a 	add	r7,r7,r7
   46f10:	10c7883a 	add	r3,r2,r3
   46f14:	21cf883a 	add	r7,r4,r7
   46f18:	10c00d2e 	bgeu	r2,r3,46f50 <__copybits+0x64>
   46f1c:	200b883a 	mov	r5,r4
   46f20:	12000017 	ldw	r8,0(r2)
   46f24:	29400104 	addi	r5,r5,4
   46f28:	10800104 	addi	r2,r2,4
   46f2c:	2a3fff15 	stw	r8,-4(r5)
   46f30:	10fffb36 	bltu	r2,r3,46f20 <__alt_data_end+0xfffe1720>
   46f34:	1985c83a 	sub	r2,r3,r6
   46f38:	10bffac4 	addi	r2,r2,-21
   46f3c:	1004d0ba 	srli	r2,r2,2
   46f40:	10800044 	addi	r2,r2,1
   46f44:	1085883a 	add	r2,r2,r2
   46f48:	1085883a 	add	r2,r2,r2
   46f4c:	2089883a 	add	r4,r4,r2
   46f50:	21c0032e 	bgeu	r4,r7,46f60 <__copybits+0x74>
   46f54:	20000015 	stw	zero,0(r4)
   46f58:	21000104 	addi	r4,r4,4
   46f5c:	21fffd36 	bltu	r4,r7,46f54 <__alt_data_end+0xfffe1754>
   46f60:	f800283a 	ret

00046f64 <__any_on>:
   46f64:	20c00417 	ldw	r3,16(r4)
   46f68:	2805d17a 	srai	r2,r5,5
   46f6c:	21000504 	addi	r4,r4,20
   46f70:	18800d0e 	bge	r3,r2,46fa8 <__any_on+0x44>
   46f74:	18c7883a 	add	r3,r3,r3
   46f78:	18c7883a 	add	r3,r3,r3
   46f7c:	20c7883a 	add	r3,r4,r3
   46f80:	20c0192e 	bgeu	r4,r3,46fe8 <__any_on+0x84>
   46f84:	18bfff17 	ldw	r2,-4(r3)
   46f88:	18ffff04 	addi	r3,r3,-4
   46f8c:	1000041e 	bne	r2,zero,46fa0 <__any_on+0x3c>
   46f90:	20c0142e 	bgeu	r4,r3,46fe4 <__any_on+0x80>
   46f94:	18ffff04 	addi	r3,r3,-4
   46f98:	19400017 	ldw	r5,0(r3)
   46f9c:	283ffc26 	beq	r5,zero,46f90 <__alt_data_end+0xfffe1790>
   46fa0:	00800044 	movi	r2,1
   46fa4:	f800283a 	ret
   46fa8:	10c00a0e 	bge	r2,r3,46fd4 <__any_on+0x70>
   46fac:	1085883a 	add	r2,r2,r2
   46fb0:	1085883a 	add	r2,r2,r2
   46fb4:	294007cc 	andi	r5,r5,31
   46fb8:	2087883a 	add	r3,r4,r2
   46fbc:	283ff026 	beq	r5,zero,46f80 <__alt_data_end+0xfffe1780>
   46fc0:	19800017 	ldw	r6,0(r3)
   46fc4:	3144d83a 	srl	r2,r6,r5
   46fc8:	114a983a 	sll	r5,r2,r5
   46fcc:	317ff41e 	bne	r6,r5,46fa0 <__alt_data_end+0xfffe17a0>
   46fd0:	003feb06 	br	46f80 <__alt_data_end+0xfffe1780>
   46fd4:	1085883a 	add	r2,r2,r2
   46fd8:	1085883a 	add	r2,r2,r2
   46fdc:	2087883a 	add	r3,r4,r2
   46fe0:	003fe706 	br	46f80 <__alt_data_end+0xfffe1780>
   46fe4:	f800283a 	ret
   46fe8:	0005883a 	mov	r2,zero
   46fec:	f800283a 	ret

00046ff0 <__fpclassifyd>:
   46ff0:	00a00034 	movhi	r2,32768
   46ff4:	10bfffc4 	addi	r2,r2,-1
   46ff8:	2884703a 	and	r2,r5,r2
   46ffc:	10000726 	beq	r2,zero,4701c <__fpclassifyd+0x2c>
   47000:	00fffc34 	movhi	r3,65520
   47004:	019ff834 	movhi	r6,32736
   47008:	28c7883a 	add	r3,r5,r3
   4700c:	31bfffc4 	addi	r6,r6,-1
   47010:	30c00536 	bltu	r6,r3,47028 <__fpclassifyd+0x38>
   47014:	00800104 	movi	r2,4
   47018:	f800283a 	ret
   4701c:	2000021e 	bne	r4,zero,47028 <__fpclassifyd+0x38>
   47020:	00800084 	movi	r2,2
   47024:	f800283a 	ret
   47028:	00dffc34 	movhi	r3,32752
   4702c:	019ff834 	movhi	r6,32736
   47030:	28cb883a 	add	r5,r5,r3
   47034:	31bfffc4 	addi	r6,r6,-1
   47038:	317ff62e 	bgeu	r6,r5,47014 <__alt_data_end+0xfffe1814>
   4703c:	01400434 	movhi	r5,16
   47040:	297fffc4 	addi	r5,r5,-1
   47044:	28800236 	bltu	r5,r2,47050 <__fpclassifyd+0x60>
   47048:	008000c4 	movi	r2,3
   4704c:	f800283a 	ret
   47050:	10c00226 	beq	r2,r3,4705c <__fpclassifyd+0x6c>
   47054:	0005883a 	mov	r2,zero
   47058:	f800283a 	ret
   4705c:	2005003a 	cmpeq	r2,r4,zero
   47060:	f800283a 	ret

00047064 <_sbrk_r>:
   47064:	defffd04 	addi	sp,sp,-12
   47068:	dc000015 	stw	r16,0(sp)
   4706c:	040001b4 	movhi	r16,6
   47070:	dc400115 	stw	r17,4(sp)
   47074:	8431c204 	addi	r16,r16,-14584
   47078:	2023883a 	mov	r17,r4
   4707c:	2809883a 	mov	r4,r5
   47080:	dfc00215 	stw	ra,8(sp)
   47084:	80000015 	stw	zero,0(r16)
   47088:	004dcec0 	call	4dcec <sbrk>
   4708c:	00ffffc4 	movi	r3,-1
   47090:	10c00526 	beq	r2,r3,470a8 <_sbrk_r+0x44>
   47094:	dfc00217 	ldw	ra,8(sp)
   47098:	dc400117 	ldw	r17,4(sp)
   4709c:	dc000017 	ldw	r16,0(sp)
   470a0:	dec00304 	addi	sp,sp,12
   470a4:	f800283a 	ret
   470a8:	80c00017 	ldw	r3,0(r16)
   470ac:	183ff926 	beq	r3,zero,47094 <__alt_data_end+0xfffe1894>
   470b0:	88c00015 	stw	r3,0(r17)
   470b4:	003ff706 	br	47094 <__alt_data_end+0xfffe1894>

000470b8 <__sread>:
   470b8:	defffe04 	addi	sp,sp,-8
   470bc:	dc000015 	stw	r16,0(sp)
   470c0:	2821883a 	mov	r16,r5
   470c4:	2940038f 	ldh	r5,14(r5)
   470c8:	dfc00115 	stw	ra,4(sp)
   470cc:	00496300 	call	49630 <_read_r>
   470d0:	10000716 	blt	r2,zero,470f0 <__sread+0x38>
   470d4:	80c01417 	ldw	r3,80(r16)
   470d8:	1887883a 	add	r3,r3,r2
   470dc:	80c01415 	stw	r3,80(r16)
   470e0:	dfc00117 	ldw	ra,4(sp)
   470e4:	dc000017 	ldw	r16,0(sp)
   470e8:	dec00204 	addi	sp,sp,8
   470ec:	f800283a 	ret
   470f0:	80c0030b 	ldhu	r3,12(r16)
   470f4:	18fbffcc 	andi	r3,r3,61439
   470f8:	80c0030d 	sth	r3,12(r16)
   470fc:	dfc00117 	ldw	ra,4(sp)
   47100:	dc000017 	ldw	r16,0(sp)
   47104:	dec00204 	addi	sp,sp,8
   47108:	f800283a 	ret

0004710c <__seofread>:
   4710c:	0005883a 	mov	r2,zero
   47110:	f800283a 	ret

00047114 <__swrite>:
   47114:	2880030b 	ldhu	r2,12(r5)
   47118:	defffb04 	addi	sp,sp,-20
   4711c:	dcc00315 	stw	r19,12(sp)
   47120:	dc800215 	stw	r18,8(sp)
   47124:	dc400115 	stw	r17,4(sp)
   47128:	dc000015 	stw	r16,0(sp)
   4712c:	dfc00415 	stw	ra,16(sp)
   47130:	10c0400c 	andi	r3,r2,256
   47134:	2821883a 	mov	r16,r5
   47138:	2023883a 	mov	r17,r4
   4713c:	3025883a 	mov	r18,r6
   47140:	3827883a 	mov	r19,r7
   47144:	18000526 	beq	r3,zero,4715c <__swrite+0x48>
   47148:	2940038f 	ldh	r5,14(r5)
   4714c:	01c00084 	movi	r7,2
   47150:	000d883a 	mov	r6,zero
   47154:	00494740 	call	49474 <_lseek_r>
   47158:	8080030b 	ldhu	r2,12(r16)
   4715c:	8140038f 	ldh	r5,14(r16)
   47160:	10bbffcc 	andi	r2,r2,61439
   47164:	980f883a 	mov	r7,r19
   47168:	900d883a 	mov	r6,r18
   4716c:	8809883a 	mov	r4,r17
   47170:	8080030d 	sth	r2,12(r16)
   47174:	dfc00417 	ldw	ra,16(sp)
   47178:	dcc00317 	ldw	r19,12(sp)
   4717c:	dc800217 	ldw	r18,8(sp)
   47180:	dc400117 	ldw	r17,4(sp)
   47184:	dc000017 	ldw	r16,0(sp)
   47188:	dec00504 	addi	sp,sp,20
   4718c:	0048a601 	jmpi	48a60 <_write_r>

00047190 <__sseek>:
   47190:	defffe04 	addi	sp,sp,-8
   47194:	dc000015 	stw	r16,0(sp)
   47198:	2821883a 	mov	r16,r5
   4719c:	2940038f 	ldh	r5,14(r5)
   471a0:	dfc00115 	stw	ra,4(sp)
   471a4:	00494740 	call	49474 <_lseek_r>
   471a8:	00ffffc4 	movi	r3,-1
   471ac:	10c00826 	beq	r2,r3,471d0 <__sseek+0x40>
   471b0:	80c0030b 	ldhu	r3,12(r16)
   471b4:	80801415 	stw	r2,80(r16)
   471b8:	18c40014 	ori	r3,r3,4096
   471bc:	80c0030d 	sth	r3,12(r16)
   471c0:	dfc00117 	ldw	ra,4(sp)
   471c4:	dc000017 	ldw	r16,0(sp)
   471c8:	dec00204 	addi	sp,sp,8
   471cc:	f800283a 	ret
   471d0:	80c0030b 	ldhu	r3,12(r16)
   471d4:	18fbffcc 	andi	r3,r3,61439
   471d8:	80c0030d 	sth	r3,12(r16)
   471dc:	dfc00117 	ldw	ra,4(sp)
   471e0:	dc000017 	ldw	r16,0(sp)
   471e4:	dec00204 	addi	sp,sp,8
   471e8:	f800283a 	ret

000471ec <__sclose>:
   471ec:	2940038f 	ldh	r5,14(r5)
   471f0:	0048ac01 	jmpi	48ac0 <_close_r>

000471f4 <strcmp>:
   471f4:	2144b03a 	or	r2,r4,r5
   471f8:	108000cc 	andi	r2,r2,3
   471fc:	1000171e 	bne	r2,zero,4725c <strcmp+0x68>
   47200:	20800017 	ldw	r2,0(r4)
   47204:	28c00017 	ldw	r3,0(r5)
   47208:	10c0141e 	bne	r2,r3,4725c <strcmp+0x68>
   4720c:	027fbff4 	movhi	r9,65279
   47210:	4a7fbfc4 	addi	r9,r9,-257
   47214:	0086303a 	nor	r3,zero,r2
   47218:	02202074 	movhi	r8,32897
   4721c:	1245883a 	add	r2,r2,r9
   47220:	42202004 	addi	r8,r8,-32640
   47224:	10c4703a 	and	r2,r2,r3
   47228:	1204703a 	and	r2,r2,r8
   4722c:	10000226 	beq	r2,zero,47238 <strcmp+0x44>
   47230:	00002306 	br	472c0 <strcmp+0xcc>
   47234:	1000221e 	bne	r2,zero,472c0 <strcmp+0xcc>
   47238:	21000104 	addi	r4,r4,4
   4723c:	20c00017 	ldw	r3,0(r4)
   47240:	29400104 	addi	r5,r5,4
   47244:	29800017 	ldw	r6,0(r5)
   47248:	1a4f883a 	add	r7,r3,r9
   4724c:	00c4303a 	nor	r2,zero,r3
   47250:	3884703a 	and	r2,r7,r2
   47254:	1204703a 	and	r2,r2,r8
   47258:	19bff626 	beq	r3,r6,47234 <__alt_data_end+0xfffe1a34>
   4725c:	20800003 	ldbu	r2,0(r4)
   47260:	10c03fcc 	andi	r3,r2,255
   47264:	18c0201c 	xori	r3,r3,128
   47268:	18ffe004 	addi	r3,r3,-128
   4726c:	18000c26 	beq	r3,zero,472a0 <strcmp+0xac>
   47270:	29800007 	ldb	r6,0(r5)
   47274:	19800326 	beq	r3,r6,47284 <strcmp+0x90>
   47278:	00001306 	br	472c8 <strcmp+0xd4>
   4727c:	29800007 	ldb	r6,0(r5)
   47280:	11800b1e 	bne	r2,r6,472b0 <strcmp+0xbc>
   47284:	21000044 	addi	r4,r4,1
   47288:	20c00003 	ldbu	r3,0(r4)
   4728c:	29400044 	addi	r5,r5,1
   47290:	18803fcc 	andi	r2,r3,255
   47294:	1080201c 	xori	r2,r2,128
   47298:	10bfe004 	addi	r2,r2,-128
   4729c:	103ff71e 	bne	r2,zero,4727c <__alt_data_end+0xfffe1a7c>
   472a0:	0007883a 	mov	r3,zero
   472a4:	28800003 	ldbu	r2,0(r5)
   472a8:	1885c83a 	sub	r2,r3,r2
   472ac:	f800283a 	ret
   472b0:	28800003 	ldbu	r2,0(r5)
   472b4:	18c03fcc 	andi	r3,r3,255
   472b8:	1885c83a 	sub	r2,r3,r2
   472bc:	f800283a 	ret
   472c0:	0005883a 	mov	r2,zero
   472c4:	f800283a 	ret
   472c8:	10c03fcc 	andi	r3,r2,255
   472cc:	003ff506 	br	472a4 <__alt_data_end+0xfffe1aa4>

000472d0 <strlen>:
   472d0:	208000cc 	andi	r2,r4,3
   472d4:	10002026 	beq	r2,zero,47358 <strlen+0x88>
   472d8:	20800007 	ldb	r2,0(r4)
   472dc:	10002026 	beq	r2,zero,47360 <strlen+0x90>
   472e0:	2005883a 	mov	r2,r4
   472e4:	00000206 	br	472f0 <strlen+0x20>
   472e8:	10c00007 	ldb	r3,0(r2)
   472ec:	18001826 	beq	r3,zero,47350 <strlen+0x80>
   472f0:	10800044 	addi	r2,r2,1
   472f4:	10c000cc 	andi	r3,r2,3
   472f8:	183ffb1e 	bne	r3,zero,472e8 <__alt_data_end+0xfffe1ae8>
   472fc:	10c00017 	ldw	r3,0(r2)
   47300:	01ffbff4 	movhi	r7,65279
   47304:	39ffbfc4 	addi	r7,r7,-257
   47308:	00ca303a 	nor	r5,zero,r3
   4730c:	01a02074 	movhi	r6,32897
   47310:	19c7883a 	add	r3,r3,r7
   47314:	31a02004 	addi	r6,r6,-32640
   47318:	1946703a 	and	r3,r3,r5
   4731c:	1986703a 	and	r3,r3,r6
   47320:	1800091e 	bne	r3,zero,47348 <strlen+0x78>
   47324:	10800104 	addi	r2,r2,4
   47328:	10c00017 	ldw	r3,0(r2)
   4732c:	19cb883a 	add	r5,r3,r7
   47330:	00c6303a 	nor	r3,zero,r3
   47334:	28c6703a 	and	r3,r5,r3
   47338:	1986703a 	and	r3,r3,r6
   4733c:	183ff926 	beq	r3,zero,47324 <__alt_data_end+0xfffe1b24>
   47340:	00000106 	br	47348 <strlen+0x78>
   47344:	10800044 	addi	r2,r2,1
   47348:	10c00007 	ldb	r3,0(r2)
   4734c:	183ffd1e 	bne	r3,zero,47344 <__alt_data_end+0xfffe1b44>
   47350:	1105c83a 	sub	r2,r2,r4
   47354:	f800283a 	ret
   47358:	2005883a 	mov	r2,r4
   4735c:	003fe706 	br	472fc <__alt_data_end+0xfffe1afc>
   47360:	0005883a 	mov	r2,zero
   47364:	f800283a 	ret

00047368 <__sprint_r.part.0>:
   47368:	28801917 	ldw	r2,100(r5)
   4736c:	defff604 	addi	sp,sp,-40
   47370:	dd400515 	stw	r21,20(sp)
   47374:	dfc00915 	stw	ra,36(sp)
   47378:	df000815 	stw	fp,32(sp)
   4737c:	ddc00715 	stw	r23,28(sp)
   47380:	dd800615 	stw	r22,24(sp)
   47384:	dd000415 	stw	r20,16(sp)
   47388:	dcc00315 	stw	r19,12(sp)
   4738c:	dc800215 	stw	r18,8(sp)
   47390:	dc400115 	stw	r17,4(sp)
   47394:	dc000015 	stw	r16,0(sp)
   47398:	1088000c 	andi	r2,r2,8192
   4739c:	302b883a 	mov	r21,r6
   473a0:	10002e26 	beq	r2,zero,4745c <__sprint_r.part.0+0xf4>
   473a4:	30800217 	ldw	r2,8(r6)
   473a8:	35800017 	ldw	r22,0(r6)
   473ac:	10002926 	beq	r2,zero,47454 <__sprint_r.part.0+0xec>
   473b0:	2827883a 	mov	r19,r5
   473b4:	2029883a 	mov	r20,r4
   473b8:	b5c00104 	addi	r23,r22,4
   473bc:	04bfffc4 	movi	r18,-1
   473c0:	bc400017 	ldw	r17,0(r23)
   473c4:	b4000017 	ldw	r16,0(r22)
   473c8:	0039883a 	mov	fp,zero
   473cc:	8822d0ba 	srli	r17,r17,2
   473d0:	8800031e 	bne	r17,zero,473e0 <__sprint_r.part.0+0x78>
   473d4:	00001806 	br	47438 <__sprint_r.part.0+0xd0>
   473d8:	84000104 	addi	r16,r16,4
   473dc:	8f001526 	beq	r17,fp,47434 <__sprint_r.part.0+0xcc>
   473e0:	81400017 	ldw	r5,0(r16)
   473e4:	980d883a 	mov	r6,r19
   473e8:	a009883a 	mov	r4,r20
   473ec:	0048e580 	call	48e58 <_fputwc_r>
   473f0:	e7000044 	addi	fp,fp,1
   473f4:	14bff81e 	bne	r2,r18,473d8 <__alt_data_end+0xfffe1bd8>
   473f8:	9005883a 	mov	r2,r18
   473fc:	a8000215 	stw	zero,8(r21)
   47400:	a8000115 	stw	zero,4(r21)
   47404:	dfc00917 	ldw	ra,36(sp)
   47408:	df000817 	ldw	fp,32(sp)
   4740c:	ddc00717 	ldw	r23,28(sp)
   47410:	dd800617 	ldw	r22,24(sp)
   47414:	dd400517 	ldw	r21,20(sp)
   47418:	dd000417 	ldw	r20,16(sp)
   4741c:	dcc00317 	ldw	r19,12(sp)
   47420:	dc800217 	ldw	r18,8(sp)
   47424:	dc400117 	ldw	r17,4(sp)
   47428:	dc000017 	ldw	r16,0(sp)
   4742c:	dec00a04 	addi	sp,sp,40
   47430:	f800283a 	ret
   47434:	a8800217 	ldw	r2,8(r21)
   47438:	8c63883a 	add	r17,r17,r17
   4743c:	8c63883a 	add	r17,r17,r17
   47440:	1445c83a 	sub	r2,r2,r17
   47444:	a8800215 	stw	r2,8(r21)
   47448:	b5800204 	addi	r22,r22,8
   4744c:	bdc00204 	addi	r23,r23,8
   47450:	103fdb1e 	bne	r2,zero,473c0 <__alt_data_end+0xfffe1bc0>
   47454:	0005883a 	mov	r2,zero
   47458:	003fe806 	br	473fc <__alt_data_end+0xfffe1bfc>
   4745c:	0048f580 	call	48f58 <__sfvwrite_r>
   47460:	003fe606 	br	473fc <__alt_data_end+0xfffe1bfc>

00047464 <__sprint_r>:
   47464:	30c00217 	ldw	r3,8(r6)
   47468:	18000126 	beq	r3,zero,47470 <__sprint_r+0xc>
   4746c:	00473681 	jmpi	47368 <__sprint_r.part.0>
   47470:	30000115 	stw	zero,4(r6)
   47474:	0005883a 	mov	r2,zero
   47478:	f800283a 	ret

0004747c <___vfiprintf_internal_r>:
   4747c:	deffca04 	addi	sp,sp,-216
   47480:	dd403115 	stw	r21,196(sp)
   47484:	dfc03515 	stw	ra,212(sp)
   47488:	df003415 	stw	fp,208(sp)
   4748c:	ddc03315 	stw	r23,204(sp)
   47490:	dd803215 	stw	r22,200(sp)
   47494:	dd003015 	stw	r20,192(sp)
   47498:	dcc02f15 	stw	r19,188(sp)
   4749c:	dc802e15 	stw	r18,184(sp)
   474a0:	dc402d15 	stw	r17,180(sp)
   474a4:	dc002c15 	stw	r16,176(sp)
   474a8:	d9002115 	stw	r4,132(sp)
   474ac:	d9402015 	stw	r5,128(sp)
   474b0:	d9c02215 	stw	r7,136(sp)
   474b4:	302b883a 	mov	r21,r6
   474b8:	20000226 	beq	r4,zero,474c4 <___vfiprintf_internal_r+0x48>
   474bc:	20800e17 	ldw	r2,56(r4)
   474c0:	1000cf26 	beq	r2,zero,47800 <___vfiprintf_internal_r+0x384>
   474c4:	d8c02017 	ldw	r3,128(sp)
   474c8:	1880030b 	ldhu	r2,12(r3)
   474cc:	10c8000c 	andi	r3,r2,8192
   474d0:	1800071e 	bne	r3,zero,474f0 <___vfiprintf_internal_r+0x74>
   474d4:	d9402017 	ldw	r5,128(sp)
   474d8:	00f7ffc4 	movi	r3,-8193
   474dc:	10880014 	ori	r2,r2,8192
   474e0:	29001917 	ldw	r4,100(r5)
   474e4:	2880030d 	sth	r2,12(r5)
   474e8:	20c6703a 	and	r3,r4,r3
   474ec:	28c01915 	stw	r3,100(r5)
   474f0:	10c0020c 	andi	r3,r2,8
   474f4:	1800a526 	beq	r3,zero,4778c <___vfiprintf_internal_r+0x310>
   474f8:	d9002017 	ldw	r4,128(sp)
   474fc:	20c00417 	ldw	r3,16(r4)
   47500:	1800a226 	beq	r3,zero,4778c <___vfiprintf_internal_r+0x310>
   47504:	1080068c 	andi	r2,r2,26
   47508:	00c00284 	movi	r3,10
   4750c:	10c0a826 	beq	r2,r3,477b0 <___vfiprintf_internal_r+0x334>
   47510:	d9001a04 	addi	r4,sp,104
   47514:	d94019c4 	addi	r5,sp,103
   47518:	048001b4 	movhi	r18,6
   4751c:	2145c83a 	sub	r2,r4,r5
   47520:	94a36404 	addi	r18,r18,-29296
   47524:	d9001e15 	stw	r4,120(sp)
   47528:	d9401f15 	stw	r5,124(sp)
   4752c:	dec01a15 	stw	sp,104(sp)
   47530:	d8001c15 	stw	zero,112(sp)
   47534:	d8001b15 	stw	zero,108(sp)
   47538:	d811883a 	mov	r8,sp
   4753c:	d8002615 	stw	zero,152(sp)
   47540:	d8002415 	stw	zero,144(sp)
   47544:	d8802815 	stw	r2,160(sp)
   47548:	a82d883a 	mov	r22,r21
   4754c:	b0800007 	ldb	r2,0(r22)
   47550:	10040d26 	beq	r2,zero,48588 <___vfiprintf_internal_r+0x110c>
   47554:	00c00944 	movi	r3,37
   47558:	b029883a 	mov	r20,r22
   4755c:	10c0021e 	bne	r2,r3,47568 <___vfiprintf_internal_r+0xec>
   47560:	00001606 	br	475bc <___vfiprintf_internal_r+0x140>
   47564:	10c00326 	beq	r2,r3,47574 <___vfiprintf_internal_r+0xf8>
   47568:	a5000044 	addi	r20,r20,1
   4756c:	a0800007 	ldb	r2,0(r20)
   47570:	103ffc1e 	bne	r2,zero,47564 <__alt_data_end+0xfffe1d64>
   47574:	a5a1c83a 	sub	r16,r20,r22
   47578:	80001026 	beq	r16,zero,475bc <___vfiprintf_internal_r+0x140>
   4757c:	d8c01c17 	ldw	r3,112(sp)
   47580:	d8801b17 	ldw	r2,108(sp)
   47584:	45800015 	stw	r22,0(r8)
   47588:	80c7883a 	add	r3,r16,r3
   4758c:	10800044 	addi	r2,r2,1
   47590:	44000115 	stw	r16,4(r8)
   47594:	d8c01c15 	stw	r3,112(sp)
   47598:	d8801b15 	stw	r2,108(sp)
   4759c:	010001c4 	movi	r4,7
   475a0:	2080750e 	bge	r4,r2,47778 <___vfiprintf_internal_r+0x2fc>
   475a4:	1803951e 	bne	r3,zero,483fc <___vfiprintf_internal_r+0xf80>
   475a8:	d8c02417 	ldw	r3,144(sp)
   475ac:	d8001b15 	stw	zero,108(sp)
   475b0:	d811883a 	mov	r8,sp
   475b4:	1c07883a 	add	r3,r3,r16
   475b8:	d8c02415 	stw	r3,144(sp)
   475bc:	a0800007 	ldb	r2,0(r20)
   475c0:	1002e026 	beq	r2,zero,48144 <___vfiprintf_internal_r+0xcc8>
   475c4:	a5800044 	addi	r22,r20,1
   475c8:	a0c00047 	ldb	r3,1(r20)
   475cc:	d8001d85 	stb	zero,118(sp)
   475d0:	0027883a 	mov	r19,zero
   475d4:	d8002305 	stb	zero,140(sp)
   475d8:	043fffc4 	movi	r16,-1
   475dc:	d8002515 	stw	zero,148(sp)
   475e0:	0023883a 	mov	r17,zero
   475e4:	05001604 	movi	r20,88
   475e8:	05400244 	movi	r21,9
   475ec:	402f883a 	mov	r23,r8
   475f0:	b5800044 	addi	r22,r22,1
   475f4:	18bff804 	addi	r2,r3,-32
   475f8:	a0827736 	bltu	r20,r2,47fd8 <___vfiprintf_internal_r+0xb5c>
   475fc:	100490ba 	slli	r2,r2,2
   47600:	01000134 	movhi	r4,4
   47604:	211d8504 	addi	r4,r4,30228
   47608:	1105883a 	add	r2,r2,r4
   4760c:	10800017 	ldw	r2,0(r2)
   47610:	1000683a 	jmp	r2
   47614:	00047cd8 	cmpnei	zero,zero,4595
   47618:	00047fd8 	cmpnei	zero,zero,4607
   4761c:	00047fd8 	cmpnei	zero,zero,4607
   47620:	00047cf4 	movhi	zero,4595
   47624:	00047fd8 	cmpnei	zero,zero,4607
   47628:	00047fd8 	cmpnei	zero,zero,4607
   4762c:	00047fd8 	cmpnei	zero,zero,4607
   47630:	00047fd8 	cmpnei	zero,zero,4607
   47634:	00047fd8 	cmpnei	zero,zero,4607
   47638:	00047fd8 	cmpnei	zero,zero,4607
   4763c:	00047efc 	xorhi	zero,zero,4603
   47640:	00047f20 	cmpeqi	zero,zero,4604
   47644:	00047fd8 	cmpnei	zero,zero,4607
   47648:	00047818 	cmpnei	zero,zero,4576
   4764c:	00047f34 	movhi	zero,4604
   47650:	00047fd8 	cmpnei	zero,zero,4607
   47654:	00047d00 	call	47d0 <OSCtxSw_SWITCH_PC+0x4790>
   47658:	00047d0c 	andi	zero,zero,4596
   4765c:	00047d0c 	andi	zero,zero,4596
   47660:	00047d0c 	andi	zero,zero,4596
   47664:	00047d0c 	andi	zero,zero,4596
   47668:	00047d0c 	andi	zero,zero,4596
   4766c:	00047d0c 	andi	zero,zero,4596
   47670:	00047d0c 	andi	zero,zero,4596
   47674:	00047d0c 	andi	zero,zero,4596
   47678:	00047d0c 	andi	zero,zero,4596
   4767c:	00047fd8 	cmpnei	zero,zero,4607
   47680:	00047fd8 	cmpnei	zero,zero,4607
   47684:	00047fd8 	cmpnei	zero,zero,4607
   47688:	00047fd8 	cmpnei	zero,zero,4607
   4768c:	00047fd8 	cmpnei	zero,zero,4607
   47690:	00047fd8 	cmpnei	zero,zero,4607
   47694:	00047fd8 	cmpnei	zero,zero,4607
   47698:	00047fd8 	cmpnei	zero,zero,4607
   4769c:	00047fd8 	cmpnei	zero,zero,4607
   476a0:	00047fd8 	cmpnei	zero,zero,4607
   476a4:	00047d4c 	andi	zero,zero,4597
   476a8:	00047fd8 	cmpnei	zero,zero,4607
   476ac:	00047fd8 	cmpnei	zero,zero,4607
   476b0:	00047fd8 	cmpnei	zero,zero,4607
   476b4:	00047fd8 	cmpnei	zero,zero,4607
   476b8:	00047fd8 	cmpnei	zero,zero,4607
   476bc:	00047fd8 	cmpnei	zero,zero,4607
   476c0:	00047fd8 	cmpnei	zero,zero,4607
   476c4:	00047fd8 	cmpnei	zero,zero,4607
   476c8:	00047fd8 	cmpnei	zero,zero,4607
   476cc:	00047fd8 	cmpnei	zero,zero,4607
   476d0:	00047d88 	cmpgei	zero,zero,4598
   476d4:	00047fd8 	cmpnei	zero,zero,4607
   476d8:	00047fd8 	cmpnei	zero,zero,4607
   476dc:	00047fd8 	cmpnei	zero,zero,4607
   476e0:	00047fd8 	cmpnei	zero,zero,4607
   476e4:	00047fd8 	cmpnei	zero,zero,4607
   476e8:	00047de4 	muli	zero,zero,4599
   476ec:	00047fd8 	cmpnei	zero,zero,4607
   476f0:	00047fd8 	cmpnei	zero,zero,4607
   476f4:	00047e58 	cmpnei	zero,zero,4601
   476f8:	00047fd8 	cmpnei	zero,zero,4607
   476fc:	00047fd8 	cmpnei	zero,zero,4607
   47700:	00047fd8 	cmpnei	zero,zero,4607
   47704:	00047fd8 	cmpnei	zero,zero,4607
   47708:	00047fd8 	cmpnei	zero,zero,4607
   4770c:	00047fd8 	cmpnei	zero,zero,4607
   47710:	00047fd8 	cmpnei	zero,zero,4607
   47714:	00047fd8 	cmpnei	zero,zero,4607
   47718:	00047fd8 	cmpnei	zero,zero,4607
   4771c:	00047fd8 	cmpnei	zero,zero,4607
   47720:	00047c00 	call	47c0 <OSCtxSw_SWITCH_PC+0x4780>
   47724:	00047c30 	cmpltui	zero,zero,4592
   47728:	00047fd8 	cmpnei	zero,zero,4607
   4772c:	00047fd8 	cmpnei	zero,zero,4607
   47730:	00047fd8 	cmpnei	zero,zero,4607
   47734:	00047f80 	call	47f8 <OSCtxSw_SWITCH_PC+0x47b8>
   47738:	00047c30 	cmpltui	zero,zero,4592
   4773c:	00047fd8 	cmpnei	zero,zero,4607
   47740:	00047fd8 	cmpnei	zero,zero,4607
   47744:	00047ad8 	cmpnei	zero,zero,4587
   47748:	00047fd8 	cmpnei	zero,zero,4607
   4774c:	00047aec 	andhi	zero,zero,4587
   47750:	00047b24 	muli	zero,zero,4588
   47754:	00047824 	muli	zero,zero,4576
   47758:	00047acc 	andi	zero,zero,4587
   4775c:	00047fd8 	cmpnei	zero,zero,4607
   47760:	00047e98 	cmpnei	zero,zero,4602
   47764:	00047fd8 	cmpnei	zero,zero,4607
   47768:	00047ee4 	muli	zero,zero,4603
   4776c:	00047fd8 	cmpnei	zero,zero,4607
   47770:	00047fd8 	cmpnei	zero,zero,4607
   47774:	00047ba8 	cmpgeui	zero,zero,4590
   47778:	42000204 	addi	r8,r8,8
   4777c:	d8c02417 	ldw	r3,144(sp)
   47780:	1c07883a 	add	r3,r3,r16
   47784:	d8c02415 	stw	r3,144(sp)
   47788:	003f8c06 	br	475bc <__alt_data_end+0xfffe1dbc>
   4778c:	d9402017 	ldw	r5,128(sp)
   47790:	d9002117 	ldw	r4,132(sp)
   47794:	0042b280 	call	42b28 <__swsetup_r>
   47798:	1003c11e 	bne	r2,zero,486a0 <___vfiprintf_internal_r+0x1224>
   4779c:	d9402017 	ldw	r5,128(sp)
   477a0:	00c00284 	movi	r3,10
   477a4:	2880030b 	ldhu	r2,12(r5)
   477a8:	1080068c 	andi	r2,r2,26
   477ac:	10ff581e 	bne	r2,r3,47510 <__alt_data_end+0xfffe1d10>
   477b0:	d8c02017 	ldw	r3,128(sp)
   477b4:	1880038f 	ldh	r2,14(r3)
   477b8:	103f5516 	blt	r2,zero,47510 <__alt_data_end+0xfffe1d10>
   477bc:	d9c02217 	ldw	r7,136(sp)
   477c0:	d9002117 	ldw	r4,132(sp)
   477c4:	a80d883a 	mov	r6,r21
   477c8:	180b883a 	mov	r5,r3
   477cc:	00489a40 	call	489a4 <__sbprintf>
   477d0:	dfc03517 	ldw	ra,212(sp)
   477d4:	df003417 	ldw	fp,208(sp)
   477d8:	ddc03317 	ldw	r23,204(sp)
   477dc:	dd803217 	ldw	r22,200(sp)
   477e0:	dd403117 	ldw	r21,196(sp)
   477e4:	dd003017 	ldw	r20,192(sp)
   477e8:	dcc02f17 	ldw	r19,188(sp)
   477ec:	dc802e17 	ldw	r18,184(sp)
   477f0:	dc402d17 	ldw	r17,180(sp)
   477f4:	dc002c17 	ldw	r16,176(sp)
   477f8:	dec03604 	addi	sp,sp,216
   477fc:	f800283a 	ret
   47800:	0044b340 	call	44b34 <__sinit>
   47804:	003f2f06 	br	474c4 <__alt_data_end+0xfffe1cc4>
   47808:	d8c02517 	ldw	r3,148(sp)
   4780c:	d8802215 	stw	r2,136(sp)
   47810:	00c7c83a 	sub	r3,zero,r3
   47814:	d8c02515 	stw	r3,148(sp)
   47818:	8c400114 	ori	r17,r17,4
   4781c:	b0c00007 	ldb	r3,0(r22)
   47820:	003f7306 	br	475f0 <__alt_data_end+0xfffe1df0>
   47824:	00800c04 	movi	r2,48
   47828:	d9402217 	ldw	r5,136(sp)
   4782c:	d8801d05 	stb	r2,116(sp)
   47830:	00801e04 	movi	r2,120
   47834:	d8801d45 	stb	r2,117(sp)
   47838:	d8001d85 	stb	zero,118(sp)
   4783c:	b811883a 	mov	r8,r23
   47840:	28c00104 	addi	r3,r5,4
   47844:	2cc00017 	ldw	r19,0(r5)
   47848:	0029883a 	mov	r20,zero
   4784c:	88800094 	ori	r2,r17,2
   47850:	80032516 	blt	r16,zero,484e8 <___vfiprintf_internal_r+0x106c>
   47854:	00bfdfc4 	movi	r2,-129
   47858:	88a2703a 	and	r17,r17,r2
   4785c:	d8c02215 	stw	r3,136(sp)
   47860:	8c400094 	ori	r17,r17,2
   47864:	98032a1e 	bne	r19,zero,48510 <___vfiprintf_internal_r+0x1094>
   47868:	008001b4 	movhi	r2,6
   4786c:	10a30304 	addi	r2,r2,-29684
   47870:	d8802615 	stw	r2,152(sp)
   47874:	002b883a 	mov	r21,zero
   47878:	8001741e 	bne	r16,zero,47e4c <___vfiprintf_internal_r+0x9d0>
   4787c:	0021883a 	mov	r16,zero
   47880:	0029883a 	mov	r20,zero
   47884:	ddc01a04 	addi	r23,sp,104
   47888:	8027883a 	mov	r19,r16
   4788c:	8500010e 	bge	r16,r20,47894 <___vfiprintf_internal_r+0x418>
   47890:	a027883a 	mov	r19,r20
   47894:	ad403fcc 	andi	r21,r21,255
   47898:	ad40201c 	xori	r21,r21,128
   4789c:	ad7fe004 	addi	r21,r21,-128
   478a0:	a8000126 	beq	r21,zero,478a8 <___vfiprintf_internal_r+0x42c>
   478a4:	9cc00044 	addi	r19,r19,1
   478a8:	89c0008c 	andi	r7,r17,2
   478ac:	38000126 	beq	r7,zero,478b4 <___vfiprintf_internal_r+0x438>
   478b0:	9cc00084 	addi	r19,r19,2
   478b4:	88c0210c 	andi	r3,r17,132
   478b8:	1801dd1e 	bne	r3,zero,48030 <___vfiprintf_internal_r+0xbb4>
   478bc:	d9402517 	ldw	r5,148(sp)
   478c0:	2cebc83a 	sub	r21,r5,r19
   478c4:	0541da0e 	bge	zero,r21,48030 <___vfiprintf_internal_r+0xbb4>
   478c8:	07000404 	movi	fp,16
   478cc:	d8801c17 	ldw	r2,112(sp)
   478d0:	e543be0e 	bge	fp,r21,487cc <___vfiprintf_internal_r+0x1350>
   478d4:	014001b4 	movhi	r5,6
   478d8:	29636804 	addi	r5,r5,-29280
   478dc:	dc002715 	stw	r16,156(sp)
   478e0:	d9801b17 	ldw	r6,108(sp)
   478e4:	a821883a 	mov	r16,r21
   478e8:	d9402315 	stw	r5,140(sp)
   478ec:	028001c4 	movi	r10,7
   478f0:	d9c02915 	stw	r7,164(sp)
   478f4:	182b883a 	mov	r21,r3
   478f8:	00000506 	br	47910 <___vfiprintf_internal_r+0x494>
   478fc:	31000084 	addi	r4,r6,2
   47900:	42000204 	addi	r8,r8,8
   47904:	180d883a 	mov	r6,r3
   47908:	843ffc04 	addi	r16,r16,-16
   4790c:	e4000f0e 	bge	fp,r16,4794c <___vfiprintf_internal_r+0x4d0>
   47910:	010001b4 	movhi	r4,6
   47914:	10800404 	addi	r2,r2,16
   47918:	30c00044 	addi	r3,r6,1
   4791c:	21236804 	addi	r4,r4,-29280
   47920:	41000015 	stw	r4,0(r8)
   47924:	47000115 	stw	fp,4(r8)
   47928:	d8801c15 	stw	r2,112(sp)
   4792c:	d8c01b15 	stw	r3,108(sp)
   47930:	50fff20e 	bge	r10,r3,478fc <__alt_data_end+0xfffe20fc>
   47934:	1001b21e 	bne	r2,zero,48000 <___vfiprintf_internal_r+0xb84>
   47938:	843ffc04 	addi	r16,r16,-16
   4793c:	000d883a 	mov	r6,zero
   47940:	01000044 	movi	r4,1
   47944:	d811883a 	mov	r8,sp
   47948:	e43ff116 	blt	fp,r16,47910 <__alt_data_end+0xfffe2110>
   4794c:	a807883a 	mov	r3,r21
   47950:	d9c02917 	ldw	r7,164(sp)
   47954:	802b883a 	mov	r21,r16
   47958:	dc002717 	ldw	r16,156(sp)
   4795c:	d9402317 	ldw	r5,140(sp)
   47960:	a885883a 	add	r2,r21,r2
   47964:	45400115 	stw	r21,4(r8)
   47968:	41400015 	stw	r5,0(r8)
   4796c:	d8801c15 	stw	r2,112(sp)
   47970:	d9001b15 	stw	r4,108(sp)
   47974:	014001c4 	movi	r5,7
   47978:	29026216 	blt	r5,r4,48304 <___vfiprintf_internal_r+0xe88>
   4797c:	d9801d87 	ldb	r6,118(sp)
   47980:	42000204 	addi	r8,r8,8
   47984:	21400044 	addi	r5,r4,1
   47988:	3001ae1e 	bne	r6,zero,48044 <___vfiprintf_internal_r+0xbc8>
   4798c:	3801bb26 	beq	r7,zero,4807c <___vfiprintf_internal_r+0xc00>
   47990:	d9001d04 	addi	r4,sp,116
   47994:	10800084 	addi	r2,r2,2
   47998:	41000015 	stw	r4,0(r8)
   4799c:	01000084 	movi	r4,2
   479a0:	41000115 	stw	r4,4(r8)
   479a4:	d8801c15 	stw	r2,112(sp)
   479a8:	d9401b15 	stw	r5,108(sp)
   479ac:	010001c4 	movi	r4,7
   479b0:	2142680e 	bge	r4,r5,48354 <___vfiprintf_internal_r+0xed8>
   479b4:	1002b11e 	bne	r2,zero,4847c <___vfiprintf_internal_r+0x1000>
   479b8:	01802004 	movi	r6,128
   479bc:	01400044 	movi	r5,1
   479c0:	0009883a 	mov	r4,zero
   479c4:	d811883a 	mov	r8,sp
   479c8:	1981ae1e 	bne	r3,r6,48084 <___vfiprintf_internal_r+0xc08>
   479cc:	d8c02517 	ldw	r3,148(sp)
   479d0:	1cf9c83a 	sub	fp,r3,r19
   479d4:	0701ab0e 	bge	zero,fp,48084 <___vfiprintf_internal_r+0xc08>
   479d8:	05400404 	movi	r21,16
   479dc:	af03a90e 	bge	r21,fp,48884 <___vfiprintf_internal_r+0x1408>
   479e0:	014001b4 	movhi	r5,6
   479e4:	29636404 	addi	r5,r5,-29296
   479e8:	d9402315 	stw	r5,140(sp)
   479ec:	01c001c4 	movi	r7,7
   479f0:	00000506 	br	47a08 <___vfiprintf_internal_r+0x58c>
   479f4:	21800084 	addi	r6,r4,2
   479f8:	42000204 	addi	r8,r8,8
   479fc:	1809883a 	mov	r4,r3
   47a00:	e73ffc04 	addi	fp,fp,-16
   47a04:	af000d0e 	bge	r21,fp,47a3c <___vfiprintf_internal_r+0x5c0>
   47a08:	10800404 	addi	r2,r2,16
   47a0c:	20c00044 	addi	r3,r4,1
   47a10:	44800015 	stw	r18,0(r8)
   47a14:	45400115 	stw	r21,4(r8)
   47a18:	d8801c15 	stw	r2,112(sp)
   47a1c:	d8c01b15 	stw	r3,108(sp)
   47a20:	38fff40e 	bge	r7,r3,479f4 <__alt_data_end+0xfffe21f4>
   47a24:	10022b1e 	bne	r2,zero,482d4 <___vfiprintf_internal_r+0xe58>
   47a28:	e73ffc04 	addi	fp,fp,-16
   47a2c:	01800044 	movi	r6,1
   47a30:	0009883a 	mov	r4,zero
   47a34:	d811883a 	mov	r8,sp
   47a38:	af3ff316 	blt	r21,fp,47a08 <__alt_data_end+0xfffe2208>
   47a3c:	d8c02317 	ldw	r3,140(sp)
   47a40:	1705883a 	add	r2,r2,fp
   47a44:	47000115 	stw	fp,4(r8)
   47a48:	40c00015 	stw	r3,0(r8)
   47a4c:	d8801c15 	stw	r2,112(sp)
   47a50:	d9801b15 	stw	r6,108(sp)
   47a54:	00c001c4 	movi	r3,7
   47a58:	19829416 	blt	r3,r6,484ac <___vfiprintf_internal_r+0x1030>
   47a5c:	8521c83a 	sub	r16,r16,r20
   47a60:	42000204 	addi	r8,r8,8
   47a64:	31400044 	addi	r5,r6,1
   47a68:	3009883a 	mov	r4,r6
   47a6c:	04018716 	blt	zero,r16,4808c <___vfiprintf_internal_r+0xc10>
   47a70:	a085883a 	add	r2,r20,r2
   47a74:	45c00015 	stw	r23,0(r8)
   47a78:	45000115 	stw	r20,4(r8)
   47a7c:	d8801c15 	stw	r2,112(sp)
   47a80:	d9401b15 	stw	r5,108(sp)
   47a84:	00c001c4 	movi	r3,7
   47a88:	1941c20e 	bge	r3,r5,48194 <___vfiprintf_internal_r+0xd18>
   47a8c:	1002531e 	bne	r2,zero,483dc <___vfiprintf_internal_r+0xf60>
   47a90:	d8001b15 	stw	zero,108(sp)
   47a94:	8c40010c 	andi	r17,r17,4
   47a98:	88023226 	beq	r17,zero,48364 <___vfiprintf_internal_r+0xee8>
   47a9c:	d9002517 	ldw	r4,148(sp)
   47aa0:	24e3c83a 	sub	r17,r4,r19
   47aa4:	04432916 	blt	zero,r17,4874c <___vfiprintf_internal_r+0x12d0>
   47aa8:	d8802517 	ldw	r2,148(sp)
   47aac:	14c0010e 	bge	r2,r19,47ab4 <___vfiprintf_internal_r+0x638>
   47ab0:	9805883a 	mov	r2,r19
   47ab4:	d8c02417 	ldw	r3,144(sp)
   47ab8:	1887883a 	add	r3,r3,r2
   47abc:	d8c02415 	stw	r3,144(sp)
   47ac0:	d8001b15 	stw	zero,108(sp)
   47ac4:	d811883a 	mov	r8,sp
   47ac8:	003ea006 	br	4754c <__alt_data_end+0xfffe1d4c>
   47acc:	8c400814 	ori	r17,r17,32
   47ad0:	b0c00007 	ldb	r3,0(r22)
   47ad4:	003ec606 	br	475f0 <__alt_data_end+0xfffe1df0>
   47ad8:	b0c00007 	ldb	r3,0(r22)
   47adc:	00801b04 	movi	r2,108
   47ae0:	18832026 	beq	r3,r2,48764 <___vfiprintf_internal_r+0x12e8>
   47ae4:	8c400414 	ori	r17,r17,16
   47ae8:	003ec106 	br	475f0 <__alt_data_end+0xfffe1df0>
   47aec:	9cc03fcc 	andi	r19,r19,255
   47af0:	b811883a 	mov	r8,r23
   47af4:	9803981e 	bne	r19,zero,48958 <___vfiprintf_internal_r+0x14dc>
   47af8:	8880080c 	andi	r2,r17,32
   47afc:	1002be26 	beq	r2,zero,485f8 <___vfiprintf_internal_r+0x117c>
   47b00:	d9002217 	ldw	r4,136(sp)
   47b04:	d9402417 	ldw	r5,144(sp)
   47b08:	20800017 	ldw	r2,0(r4)
   47b0c:	2807d7fa 	srai	r3,r5,31
   47b10:	21000104 	addi	r4,r4,4
   47b14:	d9002215 	stw	r4,136(sp)
   47b18:	11400015 	stw	r5,0(r2)
   47b1c:	10c00115 	stw	r3,4(r2)
   47b20:	003e8a06 	br	4754c <__alt_data_end+0xfffe1d4c>
   47b24:	9cc03fcc 	andi	r19,r19,255
   47b28:	b811883a 	mov	r8,r23
   47b2c:	9803871e 	bne	r19,zero,4894c <___vfiprintf_internal_r+0x14d0>
   47b30:	8880080c 	andi	r2,r17,32
   47b34:	10009a26 	beq	r2,zero,47da0 <___vfiprintf_internal_r+0x924>
   47b38:	d9002217 	ldw	r4,136(sp)
   47b3c:	d8001d85 	stb	zero,118(sp)
   47b40:	20800204 	addi	r2,r4,8
   47b44:	24c00017 	ldw	r19,0(r4)
   47b48:	25000117 	ldw	r20,4(r4)
   47b4c:	8002a416 	blt	r16,zero,485e0 <___vfiprintf_internal_r+0x1164>
   47b50:	013fdfc4 	movi	r4,-129
   47b54:	9d06b03a 	or	r3,r19,r20
   47b58:	d8802215 	stw	r2,136(sp)
   47b5c:	8922703a 	and	r17,r17,r4
   47b60:	18009b26 	beq	r3,zero,47dd0 <___vfiprintf_internal_r+0x954>
   47b64:	002b883a 	mov	r21,zero
   47b68:	ddc01a04 	addi	r23,sp,104
   47b6c:	9806d0fa 	srli	r3,r19,3
   47b70:	a008977a 	slli	r4,r20,29
   47b74:	a028d0fa 	srli	r20,r20,3
   47b78:	9cc001cc 	andi	r19,r19,7
   47b7c:	98800c04 	addi	r2,r19,48
   47b80:	bdffffc4 	addi	r23,r23,-1
   47b84:	20e6b03a 	or	r19,r4,r3
   47b88:	b8800005 	stb	r2,0(r23)
   47b8c:	9d06b03a 	or	r3,r19,r20
   47b90:	183ff61e 	bne	r3,zero,47b6c <__alt_data_end+0xfffe236c>
   47b94:	88c0004c 	andi	r3,r17,1
   47b98:	18021f1e 	bne	r3,zero,48418 <___vfiprintf_internal_r+0xf9c>
   47b9c:	d9401e17 	ldw	r5,120(sp)
   47ba0:	2de9c83a 	sub	r20,r5,r23
   47ba4:	003f3806 	br	47888 <__alt_data_end+0xfffe2088>
   47ba8:	9cc03fcc 	andi	r19,r19,255
   47bac:	b811883a 	mov	r8,r23
   47bb0:	98034f1e 	bne	r19,zero,488f0 <___vfiprintf_internal_r+0x1474>
   47bb4:	008001b4 	movhi	r2,6
   47bb8:	10a30304 	addi	r2,r2,-29684
   47bbc:	d8802615 	stw	r2,152(sp)
   47bc0:	8880080c 	andi	r2,r17,32
   47bc4:	1000ac26 	beq	r2,zero,47e78 <___vfiprintf_internal_r+0x9fc>
   47bc8:	d9002217 	ldw	r4,136(sp)
   47bcc:	24c00017 	ldw	r19,0(r4)
   47bd0:	25000117 	ldw	r20,4(r4)
   47bd4:	21000204 	addi	r4,r4,8
   47bd8:	d9002215 	stw	r4,136(sp)
   47bdc:	8880004c 	andi	r2,r17,1
   47be0:	1001e726 	beq	r2,zero,48380 <___vfiprintf_internal_r+0xf04>
   47be4:	9d04b03a 	or	r2,r19,r20
   47be8:	10025c1e 	bne	r2,zero,4855c <___vfiprintf_internal_r+0x10e0>
   47bec:	d8001d85 	stb	zero,118(sp)
   47bf0:	80024416 	blt	r16,zero,48504 <___vfiprintf_internal_r+0x1088>
   47bf4:	00bfdfc4 	movi	r2,-129
   47bf8:	88a2703a 	and	r17,r17,r2
   47bfc:	003f1d06 	br	47874 <__alt_data_end+0xfffe2074>
   47c00:	d8c02217 	ldw	r3,136(sp)
   47c04:	04c00044 	movi	r19,1
   47c08:	b811883a 	mov	r8,r23
   47c0c:	18800017 	ldw	r2,0(r3)
   47c10:	18c00104 	addi	r3,r3,4
   47c14:	d8001d85 	stb	zero,118(sp)
   47c18:	d8801005 	stb	r2,64(sp)
   47c1c:	d8c02215 	stw	r3,136(sp)
   47c20:	9829883a 	mov	r20,r19
   47c24:	ddc01004 	addi	r23,sp,64
   47c28:	0021883a 	mov	r16,zero
   47c2c:	003f1e06 	br	478a8 <__alt_data_end+0xfffe20a8>
   47c30:	9cc03fcc 	andi	r19,r19,255
   47c34:	b811883a 	mov	r8,r23
   47c38:	9803331e 	bne	r19,zero,48908 <___vfiprintf_internal_r+0x148c>
   47c3c:	8880080c 	andi	r2,r17,32
   47c40:	10004826 	beq	r2,zero,47d64 <___vfiprintf_internal_r+0x8e8>
   47c44:	d9002217 	ldw	r4,136(sp)
   47c48:	20800117 	ldw	r2,4(r4)
   47c4c:	24c00017 	ldw	r19,0(r4)
   47c50:	21000204 	addi	r4,r4,8
   47c54:	d9002215 	stw	r4,136(sp)
   47c58:	1029883a 	mov	r20,r2
   47c5c:	10024c16 	blt	r2,zero,48590 <___vfiprintf_internal_r+0x1114>
   47c60:	dd401d83 	ldbu	r21,118(sp)
   47c64:	80007116 	blt	r16,zero,47e2c <___vfiprintf_internal_r+0x9b0>
   47c68:	00ffdfc4 	movi	r3,-129
   47c6c:	9d04b03a 	or	r2,r19,r20
   47c70:	88e2703a 	and	r17,r17,r3
   47c74:	1000d126 	beq	r2,zero,47fbc <___vfiprintf_internal_r+0xb40>
   47c78:	a0023526 	beq	r20,zero,48550 <___vfiprintf_internal_r+0x10d4>
   47c7c:	ddc01a04 	addi	r23,sp,104
   47c80:	4039883a 	mov	fp,r8
   47c84:	9809883a 	mov	r4,r19
   47c88:	a00b883a 	mov	r5,r20
   47c8c:	01800284 	movi	r6,10
   47c90:	000f883a 	mov	r7,zero
   47c94:	004a5300 	call	4a530 <__umoddi3>
   47c98:	10800c04 	addi	r2,r2,48
   47c9c:	bdffffc4 	addi	r23,r23,-1
   47ca0:	9809883a 	mov	r4,r19
   47ca4:	a00b883a 	mov	r5,r20
   47ca8:	b8800005 	stb	r2,0(r23)
   47cac:	01800284 	movi	r6,10
   47cb0:	000f883a 	mov	r7,zero
   47cb4:	0049f340 	call	49f34 <__udivdi3>
   47cb8:	1027883a 	mov	r19,r2
   47cbc:	10c4b03a 	or	r2,r2,r3
   47cc0:	1829883a 	mov	r20,r3
   47cc4:	103fef1e 	bne	r2,zero,47c84 <__alt_data_end+0xfffe2484>
   47cc8:	d9001e17 	ldw	r4,120(sp)
   47ccc:	e011883a 	mov	r8,fp
   47cd0:	25e9c83a 	sub	r20,r4,r23
   47cd4:	003eec06 	br	47888 <__alt_data_end+0xfffe2088>
   47cd8:	d8802307 	ldb	r2,140(sp)
   47cdc:	1002361e 	bne	r2,zero,485b8 <___vfiprintf_internal_r+0x113c>
   47ce0:	00c00804 	movi	r3,32
   47ce4:	d8c02305 	stb	r3,140(sp)
   47ce8:	04c00044 	movi	r19,1
   47cec:	b0c00007 	ldb	r3,0(r22)
   47cf0:	003e3f06 	br	475f0 <__alt_data_end+0xfffe1df0>
   47cf4:	8c400054 	ori	r17,r17,1
   47cf8:	b0c00007 	ldb	r3,0(r22)
   47cfc:	003e3c06 	br	475f0 <__alt_data_end+0xfffe1df0>
   47d00:	8c402014 	ori	r17,r17,128
   47d04:	b0c00007 	ldb	r3,0(r22)
   47d08:	003e3906 	br	475f0 <__alt_data_end+0xfffe1df0>
   47d0c:	dc002715 	stw	r16,156(sp)
   47d10:	d8002515 	stw	zero,148(sp)
   47d14:	1f3ff404 	addi	fp,r3,-48
   47d18:	0009883a 	mov	r4,zero
   47d1c:	b021883a 	mov	r16,r22
   47d20:	01400284 	movi	r5,10
   47d24:	00406e00 	call	406e0 <__mulsi3>
   47d28:	80c00007 	ldb	r3,0(r16)
   47d2c:	e089883a 	add	r4,fp,r2
   47d30:	b5800044 	addi	r22,r22,1
   47d34:	1f3ff404 	addi	fp,r3,-48
   47d38:	b021883a 	mov	r16,r22
   47d3c:	af3ff82e 	bgeu	r21,fp,47d20 <__alt_data_end+0xfffe2520>
   47d40:	d9002515 	stw	r4,148(sp)
   47d44:	dc002717 	ldw	r16,156(sp)
   47d48:	003e2a06 	br	475f4 <__alt_data_end+0xfffe1df4>
   47d4c:	9cc03fcc 	andi	r19,r19,255
   47d50:	b811883a 	mov	r8,r23
   47d54:	9802e91e 	bne	r19,zero,488fc <___vfiprintf_internal_r+0x1480>
   47d58:	8c400414 	ori	r17,r17,16
   47d5c:	8880080c 	andi	r2,r17,32
   47d60:	103fb81e 	bne	r2,zero,47c44 <__alt_data_end+0xfffe2444>
   47d64:	8880040c 	andi	r2,r17,16
   47d68:	10022e26 	beq	r2,zero,48624 <___vfiprintf_internal_r+0x11a8>
   47d6c:	d9402217 	ldw	r5,136(sp)
   47d70:	2cc00017 	ldw	r19,0(r5)
   47d74:	29400104 	addi	r5,r5,4
   47d78:	d9402215 	stw	r5,136(sp)
   47d7c:	9829d7fa 	srai	r20,r19,31
   47d80:	a005883a 	mov	r2,r20
   47d84:	003fb506 	br	47c5c <__alt_data_end+0xfffe245c>
   47d88:	9cc03fcc 	andi	r19,r19,255
   47d8c:	b811883a 	mov	r8,r23
   47d90:	9802fa1e 	bne	r19,zero,4897c <___vfiprintf_internal_r+0x1500>
   47d94:	8c400414 	ori	r17,r17,16
   47d98:	8880080c 	andi	r2,r17,32
   47d9c:	103f661e 	bne	r2,zero,47b38 <__alt_data_end+0xfffe2338>
   47da0:	8880040c 	andi	r2,r17,16
   47da4:	10020626 	beq	r2,zero,485c0 <___vfiprintf_internal_r+0x1144>
   47da8:	d9402217 	ldw	r5,136(sp)
   47dac:	d8001d85 	stb	zero,118(sp)
   47db0:	0029883a 	mov	r20,zero
   47db4:	28800104 	addi	r2,r5,4
   47db8:	2cc00017 	ldw	r19,0(r5)
   47dbc:	80020816 	blt	r16,zero,485e0 <___vfiprintf_internal_r+0x1164>
   47dc0:	00ffdfc4 	movi	r3,-129
   47dc4:	d8802215 	stw	r2,136(sp)
   47dc8:	88e2703a 	and	r17,r17,r3
   47dcc:	983f651e 	bne	r19,zero,47b64 <__alt_data_end+0xfffe2364>
   47dd0:	002b883a 	mov	r21,zero
   47dd4:	8002cf26 	beq	r16,zero,48914 <___vfiprintf_internal_r+0x1498>
   47dd8:	0027883a 	mov	r19,zero
   47ddc:	0029883a 	mov	r20,zero
   47de0:	003f6106 	br	47b68 <__alt_data_end+0xfffe2368>
   47de4:	9cc03fcc 	andi	r19,r19,255
   47de8:	b811883a 	mov	r8,r23
   47dec:	9802e01e 	bne	r19,zero,48970 <___vfiprintf_internal_r+0x14f4>
   47df0:	8c400414 	ori	r17,r17,16
   47df4:	8880080c 	andi	r2,r17,32
   47df8:	1000641e 	bne	r2,zero,47f8c <___vfiprintf_internal_r+0xb10>
   47dfc:	8880040c 	andi	r2,r17,16
   47e00:	1001c81e 	bne	r2,zero,48524 <___vfiprintf_internal_r+0x10a8>
   47e04:	8880100c 	andi	r2,r17,64
   47e08:	d8001d85 	stb	zero,118(sp)
   47e0c:	1002281e 	bne	r2,zero,486b0 <___vfiprintf_internal_r+0x1234>
   47e10:	d9002217 	ldw	r4,136(sp)
   47e14:	0029883a 	mov	r20,zero
   47e18:	20800104 	addi	r2,r4,4
   47e1c:	24c00017 	ldw	r19,0(r4)
   47e20:	8001c60e 	bge	r16,zero,4853c <___vfiprintf_internal_r+0x10c0>
   47e24:	d8802215 	stw	r2,136(sp)
   47e28:	002b883a 	mov	r21,zero
   47e2c:	9d04b03a 	or	r2,r19,r20
   47e30:	103f911e 	bne	r2,zero,47c78 <__alt_data_end+0xfffe2478>
   47e34:	00800044 	movi	r2,1
   47e38:	10803fcc 	andi	r2,r2,255
   47e3c:	00c00044 	movi	r3,1
   47e40:	10c05f26 	beq	r2,r3,47fc0 <___vfiprintf_internal_r+0xb44>
   47e44:	00c00084 	movi	r3,2
   47e48:	10ffe31e 	bne	r2,r3,47dd8 <__alt_data_end+0xfffe25d8>
   47e4c:	0027883a 	mov	r19,zero
   47e50:	0029883a 	mov	r20,zero
   47e54:	00015106 	br	4839c <___vfiprintf_internal_r+0xf20>
   47e58:	9cc03fcc 	andi	r19,r19,255
   47e5c:	b811883a 	mov	r8,r23
   47e60:	9802c01e 	bne	r19,zero,48964 <___vfiprintf_internal_r+0x14e8>
   47e64:	014001b4 	movhi	r5,6
   47e68:	2962fe04 	addi	r5,r5,-29704
   47e6c:	d9402615 	stw	r5,152(sp)
   47e70:	8880080c 	andi	r2,r17,32
   47e74:	103f541e 	bne	r2,zero,47bc8 <__alt_data_end+0xfffe23c8>
   47e78:	8880040c 	andi	r2,r17,16
   47e7c:	1001f226 	beq	r2,zero,48648 <___vfiprintf_internal_r+0x11cc>
   47e80:	d9402217 	ldw	r5,136(sp)
   47e84:	0029883a 	mov	r20,zero
   47e88:	2cc00017 	ldw	r19,0(r5)
   47e8c:	29400104 	addi	r5,r5,4
   47e90:	d9402215 	stw	r5,136(sp)
   47e94:	003f5106 	br	47bdc <__alt_data_end+0xfffe23dc>
   47e98:	d8c02217 	ldw	r3,136(sp)
   47e9c:	b811883a 	mov	r8,r23
   47ea0:	d8001d85 	stb	zero,118(sp)
   47ea4:	1dc00017 	ldw	r23,0(r3)
   47ea8:	1f000104 	addi	fp,r3,4
   47eac:	b8025926 	beq	r23,zero,48814 <___vfiprintf_internal_r+0x1398>
   47eb0:	80023316 	blt	r16,zero,48780 <___vfiprintf_internal_r+0x1304>
   47eb4:	800d883a 	mov	r6,r16
   47eb8:	000b883a 	mov	r5,zero
   47ebc:	b809883a 	mov	r4,r23
   47ec0:	da002a15 	stw	r8,168(sp)
   47ec4:	0045be40 	call	45be4 <memchr>
   47ec8:	da002a17 	ldw	r8,168(sp)
   47ecc:	10026826 	beq	r2,zero,48870 <___vfiprintf_internal_r+0x13f4>
   47ed0:	15e9c83a 	sub	r20,r2,r23
   47ed4:	dd401d83 	ldbu	r21,118(sp)
   47ed8:	df002215 	stw	fp,136(sp)
   47edc:	0021883a 	mov	r16,zero
   47ee0:	003e6906 	br	47888 <__alt_data_end+0xfffe2088>
   47ee4:	9cc03fcc 	andi	r19,r19,255
   47ee8:	b811883a 	mov	r8,r23
   47eec:	983fc126 	beq	r19,zero,47df4 <__alt_data_end+0xfffe25f4>
   47ef0:	d8c02303 	ldbu	r3,140(sp)
   47ef4:	d8c01d85 	stb	r3,118(sp)
   47ef8:	003fbe06 	br	47df4 <__alt_data_end+0xfffe25f4>
   47efc:	d9002217 	ldw	r4,136(sp)
   47f00:	d9402217 	ldw	r5,136(sp)
   47f04:	21000017 	ldw	r4,0(r4)
   47f08:	28800104 	addi	r2,r5,4
   47f0c:	d9002515 	stw	r4,148(sp)
   47f10:	203e3d16 	blt	r4,zero,47808 <__alt_data_end+0xfffe2008>
   47f14:	d8802215 	stw	r2,136(sp)
   47f18:	b0c00007 	ldb	r3,0(r22)
   47f1c:	003db406 	br	475f0 <__alt_data_end+0xfffe1df0>
   47f20:	00c00ac4 	movi	r3,43
   47f24:	d8c02305 	stb	r3,140(sp)
   47f28:	04c00044 	movi	r19,1
   47f2c:	b0c00007 	ldb	r3,0(r22)
   47f30:	003daf06 	br	475f0 <__alt_data_end+0xfffe1df0>
   47f34:	b0c00007 	ldb	r3,0(r22)
   47f38:	01000a84 	movi	r4,42
   47f3c:	b4000044 	addi	r16,r22,1
   47f40:	19025e26 	beq	r3,r4,488bc <___vfiprintf_internal_r+0x1440>
   47f44:	1f3ff404 	addi	fp,r3,-48
   47f48:	0009883a 	mov	r4,zero
   47f4c:	af025236 	bltu	r21,fp,48898 <___vfiprintf_internal_r+0x141c>
   47f50:	01400284 	movi	r5,10
   47f54:	00406e00 	call	406e0 <__mulsi3>
   47f58:	80c00007 	ldb	r3,0(r16)
   47f5c:	1709883a 	add	r4,r2,fp
   47f60:	85800044 	addi	r22,r16,1
   47f64:	1f3ff404 	addi	fp,r3,-48
   47f68:	b021883a 	mov	r16,r22
   47f6c:	af3ff82e 	bgeu	r21,fp,47f50 <__alt_data_end+0xfffe2750>
   47f70:	2021883a 	mov	r16,r4
   47f74:	203d9f0e 	bge	r4,zero,475f4 <__alt_data_end+0xfffe1df4>
   47f78:	043fffc4 	movi	r16,-1
   47f7c:	003d9d06 	br	475f4 <__alt_data_end+0xfffe1df4>
   47f80:	8c401014 	ori	r17,r17,64
   47f84:	b0c00007 	ldb	r3,0(r22)
   47f88:	003d9906 	br	475f0 <__alt_data_end+0xfffe1df0>
   47f8c:	d9002217 	ldw	r4,136(sp)
   47f90:	d8001d85 	stb	zero,118(sp)
   47f94:	20c00204 	addi	r3,r4,8
   47f98:	24c00017 	ldw	r19,0(r4)
   47f9c:	25000117 	ldw	r20,4(r4)
   47fa0:	8001e716 	blt	r16,zero,48740 <___vfiprintf_internal_r+0x12c4>
   47fa4:	013fdfc4 	movi	r4,-129
   47fa8:	9d04b03a 	or	r2,r19,r20
   47fac:	d8c02215 	stw	r3,136(sp)
   47fb0:	8922703a 	and	r17,r17,r4
   47fb4:	002b883a 	mov	r21,zero
   47fb8:	103f2f1e 	bne	r2,zero,47c78 <__alt_data_end+0xfffe2478>
   47fbc:	803e2f26 	beq	r16,zero,4787c <__alt_data_end+0xfffe207c>
   47fc0:	0027883a 	mov	r19,zero
   47fc4:	9cc00c04 	addi	r19,r19,48
   47fc8:	dcc019c5 	stb	r19,103(sp)
   47fcc:	dd002817 	ldw	r20,160(sp)
   47fd0:	ddc019c4 	addi	r23,sp,103
   47fd4:	003e2c06 	br	47888 <__alt_data_end+0xfffe2088>
   47fd8:	9cc03fcc 	andi	r19,r19,255
   47fdc:	b811883a 	mov	r8,r23
   47fe0:	9802571e 	bne	r19,zero,48940 <___vfiprintf_internal_r+0x14c4>
   47fe4:	18005726 	beq	r3,zero,48144 <___vfiprintf_internal_r+0xcc8>
   47fe8:	04c00044 	movi	r19,1
   47fec:	d8c01005 	stb	r3,64(sp)
   47ff0:	d8001d85 	stb	zero,118(sp)
   47ff4:	9829883a 	mov	r20,r19
   47ff8:	ddc01004 	addi	r23,sp,64
   47ffc:	003f0a06 	br	47c28 <__alt_data_end+0xfffe2428>
   48000:	d9402017 	ldw	r5,128(sp)
   48004:	d9002117 	ldw	r4,132(sp)
   48008:	d9801a04 	addi	r6,sp,104
   4800c:	da802a15 	stw	r10,168(sp)
   48010:	00473680 	call	47368 <__sprint_r.part.0>
   48014:	da802a17 	ldw	r10,168(sp)
   48018:	1000501e 	bne	r2,zero,4815c <___vfiprintf_internal_r+0xce0>
   4801c:	d9801b17 	ldw	r6,108(sp)
   48020:	d8801c17 	ldw	r2,112(sp)
   48024:	d811883a 	mov	r8,sp
   48028:	31000044 	addi	r4,r6,1
   4802c:	003e3606 	br	47908 <__alt_data_end+0xfffe2108>
   48030:	d9001b17 	ldw	r4,108(sp)
   48034:	d8801c17 	ldw	r2,112(sp)
   48038:	21400044 	addi	r5,r4,1
   4803c:	d9801d87 	ldb	r6,118(sp)
   48040:	303e5226 	beq	r6,zero,4798c <__alt_data_end+0xfffe218c>
   48044:	01800044 	movi	r6,1
   48048:	d9001d84 	addi	r4,sp,118
   4804c:	1185883a 	add	r2,r2,r6
   48050:	41000015 	stw	r4,0(r8)
   48054:	41800115 	stw	r6,4(r8)
   48058:	d8801c15 	stw	r2,112(sp)
   4805c:	d9401b15 	stw	r5,108(sp)
   48060:	010001c4 	movi	r4,7
   48064:	2140b00e 	bge	r4,r5,48328 <___vfiprintf_internal_r+0xeac>
   48068:	1000f61e 	bne	r2,zero,48444 <___vfiprintf_internal_r+0xfc8>
   4806c:	3800b31e 	bne	r7,zero,4833c <___vfiprintf_internal_r+0xec0>
   48070:	0009883a 	mov	r4,zero
   48074:	300b883a 	mov	r5,r6
   48078:	d811883a 	mov	r8,sp
   4807c:	01802004 	movi	r6,128
   48080:	19be5226 	beq	r3,r6,479cc <__alt_data_end+0xfffe21cc>
   48084:	8521c83a 	sub	r16,r16,r20
   48088:	043e790e 	bge	zero,r16,47a70 <__alt_data_end+0xfffe2270>
   4808c:	05400404 	movi	r21,16
   48090:	ac01b00e 	bge	r21,r16,48754 <___vfiprintf_internal_r+0x12d8>
   48094:	014001b4 	movhi	r5,6
   48098:	29636404 	addi	r5,r5,-29296
   4809c:	d9402315 	stw	r5,140(sp)
   480a0:	070001c4 	movi	fp,7
   480a4:	00000506 	br	480bc <___vfiprintf_internal_r+0xc40>
   480a8:	21400084 	addi	r5,r4,2
   480ac:	42000204 	addi	r8,r8,8
   480b0:	1809883a 	mov	r4,r3
   480b4:	843ffc04 	addi	r16,r16,-16
   480b8:	ac000d0e 	bge	r21,r16,480f0 <___vfiprintf_internal_r+0xc74>
   480bc:	10800404 	addi	r2,r2,16
   480c0:	20c00044 	addi	r3,r4,1
   480c4:	44800015 	stw	r18,0(r8)
   480c8:	45400115 	stw	r21,4(r8)
   480cc:	d8801c15 	stw	r2,112(sp)
   480d0:	d8c01b15 	stw	r3,108(sp)
   480d4:	e0fff40e 	bge	fp,r3,480a8 <__alt_data_end+0xfffe28a8>
   480d8:	1000101e 	bne	r2,zero,4811c <___vfiprintf_internal_r+0xca0>
   480dc:	843ffc04 	addi	r16,r16,-16
   480e0:	01400044 	movi	r5,1
   480e4:	0009883a 	mov	r4,zero
   480e8:	d811883a 	mov	r8,sp
   480ec:	ac3ff316 	blt	r21,r16,480bc <__alt_data_end+0xfffe28bc>
   480f0:	d8c02317 	ldw	r3,140(sp)
   480f4:	1405883a 	add	r2,r2,r16
   480f8:	44000115 	stw	r16,4(r8)
   480fc:	40c00015 	stw	r3,0(r8)
   48100:	d8801c15 	stw	r2,112(sp)
   48104:	d9401b15 	stw	r5,108(sp)
   48108:	00c001c4 	movi	r3,7
   4810c:	19401916 	blt	r3,r5,48174 <___vfiprintf_internal_r+0xcf8>
   48110:	42000204 	addi	r8,r8,8
   48114:	29400044 	addi	r5,r5,1
   48118:	003e5506 	br	47a70 <__alt_data_end+0xfffe2270>
   4811c:	d9402017 	ldw	r5,128(sp)
   48120:	d9002117 	ldw	r4,132(sp)
   48124:	d9801a04 	addi	r6,sp,104
   48128:	00473680 	call	47368 <__sprint_r.part.0>
   4812c:	10000b1e 	bne	r2,zero,4815c <___vfiprintf_internal_r+0xce0>
   48130:	d9001b17 	ldw	r4,108(sp)
   48134:	d8801c17 	ldw	r2,112(sp)
   48138:	d811883a 	mov	r8,sp
   4813c:	21400044 	addi	r5,r4,1
   48140:	003fdc06 	br	480b4 <__alt_data_end+0xfffe28b4>
   48144:	d8801c17 	ldw	r2,112(sp)
   48148:	10000426 	beq	r2,zero,4815c <___vfiprintf_internal_r+0xce0>
   4814c:	d9402017 	ldw	r5,128(sp)
   48150:	d9002117 	ldw	r4,132(sp)
   48154:	d9801a04 	addi	r6,sp,104
   48158:	00473680 	call	47368 <__sprint_r.part.0>
   4815c:	d9402017 	ldw	r5,128(sp)
   48160:	2880030b 	ldhu	r2,12(r5)
   48164:	1080100c 	andi	r2,r2,64
   48168:	10014d1e 	bne	r2,zero,486a0 <___vfiprintf_internal_r+0x1224>
   4816c:	d8802417 	ldw	r2,144(sp)
   48170:	003d9706 	br	477d0 <__alt_data_end+0xfffe1fd0>
   48174:	1000d21e 	bne	r2,zero,484c0 <___vfiprintf_internal_r+0x1044>
   48178:	00c00044 	movi	r3,1
   4817c:	a005883a 	mov	r2,r20
   48180:	ddc00015 	stw	r23,0(sp)
   48184:	dd000115 	stw	r20,4(sp)
   48188:	dd001c15 	stw	r20,112(sp)
   4818c:	d8c01b15 	stw	r3,108(sp)
   48190:	d811883a 	mov	r8,sp
   48194:	42000204 	addi	r8,r8,8
   48198:	8c40010c 	andi	r17,r17,4
   4819c:	88004026 	beq	r17,zero,482a0 <___vfiprintf_internal_r+0xe24>
   481a0:	d9002517 	ldw	r4,148(sp)
   481a4:	24e3c83a 	sub	r17,r4,r19
   481a8:	04403d0e 	bge	zero,r17,482a0 <___vfiprintf_internal_r+0xe24>
   481ac:	04000404 	movi	r16,16
   481b0:	8441a90e 	bge	r16,r17,48858 <___vfiprintf_internal_r+0x13dc>
   481b4:	00c001b4 	movhi	r3,6
   481b8:	18e36804 	addi	r3,r3,-29280
   481bc:	d9001b17 	ldw	r4,108(sp)
   481c0:	d8c02315 	stw	r3,140(sp)
   481c4:	050001c4 	movi	r20,7
   481c8:	dd402117 	ldw	r21,132(sp)
   481cc:	ddc02017 	ldw	r23,128(sp)
   481d0:	00000506 	br	481e8 <___vfiprintf_internal_r+0xd6c>
   481d4:	21400084 	addi	r5,r4,2
   481d8:	42000204 	addi	r8,r8,8
   481dc:	1809883a 	mov	r4,r3
   481e0:	8c7ffc04 	addi	r17,r17,-16
   481e4:	84400f0e 	bge	r16,r17,48224 <___vfiprintf_internal_r+0xda8>
   481e8:	014001b4 	movhi	r5,6
   481ec:	10800404 	addi	r2,r2,16
   481f0:	20c00044 	addi	r3,r4,1
   481f4:	29636804 	addi	r5,r5,-29280
   481f8:	41400015 	stw	r5,0(r8)
   481fc:	44000115 	stw	r16,4(r8)
   48200:	d8801c15 	stw	r2,112(sp)
   48204:	d8c01b15 	stw	r3,108(sp)
   48208:	a0fff20e 	bge	r20,r3,481d4 <__alt_data_end+0xfffe29d4>
   4820c:	1000141e 	bne	r2,zero,48260 <___vfiprintf_internal_r+0xde4>
   48210:	8c7ffc04 	addi	r17,r17,-16
   48214:	01400044 	movi	r5,1
   48218:	0009883a 	mov	r4,zero
   4821c:	d811883a 	mov	r8,sp
   48220:	847ff116 	blt	r16,r17,481e8 <__alt_data_end+0xfffe29e8>
   48224:	d8c02317 	ldw	r3,140(sp)
   48228:	1445883a 	add	r2,r2,r17
   4822c:	44400115 	stw	r17,4(r8)
   48230:	40c00015 	stw	r3,0(r8)
   48234:	d8801c15 	stw	r2,112(sp)
   48238:	d9401b15 	stw	r5,108(sp)
   4823c:	00c001c4 	movi	r3,7
   48240:	1940170e 	bge	r3,r5,482a0 <___vfiprintf_internal_r+0xe24>
   48244:	1000101e 	bne	r2,zero,48288 <___vfiprintf_internal_r+0xe0c>
   48248:	d8802517 	ldw	r2,148(sp)
   4824c:	14c11616 	blt	r2,r19,486a8 <___vfiprintf_internal_r+0x122c>
   48250:	d9002417 	ldw	r4,144(sp)
   48254:	2089883a 	add	r4,r4,r2
   48258:	d9002415 	stw	r4,144(sp)
   4825c:	003e1806 	br	47ac0 <__alt_data_end+0xfffe22c0>
   48260:	d9801a04 	addi	r6,sp,104
   48264:	b80b883a 	mov	r5,r23
   48268:	a809883a 	mov	r4,r21
   4826c:	00473680 	call	47368 <__sprint_r.part.0>
   48270:	103fba1e 	bne	r2,zero,4815c <__alt_data_end+0xfffe295c>
   48274:	d9001b17 	ldw	r4,108(sp)
   48278:	d8801c17 	ldw	r2,112(sp)
   4827c:	d811883a 	mov	r8,sp
   48280:	21400044 	addi	r5,r4,1
   48284:	003fd606 	br	481e0 <__alt_data_end+0xfffe29e0>
   48288:	d9402017 	ldw	r5,128(sp)
   4828c:	d9002117 	ldw	r4,132(sp)
   48290:	d9801a04 	addi	r6,sp,104
   48294:	00473680 	call	47368 <__sprint_r.part.0>
   48298:	103fb01e 	bne	r2,zero,4815c <__alt_data_end+0xfffe295c>
   4829c:	d8801c17 	ldw	r2,112(sp)
   482a0:	d8c02517 	ldw	r3,148(sp)
   482a4:	1cc0010e 	bge	r3,r19,482ac <___vfiprintf_internal_r+0xe30>
   482a8:	9807883a 	mov	r3,r19
   482ac:	d9002417 	ldw	r4,144(sp)
   482b0:	20c9883a 	add	r4,r4,r3
   482b4:	d9002415 	stw	r4,144(sp)
   482b8:	103e0126 	beq	r2,zero,47ac0 <__alt_data_end+0xfffe22c0>
   482bc:	d9402017 	ldw	r5,128(sp)
   482c0:	d9002117 	ldw	r4,132(sp)
   482c4:	d9801a04 	addi	r6,sp,104
   482c8:	00473680 	call	47368 <__sprint_r.part.0>
   482cc:	103dfc26 	beq	r2,zero,47ac0 <__alt_data_end+0xfffe22c0>
   482d0:	003fa206 	br	4815c <__alt_data_end+0xfffe295c>
   482d4:	d9402017 	ldw	r5,128(sp)
   482d8:	d9002117 	ldw	r4,132(sp)
   482dc:	d9801a04 	addi	r6,sp,104
   482e0:	d9c02b15 	stw	r7,172(sp)
   482e4:	00473680 	call	47368 <__sprint_r.part.0>
   482e8:	d9c02b17 	ldw	r7,172(sp)
   482ec:	103f9b1e 	bne	r2,zero,4815c <__alt_data_end+0xfffe295c>
   482f0:	d9001b17 	ldw	r4,108(sp)
   482f4:	d8801c17 	ldw	r2,112(sp)
   482f8:	d811883a 	mov	r8,sp
   482fc:	21800044 	addi	r6,r4,1
   48300:	003dbf06 	br	47a00 <__alt_data_end+0xfffe2200>
   48304:	1000d81e 	bne	r2,zero,48668 <___vfiprintf_internal_r+0x11ec>
   48308:	d9001d87 	ldb	r4,118(sp)
   4830c:	20000a26 	beq	r4,zero,48338 <___vfiprintf_internal_r+0xebc>
   48310:	00800044 	movi	r2,1
   48314:	d9001d84 	addi	r4,sp,118
   48318:	100b883a 	mov	r5,r2
   4831c:	d9000015 	stw	r4,0(sp)
   48320:	d8800115 	stw	r2,4(sp)
   48324:	d811883a 	mov	r8,sp
   48328:	2809883a 	mov	r4,r5
   4832c:	42000204 	addi	r8,r8,8
   48330:	29400044 	addi	r5,r5,1
   48334:	003d9506 	br	4798c <__alt_data_end+0xfffe218c>
   48338:	3800fd26 	beq	r7,zero,48730 <___vfiprintf_internal_r+0x12b4>
   4833c:	00800084 	movi	r2,2
   48340:	d9001d04 	addi	r4,sp,116
   48344:	d9000015 	stw	r4,0(sp)
   48348:	d8800115 	stw	r2,4(sp)
   4834c:	01400044 	movi	r5,1
   48350:	d811883a 	mov	r8,sp
   48354:	2809883a 	mov	r4,r5
   48358:	42000204 	addi	r8,r8,8
   4835c:	29400044 	addi	r5,r5,1
   48360:	003f4606 	br	4807c <__alt_data_end+0xfffe287c>
   48364:	d8802517 	ldw	r2,148(sp)
   48368:	14c0010e 	bge	r2,r19,48370 <___vfiprintf_internal_r+0xef4>
   4836c:	9805883a 	mov	r2,r19
   48370:	d9402417 	ldw	r5,144(sp)
   48374:	288b883a 	add	r5,r5,r2
   48378:	d9402415 	stw	r5,144(sp)
   4837c:	003dd006 	br	47ac0 <__alt_data_end+0xfffe22c0>
   48380:	d8001d85 	stb	zero,118(sp)
   48384:	80005d16 	blt	r16,zero,484fc <___vfiprintf_internal_r+0x1080>
   48388:	00ffdfc4 	movi	r3,-129
   4838c:	9d04b03a 	or	r2,r19,r20
   48390:	88e2703a 	and	r17,r17,r3
   48394:	103d3726 	beq	r2,zero,47874 <__alt_data_end+0xfffe2074>
   48398:	002b883a 	mov	r21,zero
   4839c:	d9002617 	ldw	r4,152(sp)
   483a0:	ddc01a04 	addi	r23,sp,104
   483a4:	988003cc 	andi	r2,r19,15
   483a8:	a006973a 	slli	r3,r20,28
   483ac:	2085883a 	add	r2,r4,r2
   483b0:	9826d13a 	srli	r19,r19,4
   483b4:	10800003 	ldbu	r2,0(r2)
   483b8:	a028d13a 	srli	r20,r20,4
   483bc:	bdffffc4 	addi	r23,r23,-1
   483c0:	1ce6b03a 	or	r19,r3,r19
   483c4:	b8800005 	stb	r2,0(r23)
   483c8:	9d04b03a 	or	r2,r19,r20
   483cc:	103ff51e 	bne	r2,zero,483a4 <__alt_data_end+0xfffe2ba4>
   483d0:	d8801e17 	ldw	r2,120(sp)
   483d4:	15e9c83a 	sub	r20,r2,r23
   483d8:	003d2b06 	br	47888 <__alt_data_end+0xfffe2088>
   483dc:	d9402017 	ldw	r5,128(sp)
   483e0:	d9002117 	ldw	r4,132(sp)
   483e4:	d9801a04 	addi	r6,sp,104
   483e8:	00473680 	call	47368 <__sprint_r.part.0>
   483ec:	103f5b1e 	bne	r2,zero,4815c <__alt_data_end+0xfffe295c>
   483f0:	d8801c17 	ldw	r2,112(sp)
   483f4:	d811883a 	mov	r8,sp
   483f8:	003f6706 	br	48198 <__alt_data_end+0xfffe2998>
   483fc:	d9402017 	ldw	r5,128(sp)
   48400:	d9002117 	ldw	r4,132(sp)
   48404:	d9801a04 	addi	r6,sp,104
   48408:	00473680 	call	47368 <__sprint_r.part.0>
   4840c:	103f531e 	bne	r2,zero,4815c <__alt_data_end+0xfffe295c>
   48410:	d811883a 	mov	r8,sp
   48414:	003cd906 	br	4777c <__alt_data_end+0xfffe1f7c>
   48418:	10803fcc 	andi	r2,r2,255
   4841c:	1080201c 	xori	r2,r2,128
   48420:	10bfe004 	addi	r2,r2,-128
   48424:	00c00c04 	movi	r3,48
   48428:	10ffe926 	beq	r2,r3,483d0 <__alt_data_end+0xfffe2bd0>
   4842c:	b8ffffc5 	stb	r3,-1(r23)
   48430:	d8c01e17 	ldw	r3,120(sp)
   48434:	b8bfffc4 	addi	r2,r23,-1
   48438:	102f883a 	mov	r23,r2
   4843c:	18a9c83a 	sub	r20,r3,r2
   48440:	003d1106 	br	47888 <__alt_data_end+0xfffe2088>
   48444:	d9402017 	ldw	r5,128(sp)
   48448:	d9002117 	ldw	r4,132(sp)
   4844c:	d9801a04 	addi	r6,sp,104
   48450:	d8c02a15 	stw	r3,168(sp)
   48454:	d9c02b15 	stw	r7,172(sp)
   48458:	00473680 	call	47368 <__sprint_r.part.0>
   4845c:	d8c02a17 	ldw	r3,168(sp)
   48460:	d9c02b17 	ldw	r7,172(sp)
   48464:	103f3d1e 	bne	r2,zero,4815c <__alt_data_end+0xfffe295c>
   48468:	d9001b17 	ldw	r4,108(sp)
   4846c:	d8801c17 	ldw	r2,112(sp)
   48470:	d811883a 	mov	r8,sp
   48474:	21400044 	addi	r5,r4,1
   48478:	003d4406 	br	4798c <__alt_data_end+0xfffe218c>
   4847c:	d9402017 	ldw	r5,128(sp)
   48480:	d9002117 	ldw	r4,132(sp)
   48484:	d9801a04 	addi	r6,sp,104
   48488:	d8c02a15 	stw	r3,168(sp)
   4848c:	00473680 	call	47368 <__sprint_r.part.0>
   48490:	d8c02a17 	ldw	r3,168(sp)
   48494:	103f311e 	bne	r2,zero,4815c <__alt_data_end+0xfffe295c>
   48498:	d9001b17 	ldw	r4,108(sp)
   4849c:	d8801c17 	ldw	r2,112(sp)
   484a0:	d811883a 	mov	r8,sp
   484a4:	21400044 	addi	r5,r4,1
   484a8:	003ef406 	br	4807c <__alt_data_end+0xfffe287c>
   484ac:	1000bd1e 	bne	r2,zero,487a4 <___vfiprintf_internal_r+0x1328>
   484b0:	01400044 	movi	r5,1
   484b4:	0009883a 	mov	r4,zero
   484b8:	d811883a 	mov	r8,sp
   484bc:	003ef106 	br	48084 <__alt_data_end+0xfffe2884>
   484c0:	d9402017 	ldw	r5,128(sp)
   484c4:	d9002117 	ldw	r4,132(sp)
   484c8:	d9801a04 	addi	r6,sp,104
   484cc:	00473680 	call	47368 <__sprint_r.part.0>
   484d0:	103f221e 	bne	r2,zero,4815c <__alt_data_end+0xfffe295c>
   484d4:	d9401b17 	ldw	r5,108(sp)
   484d8:	d8801c17 	ldw	r2,112(sp)
   484dc:	d811883a 	mov	r8,sp
   484e0:	29400044 	addi	r5,r5,1
   484e4:	003d6206 	br	47a70 <__alt_data_end+0xfffe2270>
   484e8:	014001b4 	movhi	r5,6
   484ec:	29630304 	addi	r5,r5,-29684
   484f0:	d9402615 	stw	r5,152(sp)
   484f4:	d8c02215 	stw	r3,136(sp)
   484f8:	1023883a 	mov	r17,r2
   484fc:	9d04b03a 	or	r2,r19,r20
   48500:	103fa51e 	bne	r2,zero,48398 <__alt_data_end+0xfffe2b98>
   48504:	002b883a 	mov	r21,zero
   48508:	00800084 	movi	r2,2
   4850c:	003e4a06 	br	47e38 <__alt_data_end+0xfffe2638>
   48510:	014001b4 	movhi	r5,6
   48514:	29630304 	addi	r5,r5,-29684
   48518:	002b883a 	mov	r21,zero
   4851c:	d9402615 	stw	r5,152(sp)
   48520:	003f9e06 	br	4839c <__alt_data_end+0xfffe2b9c>
   48524:	d9402217 	ldw	r5,136(sp)
   48528:	d8001d85 	stb	zero,118(sp)
   4852c:	0029883a 	mov	r20,zero
   48530:	28800104 	addi	r2,r5,4
   48534:	2cc00017 	ldw	r19,0(r5)
   48538:	803e3a16 	blt	r16,zero,47e24 <__alt_data_end+0xfffe2624>
   4853c:	00ffdfc4 	movi	r3,-129
   48540:	d8802215 	stw	r2,136(sp)
   48544:	88e2703a 	and	r17,r17,r3
   48548:	002b883a 	mov	r21,zero
   4854c:	983e9b26 	beq	r19,zero,47fbc <__alt_data_end+0xfffe27bc>
   48550:	00800244 	movi	r2,9
   48554:	14fdc936 	bltu	r2,r19,47c7c <__alt_data_end+0xfffe247c>
   48558:	003e9a06 	br	47fc4 <__alt_data_end+0xfffe27c4>
   4855c:	00800c04 	movi	r2,48
   48560:	d8c01d45 	stb	r3,117(sp)
   48564:	d8801d05 	stb	r2,116(sp)
   48568:	d8001d85 	stb	zero,118(sp)
   4856c:	88c00094 	ori	r3,r17,2
   48570:	80009c16 	blt	r16,zero,487e4 <___vfiprintf_internal_r+0x1368>
   48574:	00bfdfc4 	movi	r2,-129
   48578:	88a2703a 	and	r17,r17,r2
   4857c:	8c400094 	ori	r17,r17,2
   48580:	002b883a 	mov	r21,zero
   48584:	003f8506 	br	4839c <__alt_data_end+0xfffe2b9c>
   48588:	b029883a 	mov	r20,r22
   4858c:	003c0b06 	br	475bc <__alt_data_end+0xfffe1dbc>
   48590:	04e7c83a 	sub	r19,zero,r19
   48594:	05400b44 	movi	r21,45
   48598:	9804c03a 	cmpne	r2,r19,zero
   4859c:	0529c83a 	sub	r20,zero,r20
   485a0:	dd401d85 	stb	r21,118(sp)
   485a4:	a0a9c83a 	sub	r20,r20,r2
   485a8:	80009716 	blt	r16,zero,48808 <___vfiprintf_internal_r+0x138c>
   485ac:	00bfdfc4 	movi	r2,-129
   485b0:	88a2703a 	and	r17,r17,r2
   485b4:	003db006 	br	47c78 <__alt_data_end+0xfffe2478>
   485b8:	b0c00007 	ldb	r3,0(r22)
   485bc:	003c0c06 	br	475f0 <__alt_data_end+0xfffe1df0>
   485c0:	8880100c 	andi	r2,r17,64
   485c4:	d8001d85 	stb	zero,118(sp)
   485c8:	1000461e 	bne	r2,zero,486e4 <___vfiprintf_internal_r+0x1268>
   485cc:	d9002217 	ldw	r4,136(sp)
   485d0:	0029883a 	mov	r20,zero
   485d4:	20800104 	addi	r2,r4,4
   485d8:	24c00017 	ldw	r19,0(r4)
   485dc:	803df80e 	bge	r16,zero,47dc0 <__alt_data_end+0xfffe25c0>
   485e0:	9d06b03a 	or	r3,r19,r20
   485e4:	d8802215 	stw	r2,136(sp)
   485e8:	183d5e1e 	bne	r3,zero,47b64 <__alt_data_end+0xfffe2364>
   485ec:	002b883a 	mov	r21,zero
   485f0:	0005883a 	mov	r2,zero
   485f4:	003e1006 	br	47e38 <__alt_data_end+0xfffe2638>
   485f8:	8880040c 	andi	r2,r17,16
   485fc:	1000321e 	bne	r2,zero,486c8 <___vfiprintf_internal_r+0x124c>
   48600:	8c40100c 	andi	r17,r17,64
   48604:	88008d26 	beq	r17,zero,4883c <___vfiprintf_internal_r+0x13c0>
   48608:	d9402217 	ldw	r5,136(sp)
   4860c:	d8c02417 	ldw	r3,144(sp)
   48610:	28800017 	ldw	r2,0(r5)
   48614:	29400104 	addi	r5,r5,4
   48618:	d9402215 	stw	r5,136(sp)
   4861c:	10c0000d 	sth	r3,0(r2)
   48620:	003bca06 	br	4754c <__alt_data_end+0xfffe1d4c>
   48624:	8880100c 	andi	r2,r17,64
   48628:	10003a26 	beq	r2,zero,48714 <___vfiprintf_internal_r+0x1298>
   4862c:	d8802217 	ldw	r2,136(sp)
   48630:	14c0000f 	ldh	r19,0(r2)
   48634:	10800104 	addi	r2,r2,4
   48638:	d8802215 	stw	r2,136(sp)
   4863c:	9829d7fa 	srai	r20,r19,31
   48640:	a005883a 	mov	r2,r20
   48644:	003d8506 	br	47c5c <__alt_data_end+0xfffe245c>
   48648:	8880100c 	andi	r2,r17,64
   4864c:	10002b26 	beq	r2,zero,486fc <___vfiprintf_internal_r+0x1280>
   48650:	d8802217 	ldw	r2,136(sp)
   48654:	0029883a 	mov	r20,zero
   48658:	14c0000b 	ldhu	r19,0(r2)
   4865c:	10800104 	addi	r2,r2,4
   48660:	d8802215 	stw	r2,136(sp)
   48664:	003d5d06 	br	47bdc <__alt_data_end+0xfffe23dc>
   48668:	d9402017 	ldw	r5,128(sp)
   4866c:	d9002117 	ldw	r4,132(sp)
   48670:	d9801a04 	addi	r6,sp,104
   48674:	d8c02a15 	stw	r3,168(sp)
   48678:	d9c02b15 	stw	r7,172(sp)
   4867c:	00473680 	call	47368 <__sprint_r.part.0>
   48680:	d8c02a17 	ldw	r3,168(sp)
   48684:	d9c02b17 	ldw	r7,172(sp)
   48688:	103eb41e 	bne	r2,zero,4815c <__alt_data_end+0xfffe295c>
   4868c:	d9001b17 	ldw	r4,108(sp)
   48690:	d8801c17 	ldw	r2,112(sp)
   48694:	d811883a 	mov	r8,sp
   48698:	21400044 	addi	r5,r4,1
   4869c:	003e6706 	br	4803c <__alt_data_end+0xfffe283c>
   486a0:	00bfffc4 	movi	r2,-1
   486a4:	003c4a06 	br	477d0 <__alt_data_end+0xfffe1fd0>
   486a8:	9805883a 	mov	r2,r19
   486ac:	003ee806 	br	48250 <__alt_data_end+0xfffe2a50>
   486b0:	d8c02217 	ldw	r3,136(sp)
   486b4:	0029883a 	mov	r20,zero
   486b8:	18800104 	addi	r2,r3,4
   486bc:	1cc0000b 	ldhu	r19,0(r3)
   486c0:	803f9e0e 	bge	r16,zero,4853c <__alt_data_end+0xfffe2d3c>
   486c4:	003dd706 	br	47e24 <__alt_data_end+0xfffe2624>
   486c8:	d8c02217 	ldw	r3,136(sp)
   486cc:	d9002417 	ldw	r4,144(sp)
   486d0:	18800017 	ldw	r2,0(r3)
   486d4:	18c00104 	addi	r3,r3,4
   486d8:	d8c02215 	stw	r3,136(sp)
   486dc:	11000015 	stw	r4,0(r2)
   486e0:	003b9a06 	br	4754c <__alt_data_end+0xfffe1d4c>
   486e4:	d8c02217 	ldw	r3,136(sp)
   486e8:	0029883a 	mov	r20,zero
   486ec:	18800104 	addi	r2,r3,4
   486f0:	1cc0000b 	ldhu	r19,0(r3)
   486f4:	803db20e 	bge	r16,zero,47dc0 <__alt_data_end+0xfffe25c0>
   486f8:	003fb906 	br	485e0 <__alt_data_end+0xfffe2de0>
   486fc:	d9002217 	ldw	r4,136(sp)
   48700:	0029883a 	mov	r20,zero
   48704:	24c00017 	ldw	r19,0(r4)
   48708:	21000104 	addi	r4,r4,4
   4870c:	d9002215 	stw	r4,136(sp)
   48710:	003d3206 	br	47bdc <__alt_data_end+0xfffe23dc>
   48714:	d8c02217 	ldw	r3,136(sp)
   48718:	1cc00017 	ldw	r19,0(r3)
   4871c:	18c00104 	addi	r3,r3,4
   48720:	d8c02215 	stw	r3,136(sp)
   48724:	9829d7fa 	srai	r20,r19,31
   48728:	a005883a 	mov	r2,r20
   4872c:	003d4b06 	br	47c5c <__alt_data_end+0xfffe245c>
   48730:	0009883a 	mov	r4,zero
   48734:	01400044 	movi	r5,1
   48738:	d811883a 	mov	r8,sp
   4873c:	003e4f06 	br	4807c <__alt_data_end+0xfffe287c>
   48740:	d8c02215 	stw	r3,136(sp)
   48744:	002b883a 	mov	r21,zero
   48748:	003db806 	br	47e2c <__alt_data_end+0xfffe262c>
   4874c:	d811883a 	mov	r8,sp
   48750:	003e9606 	br	481ac <__alt_data_end+0xfffe29ac>
   48754:	010001b4 	movhi	r4,6
   48758:	21236404 	addi	r4,r4,-29296
   4875c:	d9002315 	stw	r4,140(sp)
   48760:	003e6306 	br	480f0 <__alt_data_end+0xfffe28f0>
   48764:	b0c00043 	ldbu	r3,1(r22)
   48768:	8c400814 	ori	r17,r17,32
   4876c:	b5800044 	addi	r22,r22,1
   48770:	18c03fcc 	andi	r3,r3,255
   48774:	18c0201c 	xori	r3,r3,128
   48778:	18ffe004 	addi	r3,r3,-128
   4877c:	003b9c06 	br	475f0 <__alt_data_end+0xfffe1df0>
   48780:	b809883a 	mov	r4,r23
   48784:	da002a15 	stw	r8,168(sp)
   48788:	00472d00 	call	472d0 <strlen>
   4878c:	1029883a 	mov	r20,r2
   48790:	dd401d83 	ldbu	r21,118(sp)
   48794:	df002215 	stw	fp,136(sp)
   48798:	0021883a 	mov	r16,zero
   4879c:	da002a17 	ldw	r8,168(sp)
   487a0:	003c3906 	br	47888 <__alt_data_end+0xfffe2088>
   487a4:	d9402017 	ldw	r5,128(sp)
   487a8:	d9002117 	ldw	r4,132(sp)
   487ac:	d9801a04 	addi	r6,sp,104
   487b0:	00473680 	call	47368 <__sprint_r.part.0>
   487b4:	103e691e 	bne	r2,zero,4815c <__alt_data_end+0xfffe295c>
   487b8:	d9001b17 	ldw	r4,108(sp)
   487bc:	d8801c17 	ldw	r2,112(sp)
   487c0:	d811883a 	mov	r8,sp
   487c4:	21400044 	addi	r5,r4,1
   487c8:	003e2e06 	br	48084 <__alt_data_end+0xfffe2884>
   487cc:	010001b4 	movhi	r4,6
   487d0:	21236804 	addi	r4,r4,-29280
   487d4:	d9002315 	stw	r4,140(sp)
   487d8:	d9001b17 	ldw	r4,108(sp)
   487dc:	21000044 	addi	r4,r4,1
   487e0:	003c5e06 	br	4795c <__alt_data_end+0xfffe215c>
   487e4:	002b883a 	mov	r21,zero
   487e8:	00800084 	movi	r2,2
   487ec:	10803fcc 	andi	r2,r2,255
   487f0:	01000044 	movi	r4,1
   487f4:	11002b26 	beq	r2,r4,488a4 <___vfiprintf_internal_r+0x1428>
   487f8:	01000084 	movi	r4,2
   487fc:	11002b1e 	bne	r2,r4,488ac <___vfiprintf_internal_r+0x1430>
   48800:	1823883a 	mov	r17,r3
   48804:	003ee506 	br	4839c <__alt_data_end+0xfffe2b9c>
   48808:	8807883a 	mov	r3,r17
   4880c:	00800044 	movi	r2,1
   48810:	003ff606 	br	487ec <__alt_data_end+0xfffe2fec>
   48814:	00800184 	movi	r2,6
   48818:	1400012e 	bgeu	r2,r16,48820 <___vfiprintf_internal_r+0x13a4>
   4881c:	1021883a 	mov	r16,r2
   48820:	8029883a 	mov	r20,r16
   48824:	8027883a 	mov	r19,r16
   48828:	80002216 	blt	r16,zero,488b4 <___vfiprintf_internal_r+0x1438>
   4882c:	05c001b4 	movhi	r23,6
   48830:	df002215 	stw	fp,136(sp)
   48834:	bde30804 	addi	r23,r23,-29664
   48838:	003cfb06 	br	47c28 <__alt_data_end+0xfffe2428>
   4883c:	d9002217 	ldw	r4,136(sp)
   48840:	d9402417 	ldw	r5,144(sp)
   48844:	20800017 	ldw	r2,0(r4)
   48848:	21000104 	addi	r4,r4,4
   4884c:	d9002215 	stw	r4,136(sp)
   48850:	11400015 	stw	r5,0(r2)
   48854:	003b3d06 	br	4754c <__alt_data_end+0xfffe1d4c>
   48858:	014001b4 	movhi	r5,6
   4885c:	29636804 	addi	r5,r5,-29280
   48860:	d9402315 	stw	r5,140(sp)
   48864:	d9401b17 	ldw	r5,108(sp)
   48868:	29400044 	addi	r5,r5,1
   4886c:	003e6d06 	br	48224 <__alt_data_end+0xfffe2a24>
   48870:	8029883a 	mov	r20,r16
   48874:	dd401d83 	ldbu	r21,118(sp)
   48878:	df002215 	stw	fp,136(sp)
   4887c:	0021883a 	mov	r16,zero
   48880:	003c0106 	br	47888 <__alt_data_end+0xfffe2088>
   48884:	00c001b4 	movhi	r3,6
   48888:	18e36404 	addi	r3,r3,-29296
   4888c:	d8c02315 	stw	r3,140(sp)
   48890:	280d883a 	mov	r6,r5
   48894:	003c6906 	br	47a3c <__alt_data_end+0xfffe223c>
   48898:	802d883a 	mov	r22,r16
   4889c:	0021883a 	mov	r16,zero
   488a0:	003b5406 	br	475f4 <__alt_data_end+0xfffe1df4>
   488a4:	1823883a 	mov	r17,r3
   488a8:	003cf306 	br	47c78 <__alt_data_end+0xfffe2478>
   488ac:	1823883a 	mov	r17,r3
   488b0:	003cad06 	br	47b68 <__alt_data_end+0xfffe2368>
   488b4:	0027883a 	mov	r19,zero
   488b8:	003fdc06 	br	4882c <__alt_data_end+0xfffe302c>
   488bc:	d9402217 	ldw	r5,136(sp)
   488c0:	8005883a 	mov	r2,r16
   488c4:	b0c00043 	ldbu	r3,1(r22)
   488c8:	2c000017 	ldw	r16,0(r5)
   488cc:	29000104 	addi	r4,r5,4
   488d0:	d9002215 	stw	r4,136(sp)
   488d4:	102d883a 	mov	r22,r2
   488d8:	803fa50e 	bge	r16,zero,48770 <__alt_data_end+0xfffe2f70>
   488dc:	18c03fcc 	andi	r3,r3,255
   488e0:	18c0201c 	xori	r3,r3,128
   488e4:	043fffc4 	movi	r16,-1
   488e8:	18ffe004 	addi	r3,r3,-128
   488ec:	003b4006 	br	475f0 <__alt_data_end+0xfffe1df0>
   488f0:	d9402303 	ldbu	r5,140(sp)
   488f4:	d9401d85 	stb	r5,118(sp)
   488f8:	003cae06 	br	47bb4 <__alt_data_end+0xfffe23b4>
   488fc:	d8c02303 	ldbu	r3,140(sp)
   48900:	d8c01d85 	stb	r3,118(sp)
   48904:	003d1406 	br	47d58 <__alt_data_end+0xfffe2558>
   48908:	d8c02303 	ldbu	r3,140(sp)
   4890c:	d8c01d85 	stb	r3,118(sp)
   48910:	003cca06 	br	47c3c <__alt_data_end+0xfffe243c>
   48914:	8880004c 	andi	r2,r17,1
   48918:	002b883a 	mov	r21,zero
   4891c:	10000526 	beq	r2,zero,48934 <___vfiprintf_internal_r+0x14b8>
   48920:	00800c04 	movi	r2,48
   48924:	d88019c5 	stb	r2,103(sp)
   48928:	dd002817 	ldw	r20,160(sp)
   4892c:	ddc019c4 	addi	r23,sp,103
   48930:	003bd506 	br	47888 <__alt_data_end+0xfffe2088>
   48934:	0029883a 	mov	r20,zero
   48938:	ddc01a04 	addi	r23,sp,104
   4893c:	003bd206 	br	47888 <__alt_data_end+0xfffe2088>
   48940:	d9002303 	ldbu	r4,140(sp)
   48944:	d9001d85 	stb	r4,118(sp)
   48948:	003da606 	br	47fe4 <__alt_data_end+0xfffe27e4>
   4894c:	d8c02303 	ldbu	r3,140(sp)
   48950:	d8c01d85 	stb	r3,118(sp)
   48954:	003c7606 	br	47b30 <__alt_data_end+0xfffe2330>
   48958:	d8c02303 	ldbu	r3,140(sp)
   4895c:	d8c01d85 	stb	r3,118(sp)
   48960:	003c6506 	br	47af8 <__alt_data_end+0xfffe22f8>
   48964:	d9002303 	ldbu	r4,140(sp)
   48968:	d9001d85 	stb	r4,118(sp)
   4896c:	003d3d06 	br	47e64 <__alt_data_end+0xfffe2664>
   48970:	d8c02303 	ldbu	r3,140(sp)
   48974:	d8c01d85 	stb	r3,118(sp)
   48978:	003d1d06 	br	47df0 <__alt_data_end+0xfffe25f0>
   4897c:	d8c02303 	ldbu	r3,140(sp)
   48980:	d8c01d85 	stb	r3,118(sp)
   48984:	003d0306 	br	47d94 <__alt_data_end+0xfffe2594>

00048988 <__vfiprintf_internal>:
   48988:	008001b4 	movhi	r2,6
   4898c:	10aaaf04 	addi	r2,r2,-21828
   48990:	300f883a 	mov	r7,r6
   48994:	280d883a 	mov	r6,r5
   48998:	200b883a 	mov	r5,r4
   4899c:	11000017 	ldw	r4,0(r2)
   489a0:	004747c1 	jmpi	4747c <___vfiprintf_internal_r>

000489a4 <__sbprintf>:
   489a4:	2880030b 	ldhu	r2,12(r5)
   489a8:	2ac01917 	ldw	r11,100(r5)
   489ac:	2a80038b 	ldhu	r10,14(r5)
   489b0:	2a400717 	ldw	r9,28(r5)
   489b4:	2a000917 	ldw	r8,36(r5)
   489b8:	defee204 	addi	sp,sp,-1144
   489bc:	00c10004 	movi	r3,1024
   489c0:	dc011a15 	stw	r16,1128(sp)
   489c4:	10bfff4c 	andi	r2,r2,65533
   489c8:	2821883a 	mov	r16,r5
   489cc:	d8cb883a 	add	r5,sp,r3
   489d0:	dc811c15 	stw	r18,1136(sp)
   489d4:	dc411b15 	stw	r17,1132(sp)
   489d8:	dfc11d15 	stw	ra,1140(sp)
   489dc:	2025883a 	mov	r18,r4
   489e0:	d881030d 	sth	r2,1036(sp)
   489e4:	dac11915 	stw	r11,1124(sp)
   489e8:	da81038d 	sth	r10,1038(sp)
   489ec:	da410715 	stw	r9,1052(sp)
   489f0:	da010915 	stw	r8,1060(sp)
   489f4:	dec10015 	stw	sp,1024(sp)
   489f8:	dec10415 	stw	sp,1040(sp)
   489fc:	d8c10215 	stw	r3,1032(sp)
   48a00:	d8c10515 	stw	r3,1044(sp)
   48a04:	d8010615 	stw	zero,1048(sp)
   48a08:	004747c0 	call	4747c <___vfiprintf_internal_r>
   48a0c:	1023883a 	mov	r17,r2
   48a10:	10000416 	blt	r2,zero,48a24 <__sbprintf+0x80>
   48a14:	d9410004 	addi	r5,sp,1024
   48a18:	9009883a 	mov	r4,r18
   48a1c:	00447480 	call	44748 <_fflush_r>
   48a20:	10000d1e 	bne	r2,zero,48a58 <__sbprintf+0xb4>
   48a24:	d881030b 	ldhu	r2,1036(sp)
   48a28:	1080100c 	andi	r2,r2,64
   48a2c:	10000326 	beq	r2,zero,48a3c <__sbprintf+0x98>
   48a30:	8080030b 	ldhu	r2,12(r16)
   48a34:	10801014 	ori	r2,r2,64
   48a38:	8080030d 	sth	r2,12(r16)
   48a3c:	8805883a 	mov	r2,r17
   48a40:	dfc11d17 	ldw	ra,1140(sp)
   48a44:	dc811c17 	ldw	r18,1136(sp)
   48a48:	dc411b17 	ldw	r17,1132(sp)
   48a4c:	dc011a17 	ldw	r16,1128(sp)
   48a50:	dec11e04 	addi	sp,sp,1144
   48a54:	f800283a 	ret
   48a58:	047fffc4 	movi	r17,-1
   48a5c:	003ff106 	br	48a24 <__alt_data_end+0xfffe3224>

00048a60 <_write_r>:
   48a60:	defffd04 	addi	sp,sp,-12
   48a64:	2805883a 	mov	r2,r5
   48a68:	dc000015 	stw	r16,0(sp)
   48a6c:	040001b4 	movhi	r16,6
   48a70:	dc400115 	stw	r17,4(sp)
   48a74:	300b883a 	mov	r5,r6
   48a78:	8431c204 	addi	r16,r16,-14584
   48a7c:	2023883a 	mov	r17,r4
   48a80:	380d883a 	mov	r6,r7
   48a84:	1009883a 	mov	r4,r2
   48a88:	dfc00215 	stw	ra,8(sp)
   48a8c:	80000015 	stw	zero,0(r16)
   48a90:	004ddd80 	call	4ddd8 <write>
   48a94:	00ffffc4 	movi	r3,-1
   48a98:	10c00526 	beq	r2,r3,48ab0 <_write_r+0x50>
   48a9c:	dfc00217 	ldw	ra,8(sp)
   48aa0:	dc400117 	ldw	r17,4(sp)
   48aa4:	dc000017 	ldw	r16,0(sp)
   48aa8:	dec00304 	addi	sp,sp,12
   48aac:	f800283a 	ret
   48ab0:	80c00017 	ldw	r3,0(r16)
   48ab4:	183ff926 	beq	r3,zero,48a9c <__alt_data_end+0xfffe329c>
   48ab8:	88c00015 	stw	r3,0(r17)
   48abc:	003ff706 	br	48a9c <__alt_data_end+0xfffe329c>

00048ac0 <_close_r>:
   48ac0:	defffd04 	addi	sp,sp,-12
   48ac4:	dc000015 	stw	r16,0(sp)
   48ac8:	040001b4 	movhi	r16,6
   48acc:	dc400115 	stw	r17,4(sp)
   48ad0:	8431c204 	addi	r16,r16,-14584
   48ad4:	2023883a 	mov	r17,r4
   48ad8:	2809883a 	mov	r4,r5
   48adc:	dfc00215 	stw	ra,8(sp)
   48ae0:	80000015 	stw	zero,0(r16)
   48ae4:	004d5880 	call	4d588 <close>
   48ae8:	00ffffc4 	movi	r3,-1
   48aec:	10c00526 	beq	r2,r3,48b04 <_close_r+0x44>
   48af0:	dfc00217 	ldw	ra,8(sp)
   48af4:	dc400117 	ldw	r17,4(sp)
   48af8:	dc000017 	ldw	r16,0(sp)
   48afc:	dec00304 	addi	sp,sp,12
   48b00:	f800283a 	ret
   48b04:	80c00017 	ldw	r3,0(r16)
   48b08:	183ff926 	beq	r3,zero,48af0 <__alt_data_end+0xfffe32f0>
   48b0c:	88c00015 	stw	r3,0(r17)
   48b10:	003ff706 	br	48af0 <__alt_data_end+0xfffe32f0>

00048b14 <_calloc_r>:
   48b14:	defffe04 	addi	sp,sp,-8
   48b18:	2805883a 	mov	r2,r5
   48b1c:	dc000015 	stw	r16,0(sp)
   48b20:	300b883a 	mov	r5,r6
   48b24:	2021883a 	mov	r16,r4
   48b28:	1009883a 	mov	r4,r2
   48b2c:	dfc00115 	stw	ra,4(sp)
   48b30:	00406e00 	call	406e0 <__mulsi3>
   48b34:	100b883a 	mov	r5,r2
   48b38:	8009883a 	mov	r4,r16
   48b3c:	00453d80 	call	453d8 <_malloc_r>
   48b40:	10002926 	beq	r2,zero,48be8 <_calloc_r+0xd4>
   48b44:	11bfff17 	ldw	r6,-4(r2)
   48b48:	1021883a 	mov	r16,r2
   48b4c:	00bfff04 	movi	r2,-4
   48b50:	308c703a 	and	r6,r6,r2
   48b54:	00c00904 	movi	r3,36
   48b58:	308d883a 	add	r6,r6,r2
   48b5c:	19801636 	bltu	r3,r6,48bb8 <_calloc_r+0xa4>
   48b60:	008004c4 	movi	r2,19
   48b64:	11800b2e 	bgeu	r2,r6,48b94 <_calloc_r+0x80>
   48b68:	80000015 	stw	zero,0(r16)
   48b6c:	80000115 	stw	zero,4(r16)
   48b70:	008006c4 	movi	r2,27
   48b74:	11801a2e 	bgeu	r2,r6,48be0 <_calloc_r+0xcc>
   48b78:	80000215 	stw	zero,8(r16)
   48b7c:	80000315 	stw	zero,12(r16)
   48b80:	30c0151e 	bne	r6,r3,48bd8 <_calloc_r+0xc4>
   48b84:	80000415 	stw	zero,16(r16)
   48b88:	80800604 	addi	r2,r16,24
   48b8c:	80000515 	stw	zero,20(r16)
   48b90:	00000106 	br	48b98 <_calloc_r+0x84>
   48b94:	8005883a 	mov	r2,r16
   48b98:	10000015 	stw	zero,0(r2)
   48b9c:	10000115 	stw	zero,4(r2)
   48ba0:	10000215 	stw	zero,8(r2)
   48ba4:	8005883a 	mov	r2,r16
   48ba8:	dfc00117 	ldw	ra,4(sp)
   48bac:	dc000017 	ldw	r16,0(sp)
   48bb0:	dec00204 	addi	sp,sp,8
   48bb4:	f800283a 	ret
   48bb8:	000b883a 	mov	r5,zero
   48bbc:	8009883a 	mov	r4,r16
   48bc0:	0045e100 	call	45e10 <memset>
   48bc4:	8005883a 	mov	r2,r16
   48bc8:	dfc00117 	ldw	ra,4(sp)
   48bcc:	dc000017 	ldw	r16,0(sp)
   48bd0:	dec00204 	addi	sp,sp,8
   48bd4:	f800283a 	ret
   48bd8:	80800404 	addi	r2,r16,16
   48bdc:	003fee06 	br	48b98 <__alt_data_end+0xfffe3398>
   48be0:	80800204 	addi	r2,r16,8
   48be4:	003fec06 	br	48b98 <__alt_data_end+0xfffe3398>
   48be8:	0005883a 	mov	r2,zero
   48bec:	003fee06 	br	48ba8 <__alt_data_end+0xfffe33a8>

00048bf0 <_fclose_r>:
   48bf0:	28003926 	beq	r5,zero,48cd8 <_fclose_r+0xe8>
   48bf4:	defffc04 	addi	sp,sp,-16
   48bf8:	dc400115 	stw	r17,4(sp)
   48bfc:	dc000015 	stw	r16,0(sp)
   48c00:	dfc00315 	stw	ra,12(sp)
   48c04:	dc800215 	stw	r18,8(sp)
   48c08:	2023883a 	mov	r17,r4
   48c0c:	2821883a 	mov	r16,r5
   48c10:	20000226 	beq	r4,zero,48c1c <_fclose_r+0x2c>
   48c14:	20800e17 	ldw	r2,56(r4)
   48c18:	10002726 	beq	r2,zero,48cb8 <_fclose_r+0xc8>
   48c1c:	8080030f 	ldh	r2,12(r16)
   48c20:	1000071e 	bne	r2,zero,48c40 <_fclose_r+0x50>
   48c24:	0005883a 	mov	r2,zero
   48c28:	dfc00317 	ldw	ra,12(sp)
   48c2c:	dc800217 	ldw	r18,8(sp)
   48c30:	dc400117 	ldw	r17,4(sp)
   48c34:	dc000017 	ldw	r16,0(sp)
   48c38:	dec00404 	addi	sp,sp,16
   48c3c:	f800283a 	ret
   48c40:	800b883a 	mov	r5,r16
   48c44:	8809883a 	mov	r4,r17
   48c48:	004452c0 	call	4452c <__sflush_r>
   48c4c:	1025883a 	mov	r18,r2
   48c50:	80800b17 	ldw	r2,44(r16)
   48c54:	10000426 	beq	r2,zero,48c68 <_fclose_r+0x78>
   48c58:	81400717 	ldw	r5,28(r16)
   48c5c:	8809883a 	mov	r4,r17
   48c60:	103ee83a 	callr	r2
   48c64:	10001616 	blt	r2,zero,48cc0 <_fclose_r+0xd0>
   48c68:	8080030b 	ldhu	r2,12(r16)
   48c6c:	1080200c 	andi	r2,r2,128
   48c70:	1000151e 	bne	r2,zero,48cc8 <_fclose_r+0xd8>
   48c74:	81400c17 	ldw	r5,48(r16)
   48c78:	28000526 	beq	r5,zero,48c90 <_fclose_r+0xa0>
   48c7c:	80801004 	addi	r2,r16,64
   48c80:	28800226 	beq	r5,r2,48c8c <_fclose_r+0x9c>
   48c84:	8809883a 	mov	r4,r17
   48c88:	0044ca80 	call	44ca8 <_free_r>
   48c8c:	80000c15 	stw	zero,48(r16)
   48c90:	81401117 	ldw	r5,68(r16)
   48c94:	28000326 	beq	r5,zero,48ca4 <_fclose_r+0xb4>
   48c98:	8809883a 	mov	r4,r17
   48c9c:	0044ca80 	call	44ca8 <_free_r>
   48ca0:	80001115 	stw	zero,68(r16)
   48ca4:	0044b440 	call	44b44 <__sfp_lock_acquire>
   48ca8:	8000030d 	sth	zero,12(r16)
   48cac:	0044b480 	call	44b48 <__sfp_lock_release>
   48cb0:	9005883a 	mov	r2,r18
   48cb4:	003fdc06 	br	48c28 <__alt_data_end+0xfffe3428>
   48cb8:	0044b340 	call	44b34 <__sinit>
   48cbc:	003fd706 	br	48c1c <__alt_data_end+0xfffe341c>
   48cc0:	04bfffc4 	movi	r18,-1
   48cc4:	003fe806 	br	48c68 <__alt_data_end+0xfffe3468>
   48cc8:	81400417 	ldw	r5,16(r16)
   48ccc:	8809883a 	mov	r4,r17
   48cd0:	0044ca80 	call	44ca8 <_free_r>
   48cd4:	003fe706 	br	48c74 <__alt_data_end+0xfffe3474>
   48cd8:	0005883a 	mov	r2,zero
   48cdc:	f800283a 	ret

00048ce0 <fclose>:
   48ce0:	008001b4 	movhi	r2,6
   48ce4:	10aaaf04 	addi	r2,r2,-21828
   48ce8:	200b883a 	mov	r5,r4
   48cec:	11000017 	ldw	r4,0(r2)
   48cf0:	0048bf01 	jmpi	48bf0 <_fclose_r>

00048cf4 <__fputwc>:
   48cf4:	defff804 	addi	sp,sp,-32
   48cf8:	dcc00415 	stw	r19,16(sp)
   48cfc:	dc800315 	stw	r18,12(sp)
   48d00:	dc000115 	stw	r16,4(sp)
   48d04:	dfc00715 	stw	ra,28(sp)
   48d08:	dd400615 	stw	r21,24(sp)
   48d0c:	dd000515 	stw	r20,20(sp)
   48d10:	dc400215 	stw	r17,8(sp)
   48d14:	2027883a 	mov	r19,r4
   48d18:	2825883a 	mov	r18,r5
   48d1c:	3021883a 	mov	r16,r6
   48d20:	00451c80 	call	451c8 <__locale_mb_cur_max>
   48d24:	00c00044 	movi	r3,1
   48d28:	10c03e26 	beq	r2,r3,48e24 <__fputwc+0x130>
   48d2c:	81c01704 	addi	r7,r16,92
   48d30:	900d883a 	mov	r6,r18
   48d34:	d80b883a 	mov	r5,sp
   48d38:	9809883a 	mov	r4,r19
   48d3c:	0049d4c0 	call	49d4c <_wcrtomb_r>
   48d40:	1029883a 	mov	r20,r2
   48d44:	00bfffc4 	movi	r2,-1
   48d48:	a0802026 	beq	r20,r2,48dcc <__fputwc+0xd8>
   48d4c:	d9400003 	ldbu	r5,0(sp)
   48d50:	a0001c26 	beq	r20,zero,48dc4 <__fputwc+0xd0>
   48d54:	0023883a 	mov	r17,zero
   48d58:	05400284 	movi	r21,10
   48d5c:	00000906 	br	48d84 <__fputwc+0x90>
   48d60:	80800017 	ldw	r2,0(r16)
   48d64:	11400005 	stb	r5,0(r2)
   48d68:	80c00017 	ldw	r3,0(r16)
   48d6c:	18c00044 	addi	r3,r3,1
   48d70:	80c00015 	stw	r3,0(r16)
   48d74:	8c400044 	addi	r17,r17,1
   48d78:	dc45883a 	add	r2,sp,r17
   48d7c:	8d00112e 	bgeu	r17,r20,48dc4 <__fputwc+0xd0>
   48d80:	11400003 	ldbu	r5,0(r2)
   48d84:	80c00217 	ldw	r3,8(r16)
   48d88:	18ffffc4 	addi	r3,r3,-1
   48d8c:	80c00215 	stw	r3,8(r16)
   48d90:	183ff30e 	bge	r3,zero,48d60 <__alt_data_end+0xfffe3560>
   48d94:	80800617 	ldw	r2,24(r16)
   48d98:	18801916 	blt	r3,r2,48e00 <__fputwc+0x10c>
   48d9c:	80800017 	ldw	r2,0(r16)
   48da0:	11400005 	stb	r5,0(r2)
   48da4:	80800017 	ldw	r2,0(r16)
   48da8:	10c00003 	ldbu	r3,0(r2)
   48dac:	10800044 	addi	r2,r2,1
   48db0:	1d402326 	beq	r3,r21,48e40 <__fputwc+0x14c>
   48db4:	80800015 	stw	r2,0(r16)
   48db8:	8c400044 	addi	r17,r17,1
   48dbc:	dc45883a 	add	r2,sp,r17
   48dc0:	8d3fef36 	bltu	r17,r20,48d80 <__alt_data_end+0xfffe3580>
   48dc4:	9005883a 	mov	r2,r18
   48dc8:	00000406 	br	48ddc <__fputwc+0xe8>
   48dcc:	80c0030b 	ldhu	r3,12(r16)
   48dd0:	a005883a 	mov	r2,r20
   48dd4:	18c01014 	ori	r3,r3,64
   48dd8:	80c0030d 	sth	r3,12(r16)
   48ddc:	dfc00717 	ldw	ra,28(sp)
   48de0:	dd400617 	ldw	r21,24(sp)
   48de4:	dd000517 	ldw	r20,20(sp)
   48de8:	dcc00417 	ldw	r19,16(sp)
   48dec:	dc800317 	ldw	r18,12(sp)
   48df0:	dc400217 	ldw	r17,8(sp)
   48df4:	dc000117 	ldw	r16,4(sp)
   48df8:	dec00804 	addi	sp,sp,32
   48dfc:	f800283a 	ret
   48e00:	800d883a 	mov	r6,r16
   48e04:	29403fcc 	andi	r5,r5,255
   48e08:	9809883a 	mov	r4,r19
   48e0c:	0049bf40 	call	49bf4 <__swbuf_r>
   48e10:	10bfffe0 	cmpeqi	r2,r2,-1
   48e14:	10803fcc 	andi	r2,r2,255
   48e18:	103fd626 	beq	r2,zero,48d74 <__alt_data_end+0xfffe3574>
   48e1c:	00bfffc4 	movi	r2,-1
   48e20:	003fee06 	br	48ddc <__alt_data_end+0xfffe35dc>
   48e24:	90ffffc4 	addi	r3,r18,-1
   48e28:	01003f84 	movi	r4,254
   48e2c:	20ffbf36 	bltu	r4,r3,48d2c <__alt_data_end+0xfffe352c>
   48e30:	900b883a 	mov	r5,r18
   48e34:	dc800005 	stb	r18,0(sp)
   48e38:	1029883a 	mov	r20,r2
   48e3c:	003fc506 	br	48d54 <__alt_data_end+0xfffe3554>
   48e40:	800d883a 	mov	r6,r16
   48e44:	a80b883a 	mov	r5,r21
   48e48:	9809883a 	mov	r4,r19
   48e4c:	0049bf40 	call	49bf4 <__swbuf_r>
   48e50:	10bfffe0 	cmpeqi	r2,r2,-1
   48e54:	003fef06 	br	48e14 <__alt_data_end+0xfffe3614>

00048e58 <_fputwc_r>:
   48e58:	3080030b 	ldhu	r2,12(r6)
   48e5c:	10c8000c 	andi	r3,r2,8192
   48e60:	1800051e 	bne	r3,zero,48e78 <_fputwc_r+0x20>
   48e64:	30c01917 	ldw	r3,100(r6)
   48e68:	10880014 	ori	r2,r2,8192
   48e6c:	3080030d 	sth	r2,12(r6)
   48e70:	18880014 	ori	r2,r3,8192
   48e74:	30801915 	stw	r2,100(r6)
   48e78:	0048cf41 	jmpi	48cf4 <__fputwc>

00048e7c <fputwc>:
   48e7c:	008001b4 	movhi	r2,6
   48e80:	defffc04 	addi	sp,sp,-16
   48e84:	10aaaf04 	addi	r2,r2,-21828
   48e88:	dc000115 	stw	r16,4(sp)
   48e8c:	14000017 	ldw	r16,0(r2)
   48e90:	dc400215 	stw	r17,8(sp)
   48e94:	dfc00315 	stw	ra,12(sp)
   48e98:	2023883a 	mov	r17,r4
   48e9c:	80000226 	beq	r16,zero,48ea8 <fputwc+0x2c>
   48ea0:	80800e17 	ldw	r2,56(r16)
   48ea4:	10001026 	beq	r2,zero,48ee8 <fputwc+0x6c>
   48ea8:	2880030b 	ldhu	r2,12(r5)
   48eac:	10c8000c 	andi	r3,r2,8192
   48eb0:	1800051e 	bne	r3,zero,48ec8 <fputwc+0x4c>
   48eb4:	28c01917 	ldw	r3,100(r5)
   48eb8:	10880014 	ori	r2,r2,8192
   48ebc:	2880030d 	sth	r2,12(r5)
   48ec0:	18880014 	ori	r2,r3,8192
   48ec4:	28801915 	stw	r2,100(r5)
   48ec8:	280d883a 	mov	r6,r5
   48ecc:	8009883a 	mov	r4,r16
   48ed0:	880b883a 	mov	r5,r17
   48ed4:	dfc00317 	ldw	ra,12(sp)
   48ed8:	dc400217 	ldw	r17,8(sp)
   48edc:	dc000117 	ldw	r16,4(sp)
   48ee0:	dec00404 	addi	sp,sp,16
   48ee4:	0048cf41 	jmpi	48cf4 <__fputwc>
   48ee8:	8009883a 	mov	r4,r16
   48eec:	d9400015 	stw	r5,0(sp)
   48ef0:	0044b340 	call	44b34 <__sinit>
   48ef4:	d9400017 	ldw	r5,0(sp)
   48ef8:	003feb06 	br	48ea8 <__alt_data_end+0xfffe36a8>

00048efc <_fstat_r>:
   48efc:	defffd04 	addi	sp,sp,-12
   48f00:	2805883a 	mov	r2,r5
   48f04:	dc000015 	stw	r16,0(sp)
   48f08:	040001b4 	movhi	r16,6
   48f0c:	dc400115 	stw	r17,4(sp)
   48f10:	8431c204 	addi	r16,r16,-14584
   48f14:	2023883a 	mov	r17,r4
   48f18:	300b883a 	mov	r5,r6
   48f1c:	1009883a 	mov	r4,r2
   48f20:	dfc00215 	stw	ra,8(sp)
   48f24:	80000015 	stw	zero,0(r16)
   48f28:	004d6c80 	call	4d6c8 <fstat>
   48f2c:	00ffffc4 	movi	r3,-1
   48f30:	10c00526 	beq	r2,r3,48f48 <_fstat_r+0x4c>
   48f34:	dfc00217 	ldw	ra,8(sp)
   48f38:	dc400117 	ldw	r17,4(sp)
   48f3c:	dc000017 	ldw	r16,0(sp)
   48f40:	dec00304 	addi	sp,sp,12
   48f44:	f800283a 	ret
   48f48:	80c00017 	ldw	r3,0(r16)
   48f4c:	183ff926 	beq	r3,zero,48f34 <__alt_data_end+0xfffe3734>
   48f50:	88c00015 	stw	r3,0(r17)
   48f54:	003ff706 	br	48f34 <__alt_data_end+0xfffe3734>

00048f58 <__sfvwrite_r>:
   48f58:	30800217 	ldw	r2,8(r6)
   48f5c:	10006726 	beq	r2,zero,490fc <__sfvwrite_r+0x1a4>
   48f60:	28c0030b 	ldhu	r3,12(r5)
   48f64:	defff404 	addi	sp,sp,-48
   48f68:	dd400715 	stw	r21,28(sp)
   48f6c:	dd000615 	stw	r20,24(sp)
   48f70:	dc000215 	stw	r16,8(sp)
   48f74:	dfc00b15 	stw	ra,44(sp)
   48f78:	df000a15 	stw	fp,40(sp)
   48f7c:	ddc00915 	stw	r23,36(sp)
   48f80:	dd800815 	stw	r22,32(sp)
   48f84:	dcc00515 	stw	r19,20(sp)
   48f88:	dc800415 	stw	r18,16(sp)
   48f8c:	dc400315 	stw	r17,12(sp)
   48f90:	1880020c 	andi	r2,r3,8
   48f94:	2821883a 	mov	r16,r5
   48f98:	202b883a 	mov	r21,r4
   48f9c:	3029883a 	mov	r20,r6
   48fa0:	10002726 	beq	r2,zero,49040 <__sfvwrite_r+0xe8>
   48fa4:	28800417 	ldw	r2,16(r5)
   48fa8:	10002526 	beq	r2,zero,49040 <__sfvwrite_r+0xe8>
   48fac:	1880008c 	andi	r2,r3,2
   48fb0:	a4400017 	ldw	r17,0(r20)
   48fb4:	10002a26 	beq	r2,zero,49060 <__sfvwrite_r+0x108>
   48fb8:	05a00034 	movhi	r22,32768
   48fbc:	0027883a 	mov	r19,zero
   48fc0:	0025883a 	mov	r18,zero
   48fc4:	b5bf0004 	addi	r22,r22,-1024
   48fc8:	980d883a 	mov	r6,r19
   48fcc:	a809883a 	mov	r4,r21
   48fd0:	90004626 	beq	r18,zero,490ec <__sfvwrite_r+0x194>
   48fd4:	900f883a 	mov	r7,r18
   48fd8:	b480022e 	bgeu	r22,r18,48fe4 <__sfvwrite_r+0x8c>
   48fdc:	01e00034 	movhi	r7,32768
   48fe0:	39ff0004 	addi	r7,r7,-1024
   48fe4:	80800917 	ldw	r2,36(r16)
   48fe8:	81400717 	ldw	r5,28(r16)
   48fec:	103ee83a 	callr	r2
   48ff0:	00805a0e 	bge	zero,r2,4915c <__sfvwrite_r+0x204>
   48ff4:	a0c00217 	ldw	r3,8(r20)
   48ff8:	98a7883a 	add	r19,r19,r2
   48ffc:	90a5c83a 	sub	r18,r18,r2
   49000:	1885c83a 	sub	r2,r3,r2
   49004:	a0800215 	stw	r2,8(r20)
   49008:	103fef1e 	bne	r2,zero,48fc8 <__alt_data_end+0xfffe37c8>
   4900c:	0005883a 	mov	r2,zero
   49010:	dfc00b17 	ldw	ra,44(sp)
   49014:	df000a17 	ldw	fp,40(sp)
   49018:	ddc00917 	ldw	r23,36(sp)
   4901c:	dd800817 	ldw	r22,32(sp)
   49020:	dd400717 	ldw	r21,28(sp)
   49024:	dd000617 	ldw	r20,24(sp)
   49028:	dcc00517 	ldw	r19,20(sp)
   4902c:	dc800417 	ldw	r18,16(sp)
   49030:	dc400317 	ldw	r17,12(sp)
   49034:	dc000217 	ldw	r16,8(sp)
   49038:	dec00c04 	addi	sp,sp,48
   4903c:	f800283a 	ret
   49040:	800b883a 	mov	r5,r16
   49044:	a809883a 	mov	r4,r21
   49048:	0042b280 	call	42b28 <__swsetup_r>
   4904c:	1000ee1e 	bne	r2,zero,49408 <__sfvwrite_r+0x4b0>
   49050:	80c0030b 	ldhu	r3,12(r16)
   49054:	a4400017 	ldw	r17,0(r20)
   49058:	1880008c 	andi	r2,r3,2
   4905c:	103fd61e 	bne	r2,zero,48fb8 <__alt_data_end+0xfffe37b8>
   49060:	1880004c 	andi	r2,r3,1
   49064:	1000421e 	bne	r2,zero,49170 <__sfvwrite_r+0x218>
   49068:	0039883a 	mov	fp,zero
   4906c:	0025883a 	mov	r18,zero
   49070:	90001a26 	beq	r18,zero,490dc <__sfvwrite_r+0x184>
   49074:	1880800c 	andi	r2,r3,512
   49078:	84c00217 	ldw	r19,8(r16)
   4907c:	10002126 	beq	r2,zero,49104 <__sfvwrite_r+0x1ac>
   49080:	982f883a 	mov	r23,r19
   49084:	94c09636 	bltu	r18,r19,492e0 <__sfvwrite_r+0x388>
   49088:	1881200c 	andi	r2,r3,1152
   4908c:	1000a11e 	bne	r2,zero,49314 <__sfvwrite_r+0x3bc>
   49090:	81000017 	ldw	r4,0(r16)
   49094:	b80d883a 	mov	r6,r23
   49098:	e00b883a 	mov	r5,fp
   4909c:	00494d40 	call	494d4 <memmove>
   490a0:	80c00217 	ldw	r3,8(r16)
   490a4:	81000017 	ldw	r4,0(r16)
   490a8:	9005883a 	mov	r2,r18
   490ac:	1ce7c83a 	sub	r19,r3,r19
   490b0:	25cf883a 	add	r7,r4,r23
   490b4:	84c00215 	stw	r19,8(r16)
   490b8:	81c00015 	stw	r7,0(r16)
   490bc:	a0c00217 	ldw	r3,8(r20)
   490c0:	e0b9883a 	add	fp,fp,r2
   490c4:	90a5c83a 	sub	r18,r18,r2
   490c8:	18a7c83a 	sub	r19,r3,r2
   490cc:	a4c00215 	stw	r19,8(r20)
   490d0:	983fce26 	beq	r19,zero,4900c <__alt_data_end+0xfffe380c>
   490d4:	80c0030b 	ldhu	r3,12(r16)
   490d8:	903fe61e 	bne	r18,zero,49074 <__alt_data_end+0xfffe3874>
   490dc:	8f000017 	ldw	fp,0(r17)
   490e0:	8c800117 	ldw	r18,4(r17)
   490e4:	8c400204 	addi	r17,r17,8
   490e8:	003fe106 	br	49070 <__alt_data_end+0xfffe3870>
   490ec:	8cc00017 	ldw	r19,0(r17)
   490f0:	8c800117 	ldw	r18,4(r17)
   490f4:	8c400204 	addi	r17,r17,8
   490f8:	003fb306 	br	48fc8 <__alt_data_end+0xfffe37c8>
   490fc:	0005883a 	mov	r2,zero
   49100:	f800283a 	ret
   49104:	81000017 	ldw	r4,0(r16)
   49108:	80800417 	ldw	r2,16(r16)
   4910c:	11005a36 	bltu	r2,r4,49278 <__sfvwrite_r+0x320>
   49110:	85c00517 	ldw	r23,20(r16)
   49114:	95c05836 	bltu	r18,r23,49278 <__sfvwrite_r+0x320>
   49118:	00a00034 	movhi	r2,32768
   4911c:	10bfffc4 	addi	r2,r2,-1
   49120:	9009883a 	mov	r4,r18
   49124:	1480012e 	bgeu	r2,r18,4912c <__sfvwrite_r+0x1d4>
   49128:	1009883a 	mov	r4,r2
   4912c:	b80b883a 	mov	r5,r23
   49130:	004aaf40 	call	4aaf4 <__divsi3>
   49134:	b80b883a 	mov	r5,r23
   49138:	1009883a 	mov	r4,r2
   4913c:	00406e00 	call	406e0 <__mulsi3>
   49140:	81400717 	ldw	r5,28(r16)
   49144:	80c00917 	ldw	r3,36(r16)
   49148:	100f883a 	mov	r7,r2
   4914c:	e00d883a 	mov	r6,fp
   49150:	a809883a 	mov	r4,r21
   49154:	183ee83a 	callr	r3
   49158:	00bfd816 	blt	zero,r2,490bc <__alt_data_end+0xfffe38bc>
   4915c:	8080030b 	ldhu	r2,12(r16)
   49160:	10801014 	ori	r2,r2,64
   49164:	8080030d 	sth	r2,12(r16)
   49168:	00bfffc4 	movi	r2,-1
   4916c:	003fa806 	br	49010 <__alt_data_end+0xfffe3810>
   49170:	0027883a 	mov	r19,zero
   49174:	0011883a 	mov	r8,zero
   49178:	0039883a 	mov	fp,zero
   4917c:	0025883a 	mov	r18,zero
   49180:	90001f26 	beq	r18,zero,49200 <__sfvwrite_r+0x2a8>
   49184:	40005a26 	beq	r8,zero,492f0 <__sfvwrite_r+0x398>
   49188:	982d883a 	mov	r22,r19
   4918c:	94c0012e 	bgeu	r18,r19,49194 <__sfvwrite_r+0x23c>
   49190:	902d883a 	mov	r22,r18
   49194:	81000017 	ldw	r4,0(r16)
   49198:	80800417 	ldw	r2,16(r16)
   4919c:	b02f883a 	mov	r23,r22
   491a0:	81c00517 	ldw	r7,20(r16)
   491a4:	1100032e 	bgeu	r2,r4,491b4 <__sfvwrite_r+0x25c>
   491a8:	80c00217 	ldw	r3,8(r16)
   491ac:	38c7883a 	add	r3,r7,r3
   491b0:	1d801816 	blt	r3,r22,49214 <__sfvwrite_r+0x2bc>
   491b4:	b1c03e16 	blt	r22,r7,492b0 <__sfvwrite_r+0x358>
   491b8:	80800917 	ldw	r2,36(r16)
   491bc:	81400717 	ldw	r5,28(r16)
   491c0:	e00d883a 	mov	r6,fp
   491c4:	da000115 	stw	r8,4(sp)
   491c8:	a809883a 	mov	r4,r21
   491cc:	103ee83a 	callr	r2
   491d0:	102f883a 	mov	r23,r2
   491d4:	da000117 	ldw	r8,4(sp)
   491d8:	00bfe00e 	bge	zero,r2,4915c <__alt_data_end+0xfffe395c>
   491dc:	9de7c83a 	sub	r19,r19,r23
   491e0:	98001f26 	beq	r19,zero,49260 <__sfvwrite_r+0x308>
   491e4:	a0800217 	ldw	r2,8(r20)
   491e8:	e5f9883a 	add	fp,fp,r23
   491ec:	95e5c83a 	sub	r18,r18,r23
   491f0:	15efc83a 	sub	r23,r2,r23
   491f4:	a5c00215 	stw	r23,8(r20)
   491f8:	b83f8426 	beq	r23,zero,4900c <__alt_data_end+0xfffe380c>
   491fc:	903fe11e 	bne	r18,zero,49184 <__alt_data_end+0xfffe3984>
   49200:	8f000017 	ldw	fp,0(r17)
   49204:	8c800117 	ldw	r18,4(r17)
   49208:	0011883a 	mov	r8,zero
   4920c:	8c400204 	addi	r17,r17,8
   49210:	003fdb06 	br	49180 <__alt_data_end+0xfffe3980>
   49214:	180d883a 	mov	r6,r3
   49218:	e00b883a 	mov	r5,fp
   4921c:	da000115 	stw	r8,4(sp)
   49220:	d8c00015 	stw	r3,0(sp)
   49224:	00494d40 	call	494d4 <memmove>
   49228:	d8c00017 	ldw	r3,0(sp)
   4922c:	80800017 	ldw	r2,0(r16)
   49230:	800b883a 	mov	r5,r16
   49234:	a809883a 	mov	r4,r21
   49238:	10c5883a 	add	r2,r2,r3
   4923c:	80800015 	stw	r2,0(r16)
   49240:	d8c00015 	stw	r3,0(sp)
   49244:	00447480 	call	44748 <_fflush_r>
   49248:	d8c00017 	ldw	r3,0(sp)
   4924c:	da000117 	ldw	r8,4(sp)
   49250:	103fc21e 	bne	r2,zero,4915c <__alt_data_end+0xfffe395c>
   49254:	182f883a 	mov	r23,r3
   49258:	9de7c83a 	sub	r19,r19,r23
   4925c:	983fe11e 	bne	r19,zero,491e4 <__alt_data_end+0xfffe39e4>
   49260:	800b883a 	mov	r5,r16
   49264:	a809883a 	mov	r4,r21
   49268:	00447480 	call	44748 <_fflush_r>
   4926c:	103fbb1e 	bne	r2,zero,4915c <__alt_data_end+0xfffe395c>
   49270:	0011883a 	mov	r8,zero
   49274:	003fdb06 	br	491e4 <__alt_data_end+0xfffe39e4>
   49278:	94c0012e 	bgeu	r18,r19,49280 <__sfvwrite_r+0x328>
   4927c:	9027883a 	mov	r19,r18
   49280:	980d883a 	mov	r6,r19
   49284:	e00b883a 	mov	r5,fp
   49288:	00494d40 	call	494d4 <memmove>
   4928c:	80800217 	ldw	r2,8(r16)
   49290:	80c00017 	ldw	r3,0(r16)
   49294:	14c5c83a 	sub	r2,r2,r19
   49298:	1cc7883a 	add	r3,r3,r19
   4929c:	80800215 	stw	r2,8(r16)
   492a0:	80c00015 	stw	r3,0(r16)
   492a4:	10004326 	beq	r2,zero,493b4 <__sfvwrite_r+0x45c>
   492a8:	9805883a 	mov	r2,r19
   492ac:	003f8306 	br	490bc <__alt_data_end+0xfffe38bc>
   492b0:	b00d883a 	mov	r6,r22
   492b4:	e00b883a 	mov	r5,fp
   492b8:	da000115 	stw	r8,4(sp)
   492bc:	00494d40 	call	494d4 <memmove>
   492c0:	80800217 	ldw	r2,8(r16)
   492c4:	80c00017 	ldw	r3,0(r16)
   492c8:	da000117 	ldw	r8,4(sp)
   492cc:	1585c83a 	sub	r2,r2,r22
   492d0:	1dad883a 	add	r22,r3,r22
   492d4:	80800215 	stw	r2,8(r16)
   492d8:	85800015 	stw	r22,0(r16)
   492dc:	003fbf06 	br	491dc <__alt_data_end+0xfffe39dc>
   492e0:	81000017 	ldw	r4,0(r16)
   492e4:	9027883a 	mov	r19,r18
   492e8:	902f883a 	mov	r23,r18
   492ec:	003f6906 	br	49094 <__alt_data_end+0xfffe3894>
   492f0:	900d883a 	mov	r6,r18
   492f4:	01400284 	movi	r5,10
   492f8:	e009883a 	mov	r4,fp
   492fc:	0045be40 	call	45be4 <memchr>
   49300:	10003e26 	beq	r2,zero,493fc <__sfvwrite_r+0x4a4>
   49304:	10800044 	addi	r2,r2,1
   49308:	1727c83a 	sub	r19,r2,fp
   4930c:	02000044 	movi	r8,1
   49310:	003f9d06 	br	49188 <__alt_data_end+0xfffe3988>
   49314:	80800517 	ldw	r2,20(r16)
   49318:	81400417 	ldw	r5,16(r16)
   4931c:	81c00017 	ldw	r7,0(r16)
   49320:	10a7883a 	add	r19,r2,r2
   49324:	9885883a 	add	r2,r19,r2
   49328:	1026d7fa 	srli	r19,r2,31
   4932c:	396dc83a 	sub	r22,r7,r5
   49330:	b1000044 	addi	r4,r22,1
   49334:	9885883a 	add	r2,r19,r2
   49338:	1027d07a 	srai	r19,r2,1
   4933c:	2485883a 	add	r2,r4,r18
   49340:	980d883a 	mov	r6,r19
   49344:	9880022e 	bgeu	r19,r2,49350 <__sfvwrite_r+0x3f8>
   49348:	1027883a 	mov	r19,r2
   4934c:	100d883a 	mov	r6,r2
   49350:	18c1000c 	andi	r3,r3,1024
   49354:	18001c26 	beq	r3,zero,493c8 <__sfvwrite_r+0x470>
   49358:	300b883a 	mov	r5,r6
   4935c:	a809883a 	mov	r4,r21
   49360:	00453d80 	call	453d8 <_malloc_r>
   49364:	102f883a 	mov	r23,r2
   49368:	10002926 	beq	r2,zero,49410 <__sfvwrite_r+0x4b8>
   4936c:	81400417 	ldw	r5,16(r16)
   49370:	b00d883a 	mov	r6,r22
   49374:	1009883a 	mov	r4,r2
   49378:	0045cc80 	call	45cc8 <memcpy>
   4937c:	8080030b 	ldhu	r2,12(r16)
   49380:	00fedfc4 	movi	r3,-1153
   49384:	10c4703a 	and	r2,r2,r3
   49388:	10802014 	ori	r2,r2,128
   4938c:	8080030d 	sth	r2,12(r16)
   49390:	bd89883a 	add	r4,r23,r22
   49394:	9d8fc83a 	sub	r7,r19,r22
   49398:	85c00415 	stw	r23,16(r16)
   4939c:	84c00515 	stw	r19,20(r16)
   493a0:	81000015 	stw	r4,0(r16)
   493a4:	9027883a 	mov	r19,r18
   493a8:	81c00215 	stw	r7,8(r16)
   493ac:	902f883a 	mov	r23,r18
   493b0:	003f3806 	br	49094 <__alt_data_end+0xfffe3894>
   493b4:	800b883a 	mov	r5,r16
   493b8:	a809883a 	mov	r4,r21
   493bc:	00447480 	call	44748 <_fflush_r>
   493c0:	103fb926 	beq	r2,zero,492a8 <__alt_data_end+0xfffe3aa8>
   493c4:	003f6506 	br	4915c <__alt_data_end+0xfffe395c>
   493c8:	a809883a 	mov	r4,r21
   493cc:	00496900 	call	49690 <_realloc_r>
   493d0:	102f883a 	mov	r23,r2
   493d4:	103fee1e 	bne	r2,zero,49390 <__alt_data_end+0xfffe3b90>
   493d8:	81400417 	ldw	r5,16(r16)
   493dc:	a809883a 	mov	r4,r21
   493e0:	0044ca80 	call	44ca8 <_free_r>
   493e4:	8080030b 	ldhu	r2,12(r16)
   493e8:	00ffdfc4 	movi	r3,-129
   493ec:	1884703a 	and	r2,r3,r2
   493f0:	00c00304 	movi	r3,12
   493f4:	a8c00015 	stw	r3,0(r21)
   493f8:	003f5906 	br	49160 <__alt_data_end+0xfffe3960>
   493fc:	94c00044 	addi	r19,r18,1
   49400:	02000044 	movi	r8,1
   49404:	003f6006 	br	49188 <__alt_data_end+0xfffe3988>
   49408:	00bfffc4 	movi	r2,-1
   4940c:	003f0006 	br	49010 <__alt_data_end+0xfffe3810>
   49410:	00800304 	movi	r2,12
   49414:	a8800015 	stw	r2,0(r21)
   49418:	8080030b 	ldhu	r2,12(r16)
   4941c:	003f5006 	br	49160 <__alt_data_end+0xfffe3960>

00049420 <_isatty_r>:
   49420:	defffd04 	addi	sp,sp,-12
   49424:	dc000015 	stw	r16,0(sp)
   49428:	040001b4 	movhi	r16,6
   4942c:	dc400115 	stw	r17,4(sp)
   49430:	8431c204 	addi	r16,r16,-14584
   49434:	2023883a 	mov	r17,r4
   49438:	2809883a 	mov	r4,r5
   4943c:	dfc00215 	stw	ra,8(sp)
   49440:	80000015 	stw	zero,0(r16)
   49444:	004d7bc0 	call	4d7bc <isatty>
   49448:	00ffffc4 	movi	r3,-1
   4944c:	10c00526 	beq	r2,r3,49464 <_isatty_r+0x44>
   49450:	dfc00217 	ldw	ra,8(sp)
   49454:	dc400117 	ldw	r17,4(sp)
   49458:	dc000017 	ldw	r16,0(sp)
   4945c:	dec00304 	addi	sp,sp,12
   49460:	f800283a 	ret
   49464:	80c00017 	ldw	r3,0(r16)
   49468:	183ff926 	beq	r3,zero,49450 <__alt_data_end+0xfffe3c50>
   4946c:	88c00015 	stw	r3,0(r17)
   49470:	003ff706 	br	49450 <__alt_data_end+0xfffe3c50>

00049474 <_lseek_r>:
   49474:	defffd04 	addi	sp,sp,-12
   49478:	2805883a 	mov	r2,r5
   4947c:	dc000015 	stw	r16,0(sp)
   49480:	040001b4 	movhi	r16,6
   49484:	dc400115 	stw	r17,4(sp)
   49488:	300b883a 	mov	r5,r6
   4948c:	8431c204 	addi	r16,r16,-14584
   49490:	2023883a 	mov	r17,r4
   49494:	380d883a 	mov	r6,r7
   49498:	1009883a 	mov	r4,r2
   4949c:	dfc00215 	stw	ra,8(sp)
   494a0:	80000015 	stw	zero,0(r16)
   494a4:	004d9900 	call	4d990 <lseek>
   494a8:	00ffffc4 	movi	r3,-1
   494ac:	10c00526 	beq	r2,r3,494c4 <_lseek_r+0x50>
   494b0:	dfc00217 	ldw	ra,8(sp)
   494b4:	dc400117 	ldw	r17,4(sp)
   494b8:	dc000017 	ldw	r16,0(sp)
   494bc:	dec00304 	addi	sp,sp,12
   494c0:	f800283a 	ret
   494c4:	80c00017 	ldw	r3,0(r16)
   494c8:	183ff926 	beq	r3,zero,494b0 <__alt_data_end+0xfffe3cb0>
   494cc:	88c00015 	stw	r3,0(r17)
   494d0:	003ff706 	br	494b0 <__alt_data_end+0xfffe3cb0>

000494d4 <memmove>:
   494d4:	2005883a 	mov	r2,r4
   494d8:	29000b2e 	bgeu	r5,r4,49508 <memmove+0x34>
   494dc:	298f883a 	add	r7,r5,r6
   494e0:	21c0092e 	bgeu	r4,r7,49508 <memmove+0x34>
   494e4:	2187883a 	add	r3,r4,r6
   494e8:	198bc83a 	sub	r5,r3,r6
   494ec:	30004826 	beq	r6,zero,49610 <memmove+0x13c>
   494f0:	39ffffc4 	addi	r7,r7,-1
   494f4:	39000003 	ldbu	r4,0(r7)
   494f8:	18ffffc4 	addi	r3,r3,-1
   494fc:	19000005 	stb	r4,0(r3)
   49500:	28fffb1e 	bne	r5,r3,494f0 <__alt_data_end+0xfffe3cf0>
   49504:	f800283a 	ret
   49508:	00c003c4 	movi	r3,15
   4950c:	1980412e 	bgeu	r3,r6,49614 <memmove+0x140>
   49510:	2886b03a 	or	r3,r5,r2
   49514:	18c000cc 	andi	r3,r3,3
   49518:	1800401e 	bne	r3,zero,4961c <memmove+0x148>
   4951c:	33fffc04 	addi	r15,r6,-16
   49520:	781ed13a 	srli	r15,r15,4
   49524:	28c00104 	addi	r3,r5,4
   49528:	13400104 	addi	r13,r2,4
   4952c:	781c913a 	slli	r14,r15,4
   49530:	2b000204 	addi	r12,r5,8
   49534:	12c00204 	addi	r11,r2,8
   49538:	73800504 	addi	r14,r14,20
   4953c:	2a800304 	addi	r10,r5,12
   49540:	12400304 	addi	r9,r2,12
   49544:	2b9d883a 	add	r14,r5,r14
   49548:	2811883a 	mov	r8,r5
   4954c:	100f883a 	mov	r7,r2
   49550:	41000017 	ldw	r4,0(r8)
   49554:	39c00404 	addi	r7,r7,16
   49558:	18c00404 	addi	r3,r3,16
   4955c:	393ffc15 	stw	r4,-16(r7)
   49560:	193ffc17 	ldw	r4,-16(r3)
   49564:	6b400404 	addi	r13,r13,16
   49568:	5ac00404 	addi	r11,r11,16
   4956c:	693ffc15 	stw	r4,-16(r13)
   49570:	61000017 	ldw	r4,0(r12)
   49574:	4a400404 	addi	r9,r9,16
   49578:	42000404 	addi	r8,r8,16
   4957c:	593ffc15 	stw	r4,-16(r11)
   49580:	51000017 	ldw	r4,0(r10)
   49584:	63000404 	addi	r12,r12,16
   49588:	52800404 	addi	r10,r10,16
   4958c:	493ffc15 	stw	r4,-16(r9)
   49590:	1bbfef1e 	bne	r3,r14,49550 <__alt_data_end+0xfffe3d50>
   49594:	79000044 	addi	r4,r15,1
   49598:	2008913a 	slli	r4,r4,4
   4959c:	328003cc 	andi	r10,r6,15
   495a0:	02c000c4 	movi	r11,3
   495a4:	1107883a 	add	r3,r2,r4
   495a8:	290b883a 	add	r5,r5,r4
   495ac:	5a801e2e 	bgeu	r11,r10,49628 <memmove+0x154>
   495b0:	1813883a 	mov	r9,r3
   495b4:	2811883a 	mov	r8,r5
   495b8:	500f883a 	mov	r7,r10
   495bc:	41000017 	ldw	r4,0(r8)
   495c0:	4a400104 	addi	r9,r9,4
   495c4:	39ffff04 	addi	r7,r7,-4
   495c8:	493fff15 	stw	r4,-4(r9)
   495cc:	42000104 	addi	r8,r8,4
   495d0:	59fffa36 	bltu	r11,r7,495bc <__alt_data_end+0xfffe3dbc>
   495d4:	513fff04 	addi	r4,r10,-4
   495d8:	2008d0ba 	srli	r4,r4,2
   495dc:	318000cc 	andi	r6,r6,3
   495e0:	21000044 	addi	r4,r4,1
   495e4:	2109883a 	add	r4,r4,r4
   495e8:	2109883a 	add	r4,r4,r4
   495ec:	1907883a 	add	r3,r3,r4
   495f0:	290b883a 	add	r5,r5,r4
   495f4:	30000b26 	beq	r6,zero,49624 <memmove+0x150>
   495f8:	198d883a 	add	r6,r3,r6
   495fc:	29c00003 	ldbu	r7,0(r5)
   49600:	18c00044 	addi	r3,r3,1
   49604:	29400044 	addi	r5,r5,1
   49608:	19ffffc5 	stb	r7,-1(r3)
   4960c:	19bffb1e 	bne	r3,r6,495fc <__alt_data_end+0xfffe3dfc>
   49610:	f800283a 	ret
   49614:	1007883a 	mov	r3,r2
   49618:	003ff606 	br	495f4 <__alt_data_end+0xfffe3df4>
   4961c:	1007883a 	mov	r3,r2
   49620:	003ff506 	br	495f8 <__alt_data_end+0xfffe3df8>
   49624:	f800283a 	ret
   49628:	500d883a 	mov	r6,r10
   4962c:	003ff106 	br	495f4 <__alt_data_end+0xfffe3df4>

00049630 <_read_r>:
   49630:	defffd04 	addi	sp,sp,-12
   49634:	2805883a 	mov	r2,r5
   49638:	dc000015 	stw	r16,0(sp)
   4963c:	040001b4 	movhi	r16,6
   49640:	dc400115 	stw	r17,4(sp)
   49644:	300b883a 	mov	r5,r6
   49648:	8431c204 	addi	r16,r16,-14584
   4964c:	2023883a 	mov	r17,r4
   49650:	380d883a 	mov	r6,r7
   49654:	1009883a 	mov	r4,r2
   49658:	dfc00215 	stw	ra,8(sp)
   4965c:	80000015 	stw	zero,0(r16)
   49660:	004db640 	call	4db64 <read>
   49664:	00ffffc4 	movi	r3,-1
   49668:	10c00526 	beq	r2,r3,49680 <_read_r+0x50>
   4966c:	dfc00217 	ldw	ra,8(sp)
   49670:	dc400117 	ldw	r17,4(sp)
   49674:	dc000017 	ldw	r16,0(sp)
   49678:	dec00304 	addi	sp,sp,12
   4967c:	f800283a 	ret
   49680:	80c00017 	ldw	r3,0(r16)
   49684:	183ff926 	beq	r3,zero,4966c <__alt_data_end+0xfffe3e6c>
   49688:	88c00015 	stw	r3,0(r17)
   4968c:	003ff706 	br	4966c <__alt_data_end+0xfffe3e6c>

00049690 <_realloc_r>:
   49690:	defff604 	addi	sp,sp,-40
   49694:	dc800215 	stw	r18,8(sp)
   49698:	dfc00915 	stw	ra,36(sp)
   4969c:	df000815 	stw	fp,32(sp)
   496a0:	ddc00715 	stw	r23,28(sp)
   496a4:	dd800615 	stw	r22,24(sp)
   496a8:	dd400515 	stw	r21,20(sp)
   496ac:	dd000415 	stw	r20,16(sp)
   496b0:	dcc00315 	stw	r19,12(sp)
   496b4:	dc400115 	stw	r17,4(sp)
   496b8:	dc000015 	stw	r16,0(sp)
   496bc:	3025883a 	mov	r18,r6
   496c0:	2800b726 	beq	r5,zero,499a0 <_realloc_r+0x310>
   496c4:	282b883a 	mov	r21,r5
   496c8:	2029883a 	mov	r20,r4
   496cc:	004e0200 	call	4e020 <__malloc_lock>
   496d0:	a8bfff17 	ldw	r2,-4(r21)
   496d4:	043fff04 	movi	r16,-4
   496d8:	90c002c4 	addi	r3,r18,11
   496dc:	01000584 	movi	r4,22
   496e0:	acfffe04 	addi	r19,r21,-8
   496e4:	1420703a 	and	r16,r2,r16
   496e8:	20c0332e 	bgeu	r4,r3,497b8 <_realloc_r+0x128>
   496ec:	047ffe04 	movi	r17,-8
   496f0:	1c62703a 	and	r17,r3,r17
   496f4:	8807883a 	mov	r3,r17
   496f8:	88005816 	blt	r17,zero,4985c <_realloc_r+0x1cc>
   496fc:	8c805736 	bltu	r17,r18,4985c <_realloc_r+0x1cc>
   49700:	80c0300e 	bge	r16,r3,497c4 <_realloc_r+0x134>
   49704:	070001b4 	movhi	fp,6
   49708:	e7252704 	addi	fp,fp,-27492
   4970c:	e1c00217 	ldw	r7,8(fp)
   49710:	9c09883a 	add	r4,r19,r16
   49714:	22000117 	ldw	r8,4(r4)
   49718:	21c06326 	beq	r4,r7,498a8 <_realloc_r+0x218>
   4971c:	017fff84 	movi	r5,-2
   49720:	414a703a 	and	r5,r8,r5
   49724:	214b883a 	add	r5,r4,r5
   49728:	29800117 	ldw	r6,4(r5)
   4972c:	3180004c 	andi	r6,r6,1
   49730:	30003f26 	beq	r6,zero,49830 <_realloc_r+0x1a0>
   49734:	1080004c 	andi	r2,r2,1
   49738:	10008326 	beq	r2,zero,49948 <_realloc_r+0x2b8>
   4973c:	900b883a 	mov	r5,r18
   49740:	a009883a 	mov	r4,r20
   49744:	00453d80 	call	453d8 <_malloc_r>
   49748:	1025883a 	mov	r18,r2
   4974c:	10011e26 	beq	r2,zero,49bc8 <_realloc_r+0x538>
   49750:	a93fff17 	ldw	r4,-4(r21)
   49754:	10fffe04 	addi	r3,r2,-8
   49758:	00bfff84 	movi	r2,-2
   4975c:	2084703a 	and	r2,r4,r2
   49760:	9885883a 	add	r2,r19,r2
   49764:	1880ee26 	beq	r3,r2,49b20 <_realloc_r+0x490>
   49768:	81bfff04 	addi	r6,r16,-4
   4976c:	00800904 	movi	r2,36
   49770:	1180b836 	bltu	r2,r6,49a54 <_realloc_r+0x3c4>
   49774:	00c004c4 	movi	r3,19
   49778:	19809636 	bltu	r3,r6,499d4 <_realloc_r+0x344>
   4977c:	9005883a 	mov	r2,r18
   49780:	a807883a 	mov	r3,r21
   49784:	19000017 	ldw	r4,0(r3)
   49788:	11000015 	stw	r4,0(r2)
   4978c:	19000117 	ldw	r4,4(r3)
   49790:	11000115 	stw	r4,4(r2)
   49794:	18c00217 	ldw	r3,8(r3)
   49798:	10c00215 	stw	r3,8(r2)
   4979c:	a80b883a 	mov	r5,r21
   497a0:	a009883a 	mov	r4,r20
   497a4:	0044ca80 	call	44ca8 <_free_r>
   497a8:	a009883a 	mov	r4,r20
   497ac:	004e1400 	call	4e140 <__malloc_unlock>
   497b0:	9005883a 	mov	r2,r18
   497b4:	00001206 	br	49800 <_realloc_r+0x170>
   497b8:	00c00404 	movi	r3,16
   497bc:	1823883a 	mov	r17,r3
   497c0:	003fce06 	br	496fc <__alt_data_end+0xfffe3efc>
   497c4:	a825883a 	mov	r18,r21
   497c8:	8445c83a 	sub	r2,r16,r17
   497cc:	00c003c4 	movi	r3,15
   497d0:	18802636 	bltu	r3,r2,4986c <_realloc_r+0x1dc>
   497d4:	99800117 	ldw	r6,4(r19)
   497d8:	9c07883a 	add	r3,r19,r16
   497dc:	3180004c 	andi	r6,r6,1
   497e0:	3420b03a 	or	r16,r6,r16
   497e4:	9c000115 	stw	r16,4(r19)
   497e8:	18800117 	ldw	r2,4(r3)
   497ec:	10800054 	ori	r2,r2,1
   497f0:	18800115 	stw	r2,4(r3)
   497f4:	a009883a 	mov	r4,r20
   497f8:	004e1400 	call	4e140 <__malloc_unlock>
   497fc:	9005883a 	mov	r2,r18
   49800:	dfc00917 	ldw	ra,36(sp)
   49804:	df000817 	ldw	fp,32(sp)
   49808:	ddc00717 	ldw	r23,28(sp)
   4980c:	dd800617 	ldw	r22,24(sp)
   49810:	dd400517 	ldw	r21,20(sp)
   49814:	dd000417 	ldw	r20,16(sp)
   49818:	dcc00317 	ldw	r19,12(sp)
   4981c:	dc800217 	ldw	r18,8(sp)
   49820:	dc400117 	ldw	r17,4(sp)
   49824:	dc000017 	ldw	r16,0(sp)
   49828:	dec00a04 	addi	sp,sp,40
   4982c:	f800283a 	ret
   49830:	017fff04 	movi	r5,-4
   49834:	414a703a 	and	r5,r8,r5
   49838:	814d883a 	add	r6,r16,r5
   4983c:	30c01f16 	blt	r6,r3,498bc <_realloc_r+0x22c>
   49840:	20800317 	ldw	r2,12(r4)
   49844:	20c00217 	ldw	r3,8(r4)
   49848:	a825883a 	mov	r18,r21
   4984c:	3021883a 	mov	r16,r6
   49850:	18800315 	stw	r2,12(r3)
   49854:	10c00215 	stw	r3,8(r2)
   49858:	003fdb06 	br	497c8 <__alt_data_end+0xfffe3fc8>
   4985c:	00800304 	movi	r2,12
   49860:	a0800015 	stw	r2,0(r20)
   49864:	0005883a 	mov	r2,zero
   49868:	003fe506 	br	49800 <__alt_data_end+0xfffe4000>
   4986c:	98c00117 	ldw	r3,4(r19)
   49870:	9c4b883a 	add	r5,r19,r17
   49874:	11000054 	ori	r4,r2,1
   49878:	18c0004c 	andi	r3,r3,1
   4987c:	1c62b03a 	or	r17,r3,r17
   49880:	9c400115 	stw	r17,4(r19)
   49884:	29000115 	stw	r4,4(r5)
   49888:	2885883a 	add	r2,r5,r2
   4988c:	10c00117 	ldw	r3,4(r2)
   49890:	29400204 	addi	r5,r5,8
   49894:	a009883a 	mov	r4,r20
   49898:	18c00054 	ori	r3,r3,1
   4989c:	10c00115 	stw	r3,4(r2)
   498a0:	0044ca80 	call	44ca8 <_free_r>
   498a4:	003fd306 	br	497f4 <__alt_data_end+0xfffe3ff4>
   498a8:	017fff04 	movi	r5,-4
   498ac:	414a703a 	and	r5,r8,r5
   498b0:	89800404 	addi	r6,r17,16
   498b4:	8151883a 	add	r8,r16,r5
   498b8:	4180590e 	bge	r8,r6,49a20 <_realloc_r+0x390>
   498bc:	1080004c 	andi	r2,r2,1
   498c0:	103f9e1e 	bne	r2,zero,4973c <__alt_data_end+0xfffe3f3c>
   498c4:	adbffe17 	ldw	r22,-8(r21)
   498c8:	00bfff04 	movi	r2,-4
   498cc:	9dadc83a 	sub	r22,r19,r22
   498d0:	b1800117 	ldw	r6,4(r22)
   498d4:	3084703a 	and	r2,r6,r2
   498d8:	20002026 	beq	r4,zero,4995c <_realloc_r+0x2cc>
   498dc:	80af883a 	add	r23,r16,r2
   498e0:	b96f883a 	add	r23,r23,r5
   498e4:	21c05f26 	beq	r4,r7,49a64 <_realloc_r+0x3d4>
   498e8:	b8c01c16 	blt	r23,r3,4995c <_realloc_r+0x2cc>
   498ec:	20800317 	ldw	r2,12(r4)
   498f0:	20c00217 	ldw	r3,8(r4)
   498f4:	81bfff04 	addi	r6,r16,-4
   498f8:	01000904 	movi	r4,36
   498fc:	18800315 	stw	r2,12(r3)
   49900:	10c00215 	stw	r3,8(r2)
   49904:	b0c00217 	ldw	r3,8(r22)
   49908:	b0800317 	ldw	r2,12(r22)
   4990c:	b4800204 	addi	r18,r22,8
   49910:	18800315 	stw	r2,12(r3)
   49914:	10c00215 	stw	r3,8(r2)
   49918:	21801b36 	bltu	r4,r6,49988 <_realloc_r+0x2f8>
   4991c:	008004c4 	movi	r2,19
   49920:	1180352e 	bgeu	r2,r6,499f8 <_realloc_r+0x368>
   49924:	a8800017 	ldw	r2,0(r21)
   49928:	b0800215 	stw	r2,8(r22)
   4992c:	a8800117 	ldw	r2,4(r21)
   49930:	b0800315 	stw	r2,12(r22)
   49934:	008006c4 	movi	r2,27
   49938:	11807f36 	bltu	r2,r6,49b38 <_realloc_r+0x4a8>
   4993c:	b0800404 	addi	r2,r22,16
   49940:	ad400204 	addi	r21,r21,8
   49944:	00002d06 	br	499fc <_realloc_r+0x36c>
   49948:	adbffe17 	ldw	r22,-8(r21)
   4994c:	00bfff04 	movi	r2,-4
   49950:	9dadc83a 	sub	r22,r19,r22
   49954:	b1000117 	ldw	r4,4(r22)
   49958:	2084703a 	and	r2,r4,r2
   4995c:	b03f7726 	beq	r22,zero,4973c <__alt_data_end+0xfffe3f3c>
   49960:	80af883a 	add	r23,r16,r2
   49964:	b8ff7516 	blt	r23,r3,4973c <__alt_data_end+0xfffe3f3c>
   49968:	b0800317 	ldw	r2,12(r22)
   4996c:	b0c00217 	ldw	r3,8(r22)
   49970:	81bfff04 	addi	r6,r16,-4
   49974:	01000904 	movi	r4,36
   49978:	18800315 	stw	r2,12(r3)
   4997c:	10c00215 	stw	r3,8(r2)
   49980:	b4800204 	addi	r18,r22,8
   49984:	21bfe52e 	bgeu	r4,r6,4991c <__alt_data_end+0xfffe411c>
   49988:	a80b883a 	mov	r5,r21
   4998c:	9009883a 	mov	r4,r18
   49990:	00494d40 	call	494d4 <memmove>
   49994:	b821883a 	mov	r16,r23
   49998:	b027883a 	mov	r19,r22
   4999c:	003f8a06 	br	497c8 <__alt_data_end+0xfffe3fc8>
   499a0:	300b883a 	mov	r5,r6
   499a4:	dfc00917 	ldw	ra,36(sp)
   499a8:	df000817 	ldw	fp,32(sp)
   499ac:	ddc00717 	ldw	r23,28(sp)
   499b0:	dd800617 	ldw	r22,24(sp)
   499b4:	dd400517 	ldw	r21,20(sp)
   499b8:	dd000417 	ldw	r20,16(sp)
   499bc:	dcc00317 	ldw	r19,12(sp)
   499c0:	dc800217 	ldw	r18,8(sp)
   499c4:	dc400117 	ldw	r17,4(sp)
   499c8:	dc000017 	ldw	r16,0(sp)
   499cc:	dec00a04 	addi	sp,sp,40
   499d0:	00453d81 	jmpi	453d8 <_malloc_r>
   499d4:	a8c00017 	ldw	r3,0(r21)
   499d8:	90c00015 	stw	r3,0(r18)
   499dc:	a8c00117 	ldw	r3,4(r21)
   499e0:	90c00115 	stw	r3,4(r18)
   499e4:	00c006c4 	movi	r3,27
   499e8:	19804536 	bltu	r3,r6,49b00 <_realloc_r+0x470>
   499ec:	90800204 	addi	r2,r18,8
   499f0:	a8c00204 	addi	r3,r21,8
   499f4:	003f6306 	br	49784 <__alt_data_end+0xfffe3f84>
   499f8:	9005883a 	mov	r2,r18
   499fc:	a8c00017 	ldw	r3,0(r21)
   49a00:	b821883a 	mov	r16,r23
   49a04:	b027883a 	mov	r19,r22
   49a08:	10c00015 	stw	r3,0(r2)
   49a0c:	a8c00117 	ldw	r3,4(r21)
   49a10:	10c00115 	stw	r3,4(r2)
   49a14:	a8c00217 	ldw	r3,8(r21)
   49a18:	10c00215 	stw	r3,8(r2)
   49a1c:	003f6a06 	br	497c8 <__alt_data_end+0xfffe3fc8>
   49a20:	9c67883a 	add	r19,r19,r17
   49a24:	4445c83a 	sub	r2,r8,r17
   49a28:	e4c00215 	stw	r19,8(fp)
   49a2c:	10800054 	ori	r2,r2,1
   49a30:	98800115 	stw	r2,4(r19)
   49a34:	a8bfff17 	ldw	r2,-4(r21)
   49a38:	a009883a 	mov	r4,r20
   49a3c:	1080004c 	andi	r2,r2,1
   49a40:	1462b03a 	or	r17,r2,r17
   49a44:	ac7fff15 	stw	r17,-4(r21)
   49a48:	004e1400 	call	4e140 <__malloc_unlock>
   49a4c:	a805883a 	mov	r2,r21
   49a50:	003f6b06 	br	49800 <__alt_data_end+0xfffe4000>
   49a54:	a80b883a 	mov	r5,r21
   49a58:	9009883a 	mov	r4,r18
   49a5c:	00494d40 	call	494d4 <memmove>
   49a60:	003f4e06 	br	4979c <__alt_data_end+0xfffe3f9c>
   49a64:	89000404 	addi	r4,r17,16
   49a68:	b93fbc16 	blt	r23,r4,4995c <__alt_data_end+0xfffe415c>
   49a6c:	b0800317 	ldw	r2,12(r22)
   49a70:	b0c00217 	ldw	r3,8(r22)
   49a74:	81bfff04 	addi	r6,r16,-4
   49a78:	01000904 	movi	r4,36
   49a7c:	18800315 	stw	r2,12(r3)
   49a80:	10c00215 	stw	r3,8(r2)
   49a84:	b4800204 	addi	r18,r22,8
   49a88:	21804336 	bltu	r4,r6,49b98 <_realloc_r+0x508>
   49a8c:	008004c4 	movi	r2,19
   49a90:	11803f2e 	bgeu	r2,r6,49b90 <_realloc_r+0x500>
   49a94:	a8800017 	ldw	r2,0(r21)
   49a98:	b0800215 	stw	r2,8(r22)
   49a9c:	a8800117 	ldw	r2,4(r21)
   49aa0:	b0800315 	stw	r2,12(r22)
   49aa4:	008006c4 	movi	r2,27
   49aa8:	11803f36 	bltu	r2,r6,49ba8 <_realloc_r+0x518>
   49aac:	b0800404 	addi	r2,r22,16
   49ab0:	ad400204 	addi	r21,r21,8
   49ab4:	a8c00017 	ldw	r3,0(r21)
   49ab8:	10c00015 	stw	r3,0(r2)
   49abc:	a8c00117 	ldw	r3,4(r21)
   49ac0:	10c00115 	stw	r3,4(r2)
   49ac4:	a8c00217 	ldw	r3,8(r21)
   49ac8:	10c00215 	stw	r3,8(r2)
   49acc:	b447883a 	add	r3,r22,r17
   49ad0:	bc45c83a 	sub	r2,r23,r17
   49ad4:	e0c00215 	stw	r3,8(fp)
   49ad8:	10800054 	ori	r2,r2,1
   49adc:	18800115 	stw	r2,4(r3)
   49ae0:	b0800117 	ldw	r2,4(r22)
   49ae4:	a009883a 	mov	r4,r20
   49ae8:	1080004c 	andi	r2,r2,1
   49aec:	1462b03a 	or	r17,r2,r17
   49af0:	b4400115 	stw	r17,4(r22)
   49af4:	004e1400 	call	4e140 <__malloc_unlock>
   49af8:	9005883a 	mov	r2,r18
   49afc:	003f4006 	br	49800 <__alt_data_end+0xfffe4000>
   49b00:	a8c00217 	ldw	r3,8(r21)
   49b04:	90c00215 	stw	r3,8(r18)
   49b08:	a8c00317 	ldw	r3,12(r21)
   49b0c:	90c00315 	stw	r3,12(r18)
   49b10:	30801126 	beq	r6,r2,49b58 <_realloc_r+0x4c8>
   49b14:	90800404 	addi	r2,r18,16
   49b18:	a8c00404 	addi	r3,r21,16
   49b1c:	003f1906 	br	49784 <__alt_data_end+0xfffe3f84>
   49b20:	90ffff17 	ldw	r3,-4(r18)
   49b24:	00bfff04 	movi	r2,-4
   49b28:	a825883a 	mov	r18,r21
   49b2c:	1884703a 	and	r2,r3,r2
   49b30:	80a1883a 	add	r16,r16,r2
   49b34:	003f2406 	br	497c8 <__alt_data_end+0xfffe3fc8>
   49b38:	a8800217 	ldw	r2,8(r21)
   49b3c:	b0800415 	stw	r2,16(r22)
   49b40:	a8800317 	ldw	r2,12(r21)
   49b44:	b0800515 	stw	r2,20(r22)
   49b48:	31000a26 	beq	r6,r4,49b74 <_realloc_r+0x4e4>
   49b4c:	b0800604 	addi	r2,r22,24
   49b50:	ad400404 	addi	r21,r21,16
   49b54:	003fa906 	br	499fc <__alt_data_end+0xfffe41fc>
   49b58:	a9000417 	ldw	r4,16(r21)
   49b5c:	90800604 	addi	r2,r18,24
   49b60:	a8c00604 	addi	r3,r21,24
   49b64:	91000415 	stw	r4,16(r18)
   49b68:	a9000517 	ldw	r4,20(r21)
   49b6c:	91000515 	stw	r4,20(r18)
   49b70:	003f0406 	br	49784 <__alt_data_end+0xfffe3f84>
   49b74:	a8c00417 	ldw	r3,16(r21)
   49b78:	ad400604 	addi	r21,r21,24
   49b7c:	b0800804 	addi	r2,r22,32
   49b80:	b0c00615 	stw	r3,24(r22)
   49b84:	a8ffff17 	ldw	r3,-4(r21)
   49b88:	b0c00715 	stw	r3,28(r22)
   49b8c:	003f9b06 	br	499fc <__alt_data_end+0xfffe41fc>
   49b90:	9005883a 	mov	r2,r18
   49b94:	003fc706 	br	49ab4 <__alt_data_end+0xfffe42b4>
   49b98:	a80b883a 	mov	r5,r21
   49b9c:	9009883a 	mov	r4,r18
   49ba0:	00494d40 	call	494d4 <memmove>
   49ba4:	003fc906 	br	49acc <__alt_data_end+0xfffe42cc>
   49ba8:	a8800217 	ldw	r2,8(r21)
   49bac:	b0800415 	stw	r2,16(r22)
   49bb0:	a8800317 	ldw	r2,12(r21)
   49bb4:	b0800515 	stw	r2,20(r22)
   49bb8:	31000726 	beq	r6,r4,49bd8 <_realloc_r+0x548>
   49bbc:	b0800604 	addi	r2,r22,24
   49bc0:	ad400404 	addi	r21,r21,16
   49bc4:	003fbb06 	br	49ab4 <__alt_data_end+0xfffe42b4>
   49bc8:	a009883a 	mov	r4,r20
   49bcc:	004e1400 	call	4e140 <__malloc_unlock>
   49bd0:	0005883a 	mov	r2,zero
   49bd4:	003f0a06 	br	49800 <__alt_data_end+0xfffe4000>
   49bd8:	a8c00417 	ldw	r3,16(r21)
   49bdc:	ad400604 	addi	r21,r21,24
   49be0:	b0800804 	addi	r2,r22,32
   49be4:	b0c00615 	stw	r3,24(r22)
   49be8:	a8ffff17 	ldw	r3,-4(r21)
   49bec:	b0c00715 	stw	r3,28(r22)
   49bf0:	003fb006 	br	49ab4 <__alt_data_end+0xfffe42b4>

00049bf4 <__swbuf_r>:
   49bf4:	defffb04 	addi	sp,sp,-20
   49bf8:	dcc00315 	stw	r19,12(sp)
   49bfc:	dc800215 	stw	r18,8(sp)
   49c00:	dc000015 	stw	r16,0(sp)
   49c04:	dfc00415 	stw	ra,16(sp)
   49c08:	dc400115 	stw	r17,4(sp)
   49c0c:	2025883a 	mov	r18,r4
   49c10:	2827883a 	mov	r19,r5
   49c14:	3021883a 	mov	r16,r6
   49c18:	20000226 	beq	r4,zero,49c24 <__swbuf_r+0x30>
   49c1c:	20800e17 	ldw	r2,56(r4)
   49c20:	10004226 	beq	r2,zero,49d2c <__swbuf_r+0x138>
   49c24:	80800617 	ldw	r2,24(r16)
   49c28:	8100030b 	ldhu	r4,12(r16)
   49c2c:	80800215 	stw	r2,8(r16)
   49c30:	2080020c 	andi	r2,r4,8
   49c34:	10003626 	beq	r2,zero,49d10 <__swbuf_r+0x11c>
   49c38:	80c00417 	ldw	r3,16(r16)
   49c3c:	18003426 	beq	r3,zero,49d10 <__swbuf_r+0x11c>
   49c40:	2088000c 	andi	r2,r4,8192
   49c44:	9c403fcc 	andi	r17,r19,255
   49c48:	10001a26 	beq	r2,zero,49cb4 <__swbuf_r+0xc0>
   49c4c:	80800017 	ldw	r2,0(r16)
   49c50:	81000517 	ldw	r4,20(r16)
   49c54:	10c7c83a 	sub	r3,r2,r3
   49c58:	1900200e 	bge	r3,r4,49cdc <__swbuf_r+0xe8>
   49c5c:	18c00044 	addi	r3,r3,1
   49c60:	81000217 	ldw	r4,8(r16)
   49c64:	11400044 	addi	r5,r2,1
   49c68:	81400015 	stw	r5,0(r16)
   49c6c:	213fffc4 	addi	r4,r4,-1
   49c70:	81000215 	stw	r4,8(r16)
   49c74:	14c00005 	stb	r19,0(r2)
   49c78:	80800517 	ldw	r2,20(r16)
   49c7c:	10c01e26 	beq	r2,r3,49cf8 <__swbuf_r+0x104>
   49c80:	8080030b 	ldhu	r2,12(r16)
   49c84:	1080004c 	andi	r2,r2,1
   49c88:	10000226 	beq	r2,zero,49c94 <__swbuf_r+0xa0>
   49c8c:	00800284 	movi	r2,10
   49c90:	88801926 	beq	r17,r2,49cf8 <__swbuf_r+0x104>
   49c94:	8805883a 	mov	r2,r17
   49c98:	dfc00417 	ldw	ra,16(sp)
   49c9c:	dcc00317 	ldw	r19,12(sp)
   49ca0:	dc800217 	ldw	r18,8(sp)
   49ca4:	dc400117 	ldw	r17,4(sp)
   49ca8:	dc000017 	ldw	r16,0(sp)
   49cac:	dec00504 	addi	sp,sp,20
   49cb0:	f800283a 	ret
   49cb4:	81401917 	ldw	r5,100(r16)
   49cb8:	00b7ffc4 	movi	r2,-8193
   49cbc:	21080014 	ori	r4,r4,8192
   49cc0:	2884703a 	and	r2,r5,r2
   49cc4:	80801915 	stw	r2,100(r16)
   49cc8:	80800017 	ldw	r2,0(r16)
   49ccc:	8100030d 	sth	r4,12(r16)
   49cd0:	81000517 	ldw	r4,20(r16)
   49cd4:	10c7c83a 	sub	r3,r2,r3
   49cd8:	193fe016 	blt	r3,r4,49c5c <__alt_data_end+0xfffe445c>
   49cdc:	800b883a 	mov	r5,r16
   49ce0:	9009883a 	mov	r4,r18
   49ce4:	00447480 	call	44748 <_fflush_r>
   49ce8:	1000071e 	bne	r2,zero,49d08 <__swbuf_r+0x114>
   49cec:	80800017 	ldw	r2,0(r16)
   49cf0:	00c00044 	movi	r3,1
   49cf4:	003fda06 	br	49c60 <__alt_data_end+0xfffe4460>
   49cf8:	800b883a 	mov	r5,r16
   49cfc:	9009883a 	mov	r4,r18
   49d00:	00447480 	call	44748 <_fflush_r>
   49d04:	103fe326 	beq	r2,zero,49c94 <__alt_data_end+0xfffe4494>
   49d08:	00bfffc4 	movi	r2,-1
   49d0c:	003fe206 	br	49c98 <__alt_data_end+0xfffe4498>
   49d10:	800b883a 	mov	r5,r16
   49d14:	9009883a 	mov	r4,r18
   49d18:	0042b280 	call	42b28 <__swsetup_r>
   49d1c:	103ffa1e 	bne	r2,zero,49d08 <__alt_data_end+0xfffe4508>
   49d20:	8100030b 	ldhu	r4,12(r16)
   49d24:	80c00417 	ldw	r3,16(r16)
   49d28:	003fc506 	br	49c40 <__alt_data_end+0xfffe4440>
   49d2c:	0044b340 	call	44b34 <__sinit>
   49d30:	003fbc06 	br	49c24 <__alt_data_end+0xfffe4424>

00049d34 <__swbuf>:
   49d34:	008001b4 	movhi	r2,6
   49d38:	10aaaf04 	addi	r2,r2,-21828
   49d3c:	280d883a 	mov	r6,r5
   49d40:	200b883a 	mov	r5,r4
   49d44:	11000017 	ldw	r4,0(r2)
   49d48:	0049bf41 	jmpi	49bf4 <__swbuf_r>

00049d4c <_wcrtomb_r>:
   49d4c:	defff604 	addi	sp,sp,-40
   49d50:	008001b4 	movhi	r2,6
   49d54:	dc800815 	stw	r18,32(sp)
   49d58:	dc400715 	stw	r17,28(sp)
   49d5c:	dc000615 	stw	r16,24(sp)
   49d60:	10aab304 	addi	r2,r2,-21812
   49d64:	dfc00915 	stw	ra,36(sp)
   49d68:	2021883a 	mov	r16,r4
   49d6c:	3823883a 	mov	r17,r7
   49d70:	14800017 	ldw	r18,0(r2)
   49d74:	28001426 	beq	r5,zero,49dc8 <_wcrtomb_r+0x7c>
   49d78:	d9400415 	stw	r5,16(sp)
   49d7c:	d9800515 	stw	r6,20(sp)
   49d80:	00451bc0 	call	451bc <__locale_charset>
   49d84:	d9800517 	ldw	r6,20(sp)
   49d88:	d9400417 	ldw	r5,16(sp)
   49d8c:	100f883a 	mov	r7,r2
   49d90:	dc400015 	stw	r17,0(sp)
   49d94:	8009883a 	mov	r4,r16
   49d98:	903ee83a 	callr	r18
   49d9c:	00ffffc4 	movi	r3,-1
   49da0:	10c0031e 	bne	r2,r3,49db0 <_wcrtomb_r+0x64>
   49da4:	88000015 	stw	zero,0(r17)
   49da8:	00c02284 	movi	r3,138
   49dac:	80c00015 	stw	r3,0(r16)
   49db0:	dfc00917 	ldw	ra,36(sp)
   49db4:	dc800817 	ldw	r18,32(sp)
   49db8:	dc400717 	ldw	r17,28(sp)
   49dbc:	dc000617 	ldw	r16,24(sp)
   49dc0:	dec00a04 	addi	sp,sp,40
   49dc4:	f800283a 	ret
   49dc8:	00451bc0 	call	451bc <__locale_charset>
   49dcc:	100f883a 	mov	r7,r2
   49dd0:	dc400015 	stw	r17,0(sp)
   49dd4:	000d883a 	mov	r6,zero
   49dd8:	d9400104 	addi	r5,sp,4
   49ddc:	8009883a 	mov	r4,r16
   49de0:	903ee83a 	callr	r18
   49de4:	003fed06 	br	49d9c <__alt_data_end+0xfffe459c>

00049de8 <wcrtomb>:
   49de8:	defff604 	addi	sp,sp,-40
   49dec:	008001b4 	movhi	r2,6
   49df0:	dc800615 	stw	r18,24(sp)
   49df4:	dc400515 	stw	r17,20(sp)
   49df8:	10aaaf04 	addi	r2,r2,-21828
   49dfc:	dfc00915 	stw	ra,36(sp)
   49e00:	dd000815 	stw	r20,32(sp)
   49e04:	dcc00715 	stw	r19,28(sp)
   49e08:	dc000415 	stw	r16,16(sp)
   49e0c:	3025883a 	mov	r18,r6
   49e10:	14400017 	ldw	r17,0(r2)
   49e14:	20001926 	beq	r4,zero,49e7c <wcrtomb+0x94>
   49e18:	008001b4 	movhi	r2,6
   49e1c:	10aab304 	addi	r2,r2,-21812
   49e20:	15000017 	ldw	r20,0(r2)
   49e24:	2021883a 	mov	r16,r4
   49e28:	2827883a 	mov	r19,r5
   49e2c:	00451bc0 	call	451bc <__locale_charset>
   49e30:	100f883a 	mov	r7,r2
   49e34:	dc800015 	stw	r18,0(sp)
   49e38:	980d883a 	mov	r6,r19
   49e3c:	800b883a 	mov	r5,r16
   49e40:	8809883a 	mov	r4,r17
   49e44:	a03ee83a 	callr	r20
   49e48:	00ffffc4 	movi	r3,-1
   49e4c:	10c0031e 	bne	r2,r3,49e5c <wcrtomb+0x74>
   49e50:	90000015 	stw	zero,0(r18)
   49e54:	00c02284 	movi	r3,138
   49e58:	88c00015 	stw	r3,0(r17)
   49e5c:	dfc00917 	ldw	ra,36(sp)
   49e60:	dd000817 	ldw	r20,32(sp)
   49e64:	dcc00717 	ldw	r19,28(sp)
   49e68:	dc800617 	ldw	r18,24(sp)
   49e6c:	dc400517 	ldw	r17,20(sp)
   49e70:	dc000417 	ldw	r16,16(sp)
   49e74:	dec00a04 	addi	sp,sp,40
   49e78:	f800283a 	ret
   49e7c:	008001b4 	movhi	r2,6
   49e80:	10aab304 	addi	r2,r2,-21812
   49e84:	14000017 	ldw	r16,0(r2)
   49e88:	00451bc0 	call	451bc <__locale_charset>
   49e8c:	100f883a 	mov	r7,r2
   49e90:	dc800015 	stw	r18,0(sp)
   49e94:	000d883a 	mov	r6,zero
   49e98:	d9400104 	addi	r5,sp,4
   49e9c:	8809883a 	mov	r4,r17
   49ea0:	803ee83a 	callr	r16
   49ea4:	003fe806 	br	49e48 <__alt_data_end+0xfffe4648>

00049ea8 <__ascii_wctomb>:
   49ea8:	28000526 	beq	r5,zero,49ec0 <__ascii_wctomb+0x18>
   49eac:	00803fc4 	movi	r2,255
   49eb0:	11800536 	bltu	r2,r6,49ec8 <__ascii_wctomb+0x20>
   49eb4:	29800005 	stb	r6,0(r5)
   49eb8:	00800044 	movi	r2,1
   49ebc:	f800283a 	ret
   49ec0:	0005883a 	mov	r2,zero
   49ec4:	f800283a 	ret
   49ec8:	00802284 	movi	r2,138
   49ecc:	20800015 	stw	r2,0(r4)
   49ed0:	00bfffc4 	movi	r2,-1
   49ed4:	f800283a 	ret

00049ed8 <_wctomb_r>:
   49ed8:	008001b4 	movhi	r2,6
   49edc:	defff904 	addi	sp,sp,-28
   49ee0:	10aab304 	addi	r2,r2,-21812
   49ee4:	dfc00615 	stw	ra,24(sp)
   49ee8:	dc400515 	stw	r17,20(sp)
   49eec:	dc000415 	stw	r16,16(sp)
   49ef0:	3823883a 	mov	r17,r7
   49ef4:	14000017 	ldw	r16,0(r2)
   49ef8:	d9000115 	stw	r4,4(sp)
   49efc:	d9400215 	stw	r5,8(sp)
   49f00:	d9800315 	stw	r6,12(sp)
   49f04:	00451bc0 	call	451bc <__locale_charset>
   49f08:	d9800317 	ldw	r6,12(sp)
   49f0c:	d9400217 	ldw	r5,8(sp)
   49f10:	d9000117 	ldw	r4,4(sp)
   49f14:	100f883a 	mov	r7,r2
   49f18:	dc400015 	stw	r17,0(sp)
   49f1c:	803ee83a 	callr	r16
   49f20:	dfc00617 	ldw	ra,24(sp)
   49f24:	dc400517 	ldw	r17,20(sp)
   49f28:	dc000417 	ldw	r16,16(sp)
   49f2c:	dec00704 	addi	sp,sp,28
   49f30:	f800283a 	ret

00049f34 <__udivdi3>:
   49f34:	defff404 	addi	sp,sp,-48
   49f38:	dcc00515 	stw	r19,20(sp)
   49f3c:	dc000215 	stw	r16,8(sp)
   49f40:	dfc00b15 	stw	ra,44(sp)
   49f44:	df000a15 	stw	fp,40(sp)
   49f48:	ddc00915 	stw	r23,36(sp)
   49f4c:	dd800815 	stw	r22,32(sp)
   49f50:	dd400715 	stw	r21,28(sp)
   49f54:	dd000615 	stw	r20,24(sp)
   49f58:	dc800415 	stw	r18,16(sp)
   49f5c:	dc400315 	stw	r17,12(sp)
   49f60:	2027883a 	mov	r19,r4
   49f64:	2821883a 	mov	r16,r5
   49f68:	3800461e 	bne	r7,zero,4a084 <__udivdi3+0x150>
   49f6c:	3023883a 	mov	r17,r6
   49f70:	2025883a 	mov	r18,r4
   49f74:	2980572e 	bgeu	r5,r6,4a0d4 <__udivdi3+0x1a0>
   49f78:	00bfffd4 	movui	r2,65535
   49f7c:	282d883a 	mov	r22,r5
   49f80:	1180b236 	bltu	r2,r6,4a24c <__udivdi3+0x318>
   49f84:	00803fc4 	movi	r2,255
   49f88:	1185803a 	cmpltu	r2,r2,r6
   49f8c:	100490fa 	slli	r2,r2,3
   49f90:	3086d83a 	srl	r3,r6,r2
   49f94:	010001b4 	movhi	r4,6
   49f98:	21236c04 	addi	r4,r4,-29264
   49f9c:	20c7883a 	add	r3,r4,r3
   49fa0:	18c00003 	ldbu	r3,0(r3)
   49fa4:	1885883a 	add	r2,r3,r2
   49fa8:	00c00804 	movi	r3,32
   49fac:	1887c83a 	sub	r3,r3,r2
   49fb0:	18000526 	beq	r3,zero,49fc8 <__udivdi3+0x94>
   49fb4:	80e0983a 	sll	r16,r16,r3
   49fb8:	9884d83a 	srl	r2,r19,r2
   49fbc:	30e2983a 	sll	r17,r6,r3
   49fc0:	98e4983a 	sll	r18,r19,r3
   49fc4:	142cb03a 	or	r22,r2,r16
   49fc8:	882ad43a 	srli	r21,r17,16
   49fcc:	b009883a 	mov	r4,r22
   49fd0:	8d3fffcc 	andi	r20,r17,65535
   49fd4:	a80b883a 	mov	r5,r21
   49fd8:	004ac500 	call	4ac50 <__umodsi3>
   49fdc:	b009883a 	mov	r4,r22
   49fe0:	a80b883a 	mov	r5,r21
   49fe4:	1027883a 	mov	r19,r2
   49fe8:	004abec0 	call	4abec <__udivsi3>
   49fec:	100b883a 	mov	r5,r2
   49ff0:	a009883a 	mov	r4,r20
   49ff4:	102d883a 	mov	r22,r2
   49ff8:	00406e00 	call	406e0 <__mulsi3>
   49ffc:	9826943a 	slli	r19,r19,16
   4a000:	9006d43a 	srli	r3,r18,16
   4a004:	1cc6b03a 	or	r3,r3,r19
   4a008:	1880052e 	bgeu	r3,r2,4a020 <__udivdi3+0xec>
   4a00c:	1c47883a 	add	r3,r3,r17
   4a010:	b13fffc4 	addi	r4,r22,-1
   4a014:	1c400136 	bltu	r3,r17,4a01c <__udivdi3+0xe8>
   4a018:	18814236 	bltu	r3,r2,4a524 <__udivdi3+0x5f0>
   4a01c:	202d883a 	mov	r22,r4
   4a020:	18a1c83a 	sub	r16,r3,r2
   4a024:	8009883a 	mov	r4,r16
   4a028:	a80b883a 	mov	r5,r21
   4a02c:	004ac500 	call	4ac50 <__umodsi3>
   4a030:	1027883a 	mov	r19,r2
   4a034:	8009883a 	mov	r4,r16
   4a038:	a80b883a 	mov	r5,r21
   4a03c:	9826943a 	slli	r19,r19,16
   4a040:	004abec0 	call	4abec <__udivsi3>
   4a044:	100b883a 	mov	r5,r2
   4a048:	a009883a 	mov	r4,r20
   4a04c:	94bfffcc 	andi	r18,r18,65535
   4a050:	1021883a 	mov	r16,r2
   4a054:	94e4b03a 	or	r18,r18,r19
   4a058:	00406e00 	call	406e0 <__mulsi3>
   4a05c:	9080052e 	bgeu	r18,r2,4a074 <__udivdi3+0x140>
   4a060:	8ca5883a 	add	r18,r17,r18
   4a064:	80ffffc4 	addi	r3,r16,-1
   4a068:	94410c36 	bltu	r18,r17,4a49c <__udivdi3+0x568>
   4a06c:	90810b2e 	bgeu	r18,r2,4a49c <__udivdi3+0x568>
   4a070:	843fff84 	addi	r16,r16,-2
   4a074:	b004943a 	slli	r2,r22,16
   4a078:	0007883a 	mov	r3,zero
   4a07c:	1404b03a 	or	r2,r2,r16
   4a080:	00005e06 	br	4a1fc <__udivdi3+0x2c8>
   4a084:	29c05b36 	bltu	r5,r7,4a1f4 <__udivdi3+0x2c0>
   4a088:	00bfffd4 	movui	r2,65535
   4a08c:	11c0672e 	bgeu	r2,r7,4a22c <__udivdi3+0x2f8>
   4a090:	00804034 	movhi	r2,256
   4a094:	10bfffc4 	addi	r2,r2,-1
   4a098:	11c10a36 	bltu	r2,r7,4a4c4 <__udivdi3+0x590>
   4a09c:	00800404 	movi	r2,16
   4a0a0:	3886d83a 	srl	r3,r7,r2
   4a0a4:	010001b4 	movhi	r4,6
   4a0a8:	21236c04 	addi	r4,r4,-29264
   4a0ac:	20c7883a 	add	r3,r4,r3
   4a0b0:	18c00003 	ldbu	r3,0(r3)
   4a0b4:	05c00804 	movi	r23,32
   4a0b8:	1885883a 	add	r2,r3,r2
   4a0bc:	b8afc83a 	sub	r23,r23,r2
   4a0c0:	b800671e 	bne	r23,zero,4a260 <__udivdi3+0x32c>
   4a0c4:	3c010536 	bltu	r7,r16,4a4dc <__udivdi3+0x5a8>
   4a0c8:	9985403a 	cmpgeu	r2,r19,r6
   4a0cc:	0007883a 	mov	r3,zero
   4a0d0:	00004a06 	br	4a1fc <__udivdi3+0x2c8>
   4a0d4:	3000041e 	bne	r6,zero,4a0e8 <__udivdi3+0x1b4>
   4a0d8:	000b883a 	mov	r5,zero
   4a0dc:	01000044 	movi	r4,1
   4a0e0:	004abec0 	call	4abec <__udivsi3>
   4a0e4:	1023883a 	mov	r17,r2
   4a0e8:	00bfffd4 	movui	r2,65535
   4a0ec:	1440532e 	bgeu	r2,r17,4a23c <__udivdi3+0x308>
   4a0f0:	00804034 	movhi	r2,256
   4a0f4:	10bfffc4 	addi	r2,r2,-1
   4a0f8:	1440f436 	bltu	r2,r17,4a4cc <__udivdi3+0x598>
   4a0fc:	00800404 	movi	r2,16
   4a100:	8886d83a 	srl	r3,r17,r2
   4a104:	010001b4 	movhi	r4,6
   4a108:	21236c04 	addi	r4,r4,-29264
   4a10c:	20c7883a 	add	r3,r4,r3
   4a110:	18c00003 	ldbu	r3,0(r3)
   4a114:	1885883a 	add	r2,r3,r2
   4a118:	00c00804 	movi	r3,32
   4a11c:	1887c83a 	sub	r3,r3,r2
   4a120:	1800a51e 	bne	r3,zero,4a3b8 <__udivdi3+0x484>
   4a124:	882ad43a 	srli	r21,r17,16
   4a128:	8461c83a 	sub	r16,r16,r17
   4a12c:	8d3fffcc 	andi	r20,r17,65535
   4a130:	00c00044 	movi	r3,1
   4a134:	a80b883a 	mov	r5,r21
   4a138:	8009883a 	mov	r4,r16
   4a13c:	d8c00115 	stw	r3,4(sp)
   4a140:	004ac500 	call	4ac50 <__umodsi3>
   4a144:	a80b883a 	mov	r5,r21
   4a148:	8009883a 	mov	r4,r16
   4a14c:	1027883a 	mov	r19,r2
   4a150:	004abec0 	call	4abec <__udivsi3>
   4a154:	a00b883a 	mov	r5,r20
   4a158:	1009883a 	mov	r4,r2
   4a15c:	102d883a 	mov	r22,r2
   4a160:	00406e00 	call	406e0 <__mulsi3>
   4a164:	9826943a 	slli	r19,r19,16
   4a168:	900ed43a 	srli	r7,r18,16
   4a16c:	d8c00117 	ldw	r3,4(sp)
   4a170:	3cceb03a 	or	r7,r7,r19
   4a174:	3880052e 	bgeu	r7,r2,4a18c <__udivdi3+0x258>
   4a178:	3c4f883a 	add	r7,r7,r17
   4a17c:	b13fffc4 	addi	r4,r22,-1
   4a180:	3c400136 	bltu	r7,r17,4a188 <__udivdi3+0x254>
   4a184:	3880e436 	bltu	r7,r2,4a518 <__udivdi3+0x5e4>
   4a188:	202d883a 	mov	r22,r4
   4a18c:	38a1c83a 	sub	r16,r7,r2
   4a190:	8009883a 	mov	r4,r16
   4a194:	a80b883a 	mov	r5,r21
   4a198:	d8c00115 	stw	r3,4(sp)
   4a19c:	004ac500 	call	4ac50 <__umodsi3>
   4a1a0:	1027883a 	mov	r19,r2
   4a1a4:	8009883a 	mov	r4,r16
   4a1a8:	a80b883a 	mov	r5,r21
   4a1ac:	9826943a 	slli	r19,r19,16
   4a1b0:	004abec0 	call	4abec <__udivsi3>
   4a1b4:	a00b883a 	mov	r5,r20
   4a1b8:	1009883a 	mov	r4,r2
   4a1bc:	94bfffcc 	andi	r18,r18,65535
   4a1c0:	1021883a 	mov	r16,r2
   4a1c4:	94e4b03a 	or	r18,r18,r19
   4a1c8:	00406e00 	call	406e0 <__mulsi3>
   4a1cc:	d8c00117 	ldw	r3,4(sp)
   4a1d0:	9080052e 	bgeu	r18,r2,4a1e8 <__udivdi3+0x2b4>
   4a1d4:	8ca5883a 	add	r18,r17,r18
   4a1d8:	813fffc4 	addi	r4,r16,-1
   4a1dc:	9440ad36 	bltu	r18,r17,4a494 <__udivdi3+0x560>
   4a1e0:	9080ac2e 	bgeu	r18,r2,4a494 <__udivdi3+0x560>
   4a1e4:	843fff84 	addi	r16,r16,-2
   4a1e8:	b004943a 	slli	r2,r22,16
   4a1ec:	1404b03a 	or	r2,r2,r16
   4a1f0:	00000206 	br	4a1fc <__udivdi3+0x2c8>
   4a1f4:	0007883a 	mov	r3,zero
   4a1f8:	0005883a 	mov	r2,zero
   4a1fc:	dfc00b17 	ldw	ra,44(sp)
   4a200:	df000a17 	ldw	fp,40(sp)
   4a204:	ddc00917 	ldw	r23,36(sp)
   4a208:	dd800817 	ldw	r22,32(sp)
   4a20c:	dd400717 	ldw	r21,28(sp)
   4a210:	dd000617 	ldw	r20,24(sp)
   4a214:	dcc00517 	ldw	r19,20(sp)
   4a218:	dc800417 	ldw	r18,16(sp)
   4a21c:	dc400317 	ldw	r17,12(sp)
   4a220:	dc000217 	ldw	r16,8(sp)
   4a224:	dec00c04 	addi	sp,sp,48
   4a228:	f800283a 	ret
   4a22c:	00803fc4 	movi	r2,255
   4a230:	11c5803a 	cmpltu	r2,r2,r7
   4a234:	100490fa 	slli	r2,r2,3
   4a238:	003f9906 	br	4a0a0 <__alt_data_end+0xfffe48a0>
   4a23c:	00803fc4 	movi	r2,255
   4a240:	1445803a 	cmpltu	r2,r2,r17
   4a244:	100490fa 	slli	r2,r2,3
   4a248:	003fad06 	br	4a100 <__alt_data_end+0xfffe4900>
   4a24c:	00804034 	movhi	r2,256
   4a250:	10bfffc4 	addi	r2,r2,-1
   4a254:	11809f36 	bltu	r2,r6,4a4d4 <__udivdi3+0x5a0>
   4a258:	00800404 	movi	r2,16
   4a25c:	003f4c06 	br	49f90 <__alt_data_end+0xfffe4790>
   4a260:	3dce983a 	sll	r7,r7,r23
   4a264:	30b8d83a 	srl	fp,r6,r2
   4a268:	80a2d83a 	srl	r17,r16,r2
   4a26c:	35cc983a 	sll	r6,r6,r23
   4a270:	3f38b03a 	or	fp,r7,fp
   4a274:	e024d43a 	srli	r18,fp,16
   4a278:	9884d83a 	srl	r2,r19,r2
   4a27c:	85e0983a 	sll	r16,r16,r23
   4a280:	8809883a 	mov	r4,r17
   4a284:	900b883a 	mov	r5,r18
   4a288:	d9800015 	stw	r6,0(sp)
   4a28c:	1420b03a 	or	r16,r2,r16
   4a290:	004ac500 	call	4ac50 <__umodsi3>
   4a294:	900b883a 	mov	r5,r18
   4a298:	8809883a 	mov	r4,r17
   4a29c:	1029883a 	mov	r20,r2
   4a2a0:	e5bfffcc 	andi	r22,fp,65535
   4a2a4:	004abec0 	call	4abec <__udivsi3>
   4a2a8:	100b883a 	mov	r5,r2
   4a2ac:	b009883a 	mov	r4,r22
   4a2b0:	102b883a 	mov	r21,r2
   4a2b4:	00406e00 	call	406e0 <__mulsi3>
   4a2b8:	a028943a 	slli	r20,r20,16
   4a2bc:	8006d43a 	srli	r3,r16,16
   4a2c0:	1d06b03a 	or	r3,r3,r20
   4a2c4:	1880042e 	bgeu	r3,r2,4a2d8 <__udivdi3+0x3a4>
   4a2c8:	1f07883a 	add	r3,r3,fp
   4a2cc:	a93fffc4 	addi	r4,r21,-1
   4a2d0:	1f00892e 	bgeu	r3,fp,4a4f8 <__udivdi3+0x5c4>
   4a2d4:	202b883a 	mov	r21,r4
   4a2d8:	18a3c83a 	sub	r17,r3,r2
   4a2dc:	8809883a 	mov	r4,r17
   4a2e0:	900b883a 	mov	r5,r18
   4a2e4:	004ac500 	call	4ac50 <__umodsi3>
   4a2e8:	1029883a 	mov	r20,r2
   4a2ec:	8809883a 	mov	r4,r17
   4a2f0:	900b883a 	mov	r5,r18
   4a2f4:	a028943a 	slli	r20,r20,16
   4a2f8:	004abec0 	call	4abec <__udivsi3>
   4a2fc:	100b883a 	mov	r5,r2
   4a300:	b009883a 	mov	r4,r22
   4a304:	843fffcc 	andi	r16,r16,65535
   4a308:	1023883a 	mov	r17,r2
   4a30c:	8520b03a 	or	r16,r16,r20
   4a310:	00406e00 	call	406e0 <__mulsi3>
   4a314:	8080042e 	bgeu	r16,r2,4a328 <__udivdi3+0x3f4>
   4a318:	8721883a 	add	r16,r16,fp
   4a31c:	88ffffc4 	addi	r3,r17,-1
   4a320:	8700712e 	bgeu	r16,fp,4a4e8 <__udivdi3+0x5b4>
   4a324:	1823883a 	mov	r17,r3
   4a328:	a80e943a 	slli	r7,r21,16
   4a32c:	d8c00017 	ldw	r3,0(sp)
   4a330:	80a1c83a 	sub	r16,r16,r2
   4a334:	3c64b03a 	or	r18,r7,r17
   4a338:	1d3fffcc 	andi	r20,r3,65535
   4a33c:	9022d43a 	srli	r17,r18,16
   4a340:	95bfffcc 	andi	r22,r18,65535
   4a344:	a00b883a 	mov	r5,r20
   4a348:	b009883a 	mov	r4,r22
   4a34c:	182ad43a 	srli	r21,r3,16
   4a350:	00406e00 	call	406e0 <__mulsi3>
   4a354:	a00b883a 	mov	r5,r20
   4a358:	8809883a 	mov	r4,r17
   4a35c:	1039883a 	mov	fp,r2
   4a360:	00406e00 	call	406e0 <__mulsi3>
   4a364:	8809883a 	mov	r4,r17
   4a368:	a80b883a 	mov	r5,r21
   4a36c:	1029883a 	mov	r20,r2
   4a370:	00406e00 	call	406e0 <__mulsi3>
   4a374:	a80b883a 	mov	r5,r21
   4a378:	b009883a 	mov	r4,r22
   4a37c:	1023883a 	mov	r17,r2
   4a380:	00406e00 	call	406e0 <__mulsi3>
   4a384:	e006d43a 	srli	r3,fp,16
   4a388:	1505883a 	add	r2,r2,r20
   4a38c:	1887883a 	add	r3,r3,r2
   4a390:	1d00022e 	bgeu	r3,r20,4a39c <__udivdi3+0x468>
   4a394:	00800074 	movhi	r2,1
   4a398:	88a3883a 	add	r17,r17,r2
   4a39c:	1804d43a 	srli	r2,r3,16
   4a3a0:	1463883a 	add	r17,r2,r17
   4a3a4:	84404436 	bltu	r16,r17,4a4b8 <__udivdi3+0x584>
   4a3a8:	84403e26 	beq	r16,r17,4a4a4 <__udivdi3+0x570>
   4a3ac:	9005883a 	mov	r2,r18
   4a3b0:	0007883a 	mov	r3,zero
   4a3b4:	003f9106 	br	4a1fc <__alt_data_end+0xfffe49fc>
   4a3b8:	88e2983a 	sll	r17,r17,r3
   4a3bc:	80aed83a 	srl	r23,r16,r2
   4a3c0:	80e0983a 	sll	r16,r16,r3
   4a3c4:	882ad43a 	srli	r21,r17,16
   4a3c8:	9884d83a 	srl	r2,r19,r2
   4a3cc:	b809883a 	mov	r4,r23
   4a3d0:	a80b883a 	mov	r5,r21
   4a3d4:	98e4983a 	sll	r18,r19,r3
   4a3d8:	142cb03a 	or	r22,r2,r16
   4a3dc:	004ac500 	call	4ac50 <__umodsi3>
   4a3e0:	b809883a 	mov	r4,r23
   4a3e4:	a80b883a 	mov	r5,r21
   4a3e8:	1027883a 	mov	r19,r2
   4a3ec:	8d3fffcc 	andi	r20,r17,65535
   4a3f0:	004abec0 	call	4abec <__udivsi3>
   4a3f4:	a009883a 	mov	r4,r20
   4a3f8:	100b883a 	mov	r5,r2
   4a3fc:	102f883a 	mov	r23,r2
   4a400:	00406e00 	call	406e0 <__mulsi3>
   4a404:	9826943a 	slli	r19,r19,16
   4a408:	b008d43a 	srli	r4,r22,16
   4a40c:	24c8b03a 	or	r4,r4,r19
   4a410:	2080062e 	bgeu	r4,r2,4a42c <__udivdi3+0x4f8>
   4a414:	2449883a 	add	r4,r4,r17
   4a418:	b8ffffc4 	addi	r3,r23,-1
   4a41c:	24403c36 	bltu	r4,r17,4a510 <__udivdi3+0x5dc>
   4a420:	20803b2e 	bgeu	r4,r2,4a510 <__udivdi3+0x5dc>
   4a424:	bdffff84 	addi	r23,r23,-2
   4a428:	2449883a 	add	r4,r4,r17
   4a42c:	20a1c83a 	sub	r16,r4,r2
   4a430:	a80b883a 	mov	r5,r21
   4a434:	8009883a 	mov	r4,r16
   4a438:	004ac500 	call	4ac50 <__umodsi3>
   4a43c:	a80b883a 	mov	r5,r21
   4a440:	8009883a 	mov	r4,r16
   4a444:	1027883a 	mov	r19,r2
   4a448:	004abec0 	call	4abec <__udivsi3>
   4a44c:	a009883a 	mov	r4,r20
   4a450:	100b883a 	mov	r5,r2
   4a454:	9826943a 	slli	r19,r19,16
   4a458:	1039883a 	mov	fp,r2
   4a45c:	00406e00 	call	406e0 <__mulsi3>
   4a460:	b13fffcc 	andi	r4,r22,65535
   4a464:	24c8b03a 	or	r4,r4,r19
   4a468:	2080062e 	bgeu	r4,r2,4a484 <__udivdi3+0x550>
   4a46c:	2449883a 	add	r4,r4,r17
   4a470:	e0ffffc4 	addi	r3,fp,-1
   4a474:	24402436 	bltu	r4,r17,4a508 <__udivdi3+0x5d4>
   4a478:	2080232e 	bgeu	r4,r2,4a508 <__udivdi3+0x5d4>
   4a47c:	e73fff84 	addi	fp,fp,-2
   4a480:	2449883a 	add	r4,r4,r17
   4a484:	b82e943a 	slli	r23,r23,16
   4a488:	20a1c83a 	sub	r16,r4,r2
   4a48c:	bf06b03a 	or	r3,r23,fp
   4a490:	003f2806 	br	4a134 <__alt_data_end+0xfffe4934>
   4a494:	2021883a 	mov	r16,r4
   4a498:	003f5306 	br	4a1e8 <__alt_data_end+0xfffe49e8>
   4a49c:	1821883a 	mov	r16,r3
   4a4a0:	003ef406 	br	4a074 <__alt_data_end+0xfffe4874>
   4a4a4:	1806943a 	slli	r3,r3,16
   4a4a8:	9de6983a 	sll	r19,r19,r23
   4a4ac:	e73fffcc 	andi	fp,fp,65535
   4a4b0:	1f07883a 	add	r3,r3,fp
   4a4b4:	98ffbd2e 	bgeu	r19,r3,4a3ac <__alt_data_end+0xfffe4bac>
   4a4b8:	90bfffc4 	addi	r2,r18,-1
   4a4bc:	0007883a 	mov	r3,zero
   4a4c0:	003f4e06 	br	4a1fc <__alt_data_end+0xfffe49fc>
   4a4c4:	00800604 	movi	r2,24
   4a4c8:	003ef506 	br	4a0a0 <__alt_data_end+0xfffe48a0>
   4a4cc:	00800604 	movi	r2,24
   4a4d0:	003f0b06 	br	4a100 <__alt_data_end+0xfffe4900>
   4a4d4:	00800604 	movi	r2,24
   4a4d8:	003ead06 	br	49f90 <__alt_data_end+0xfffe4790>
   4a4dc:	0007883a 	mov	r3,zero
   4a4e0:	00800044 	movi	r2,1
   4a4e4:	003f4506 	br	4a1fc <__alt_data_end+0xfffe49fc>
   4a4e8:	80bf8e2e 	bgeu	r16,r2,4a324 <__alt_data_end+0xfffe4b24>
   4a4ec:	8c7fff84 	addi	r17,r17,-2
   4a4f0:	8721883a 	add	r16,r16,fp
   4a4f4:	003f8c06 	br	4a328 <__alt_data_end+0xfffe4b28>
   4a4f8:	18bf762e 	bgeu	r3,r2,4a2d4 <__alt_data_end+0xfffe4ad4>
   4a4fc:	ad7fff84 	addi	r21,r21,-2
   4a500:	1f07883a 	add	r3,r3,fp
   4a504:	003f7406 	br	4a2d8 <__alt_data_end+0xfffe4ad8>
   4a508:	1839883a 	mov	fp,r3
   4a50c:	003fdd06 	br	4a484 <__alt_data_end+0xfffe4c84>
   4a510:	182f883a 	mov	r23,r3
   4a514:	003fc506 	br	4a42c <__alt_data_end+0xfffe4c2c>
   4a518:	b5bfff84 	addi	r22,r22,-2
   4a51c:	3c4f883a 	add	r7,r7,r17
   4a520:	003f1a06 	br	4a18c <__alt_data_end+0xfffe498c>
   4a524:	b5bfff84 	addi	r22,r22,-2
   4a528:	1c47883a 	add	r3,r3,r17
   4a52c:	003ebc06 	br	4a020 <__alt_data_end+0xfffe4820>

0004a530 <__umoddi3>:
   4a530:	defff304 	addi	sp,sp,-52
   4a534:	df000b15 	stw	fp,44(sp)
   4a538:	dc400415 	stw	r17,16(sp)
   4a53c:	dc000315 	stw	r16,12(sp)
   4a540:	dfc00c15 	stw	ra,48(sp)
   4a544:	ddc00a15 	stw	r23,40(sp)
   4a548:	dd800915 	stw	r22,36(sp)
   4a54c:	dd400815 	stw	r21,32(sp)
   4a550:	dd000715 	stw	r20,28(sp)
   4a554:	dcc00615 	stw	r19,24(sp)
   4a558:	dc800515 	stw	r18,20(sp)
   4a55c:	2021883a 	mov	r16,r4
   4a560:	2823883a 	mov	r17,r5
   4a564:	2839883a 	mov	fp,r5
   4a568:	3800401e 	bne	r7,zero,4a66c <__umoddi3+0x13c>
   4a56c:	3027883a 	mov	r19,r6
   4a570:	2029883a 	mov	r20,r4
   4a574:	2980552e 	bgeu	r5,r6,4a6cc <__umoddi3+0x19c>
   4a578:	00bfffd4 	movui	r2,65535
   4a57c:	1180a236 	bltu	r2,r6,4a808 <__umoddi3+0x2d8>
   4a580:	01003fc4 	movi	r4,255
   4a584:	2189803a 	cmpltu	r4,r4,r6
   4a588:	200890fa 	slli	r4,r4,3
   4a58c:	3104d83a 	srl	r2,r6,r4
   4a590:	00c001b4 	movhi	r3,6
   4a594:	18e36c04 	addi	r3,r3,-29264
   4a598:	1885883a 	add	r2,r3,r2
   4a59c:	10c00003 	ldbu	r3,0(r2)
   4a5a0:	00800804 	movi	r2,32
   4a5a4:	1909883a 	add	r4,r3,r4
   4a5a8:	1125c83a 	sub	r18,r2,r4
   4a5ac:	90000526 	beq	r18,zero,4a5c4 <__umoddi3+0x94>
   4a5b0:	8ca2983a 	sll	r17,r17,r18
   4a5b4:	8108d83a 	srl	r4,r16,r4
   4a5b8:	34a6983a 	sll	r19,r6,r18
   4a5bc:	84a8983a 	sll	r20,r16,r18
   4a5c0:	2478b03a 	or	fp,r4,r17
   4a5c4:	982cd43a 	srli	r22,r19,16
   4a5c8:	e009883a 	mov	r4,fp
   4a5cc:	9dffffcc 	andi	r23,r19,65535
   4a5d0:	b00b883a 	mov	r5,r22
   4a5d4:	004ac500 	call	4ac50 <__umodsi3>
   4a5d8:	b00b883a 	mov	r5,r22
   4a5dc:	e009883a 	mov	r4,fp
   4a5e0:	102b883a 	mov	r21,r2
   4a5e4:	004abec0 	call	4abec <__udivsi3>
   4a5e8:	100b883a 	mov	r5,r2
   4a5ec:	b809883a 	mov	r4,r23
   4a5f0:	00406e00 	call	406e0 <__mulsi3>
   4a5f4:	a82a943a 	slli	r21,r21,16
   4a5f8:	a006d43a 	srli	r3,r20,16
   4a5fc:	1d46b03a 	or	r3,r3,r21
   4a600:	1880032e 	bgeu	r3,r2,4a610 <__umoddi3+0xe0>
   4a604:	1cc7883a 	add	r3,r3,r19
   4a608:	1cc00136 	bltu	r3,r19,4a610 <__umoddi3+0xe0>
   4a60c:	18813136 	bltu	r3,r2,4aad4 <__umoddi3+0x5a4>
   4a610:	18a1c83a 	sub	r16,r3,r2
   4a614:	b00b883a 	mov	r5,r22
   4a618:	8009883a 	mov	r4,r16
   4a61c:	004ac500 	call	4ac50 <__umodsi3>
   4a620:	b00b883a 	mov	r5,r22
   4a624:	8009883a 	mov	r4,r16
   4a628:	1023883a 	mov	r17,r2
   4a62c:	004abec0 	call	4abec <__udivsi3>
   4a630:	100b883a 	mov	r5,r2
   4a634:	b809883a 	mov	r4,r23
   4a638:	8822943a 	slli	r17,r17,16
   4a63c:	00406e00 	call	406e0 <__mulsi3>
   4a640:	a0ffffcc 	andi	r3,r20,65535
   4a644:	1c46b03a 	or	r3,r3,r17
   4a648:	1880042e 	bgeu	r3,r2,4a65c <__umoddi3+0x12c>
   4a64c:	1cc7883a 	add	r3,r3,r19
   4a650:	1cc00236 	bltu	r3,r19,4a65c <__umoddi3+0x12c>
   4a654:	1880012e 	bgeu	r3,r2,4a65c <__umoddi3+0x12c>
   4a658:	1cc7883a 	add	r3,r3,r19
   4a65c:	1885c83a 	sub	r2,r3,r2
   4a660:	1484d83a 	srl	r2,r2,r18
   4a664:	0007883a 	mov	r3,zero
   4a668:	00005306 	br	4a7b8 <__umoddi3+0x288>
   4a66c:	29c05036 	bltu	r5,r7,4a7b0 <__umoddi3+0x280>
   4a670:	00bfffd4 	movui	r2,65535
   4a674:	11c05c2e 	bgeu	r2,r7,4a7e8 <__umoddi3+0x2b8>
   4a678:	00804034 	movhi	r2,256
   4a67c:	10bfffc4 	addi	r2,r2,-1
   4a680:	11c10636 	bltu	r2,r7,4aa9c <__umoddi3+0x56c>
   4a684:	01000404 	movi	r4,16
   4a688:	3904d83a 	srl	r2,r7,r4
   4a68c:	00c001b4 	movhi	r3,6
   4a690:	18e36c04 	addi	r3,r3,-29264
   4a694:	1885883a 	add	r2,r3,r2
   4a698:	14c00003 	ldbu	r19,0(r2)
   4a69c:	00c00804 	movi	r3,32
   4a6a0:	9927883a 	add	r19,r19,r4
   4a6a4:	1ce9c83a 	sub	r20,r3,r19
   4a6a8:	a0005c1e 	bne	r20,zero,4a81c <__umoddi3+0x2ec>
   4a6ac:	3c400136 	bltu	r7,r17,4a6b4 <__umoddi3+0x184>
   4a6b0:	81810a36 	bltu	r16,r6,4aadc <__umoddi3+0x5ac>
   4a6b4:	8185c83a 	sub	r2,r16,r6
   4a6b8:	89e3c83a 	sub	r17,r17,r7
   4a6bc:	8089803a 	cmpltu	r4,r16,r2
   4a6c0:	8939c83a 	sub	fp,r17,r4
   4a6c4:	e007883a 	mov	r3,fp
   4a6c8:	00003b06 	br	4a7b8 <__umoddi3+0x288>
   4a6cc:	3000041e 	bne	r6,zero,4a6e0 <__umoddi3+0x1b0>
   4a6d0:	000b883a 	mov	r5,zero
   4a6d4:	01000044 	movi	r4,1
   4a6d8:	004abec0 	call	4abec <__udivsi3>
   4a6dc:	1027883a 	mov	r19,r2
   4a6e0:	00bfffd4 	movui	r2,65535
   4a6e4:	14c0442e 	bgeu	r2,r19,4a7f8 <__umoddi3+0x2c8>
   4a6e8:	00804034 	movhi	r2,256
   4a6ec:	10bfffc4 	addi	r2,r2,-1
   4a6f0:	14c0ec36 	bltu	r2,r19,4aaa4 <__umoddi3+0x574>
   4a6f4:	00800404 	movi	r2,16
   4a6f8:	9886d83a 	srl	r3,r19,r2
   4a6fc:	010001b4 	movhi	r4,6
   4a700:	21236c04 	addi	r4,r4,-29264
   4a704:	20c7883a 	add	r3,r4,r3
   4a708:	18c00003 	ldbu	r3,0(r3)
   4a70c:	1887883a 	add	r3,r3,r2
   4a710:	00800804 	movi	r2,32
   4a714:	10e5c83a 	sub	r18,r2,r3
   4a718:	9000ab1e 	bne	r18,zero,4a9c8 <__umoddi3+0x498>
   4a71c:	982cd43a 	srli	r22,r19,16
   4a720:	8ce3c83a 	sub	r17,r17,r19
   4a724:	9dffffcc 	andi	r23,r19,65535
   4a728:	b00b883a 	mov	r5,r22
   4a72c:	8809883a 	mov	r4,r17
   4a730:	004ac500 	call	4ac50 <__umodsi3>
   4a734:	b00b883a 	mov	r5,r22
   4a738:	8809883a 	mov	r4,r17
   4a73c:	102b883a 	mov	r21,r2
   4a740:	004abec0 	call	4abec <__udivsi3>
   4a744:	b80b883a 	mov	r5,r23
   4a748:	1009883a 	mov	r4,r2
   4a74c:	00406e00 	call	406e0 <__mulsi3>
   4a750:	a82a943a 	slli	r21,r21,16
   4a754:	a006d43a 	srli	r3,r20,16
   4a758:	1d46b03a 	or	r3,r3,r21
   4a75c:	1880042e 	bgeu	r3,r2,4a770 <__umoddi3+0x240>
   4a760:	1cc7883a 	add	r3,r3,r19
   4a764:	1cc00236 	bltu	r3,r19,4a770 <__umoddi3+0x240>
   4a768:	1880012e 	bgeu	r3,r2,4a770 <__umoddi3+0x240>
   4a76c:	1cc7883a 	add	r3,r3,r19
   4a770:	18a1c83a 	sub	r16,r3,r2
   4a774:	b00b883a 	mov	r5,r22
   4a778:	8009883a 	mov	r4,r16
   4a77c:	004ac500 	call	4ac50 <__umodsi3>
   4a780:	1023883a 	mov	r17,r2
   4a784:	b00b883a 	mov	r5,r22
   4a788:	8009883a 	mov	r4,r16
   4a78c:	004abec0 	call	4abec <__udivsi3>
   4a790:	8822943a 	slli	r17,r17,16
   4a794:	b80b883a 	mov	r5,r23
   4a798:	1009883a 	mov	r4,r2
   4a79c:	00406e00 	call	406e0 <__mulsi3>
   4a7a0:	a53fffcc 	andi	r20,r20,65535
   4a7a4:	a446b03a 	or	r3,r20,r17
   4a7a8:	18bfac2e 	bgeu	r3,r2,4a65c <__alt_data_end+0xfffe4e5c>
   4a7ac:	003fa706 	br	4a64c <__alt_data_end+0xfffe4e4c>
   4a7b0:	2005883a 	mov	r2,r4
   4a7b4:	2807883a 	mov	r3,r5
   4a7b8:	dfc00c17 	ldw	ra,48(sp)
   4a7bc:	df000b17 	ldw	fp,44(sp)
   4a7c0:	ddc00a17 	ldw	r23,40(sp)
   4a7c4:	dd800917 	ldw	r22,36(sp)
   4a7c8:	dd400817 	ldw	r21,32(sp)
   4a7cc:	dd000717 	ldw	r20,28(sp)
   4a7d0:	dcc00617 	ldw	r19,24(sp)
   4a7d4:	dc800517 	ldw	r18,20(sp)
   4a7d8:	dc400417 	ldw	r17,16(sp)
   4a7dc:	dc000317 	ldw	r16,12(sp)
   4a7e0:	dec00d04 	addi	sp,sp,52
   4a7e4:	f800283a 	ret
   4a7e8:	04c03fc4 	movi	r19,255
   4a7ec:	99c9803a 	cmpltu	r4,r19,r7
   4a7f0:	200890fa 	slli	r4,r4,3
   4a7f4:	003fa406 	br	4a688 <__alt_data_end+0xfffe4e88>
   4a7f8:	00803fc4 	movi	r2,255
   4a7fc:	14c5803a 	cmpltu	r2,r2,r19
   4a800:	100490fa 	slli	r2,r2,3
   4a804:	003fbc06 	br	4a6f8 <__alt_data_end+0xfffe4ef8>
   4a808:	00804034 	movhi	r2,256
   4a80c:	10bfffc4 	addi	r2,r2,-1
   4a810:	1180a636 	bltu	r2,r6,4aaac <__umoddi3+0x57c>
   4a814:	01000404 	movi	r4,16
   4a818:	003f5c06 	br	4a58c <__alt_data_end+0xfffe4d8c>
   4a81c:	3d0e983a 	sll	r7,r7,r20
   4a820:	34ead83a 	srl	r21,r6,r19
   4a824:	8cc6d83a 	srl	r3,r17,r19
   4a828:	8d10983a 	sll	r8,r17,r20
   4a82c:	3d6ab03a 	or	r21,r7,r21
   4a830:	a82cd43a 	srli	r22,r21,16
   4a834:	84e2d83a 	srl	r17,r16,r19
   4a838:	1809883a 	mov	r4,r3
   4a83c:	b00b883a 	mov	r5,r22
   4a840:	8a22b03a 	or	r17,r17,r8
   4a844:	3524983a 	sll	r18,r6,r20
   4a848:	dc400015 	stw	r17,0(sp)
   4a84c:	d8c00115 	stw	r3,4(sp)
   4a850:	004ac500 	call	4ac50 <__umodsi3>
   4a854:	d8c00117 	ldw	r3,4(sp)
   4a858:	b00b883a 	mov	r5,r22
   4a85c:	1039883a 	mov	fp,r2
   4a860:	1809883a 	mov	r4,r3
   4a864:	004abec0 	call	4abec <__udivsi3>
   4a868:	adffffcc 	andi	r23,r21,65535
   4a86c:	100b883a 	mov	r5,r2
   4a870:	b809883a 	mov	r4,r23
   4a874:	1023883a 	mov	r17,r2
   4a878:	00406e00 	call	406e0 <__mulsi3>
   4a87c:	d9400017 	ldw	r5,0(sp)
   4a880:	e008943a 	slli	r4,fp,16
   4a884:	8520983a 	sll	r16,r16,r20
   4a888:	2806d43a 	srli	r3,r5,16
   4a88c:	1906b03a 	or	r3,r3,r4
   4a890:	1880042e 	bgeu	r3,r2,4a8a4 <__umoddi3+0x374>
   4a894:	1d47883a 	add	r3,r3,r21
   4a898:	893fffc4 	addi	r4,r17,-1
   4a89c:	1d40892e 	bgeu	r3,r21,4aac4 <__umoddi3+0x594>
   4a8a0:	2023883a 	mov	r17,r4
   4a8a4:	18b9c83a 	sub	fp,r3,r2
   4a8a8:	b00b883a 	mov	r5,r22
   4a8ac:	e009883a 	mov	r4,fp
   4a8b0:	004ac500 	call	4ac50 <__umodsi3>
   4a8b4:	b00b883a 	mov	r5,r22
   4a8b8:	e009883a 	mov	r4,fp
   4a8bc:	d8800215 	stw	r2,8(sp)
   4a8c0:	004abec0 	call	4abec <__udivsi3>
   4a8c4:	100b883a 	mov	r5,r2
   4a8c8:	b809883a 	mov	r4,r23
   4a8cc:	102d883a 	mov	r22,r2
   4a8d0:	00406e00 	call	406e0 <__mulsi3>
   4a8d4:	d9800217 	ldw	r6,8(sp)
   4a8d8:	d8c00017 	ldw	r3,0(sp)
   4a8dc:	300c943a 	slli	r6,r6,16
   4a8e0:	1a3fffcc 	andi	r8,r3,65535
   4a8e4:	4190b03a 	or	r8,r8,r6
   4a8e8:	4080042e 	bgeu	r8,r2,4a8fc <__umoddi3+0x3cc>
   4a8ec:	4551883a 	add	r8,r8,r21
   4a8f0:	b0ffffc4 	addi	r3,r22,-1
   4a8f4:	45406f2e 	bgeu	r8,r21,4aab4 <__umoddi3+0x584>
   4a8f8:	182d883a 	mov	r22,r3
   4a8fc:	880e943a 	slli	r7,r17,16
   4a900:	9006d43a 	srli	r3,r18,16
   4a904:	91bfffcc 	andi	r6,r18,65535
   4a908:	3dacb03a 	or	r22,r7,r22
   4a90c:	b02ed43a 	srli	r23,r22,16
   4a910:	b5bfffcc 	andi	r22,r22,65535
   4a914:	300b883a 	mov	r5,r6
   4a918:	b009883a 	mov	r4,r22
   4a91c:	40a3c83a 	sub	r17,r8,r2
   4a920:	d8c00115 	stw	r3,4(sp)
   4a924:	d9800215 	stw	r6,8(sp)
   4a928:	00406e00 	call	406e0 <__mulsi3>
   4a92c:	d9800217 	ldw	r6,8(sp)
   4a930:	b809883a 	mov	r4,r23
   4a934:	1039883a 	mov	fp,r2
   4a938:	300b883a 	mov	r5,r6
   4a93c:	00406e00 	call	406e0 <__mulsi3>
   4a940:	d8c00117 	ldw	r3,4(sp)
   4a944:	b809883a 	mov	r4,r23
   4a948:	d8800215 	stw	r2,8(sp)
   4a94c:	180b883a 	mov	r5,r3
   4a950:	00406e00 	call	406e0 <__mulsi3>
   4a954:	d8c00117 	ldw	r3,4(sp)
   4a958:	b009883a 	mov	r4,r22
   4a95c:	102f883a 	mov	r23,r2
   4a960:	180b883a 	mov	r5,r3
   4a964:	00406e00 	call	406e0 <__mulsi3>
   4a968:	d9800217 	ldw	r6,8(sp)
   4a96c:	e006d43a 	srli	r3,fp,16
   4a970:	1185883a 	add	r2,r2,r6
   4a974:	1885883a 	add	r2,r3,r2
   4a978:	1180022e 	bgeu	r2,r6,4a984 <__umoddi3+0x454>
   4a97c:	00c00074 	movhi	r3,1
   4a980:	b8ef883a 	add	r23,r23,r3
   4a984:	1006d43a 	srli	r3,r2,16
   4a988:	1004943a 	slli	r2,r2,16
   4a98c:	e73fffcc 	andi	fp,fp,65535
   4a990:	1dc7883a 	add	r3,r3,r23
   4a994:	1739883a 	add	fp,r2,fp
   4a998:	88c03a36 	bltu	r17,r3,4aa84 <__umoddi3+0x554>
   4a99c:	88c05126 	beq	r17,r3,4aae4 <__umoddi3+0x5b4>
   4a9a0:	88c9c83a 	sub	r4,r17,r3
   4a9a4:	e00f883a 	mov	r7,fp
   4a9a8:	81cfc83a 	sub	r7,r16,r7
   4a9ac:	81c7803a 	cmpltu	r3,r16,r7
   4a9b0:	20c7c83a 	sub	r3,r4,r3
   4a9b4:	1cc4983a 	sll	r2,r3,r19
   4a9b8:	3d0ed83a 	srl	r7,r7,r20
   4a9bc:	1d06d83a 	srl	r3,r3,r20
   4a9c0:	11c4b03a 	or	r2,r2,r7
   4a9c4:	003f7c06 	br	4a7b8 <__alt_data_end+0xfffe4fb8>
   4a9c8:	9ca6983a 	sll	r19,r19,r18
   4a9cc:	88f8d83a 	srl	fp,r17,r3
   4a9d0:	80c4d83a 	srl	r2,r16,r3
   4a9d4:	982cd43a 	srli	r22,r19,16
   4a9d8:	8ca2983a 	sll	r17,r17,r18
   4a9dc:	e009883a 	mov	r4,fp
   4a9e0:	b00b883a 	mov	r5,r22
   4a9e4:	146ab03a 	or	r21,r2,r17
   4a9e8:	004ac500 	call	4ac50 <__umodsi3>
   4a9ec:	b00b883a 	mov	r5,r22
   4a9f0:	e009883a 	mov	r4,fp
   4a9f4:	1029883a 	mov	r20,r2
   4a9f8:	9dffffcc 	andi	r23,r19,65535
   4a9fc:	004abec0 	call	4abec <__udivsi3>
   4aa00:	b809883a 	mov	r4,r23
   4aa04:	100b883a 	mov	r5,r2
   4aa08:	00406e00 	call	406e0 <__mulsi3>
   4aa0c:	a008943a 	slli	r4,r20,16
   4aa10:	a806d43a 	srli	r3,r21,16
   4aa14:	84a8983a 	sll	r20,r16,r18
   4aa18:	1906b03a 	or	r3,r3,r4
   4aa1c:	1880042e 	bgeu	r3,r2,4aa30 <__umoddi3+0x500>
   4aa20:	1cc7883a 	add	r3,r3,r19
   4aa24:	1cc00236 	bltu	r3,r19,4aa30 <__umoddi3+0x500>
   4aa28:	1880012e 	bgeu	r3,r2,4aa30 <__umoddi3+0x500>
   4aa2c:	1cc7883a 	add	r3,r3,r19
   4aa30:	18a3c83a 	sub	r17,r3,r2
   4aa34:	b00b883a 	mov	r5,r22
   4aa38:	8809883a 	mov	r4,r17
   4aa3c:	004ac500 	call	4ac50 <__umodsi3>
   4aa40:	b00b883a 	mov	r5,r22
   4aa44:	8809883a 	mov	r4,r17
   4aa48:	1021883a 	mov	r16,r2
   4aa4c:	004abec0 	call	4abec <__udivsi3>
   4aa50:	100b883a 	mov	r5,r2
   4aa54:	b809883a 	mov	r4,r23
   4aa58:	8020943a 	slli	r16,r16,16
   4aa5c:	00406e00 	call	406e0 <__mulsi3>
   4aa60:	a8ffffcc 	andi	r3,r21,65535
   4aa64:	1c06b03a 	or	r3,r3,r16
   4aa68:	1880042e 	bgeu	r3,r2,4aa7c <__umoddi3+0x54c>
   4aa6c:	1cc7883a 	add	r3,r3,r19
   4aa70:	1cc00236 	bltu	r3,r19,4aa7c <__umoddi3+0x54c>
   4aa74:	1880012e 	bgeu	r3,r2,4aa7c <__umoddi3+0x54c>
   4aa78:	1cc7883a 	add	r3,r3,r19
   4aa7c:	18a3c83a 	sub	r17,r3,r2
   4aa80:	003f2906 	br	4a728 <__alt_data_end+0xfffe4f28>
   4aa84:	e48fc83a 	sub	r7,fp,r18
   4aa88:	1d49c83a 	sub	r4,r3,r21
   4aa8c:	e1f9803a 	cmpltu	fp,fp,r7
   4aa90:	2739c83a 	sub	fp,r4,fp
   4aa94:	8f09c83a 	sub	r4,r17,fp
   4aa98:	003fc306 	br	4a9a8 <__alt_data_end+0xfffe51a8>
   4aa9c:	01000604 	movi	r4,24
   4aaa0:	003ef906 	br	4a688 <__alt_data_end+0xfffe4e88>
   4aaa4:	00800604 	movi	r2,24
   4aaa8:	003f1306 	br	4a6f8 <__alt_data_end+0xfffe4ef8>
   4aaac:	01000604 	movi	r4,24
   4aab0:	003eb606 	br	4a58c <__alt_data_end+0xfffe4d8c>
   4aab4:	40bf902e 	bgeu	r8,r2,4a8f8 <__alt_data_end+0xfffe50f8>
   4aab8:	b5bfff84 	addi	r22,r22,-2
   4aabc:	4551883a 	add	r8,r8,r21
   4aac0:	003f8e06 	br	4a8fc <__alt_data_end+0xfffe50fc>
   4aac4:	18bf762e 	bgeu	r3,r2,4a8a0 <__alt_data_end+0xfffe50a0>
   4aac8:	8c7fff84 	addi	r17,r17,-2
   4aacc:	1d47883a 	add	r3,r3,r21
   4aad0:	003f7406 	br	4a8a4 <__alt_data_end+0xfffe50a4>
   4aad4:	1cc7883a 	add	r3,r3,r19
   4aad8:	003ecd06 	br	4a610 <__alt_data_end+0xfffe4e10>
   4aadc:	8005883a 	mov	r2,r16
   4aae0:	003ef806 	br	4a6c4 <__alt_data_end+0xfffe4ec4>
   4aae4:	873fe736 	bltu	r16,fp,4aa84 <__alt_data_end+0xfffe5284>
   4aae8:	e00f883a 	mov	r7,fp
   4aaec:	0009883a 	mov	r4,zero
   4aaf0:	003fad06 	br	4a9a8 <__alt_data_end+0xfffe51a8>

0004aaf4 <__divsi3>:
   4aaf4:	20001b16 	blt	r4,zero,4ab64 <__divsi3+0x70>
   4aaf8:	000f883a 	mov	r7,zero
   4aafc:	28001616 	blt	r5,zero,4ab58 <__divsi3+0x64>
   4ab00:	200d883a 	mov	r6,r4
   4ab04:	29001a2e 	bgeu	r5,r4,4ab70 <__divsi3+0x7c>
   4ab08:	00800804 	movi	r2,32
   4ab0c:	00c00044 	movi	r3,1
   4ab10:	00000106 	br	4ab18 <__divsi3+0x24>
   4ab14:	10000d26 	beq	r2,zero,4ab4c <__divsi3+0x58>
   4ab18:	294b883a 	add	r5,r5,r5
   4ab1c:	10bfffc4 	addi	r2,r2,-1
   4ab20:	18c7883a 	add	r3,r3,r3
   4ab24:	293ffb36 	bltu	r5,r4,4ab14 <__alt_data_end+0xfffe5314>
   4ab28:	0005883a 	mov	r2,zero
   4ab2c:	18000726 	beq	r3,zero,4ab4c <__divsi3+0x58>
   4ab30:	0005883a 	mov	r2,zero
   4ab34:	31400236 	bltu	r6,r5,4ab40 <__divsi3+0x4c>
   4ab38:	314dc83a 	sub	r6,r6,r5
   4ab3c:	10c4b03a 	or	r2,r2,r3
   4ab40:	1806d07a 	srli	r3,r3,1
   4ab44:	280ad07a 	srli	r5,r5,1
   4ab48:	183ffa1e 	bne	r3,zero,4ab34 <__alt_data_end+0xfffe5334>
   4ab4c:	38000126 	beq	r7,zero,4ab54 <__divsi3+0x60>
   4ab50:	0085c83a 	sub	r2,zero,r2
   4ab54:	f800283a 	ret
   4ab58:	014bc83a 	sub	r5,zero,r5
   4ab5c:	39c0005c 	xori	r7,r7,1
   4ab60:	003fe706 	br	4ab00 <__alt_data_end+0xfffe5300>
   4ab64:	0109c83a 	sub	r4,zero,r4
   4ab68:	01c00044 	movi	r7,1
   4ab6c:	003fe306 	br	4aafc <__alt_data_end+0xfffe52fc>
   4ab70:	00c00044 	movi	r3,1
   4ab74:	003fee06 	br	4ab30 <__alt_data_end+0xfffe5330>

0004ab78 <__modsi3>:
   4ab78:	20001716 	blt	r4,zero,4abd8 <__modsi3+0x60>
   4ab7c:	000f883a 	mov	r7,zero
   4ab80:	2005883a 	mov	r2,r4
   4ab84:	28001216 	blt	r5,zero,4abd0 <__modsi3+0x58>
   4ab88:	2900162e 	bgeu	r5,r4,4abe4 <__modsi3+0x6c>
   4ab8c:	01800804 	movi	r6,32
   4ab90:	00c00044 	movi	r3,1
   4ab94:	00000106 	br	4ab9c <__modsi3+0x24>
   4ab98:	30000a26 	beq	r6,zero,4abc4 <__modsi3+0x4c>
   4ab9c:	294b883a 	add	r5,r5,r5
   4aba0:	31bfffc4 	addi	r6,r6,-1
   4aba4:	18c7883a 	add	r3,r3,r3
   4aba8:	293ffb36 	bltu	r5,r4,4ab98 <__alt_data_end+0xfffe5398>
   4abac:	18000526 	beq	r3,zero,4abc4 <__modsi3+0x4c>
   4abb0:	1806d07a 	srli	r3,r3,1
   4abb4:	11400136 	bltu	r2,r5,4abbc <__modsi3+0x44>
   4abb8:	1145c83a 	sub	r2,r2,r5
   4abbc:	280ad07a 	srli	r5,r5,1
   4abc0:	183ffb1e 	bne	r3,zero,4abb0 <__alt_data_end+0xfffe53b0>
   4abc4:	38000126 	beq	r7,zero,4abcc <__modsi3+0x54>
   4abc8:	0085c83a 	sub	r2,zero,r2
   4abcc:	f800283a 	ret
   4abd0:	014bc83a 	sub	r5,zero,r5
   4abd4:	003fec06 	br	4ab88 <__alt_data_end+0xfffe5388>
   4abd8:	0109c83a 	sub	r4,zero,r4
   4abdc:	01c00044 	movi	r7,1
   4abe0:	003fe706 	br	4ab80 <__alt_data_end+0xfffe5380>
   4abe4:	00c00044 	movi	r3,1
   4abe8:	003ff106 	br	4abb0 <__alt_data_end+0xfffe53b0>

0004abec <__udivsi3>:
   4abec:	200d883a 	mov	r6,r4
   4abf0:	2900152e 	bgeu	r5,r4,4ac48 <__udivsi3+0x5c>
   4abf4:	28001416 	blt	r5,zero,4ac48 <__udivsi3+0x5c>
   4abf8:	00800804 	movi	r2,32
   4abfc:	00c00044 	movi	r3,1
   4ac00:	00000206 	br	4ac0c <__udivsi3+0x20>
   4ac04:	10000e26 	beq	r2,zero,4ac40 <__udivsi3+0x54>
   4ac08:	28000516 	blt	r5,zero,4ac20 <__udivsi3+0x34>
   4ac0c:	294b883a 	add	r5,r5,r5
   4ac10:	10bfffc4 	addi	r2,r2,-1
   4ac14:	18c7883a 	add	r3,r3,r3
   4ac18:	293ffa36 	bltu	r5,r4,4ac04 <__alt_data_end+0xfffe5404>
   4ac1c:	18000826 	beq	r3,zero,4ac40 <__udivsi3+0x54>
   4ac20:	0005883a 	mov	r2,zero
   4ac24:	31400236 	bltu	r6,r5,4ac30 <__udivsi3+0x44>
   4ac28:	314dc83a 	sub	r6,r6,r5
   4ac2c:	10c4b03a 	or	r2,r2,r3
   4ac30:	1806d07a 	srli	r3,r3,1
   4ac34:	280ad07a 	srli	r5,r5,1
   4ac38:	183ffa1e 	bne	r3,zero,4ac24 <__alt_data_end+0xfffe5424>
   4ac3c:	f800283a 	ret
   4ac40:	0005883a 	mov	r2,zero
   4ac44:	f800283a 	ret
   4ac48:	00c00044 	movi	r3,1
   4ac4c:	003ff406 	br	4ac20 <__alt_data_end+0xfffe5420>

0004ac50 <__umodsi3>:
   4ac50:	2005883a 	mov	r2,r4
   4ac54:	2900122e 	bgeu	r5,r4,4aca0 <__umodsi3+0x50>
   4ac58:	28001116 	blt	r5,zero,4aca0 <__umodsi3+0x50>
   4ac5c:	01800804 	movi	r6,32
   4ac60:	00c00044 	movi	r3,1
   4ac64:	00000206 	br	4ac70 <__umodsi3+0x20>
   4ac68:	30000c26 	beq	r6,zero,4ac9c <__umodsi3+0x4c>
   4ac6c:	28000516 	blt	r5,zero,4ac84 <__umodsi3+0x34>
   4ac70:	294b883a 	add	r5,r5,r5
   4ac74:	31bfffc4 	addi	r6,r6,-1
   4ac78:	18c7883a 	add	r3,r3,r3
   4ac7c:	293ffa36 	bltu	r5,r4,4ac68 <__alt_data_end+0xfffe5468>
   4ac80:	18000626 	beq	r3,zero,4ac9c <__umodsi3+0x4c>
   4ac84:	1806d07a 	srli	r3,r3,1
   4ac88:	11400136 	bltu	r2,r5,4ac90 <__umodsi3+0x40>
   4ac8c:	1145c83a 	sub	r2,r2,r5
   4ac90:	280ad07a 	srli	r5,r5,1
   4ac94:	183ffb1e 	bne	r3,zero,4ac84 <__alt_data_end+0xfffe5484>
   4ac98:	f800283a 	ret
   4ac9c:	f800283a 	ret
   4aca0:	00c00044 	movi	r3,1
   4aca4:	003ff706 	br	4ac84 <__alt_data_end+0xfffe5484>

0004aca8 <__adddf3>:
   4aca8:	02c00434 	movhi	r11,16
   4acac:	5affffc4 	addi	r11,r11,-1
   4acb0:	2806d7fa 	srli	r3,r5,31
   4acb4:	2ad4703a 	and	r10,r5,r11
   4acb8:	3ad2703a 	and	r9,r7,r11
   4acbc:	3804d53a 	srli	r2,r7,20
   4acc0:	3018d77a 	srli	r12,r6,29
   4acc4:	280ad53a 	srli	r5,r5,20
   4acc8:	501490fa 	slli	r10,r10,3
   4accc:	2010d77a 	srli	r8,r4,29
   4acd0:	481290fa 	slli	r9,r9,3
   4acd4:	380ed7fa 	srli	r7,r7,31
   4acd8:	defffb04 	addi	sp,sp,-20
   4acdc:	dc800215 	stw	r18,8(sp)
   4ace0:	dc400115 	stw	r17,4(sp)
   4ace4:	dc000015 	stw	r16,0(sp)
   4ace8:	dfc00415 	stw	ra,16(sp)
   4acec:	dcc00315 	stw	r19,12(sp)
   4acf0:	1c803fcc 	andi	r18,r3,255
   4acf4:	2c01ffcc 	andi	r16,r5,2047
   4acf8:	5210b03a 	or	r8,r10,r8
   4acfc:	202290fa 	slli	r17,r4,3
   4ad00:	1081ffcc 	andi	r2,r2,2047
   4ad04:	4b12b03a 	or	r9,r9,r12
   4ad08:	300c90fa 	slli	r6,r6,3
   4ad0c:	91c07526 	beq	r18,r7,4aee4 <__adddf3+0x23c>
   4ad10:	8087c83a 	sub	r3,r16,r2
   4ad14:	00c0ab0e 	bge	zero,r3,4afc4 <__adddf3+0x31c>
   4ad18:	10002a1e 	bne	r2,zero,4adc4 <__adddf3+0x11c>
   4ad1c:	4984b03a 	or	r2,r9,r6
   4ad20:	1000961e 	bne	r2,zero,4af7c <__adddf3+0x2d4>
   4ad24:	888001cc 	andi	r2,r17,7
   4ad28:	10000726 	beq	r2,zero,4ad48 <__adddf3+0xa0>
   4ad2c:	888003cc 	andi	r2,r17,15
   4ad30:	00c00104 	movi	r3,4
   4ad34:	10c00426 	beq	r2,r3,4ad48 <__adddf3+0xa0>
   4ad38:	88c7883a 	add	r3,r17,r3
   4ad3c:	1c63803a 	cmpltu	r17,r3,r17
   4ad40:	4451883a 	add	r8,r8,r17
   4ad44:	1823883a 	mov	r17,r3
   4ad48:	4080202c 	andhi	r2,r8,128
   4ad4c:	10005926 	beq	r2,zero,4aeb4 <__adddf3+0x20c>
   4ad50:	84000044 	addi	r16,r16,1
   4ad54:	0081ffc4 	movi	r2,2047
   4ad58:	8080ba26 	beq	r16,r2,4b044 <__adddf3+0x39c>
   4ad5c:	00bfe034 	movhi	r2,65408
   4ad60:	10bfffc4 	addi	r2,r2,-1
   4ad64:	4090703a 	and	r8,r8,r2
   4ad68:	4004977a 	slli	r2,r8,29
   4ad6c:	4010927a 	slli	r8,r8,9
   4ad70:	8822d0fa 	srli	r17,r17,3
   4ad74:	8401ffcc 	andi	r16,r16,2047
   4ad78:	4010d33a 	srli	r8,r8,12
   4ad7c:	9007883a 	mov	r3,r18
   4ad80:	1444b03a 	or	r2,r2,r17
   4ad84:	8401ffcc 	andi	r16,r16,2047
   4ad88:	8020953a 	slli	r16,r16,20
   4ad8c:	18c03fcc 	andi	r3,r3,255
   4ad90:	01000434 	movhi	r4,16
   4ad94:	213fffc4 	addi	r4,r4,-1
   4ad98:	180697fa 	slli	r3,r3,31
   4ad9c:	4110703a 	and	r8,r8,r4
   4ada0:	4410b03a 	or	r8,r8,r16
   4ada4:	40c6b03a 	or	r3,r8,r3
   4ada8:	dfc00417 	ldw	ra,16(sp)
   4adac:	dcc00317 	ldw	r19,12(sp)
   4adb0:	dc800217 	ldw	r18,8(sp)
   4adb4:	dc400117 	ldw	r17,4(sp)
   4adb8:	dc000017 	ldw	r16,0(sp)
   4adbc:	dec00504 	addi	sp,sp,20
   4adc0:	f800283a 	ret
   4adc4:	0081ffc4 	movi	r2,2047
   4adc8:	80bfd626 	beq	r16,r2,4ad24 <__alt_data_end+0xfffe5524>
   4adcc:	4a402034 	orhi	r9,r9,128
   4add0:	00800e04 	movi	r2,56
   4add4:	10c09f16 	blt	r2,r3,4b054 <__adddf3+0x3ac>
   4add8:	008007c4 	movi	r2,31
   4addc:	10c0c216 	blt	r2,r3,4b0e8 <__adddf3+0x440>
   4ade0:	00800804 	movi	r2,32
   4ade4:	10c5c83a 	sub	r2,r2,r3
   4ade8:	488a983a 	sll	r5,r9,r2
   4adec:	30c8d83a 	srl	r4,r6,r3
   4adf0:	3084983a 	sll	r2,r6,r2
   4adf4:	48c6d83a 	srl	r3,r9,r3
   4adf8:	290cb03a 	or	r6,r5,r4
   4adfc:	1004c03a 	cmpne	r2,r2,zero
   4ae00:	308cb03a 	or	r6,r6,r2
   4ae04:	898dc83a 	sub	r6,r17,r6
   4ae08:	89a3803a 	cmpltu	r17,r17,r6
   4ae0c:	40d1c83a 	sub	r8,r8,r3
   4ae10:	4451c83a 	sub	r8,r8,r17
   4ae14:	3023883a 	mov	r17,r6
   4ae18:	4080202c 	andhi	r2,r8,128
   4ae1c:	10002326 	beq	r2,zero,4aeac <__adddf3+0x204>
   4ae20:	04c02034 	movhi	r19,128
   4ae24:	9cffffc4 	addi	r19,r19,-1
   4ae28:	44e6703a 	and	r19,r8,r19
   4ae2c:	98007626 	beq	r19,zero,4b008 <__adddf3+0x360>
   4ae30:	9809883a 	mov	r4,r19
   4ae34:	004d4e80 	call	4d4e8 <__clzsi2>
   4ae38:	10fffe04 	addi	r3,r2,-8
   4ae3c:	010007c4 	movi	r4,31
   4ae40:	20c07716 	blt	r4,r3,4b020 <__adddf3+0x378>
   4ae44:	00800804 	movi	r2,32
   4ae48:	10c5c83a 	sub	r2,r2,r3
   4ae4c:	8884d83a 	srl	r2,r17,r2
   4ae50:	98d0983a 	sll	r8,r19,r3
   4ae54:	88e2983a 	sll	r17,r17,r3
   4ae58:	1204b03a 	or	r2,r2,r8
   4ae5c:	1c007416 	blt	r3,r16,4b030 <__adddf3+0x388>
   4ae60:	1c21c83a 	sub	r16,r3,r16
   4ae64:	82000044 	addi	r8,r16,1
   4ae68:	00c007c4 	movi	r3,31
   4ae6c:	1a009116 	blt	r3,r8,4b0b4 <__adddf3+0x40c>
   4ae70:	00c00804 	movi	r3,32
   4ae74:	1a07c83a 	sub	r3,r3,r8
   4ae78:	8a08d83a 	srl	r4,r17,r8
   4ae7c:	88e2983a 	sll	r17,r17,r3
   4ae80:	10c6983a 	sll	r3,r2,r3
   4ae84:	1210d83a 	srl	r8,r2,r8
   4ae88:	8804c03a 	cmpne	r2,r17,zero
   4ae8c:	1906b03a 	or	r3,r3,r4
   4ae90:	18a2b03a 	or	r17,r3,r2
   4ae94:	0021883a 	mov	r16,zero
   4ae98:	003fa206 	br	4ad24 <__alt_data_end+0xfffe5524>
   4ae9c:	1890b03a 	or	r8,r3,r2
   4aea0:	40017d26 	beq	r8,zero,4b498 <__adddf3+0x7f0>
   4aea4:	1011883a 	mov	r8,r2
   4aea8:	1823883a 	mov	r17,r3
   4aeac:	888001cc 	andi	r2,r17,7
   4aeb0:	103f9e1e 	bne	r2,zero,4ad2c <__alt_data_end+0xfffe552c>
   4aeb4:	4004977a 	slli	r2,r8,29
   4aeb8:	8822d0fa 	srli	r17,r17,3
   4aebc:	4010d0fa 	srli	r8,r8,3
   4aec0:	9007883a 	mov	r3,r18
   4aec4:	1444b03a 	or	r2,r2,r17
   4aec8:	0101ffc4 	movi	r4,2047
   4aecc:	81002426 	beq	r16,r4,4af60 <__adddf3+0x2b8>
   4aed0:	8120703a 	and	r16,r16,r4
   4aed4:	01000434 	movhi	r4,16
   4aed8:	213fffc4 	addi	r4,r4,-1
   4aedc:	4110703a 	and	r8,r8,r4
   4aee0:	003fa806 	br	4ad84 <__alt_data_end+0xfffe5584>
   4aee4:	8089c83a 	sub	r4,r16,r2
   4aee8:	01005e0e 	bge	zero,r4,4b064 <__adddf3+0x3bc>
   4aeec:	10002b26 	beq	r2,zero,4af9c <__adddf3+0x2f4>
   4aef0:	0081ffc4 	movi	r2,2047
   4aef4:	80bf8b26 	beq	r16,r2,4ad24 <__alt_data_end+0xfffe5524>
   4aef8:	4a402034 	orhi	r9,r9,128
   4aefc:	00800e04 	movi	r2,56
   4af00:	1100a40e 	bge	r2,r4,4b194 <__adddf3+0x4ec>
   4af04:	498cb03a 	or	r6,r9,r6
   4af08:	300ac03a 	cmpne	r5,r6,zero
   4af0c:	0013883a 	mov	r9,zero
   4af10:	2c4b883a 	add	r5,r5,r17
   4af14:	2c63803a 	cmpltu	r17,r5,r17
   4af18:	4a11883a 	add	r8,r9,r8
   4af1c:	8a11883a 	add	r8,r17,r8
   4af20:	2823883a 	mov	r17,r5
   4af24:	4080202c 	andhi	r2,r8,128
   4af28:	103fe026 	beq	r2,zero,4aeac <__alt_data_end+0xfffe56ac>
   4af2c:	84000044 	addi	r16,r16,1
   4af30:	0081ffc4 	movi	r2,2047
   4af34:	8080d226 	beq	r16,r2,4b280 <__adddf3+0x5d8>
   4af38:	00bfe034 	movhi	r2,65408
   4af3c:	10bfffc4 	addi	r2,r2,-1
   4af40:	4090703a 	and	r8,r8,r2
   4af44:	880ad07a 	srli	r5,r17,1
   4af48:	400897fa 	slli	r4,r8,31
   4af4c:	88c0004c 	andi	r3,r17,1
   4af50:	28e2b03a 	or	r17,r5,r3
   4af54:	4010d07a 	srli	r8,r8,1
   4af58:	2462b03a 	or	r17,r4,r17
   4af5c:	003f7106 	br	4ad24 <__alt_data_end+0xfffe5524>
   4af60:	4088b03a 	or	r4,r8,r2
   4af64:	20014526 	beq	r4,zero,4b47c <__adddf3+0x7d4>
   4af68:	01000434 	movhi	r4,16
   4af6c:	42000234 	orhi	r8,r8,8
   4af70:	213fffc4 	addi	r4,r4,-1
   4af74:	4110703a 	and	r8,r8,r4
   4af78:	003f8206 	br	4ad84 <__alt_data_end+0xfffe5584>
   4af7c:	18ffffc4 	addi	r3,r3,-1
   4af80:	1800491e 	bne	r3,zero,4b0a8 <__adddf3+0x400>
   4af84:	898bc83a 	sub	r5,r17,r6
   4af88:	8963803a 	cmpltu	r17,r17,r5
   4af8c:	4251c83a 	sub	r8,r8,r9
   4af90:	4451c83a 	sub	r8,r8,r17
   4af94:	2823883a 	mov	r17,r5
   4af98:	003f9f06 	br	4ae18 <__alt_data_end+0xfffe5618>
   4af9c:	4984b03a 	or	r2,r9,r6
   4afa0:	103f6026 	beq	r2,zero,4ad24 <__alt_data_end+0xfffe5524>
   4afa4:	213fffc4 	addi	r4,r4,-1
   4afa8:	2000931e 	bne	r4,zero,4b1f8 <__adddf3+0x550>
   4afac:	898d883a 	add	r6,r17,r6
   4afb0:	3463803a 	cmpltu	r17,r6,r17
   4afb4:	4251883a 	add	r8,r8,r9
   4afb8:	8a11883a 	add	r8,r17,r8
   4afbc:	3023883a 	mov	r17,r6
   4afc0:	003fd806 	br	4af24 <__alt_data_end+0xfffe5724>
   4afc4:	1800541e 	bne	r3,zero,4b118 <__adddf3+0x470>
   4afc8:	80800044 	addi	r2,r16,1
   4afcc:	1081ffcc 	andi	r2,r2,2047
   4afd0:	00c00044 	movi	r3,1
   4afd4:	1880a00e 	bge	r3,r2,4b258 <__adddf3+0x5b0>
   4afd8:	8989c83a 	sub	r4,r17,r6
   4afdc:	8905803a 	cmpltu	r2,r17,r4
   4afe0:	4267c83a 	sub	r19,r8,r9
   4afe4:	98a7c83a 	sub	r19,r19,r2
   4afe8:	9880202c 	andhi	r2,r19,128
   4afec:	10006326 	beq	r2,zero,4b17c <__adddf3+0x4d4>
   4aff0:	3463c83a 	sub	r17,r6,r17
   4aff4:	4a07c83a 	sub	r3,r9,r8
   4aff8:	344d803a 	cmpltu	r6,r6,r17
   4affc:	19a7c83a 	sub	r19,r3,r6
   4b000:	3825883a 	mov	r18,r7
   4b004:	983f8a1e 	bne	r19,zero,4ae30 <__alt_data_end+0xfffe5630>
   4b008:	8809883a 	mov	r4,r17
   4b00c:	004d4e80 	call	4d4e8 <__clzsi2>
   4b010:	10800804 	addi	r2,r2,32
   4b014:	10fffe04 	addi	r3,r2,-8
   4b018:	010007c4 	movi	r4,31
   4b01c:	20ff890e 	bge	r4,r3,4ae44 <__alt_data_end+0xfffe5644>
   4b020:	10bff604 	addi	r2,r2,-40
   4b024:	8884983a 	sll	r2,r17,r2
   4b028:	0023883a 	mov	r17,zero
   4b02c:	1c3f8c0e 	bge	r3,r16,4ae60 <__alt_data_end+0xfffe5660>
   4b030:	023fe034 	movhi	r8,65408
   4b034:	423fffc4 	addi	r8,r8,-1
   4b038:	80e1c83a 	sub	r16,r16,r3
   4b03c:	1210703a 	and	r8,r2,r8
   4b040:	003f3806 	br	4ad24 <__alt_data_end+0xfffe5524>
   4b044:	9007883a 	mov	r3,r18
   4b048:	0011883a 	mov	r8,zero
   4b04c:	0005883a 	mov	r2,zero
   4b050:	003f4c06 	br	4ad84 <__alt_data_end+0xfffe5584>
   4b054:	498cb03a 	or	r6,r9,r6
   4b058:	300cc03a 	cmpne	r6,r6,zero
   4b05c:	0007883a 	mov	r3,zero
   4b060:	003f6806 	br	4ae04 <__alt_data_end+0xfffe5604>
   4b064:	20009c1e 	bne	r4,zero,4b2d8 <__adddf3+0x630>
   4b068:	80800044 	addi	r2,r16,1
   4b06c:	1141ffcc 	andi	r5,r2,2047
   4b070:	01000044 	movi	r4,1
   4b074:	2140670e 	bge	r4,r5,4b214 <__adddf3+0x56c>
   4b078:	0101ffc4 	movi	r4,2047
   4b07c:	11007f26 	beq	r2,r4,4b27c <__adddf3+0x5d4>
   4b080:	898d883a 	add	r6,r17,r6
   4b084:	4247883a 	add	r3,r8,r9
   4b088:	3451803a 	cmpltu	r8,r6,r17
   4b08c:	40d1883a 	add	r8,r8,r3
   4b090:	402297fa 	slli	r17,r8,31
   4b094:	300cd07a 	srli	r6,r6,1
   4b098:	4010d07a 	srli	r8,r8,1
   4b09c:	1021883a 	mov	r16,r2
   4b0a0:	89a2b03a 	or	r17,r17,r6
   4b0a4:	003f1f06 	br	4ad24 <__alt_data_end+0xfffe5524>
   4b0a8:	0081ffc4 	movi	r2,2047
   4b0ac:	80bf481e 	bne	r16,r2,4add0 <__alt_data_end+0xfffe55d0>
   4b0b0:	003f1c06 	br	4ad24 <__alt_data_end+0xfffe5524>
   4b0b4:	843ff844 	addi	r16,r16,-31
   4b0b8:	01000804 	movi	r4,32
   4b0bc:	1406d83a 	srl	r3,r2,r16
   4b0c0:	41005026 	beq	r8,r4,4b204 <__adddf3+0x55c>
   4b0c4:	01001004 	movi	r4,64
   4b0c8:	2211c83a 	sub	r8,r4,r8
   4b0cc:	1204983a 	sll	r2,r2,r8
   4b0d0:	88a2b03a 	or	r17,r17,r2
   4b0d4:	8822c03a 	cmpne	r17,r17,zero
   4b0d8:	1c62b03a 	or	r17,r3,r17
   4b0dc:	0011883a 	mov	r8,zero
   4b0e0:	0021883a 	mov	r16,zero
   4b0e4:	003f7106 	br	4aeac <__alt_data_end+0xfffe56ac>
   4b0e8:	193ff804 	addi	r4,r3,-32
   4b0ec:	00800804 	movi	r2,32
   4b0f0:	4908d83a 	srl	r4,r9,r4
   4b0f4:	18804526 	beq	r3,r2,4b20c <__adddf3+0x564>
   4b0f8:	00801004 	movi	r2,64
   4b0fc:	10c5c83a 	sub	r2,r2,r3
   4b100:	4886983a 	sll	r3,r9,r2
   4b104:	198cb03a 	or	r6,r3,r6
   4b108:	300cc03a 	cmpne	r6,r6,zero
   4b10c:	218cb03a 	or	r6,r4,r6
   4b110:	0007883a 	mov	r3,zero
   4b114:	003f3b06 	br	4ae04 <__alt_data_end+0xfffe5604>
   4b118:	80002a26 	beq	r16,zero,4b1c4 <__adddf3+0x51c>
   4b11c:	0101ffc4 	movi	r4,2047
   4b120:	11006826 	beq	r2,r4,4b2c4 <__adddf3+0x61c>
   4b124:	00c7c83a 	sub	r3,zero,r3
   4b128:	42002034 	orhi	r8,r8,128
   4b12c:	01000e04 	movi	r4,56
   4b130:	20c07c16 	blt	r4,r3,4b324 <__adddf3+0x67c>
   4b134:	010007c4 	movi	r4,31
   4b138:	20c0da16 	blt	r4,r3,4b4a4 <__adddf3+0x7fc>
   4b13c:	01000804 	movi	r4,32
   4b140:	20c9c83a 	sub	r4,r4,r3
   4b144:	4114983a 	sll	r10,r8,r4
   4b148:	88cad83a 	srl	r5,r17,r3
   4b14c:	8908983a 	sll	r4,r17,r4
   4b150:	40c6d83a 	srl	r3,r8,r3
   4b154:	5162b03a 	or	r17,r10,r5
   4b158:	2008c03a 	cmpne	r4,r4,zero
   4b15c:	8922b03a 	or	r17,r17,r4
   4b160:	3463c83a 	sub	r17,r6,r17
   4b164:	48c7c83a 	sub	r3,r9,r3
   4b168:	344d803a 	cmpltu	r6,r6,r17
   4b16c:	1991c83a 	sub	r8,r3,r6
   4b170:	1021883a 	mov	r16,r2
   4b174:	3825883a 	mov	r18,r7
   4b178:	003f2706 	br	4ae18 <__alt_data_end+0xfffe5618>
   4b17c:	24d0b03a 	or	r8,r4,r19
   4b180:	40001b1e 	bne	r8,zero,4b1f0 <__adddf3+0x548>
   4b184:	0005883a 	mov	r2,zero
   4b188:	0007883a 	mov	r3,zero
   4b18c:	0021883a 	mov	r16,zero
   4b190:	003f4d06 	br	4aec8 <__alt_data_end+0xfffe56c8>
   4b194:	008007c4 	movi	r2,31
   4b198:	11003c16 	blt	r2,r4,4b28c <__adddf3+0x5e4>
   4b19c:	00800804 	movi	r2,32
   4b1a0:	1105c83a 	sub	r2,r2,r4
   4b1a4:	488e983a 	sll	r7,r9,r2
   4b1a8:	310ad83a 	srl	r5,r6,r4
   4b1ac:	3084983a 	sll	r2,r6,r2
   4b1b0:	4912d83a 	srl	r9,r9,r4
   4b1b4:	394ab03a 	or	r5,r7,r5
   4b1b8:	1004c03a 	cmpne	r2,r2,zero
   4b1bc:	288ab03a 	or	r5,r5,r2
   4b1c0:	003f5306 	br	4af10 <__alt_data_end+0xfffe5710>
   4b1c4:	4448b03a 	or	r4,r8,r17
   4b1c8:	20003e26 	beq	r4,zero,4b2c4 <__adddf3+0x61c>
   4b1cc:	00c6303a 	nor	r3,zero,r3
   4b1d0:	18003a1e 	bne	r3,zero,4b2bc <__adddf3+0x614>
   4b1d4:	3463c83a 	sub	r17,r6,r17
   4b1d8:	4a07c83a 	sub	r3,r9,r8
   4b1dc:	344d803a 	cmpltu	r6,r6,r17
   4b1e0:	1991c83a 	sub	r8,r3,r6
   4b1e4:	1021883a 	mov	r16,r2
   4b1e8:	3825883a 	mov	r18,r7
   4b1ec:	003f0a06 	br	4ae18 <__alt_data_end+0xfffe5618>
   4b1f0:	2023883a 	mov	r17,r4
   4b1f4:	003f0d06 	br	4ae2c <__alt_data_end+0xfffe562c>
   4b1f8:	0081ffc4 	movi	r2,2047
   4b1fc:	80bf3f1e 	bne	r16,r2,4aefc <__alt_data_end+0xfffe56fc>
   4b200:	003ec806 	br	4ad24 <__alt_data_end+0xfffe5524>
   4b204:	0005883a 	mov	r2,zero
   4b208:	003fb106 	br	4b0d0 <__alt_data_end+0xfffe58d0>
   4b20c:	0007883a 	mov	r3,zero
   4b210:	003fbc06 	br	4b104 <__alt_data_end+0xfffe5904>
   4b214:	4444b03a 	or	r2,r8,r17
   4b218:	8000871e 	bne	r16,zero,4b438 <__adddf3+0x790>
   4b21c:	1000ba26 	beq	r2,zero,4b508 <__adddf3+0x860>
   4b220:	4984b03a 	or	r2,r9,r6
   4b224:	103ebf26 	beq	r2,zero,4ad24 <__alt_data_end+0xfffe5524>
   4b228:	8985883a 	add	r2,r17,r6
   4b22c:	4247883a 	add	r3,r8,r9
   4b230:	1451803a 	cmpltu	r8,r2,r17
   4b234:	40d1883a 	add	r8,r8,r3
   4b238:	40c0202c 	andhi	r3,r8,128
   4b23c:	1023883a 	mov	r17,r2
   4b240:	183f1a26 	beq	r3,zero,4aeac <__alt_data_end+0xfffe56ac>
   4b244:	00bfe034 	movhi	r2,65408
   4b248:	10bfffc4 	addi	r2,r2,-1
   4b24c:	2021883a 	mov	r16,r4
   4b250:	4090703a 	and	r8,r8,r2
   4b254:	003eb306 	br	4ad24 <__alt_data_end+0xfffe5524>
   4b258:	4444b03a 	or	r2,r8,r17
   4b25c:	8000291e 	bne	r16,zero,4b304 <__adddf3+0x65c>
   4b260:	10004b1e 	bne	r2,zero,4b390 <__adddf3+0x6e8>
   4b264:	4990b03a 	or	r8,r9,r6
   4b268:	40008b26 	beq	r8,zero,4b498 <__adddf3+0x7f0>
   4b26c:	4811883a 	mov	r8,r9
   4b270:	3023883a 	mov	r17,r6
   4b274:	3825883a 	mov	r18,r7
   4b278:	003eaa06 	br	4ad24 <__alt_data_end+0xfffe5524>
   4b27c:	1021883a 	mov	r16,r2
   4b280:	0011883a 	mov	r8,zero
   4b284:	0005883a 	mov	r2,zero
   4b288:	003f0f06 	br	4aec8 <__alt_data_end+0xfffe56c8>
   4b28c:	217ff804 	addi	r5,r4,-32
   4b290:	00800804 	movi	r2,32
   4b294:	494ad83a 	srl	r5,r9,r5
   4b298:	20807d26 	beq	r4,r2,4b490 <__adddf3+0x7e8>
   4b29c:	00801004 	movi	r2,64
   4b2a0:	1109c83a 	sub	r4,r2,r4
   4b2a4:	4912983a 	sll	r9,r9,r4
   4b2a8:	498cb03a 	or	r6,r9,r6
   4b2ac:	300cc03a 	cmpne	r6,r6,zero
   4b2b0:	298ab03a 	or	r5,r5,r6
   4b2b4:	0013883a 	mov	r9,zero
   4b2b8:	003f1506 	br	4af10 <__alt_data_end+0xfffe5710>
   4b2bc:	0101ffc4 	movi	r4,2047
   4b2c0:	113f9a1e 	bne	r2,r4,4b12c <__alt_data_end+0xfffe592c>
   4b2c4:	4811883a 	mov	r8,r9
   4b2c8:	3023883a 	mov	r17,r6
   4b2cc:	1021883a 	mov	r16,r2
   4b2d0:	3825883a 	mov	r18,r7
   4b2d4:	003e9306 	br	4ad24 <__alt_data_end+0xfffe5524>
   4b2d8:	8000161e 	bne	r16,zero,4b334 <__adddf3+0x68c>
   4b2dc:	444ab03a 	or	r5,r8,r17
   4b2e0:	28005126 	beq	r5,zero,4b428 <__adddf3+0x780>
   4b2e4:	0108303a 	nor	r4,zero,r4
   4b2e8:	20004d1e 	bne	r4,zero,4b420 <__adddf3+0x778>
   4b2ec:	89a3883a 	add	r17,r17,r6
   4b2f0:	4253883a 	add	r9,r8,r9
   4b2f4:	898d803a 	cmpltu	r6,r17,r6
   4b2f8:	3251883a 	add	r8,r6,r9
   4b2fc:	1021883a 	mov	r16,r2
   4b300:	003f0806 	br	4af24 <__alt_data_end+0xfffe5724>
   4b304:	1000301e 	bne	r2,zero,4b3c8 <__adddf3+0x720>
   4b308:	4984b03a 	or	r2,r9,r6
   4b30c:	10007126 	beq	r2,zero,4b4d4 <__adddf3+0x82c>
   4b310:	4811883a 	mov	r8,r9
   4b314:	3023883a 	mov	r17,r6
   4b318:	3825883a 	mov	r18,r7
   4b31c:	0401ffc4 	movi	r16,2047
   4b320:	003e8006 	br	4ad24 <__alt_data_end+0xfffe5524>
   4b324:	4462b03a 	or	r17,r8,r17
   4b328:	8822c03a 	cmpne	r17,r17,zero
   4b32c:	0007883a 	mov	r3,zero
   4b330:	003f8b06 	br	4b160 <__alt_data_end+0xfffe5960>
   4b334:	0141ffc4 	movi	r5,2047
   4b338:	11403b26 	beq	r2,r5,4b428 <__adddf3+0x780>
   4b33c:	0109c83a 	sub	r4,zero,r4
   4b340:	42002034 	orhi	r8,r8,128
   4b344:	01400e04 	movi	r5,56
   4b348:	29006716 	blt	r5,r4,4b4e8 <__adddf3+0x840>
   4b34c:	014007c4 	movi	r5,31
   4b350:	29007016 	blt	r5,r4,4b514 <__adddf3+0x86c>
   4b354:	01400804 	movi	r5,32
   4b358:	290bc83a 	sub	r5,r5,r4
   4b35c:	4154983a 	sll	r10,r8,r5
   4b360:	890ed83a 	srl	r7,r17,r4
   4b364:	894a983a 	sll	r5,r17,r5
   4b368:	4108d83a 	srl	r4,r8,r4
   4b36c:	51e2b03a 	or	r17,r10,r7
   4b370:	280ac03a 	cmpne	r5,r5,zero
   4b374:	8962b03a 	or	r17,r17,r5
   4b378:	89a3883a 	add	r17,r17,r6
   4b37c:	2253883a 	add	r9,r4,r9
   4b380:	898d803a 	cmpltu	r6,r17,r6
   4b384:	3251883a 	add	r8,r6,r9
   4b388:	1021883a 	mov	r16,r2
   4b38c:	003ee506 	br	4af24 <__alt_data_end+0xfffe5724>
   4b390:	4984b03a 	or	r2,r9,r6
   4b394:	103e6326 	beq	r2,zero,4ad24 <__alt_data_end+0xfffe5524>
   4b398:	8987c83a 	sub	r3,r17,r6
   4b39c:	88c9803a 	cmpltu	r4,r17,r3
   4b3a0:	4245c83a 	sub	r2,r8,r9
   4b3a4:	1105c83a 	sub	r2,r2,r4
   4b3a8:	1100202c 	andhi	r4,r2,128
   4b3ac:	203ebb26 	beq	r4,zero,4ae9c <__alt_data_end+0xfffe569c>
   4b3b0:	3463c83a 	sub	r17,r6,r17
   4b3b4:	4a07c83a 	sub	r3,r9,r8
   4b3b8:	344d803a 	cmpltu	r6,r6,r17
   4b3bc:	1991c83a 	sub	r8,r3,r6
   4b3c0:	3825883a 	mov	r18,r7
   4b3c4:	003e5706 	br	4ad24 <__alt_data_end+0xfffe5524>
   4b3c8:	4984b03a 	or	r2,r9,r6
   4b3cc:	10002e26 	beq	r2,zero,4b488 <__adddf3+0x7e0>
   4b3d0:	4004d0fa 	srli	r2,r8,3
   4b3d4:	8822d0fa 	srli	r17,r17,3
   4b3d8:	4010977a 	slli	r8,r8,29
   4b3dc:	10c0022c 	andhi	r3,r2,8
   4b3e0:	4462b03a 	or	r17,r8,r17
   4b3e4:	18000826 	beq	r3,zero,4b408 <__adddf3+0x760>
   4b3e8:	4808d0fa 	srli	r4,r9,3
   4b3ec:	20c0022c 	andhi	r3,r4,8
   4b3f0:	1800051e 	bne	r3,zero,4b408 <__adddf3+0x760>
   4b3f4:	300cd0fa 	srli	r6,r6,3
   4b3f8:	4806977a 	slli	r3,r9,29
   4b3fc:	2005883a 	mov	r2,r4
   4b400:	3825883a 	mov	r18,r7
   4b404:	19a2b03a 	or	r17,r3,r6
   4b408:	8810d77a 	srli	r8,r17,29
   4b40c:	100490fa 	slli	r2,r2,3
   4b410:	882290fa 	slli	r17,r17,3
   4b414:	0401ffc4 	movi	r16,2047
   4b418:	4090b03a 	or	r8,r8,r2
   4b41c:	003e4106 	br	4ad24 <__alt_data_end+0xfffe5524>
   4b420:	0141ffc4 	movi	r5,2047
   4b424:	117fc71e 	bne	r2,r5,4b344 <__alt_data_end+0xfffe5b44>
   4b428:	4811883a 	mov	r8,r9
   4b42c:	3023883a 	mov	r17,r6
   4b430:	1021883a 	mov	r16,r2
   4b434:	003e3b06 	br	4ad24 <__alt_data_end+0xfffe5524>
   4b438:	10002f26 	beq	r2,zero,4b4f8 <__adddf3+0x850>
   4b43c:	4984b03a 	or	r2,r9,r6
   4b440:	10001126 	beq	r2,zero,4b488 <__adddf3+0x7e0>
   4b444:	4004d0fa 	srli	r2,r8,3
   4b448:	8822d0fa 	srli	r17,r17,3
   4b44c:	4010977a 	slli	r8,r8,29
   4b450:	10c0022c 	andhi	r3,r2,8
   4b454:	4462b03a 	or	r17,r8,r17
   4b458:	183feb26 	beq	r3,zero,4b408 <__alt_data_end+0xfffe5c08>
   4b45c:	4808d0fa 	srli	r4,r9,3
   4b460:	20c0022c 	andhi	r3,r4,8
   4b464:	183fe81e 	bne	r3,zero,4b408 <__alt_data_end+0xfffe5c08>
   4b468:	300cd0fa 	srli	r6,r6,3
   4b46c:	4806977a 	slli	r3,r9,29
   4b470:	2005883a 	mov	r2,r4
   4b474:	19a2b03a 	or	r17,r3,r6
   4b478:	003fe306 	br	4b408 <__alt_data_end+0xfffe5c08>
   4b47c:	0011883a 	mov	r8,zero
   4b480:	0005883a 	mov	r2,zero
   4b484:	003e3f06 	br	4ad84 <__alt_data_end+0xfffe5584>
   4b488:	0401ffc4 	movi	r16,2047
   4b48c:	003e2506 	br	4ad24 <__alt_data_end+0xfffe5524>
   4b490:	0013883a 	mov	r9,zero
   4b494:	003f8406 	br	4b2a8 <__alt_data_end+0xfffe5aa8>
   4b498:	0005883a 	mov	r2,zero
   4b49c:	0007883a 	mov	r3,zero
   4b4a0:	003e8906 	br	4aec8 <__alt_data_end+0xfffe56c8>
   4b4a4:	197ff804 	addi	r5,r3,-32
   4b4a8:	01000804 	movi	r4,32
   4b4ac:	414ad83a 	srl	r5,r8,r5
   4b4b0:	19002426 	beq	r3,r4,4b544 <__adddf3+0x89c>
   4b4b4:	01001004 	movi	r4,64
   4b4b8:	20c7c83a 	sub	r3,r4,r3
   4b4bc:	40c6983a 	sll	r3,r8,r3
   4b4c0:	1c46b03a 	or	r3,r3,r17
   4b4c4:	1806c03a 	cmpne	r3,r3,zero
   4b4c8:	28e2b03a 	or	r17,r5,r3
   4b4cc:	0007883a 	mov	r3,zero
   4b4d0:	003f2306 	br	4b160 <__alt_data_end+0xfffe5960>
   4b4d4:	0007883a 	mov	r3,zero
   4b4d8:	5811883a 	mov	r8,r11
   4b4dc:	00bfffc4 	movi	r2,-1
   4b4e0:	0401ffc4 	movi	r16,2047
   4b4e4:	003e7806 	br	4aec8 <__alt_data_end+0xfffe56c8>
   4b4e8:	4462b03a 	or	r17,r8,r17
   4b4ec:	8822c03a 	cmpne	r17,r17,zero
   4b4f0:	0009883a 	mov	r4,zero
   4b4f4:	003fa006 	br	4b378 <__alt_data_end+0xfffe5b78>
   4b4f8:	4811883a 	mov	r8,r9
   4b4fc:	3023883a 	mov	r17,r6
   4b500:	0401ffc4 	movi	r16,2047
   4b504:	003e0706 	br	4ad24 <__alt_data_end+0xfffe5524>
   4b508:	4811883a 	mov	r8,r9
   4b50c:	3023883a 	mov	r17,r6
   4b510:	003e0406 	br	4ad24 <__alt_data_end+0xfffe5524>
   4b514:	21fff804 	addi	r7,r4,-32
   4b518:	01400804 	movi	r5,32
   4b51c:	41ced83a 	srl	r7,r8,r7
   4b520:	21400a26 	beq	r4,r5,4b54c <__adddf3+0x8a4>
   4b524:	01401004 	movi	r5,64
   4b528:	2909c83a 	sub	r4,r5,r4
   4b52c:	4108983a 	sll	r4,r8,r4
   4b530:	2448b03a 	or	r4,r4,r17
   4b534:	2008c03a 	cmpne	r4,r4,zero
   4b538:	3922b03a 	or	r17,r7,r4
   4b53c:	0009883a 	mov	r4,zero
   4b540:	003f8d06 	br	4b378 <__alt_data_end+0xfffe5b78>
   4b544:	0007883a 	mov	r3,zero
   4b548:	003fdd06 	br	4b4c0 <__alt_data_end+0xfffe5cc0>
   4b54c:	0009883a 	mov	r4,zero
   4b550:	003ff706 	br	4b530 <__alt_data_end+0xfffe5d30>

0004b554 <__divdf3>:
   4b554:	defff004 	addi	sp,sp,-64
   4b558:	dc800815 	stw	r18,32(sp)
   4b55c:	2824d53a 	srli	r18,r5,20
   4b560:	dd800c15 	stw	r22,48(sp)
   4b564:	282cd7fa 	srli	r22,r5,31
   4b568:	dc000615 	stw	r16,24(sp)
   4b56c:	04000434 	movhi	r16,16
   4b570:	843fffc4 	addi	r16,r16,-1
   4b574:	dfc00f15 	stw	ra,60(sp)
   4b578:	df000e15 	stw	fp,56(sp)
   4b57c:	ddc00d15 	stw	r23,52(sp)
   4b580:	dd400b15 	stw	r21,44(sp)
   4b584:	dd000a15 	stw	r20,40(sp)
   4b588:	dcc00915 	stw	r19,36(sp)
   4b58c:	dc400715 	stw	r17,28(sp)
   4b590:	9481ffcc 	andi	r18,r18,2047
   4b594:	2c20703a 	and	r16,r5,r16
   4b598:	b2003fcc 	andi	r8,r22,255
   4b59c:	90006126 	beq	r18,zero,4b724 <__divdf3+0x1d0>
   4b5a0:	0081ffc4 	movi	r2,2047
   4b5a4:	202b883a 	mov	r21,r4
   4b5a8:	90803726 	beq	r18,r2,4b688 <__divdf3+0x134>
   4b5ac:	80800434 	orhi	r2,r16,16
   4b5b0:	100490fa 	slli	r2,r2,3
   4b5b4:	2020d77a 	srli	r16,r4,29
   4b5b8:	202a90fa 	slli	r21,r4,3
   4b5bc:	94bf0044 	addi	r18,r18,-1023
   4b5c0:	80a0b03a 	or	r16,r16,r2
   4b5c4:	0013883a 	mov	r9,zero
   4b5c8:	000b883a 	mov	r5,zero
   4b5cc:	3806d53a 	srli	r3,r7,20
   4b5d0:	382ed7fa 	srli	r23,r7,31
   4b5d4:	04400434 	movhi	r17,16
   4b5d8:	8c7fffc4 	addi	r17,r17,-1
   4b5dc:	18c1ffcc 	andi	r3,r3,2047
   4b5e0:	3029883a 	mov	r20,r6
   4b5e4:	3c62703a 	and	r17,r7,r17
   4b5e8:	bf003fcc 	andi	fp,r23,255
   4b5ec:	18006e26 	beq	r3,zero,4b7a8 <__divdf3+0x254>
   4b5f0:	0081ffc4 	movi	r2,2047
   4b5f4:	18806626 	beq	r3,r2,4b790 <__divdf3+0x23c>
   4b5f8:	88800434 	orhi	r2,r17,16
   4b5fc:	100490fa 	slli	r2,r2,3
   4b600:	3022d77a 	srli	r17,r6,29
   4b604:	302890fa 	slli	r20,r6,3
   4b608:	18ff0044 	addi	r3,r3,-1023
   4b60c:	88a2b03a 	or	r17,r17,r2
   4b610:	000f883a 	mov	r7,zero
   4b614:	b5e6f03a 	xor	r19,r22,r23
   4b618:	3a4cb03a 	or	r6,r7,r9
   4b61c:	008003c4 	movi	r2,15
   4b620:	9809883a 	mov	r4,r19
   4b624:	90c7c83a 	sub	r3,r18,r3
   4b628:	9cc03fcc 	andi	r19,r19,255
   4b62c:	11809636 	bltu	r2,r6,4b888 <__divdf3+0x334>
   4b630:	300c90ba 	slli	r6,r6,2
   4b634:	00800174 	movhi	r2,5
   4b638:	10ad9204 	addi	r2,r2,-18872
   4b63c:	308d883a 	add	r6,r6,r2
   4b640:	30800017 	ldw	r2,0(r6)
   4b644:	1000683a 	jmp	r2
   4b648:	0004b888 	cmpgei	zero,zero,4834
   4b64c:	0004b6c0 	call	4b6c <OSCtxSw_SWITCH_PC+0x4b2c>
   4b650:	0004b878 	rdprs	zero,zero,4833
   4b654:	0004b6b4 	movhi	zero,4826
   4b658:	0004b878 	rdprs	zero,zero,4833
   4b65c:	0004b84c 	andi	zero,zero,4833
   4b660:	0004b878 	rdprs	zero,zero,4833
   4b664:	0004b6b4 	movhi	zero,4826
   4b668:	0004b6c0 	call	4b6c <OSCtxSw_SWITCH_PC+0x4b2c>
   4b66c:	0004b6c0 	call	4b6c <OSCtxSw_SWITCH_PC+0x4b2c>
   4b670:	0004b84c 	andi	zero,zero,4833
   4b674:	0004b6b4 	movhi	zero,4826
   4b678:	0004b6a4 	muli	zero,zero,4826
   4b67c:	0004b6a4 	muli	zero,zero,4826
   4b680:	0004b6a4 	muli	zero,zero,4826
   4b684:	0004bc10 	cmplti	zero,zero,4848
   4b688:	2404b03a 	or	r2,r4,r16
   4b68c:	10006c1e 	bne	r2,zero,4b840 <__divdf3+0x2ec>
   4b690:	02400204 	movi	r9,8
   4b694:	0021883a 	mov	r16,zero
   4b698:	002b883a 	mov	r21,zero
   4b69c:	01400084 	movi	r5,2
   4b6a0:	003fca06 	br	4b5cc <__alt_data_end+0xfffe5dcc>
   4b6a4:	8023883a 	mov	r17,r16
   4b6a8:	a829883a 	mov	r20,r21
   4b6ac:	4039883a 	mov	fp,r8
   4b6b0:	280f883a 	mov	r7,r5
   4b6b4:	00800084 	movi	r2,2
   4b6b8:	3881601e 	bne	r7,r2,4bc3c <__divdf3+0x6e8>
   4b6bc:	e027883a 	mov	r19,fp
   4b6c0:	9900004c 	andi	r4,r19,1
   4b6c4:	0081ffc4 	movi	r2,2047
   4b6c8:	0021883a 	mov	r16,zero
   4b6cc:	002b883a 	mov	r21,zero
   4b6d0:	1004953a 	slli	r2,r2,20
   4b6d4:	20c03fcc 	andi	r3,r4,255
   4b6d8:	01400434 	movhi	r5,16
   4b6dc:	297fffc4 	addi	r5,r5,-1
   4b6e0:	180697fa 	slli	r3,r3,31
   4b6e4:	8160703a 	and	r16,r16,r5
   4b6e8:	80a0b03a 	or	r16,r16,r2
   4b6ec:	80c6b03a 	or	r3,r16,r3
   4b6f0:	a805883a 	mov	r2,r21
   4b6f4:	dfc00f17 	ldw	ra,60(sp)
   4b6f8:	df000e17 	ldw	fp,56(sp)
   4b6fc:	ddc00d17 	ldw	r23,52(sp)
   4b700:	dd800c17 	ldw	r22,48(sp)
   4b704:	dd400b17 	ldw	r21,44(sp)
   4b708:	dd000a17 	ldw	r20,40(sp)
   4b70c:	dcc00917 	ldw	r19,36(sp)
   4b710:	dc800817 	ldw	r18,32(sp)
   4b714:	dc400717 	ldw	r17,28(sp)
   4b718:	dc000617 	ldw	r16,24(sp)
   4b71c:	dec01004 	addi	sp,sp,64
   4b720:	f800283a 	ret
   4b724:	2404b03a 	or	r2,r4,r16
   4b728:	2023883a 	mov	r17,r4
   4b72c:	10003f26 	beq	r2,zero,4b82c <__divdf3+0x2d8>
   4b730:	80015e26 	beq	r16,zero,4bcac <__divdf3+0x758>
   4b734:	8009883a 	mov	r4,r16
   4b738:	d9800215 	stw	r6,8(sp)
   4b73c:	d9c00515 	stw	r7,20(sp)
   4b740:	da000415 	stw	r8,16(sp)
   4b744:	004d4e80 	call	4d4e8 <__clzsi2>
   4b748:	d9800217 	ldw	r6,8(sp)
   4b74c:	d9c00517 	ldw	r7,20(sp)
   4b750:	da000417 	ldw	r8,16(sp)
   4b754:	113ffd44 	addi	r4,r2,-11
   4b758:	00c00704 	movi	r3,28
   4b75c:	19014f16 	blt	r3,r4,4bc9c <__divdf3+0x748>
   4b760:	00c00744 	movi	r3,29
   4b764:	157ffe04 	addi	r21,r2,-8
   4b768:	1907c83a 	sub	r3,r3,r4
   4b76c:	8560983a 	sll	r16,r16,r21
   4b770:	88c6d83a 	srl	r3,r17,r3
   4b774:	8d6a983a 	sll	r21,r17,r21
   4b778:	1c20b03a 	or	r16,r3,r16
   4b77c:	1080fcc4 	addi	r2,r2,1011
   4b780:	00a5c83a 	sub	r18,zero,r2
   4b784:	0013883a 	mov	r9,zero
   4b788:	000b883a 	mov	r5,zero
   4b78c:	003f8f06 	br	4b5cc <__alt_data_end+0xfffe5dcc>
   4b790:	3444b03a 	or	r2,r6,r17
   4b794:	1000231e 	bne	r2,zero,4b824 <__divdf3+0x2d0>
   4b798:	0023883a 	mov	r17,zero
   4b79c:	0029883a 	mov	r20,zero
   4b7a0:	01c00084 	movi	r7,2
   4b7a4:	003f9b06 	br	4b614 <__alt_data_end+0xfffe5e14>
   4b7a8:	3444b03a 	or	r2,r6,r17
   4b7ac:	10001926 	beq	r2,zero,4b814 <__divdf3+0x2c0>
   4b7b0:	88014b26 	beq	r17,zero,4bce0 <__divdf3+0x78c>
   4b7b4:	8809883a 	mov	r4,r17
   4b7b8:	d9400115 	stw	r5,4(sp)
   4b7bc:	d9800215 	stw	r6,8(sp)
   4b7c0:	da000415 	stw	r8,16(sp)
   4b7c4:	da400315 	stw	r9,12(sp)
   4b7c8:	004d4e80 	call	4d4e8 <__clzsi2>
   4b7cc:	d9400117 	ldw	r5,4(sp)
   4b7d0:	d9800217 	ldw	r6,8(sp)
   4b7d4:	da000417 	ldw	r8,16(sp)
   4b7d8:	da400317 	ldw	r9,12(sp)
   4b7dc:	113ffd44 	addi	r4,r2,-11
   4b7e0:	00c00704 	movi	r3,28
   4b7e4:	19013a16 	blt	r3,r4,4bcd0 <__divdf3+0x77c>
   4b7e8:	00c00744 	movi	r3,29
   4b7ec:	153ffe04 	addi	r20,r2,-8
   4b7f0:	1907c83a 	sub	r3,r3,r4
   4b7f4:	8d22983a 	sll	r17,r17,r20
   4b7f8:	30c6d83a 	srl	r3,r6,r3
   4b7fc:	3528983a 	sll	r20,r6,r20
   4b800:	1c62b03a 	or	r17,r3,r17
   4b804:	1080fcc4 	addi	r2,r2,1011
   4b808:	0087c83a 	sub	r3,zero,r2
   4b80c:	000f883a 	mov	r7,zero
   4b810:	003f8006 	br	4b614 <__alt_data_end+0xfffe5e14>
   4b814:	0023883a 	mov	r17,zero
   4b818:	0029883a 	mov	r20,zero
   4b81c:	01c00044 	movi	r7,1
   4b820:	003f7c06 	br	4b614 <__alt_data_end+0xfffe5e14>
   4b824:	01c000c4 	movi	r7,3
   4b828:	003f7a06 	br	4b614 <__alt_data_end+0xfffe5e14>
   4b82c:	02400104 	movi	r9,4
   4b830:	0021883a 	mov	r16,zero
   4b834:	002b883a 	mov	r21,zero
   4b838:	01400044 	movi	r5,1
   4b83c:	003f6306 	br	4b5cc <__alt_data_end+0xfffe5dcc>
   4b840:	02400304 	movi	r9,12
   4b844:	014000c4 	movi	r5,3
   4b848:	003f6006 	br	4b5cc <__alt_data_end+0xfffe5dcc>
   4b84c:	04000434 	movhi	r16,16
   4b850:	0009883a 	mov	r4,zero
   4b854:	843fffc4 	addi	r16,r16,-1
   4b858:	057fffc4 	movi	r21,-1
   4b85c:	0081ffc4 	movi	r2,2047
   4b860:	003f9b06 	br	4b6d0 <__alt_data_end+0xfffe5ed0>
   4b864:	00c00044 	movi	r3,1
   4b868:	1887c83a 	sub	r3,r3,r2
   4b86c:	01000e04 	movi	r4,56
   4b870:	20c1530e 	bge	r4,r3,4bdc0 <__divdf3+0x86c>
   4b874:	9900004c 	andi	r4,r19,1
   4b878:	0005883a 	mov	r2,zero
   4b87c:	0021883a 	mov	r16,zero
   4b880:	002b883a 	mov	r21,zero
   4b884:	003f9206 	br	4b6d0 <__alt_data_end+0xfffe5ed0>
   4b888:	8c012e36 	bltu	r17,r16,4bd44 <__divdf3+0x7f0>
   4b88c:	84412c26 	beq	r16,r17,4bd40 <__divdf3+0x7ec>
   4b890:	a82f883a 	mov	r23,r21
   4b894:	18ffffc4 	addi	r3,r3,-1
   4b898:	002b883a 	mov	r21,zero
   4b89c:	a004d63a 	srli	r2,r20,24
   4b8a0:	8822923a 	slli	r17,r17,8
   4b8a4:	a028923a 	slli	r20,r20,8
   4b8a8:	8009883a 	mov	r4,r16
   4b8ac:	88acb03a 	or	r22,r17,r2
   4b8b0:	dd000015 	stw	r20,0(sp)
   4b8b4:	b028d43a 	srli	r20,r22,16
   4b8b8:	d8c00215 	stw	r3,8(sp)
   4b8bc:	b4bfffcc 	andi	r18,r22,65535
   4b8c0:	a00b883a 	mov	r5,r20
   4b8c4:	004abec0 	call	4abec <__udivsi3>
   4b8c8:	100b883a 	mov	r5,r2
   4b8cc:	9009883a 	mov	r4,r18
   4b8d0:	1023883a 	mov	r17,r2
   4b8d4:	00406e00 	call	406e0 <__mulsi3>
   4b8d8:	8009883a 	mov	r4,r16
   4b8dc:	a00b883a 	mov	r5,r20
   4b8e0:	1039883a 	mov	fp,r2
   4b8e4:	004ac500 	call	4ac50 <__umodsi3>
   4b8e8:	1004943a 	slli	r2,r2,16
   4b8ec:	b808d43a 	srli	r4,r23,16
   4b8f0:	d8c00217 	ldw	r3,8(sp)
   4b8f4:	2084b03a 	or	r2,r4,r2
   4b8f8:	1700062e 	bgeu	r2,fp,4b914 <__divdf3+0x3c0>
   4b8fc:	1585883a 	add	r2,r2,r22
   4b900:	893fffc4 	addi	r4,r17,-1
   4b904:	15811d36 	bltu	r2,r22,4bd7c <__divdf3+0x828>
   4b908:	17011c2e 	bgeu	r2,fp,4bd7c <__divdf3+0x828>
   4b90c:	8c7fff84 	addi	r17,r17,-2
   4b910:	1585883a 	add	r2,r2,r22
   4b914:	1739c83a 	sub	fp,r2,fp
   4b918:	a00b883a 	mov	r5,r20
   4b91c:	e009883a 	mov	r4,fp
   4b920:	d8c00215 	stw	r3,8(sp)
   4b924:	004abec0 	call	4abec <__udivsi3>
   4b928:	100b883a 	mov	r5,r2
   4b92c:	9009883a 	mov	r4,r18
   4b930:	1021883a 	mov	r16,r2
   4b934:	00406e00 	call	406e0 <__mulsi3>
   4b938:	a00b883a 	mov	r5,r20
   4b93c:	e009883a 	mov	r4,fp
   4b940:	d8800415 	stw	r2,16(sp)
   4b944:	004ac500 	call	4ac50 <__umodsi3>
   4b948:	1004943a 	slli	r2,r2,16
   4b94c:	da000417 	ldw	r8,16(sp)
   4b950:	bdffffcc 	andi	r23,r23,65535
   4b954:	b884b03a 	or	r2,r23,r2
   4b958:	d8c00217 	ldw	r3,8(sp)
   4b95c:	1200062e 	bgeu	r2,r8,4b978 <__divdf3+0x424>
   4b960:	1585883a 	add	r2,r2,r22
   4b964:	813fffc4 	addi	r4,r16,-1
   4b968:	15810236 	bltu	r2,r22,4bd74 <__divdf3+0x820>
   4b96c:	1201012e 	bgeu	r2,r8,4bd74 <__divdf3+0x820>
   4b970:	843fff84 	addi	r16,r16,-2
   4b974:	1585883a 	add	r2,r2,r22
   4b978:	8822943a 	slli	r17,r17,16
   4b97c:	d9800017 	ldw	r6,0(sp)
   4b980:	1211c83a 	sub	r8,r2,r8
   4b984:	8c22b03a 	or	r17,r17,r16
   4b988:	373fffcc 	andi	fp,r6,65535
   4b98c:	8abfffcc 	andi	r10,r17,65535
   4b990:	8820d43a 	srli	r16,r17,16
   4b994:	5009883a 	mov	r4,r10
   4b998:	e00b883a 	mov	r5,fp
   4b99c:	302ed43a 	srli	r23,r6,16
   4b9a0:	d8c00215 	stw	r3,8(sp)
   4b9a4:	da000415 	stw	r8,16(sp)
   4b9a8:	da800115 	stw	r10,4(sp)
   4b9ac:	00406e00 	call	406e0 <__mulsi3>
   4b9b0:	800b883a 	mov	r5,r16
   4b9b4:	e009883a 	mov	r4,fp
   4b9b8:	d8800515 	stw	r2,20(sp)
   4b9bc:	00406e00 	call	406e0 <__mulsi3>
   4b9c0:	8009883a 	mov	r4,r16
   4b9c4:	b80b883a 	mov	r5,r23
   4b9c8:	d8800315 	stw	r2,12(sp)
   4b9cc:	00406e00 	call	406e0 <__mulsi3>
   4b9d0:	da800117 	ldw	r10,4(sp)
   4b9d4:	b80b883a 	mov	r5,r23
   4b9d8:	1021883a 	mov	r16,r2
   4b9dc:	5009883a 	mov	r4,r10
   4b9e0:	00406e00 	call	406e0 <__mulsi3>
   4b9e4:	d9c00517 	ldw	r7,20(sp)
   4b9e8:	da400317 	ldw	r9,12(sp)
   4b9ec:	d8c00217 	ldw	r3,8(sp)
   4b9f0:	3808d43a 	srli	r4,r7,16
   4b9f4:	1245883a 	add	r2,r2,r9
   4b9f8:	da000417 	ldw	r8,16(sp)
   4b9fc:	2085883a 	add	r2,r4,r2
   4ba00:	1240022e 	bgeu	r2,r9,4ba0c <__divdf3+0x4b8>
   4ba04:	01000074 	movhi	r4,1
   4ba08:	8121883a 	add	r16,r16,r4
   4ba0c:	1008d43a 	srli	r4,r2,16
   4ba10:	1004943a 	slli	r2,r2,16
   4ba14:	39ffffcc 	andi	r7,r7,65535
   4ba18:	2409883a 	add	r4,r4,r16
   4ba1c:	11c5883a 	add	r2,r2,r7
   4ba20:	4100bb36 	bltu	r8,r4,4bd10 <__divdf3+0x7bc>
   4ba24:	4100d726 	beq	r8,r4,4bd84 <__divdf3+0x830>
   4ba28:	4109c83a 	sub	r4,r8,r4
   4ba2c:	a8a1c83a 	sub	r16,r21,r2
   4ba30:	ac2b803a 	cmpltu	r21,r21,r16
   4ba34:	256bc83a 	sub	r21,r4,r21
   4ba38:	b540d926 	beq	r22,r21,4bda0 <__divdf3+0x84c>
   4ba3c:	a00b883a 	mov	r5,r20
   4ba40:	a809883a 	mov	r4,r21
   4ba44:	d8c00215 	stw	r3,8(sp)
   4ba48:	004abec0 	call	4abec <__udivsi3>
   4ba4c:	100b883a 	mov	r5,r2
   4ba50:	9009883a 	mov	r4,r18
   4ba54:	d8800515 	stw	r2,20(sp)
   4ba58:	00406e00 	call	406e0 <__mulsi3>
   4ba5c:	a809883a 	mov	r4,r21
   4ba60:	a00b883a 	mov	r5,r20
   4ba64:	d8800415 	stw	r2,16(sp)
   4ba68:	004ac500 	call	4ac50 <__umodsi3>
   4ba6c:	1004943a 	slli	r2,r2,16
   4ba70:	8008d43a 	srli	r4,r16,16
   4ba74:	da000417 	ldw	r8,16(sp)
   4ba78:	d8c00217 	ldw	r3,8(sp)
   4ba7c:	2084b03a 	or	r2,r4,r2
   4ba80:	d9c00517 	ldw	r7,20(sp)
   4ba84:	1200062e 	bgeu	r2,r8,4baa0 <__divdf3+0x54c>
   4ba88:	1585883a 	add	r2,r2,r22
   4ba8c:	393fffc4 	addi	r4,r7,-1
   4ba90:	1580c536 	bltu	r2,r22,4bda8 <__divdf3+0x854>
   4ba94:	1200c42e 	bgeu	r2,r8,4bda8 <__divdf3+0x854>
   4ba98:	39ffff84 	addi	r7,r7,-2
   4ba9c:	1585883a 	add	r2,r2,r22
   4baa0:	122bc83a 	sub	r21,r2,r8
   4baa4:	a00b883a 	mov	r5,r20
   4baa8:	a809883a 	mov	r4,r21
   4baac:	d8c00215 	stw	r3,8(sp)
   4bab0:	d9c00515 	stw	r7,20(sp)
   4bab4:	004abec0 	call	4abec <__udivsi3>
   4bab8:	9009883a 	mov	r4,r18
   4babc:	100b883a 	mov	r5,r2
   4bac0:	d8800415 	stw	r2,16(sp)
   4bac4:	00406e00 	call	406e0 <__mulsi3>
   4bac8:	a809883a 	mov	r4,r21
   4bacc:	a00b883a 	mov	r5,r20
   4bad0:	1025883a 	mov	r18,r2
   4bad4:	004ac500 	call	4ac50 <__umodsi3>
   4bad8:	1004943a 	slli	r2,r2,16
   4badc:	813fffcc 	andi	r4,r16,65535
   4bae0:	d8c00217 	ldw	r3,8(sp)
   4bae4:	20a0b03a 	or	r16,r4,r2
   4bae8:	d9c00517 	ldw	r7,20(sp)
   4baec:	da000417 	ldw	r8,16(sp)
   4baf0:	8480062e 	bgeu	r16,r18,4bb0c <__divdf3+0x5b8>
   4baf4:	85a1883a 	add	r16,r16,r22
   4baf8:	40bfffc4 	addi	r2,r8,-1
   4bafc:	8580ac36 	bltu	r16,r22,4bdb0 <__divdf3+0x85c>
   4bb00:	8480ab2e 	bgeu	r16,r18,4bdb0 <__divdf3+0x85c>
   4bb04:	423fff84 	addi	r8,r8,-2
   4bb08:	85a1883a 	add	r16,r16,r22
   4bb0c:	3804943a 	slli	r2,r7,16
   4bb10:	84a1c83a 	sub	r16,r16,r18
   4bb14:	e009883a 	mov	r4,fp
   4bb18:	1228b03a 	or	r20,r2,r8
   4bb1c:	a1ffffcc 	andi	r7,r20,65535
   4bb20:	a024d43a 	srli	r18,r20,16
   4bb24:	380b883a 	mov	r5,r7
   4bb28:	d8c00215 	stw	r3,8(sp)
   4bb2c:	d9c00515 	stw	r7,20(sp)
   4bb30:	00406e00 	call	406e0 <__mulsi3>
   4bb34:	900b883a 	mov	r5,r18
   4bb38:	e009883a 	mov	r4,fp
   4bb3c:	102b883a 	mov	r21,r2
   4bb40:	00406e00 	call	406e0 <__mulsi3>
   4bb44:	900b883a 	mov	r5,r18
   4bb48:	b809883a 	mov	r4,r23
   4bb4c:	1039883a 	mov	fp,r2
   4bb50:	00406e00 	call	406e0 <__mulsi3>
   4bb54:	d9c00517 	ldw	r7,20(sp)
   4bb58:	b80b883a 	mov	r5,r23
   4bb5c:	1025883a 	mov	r18,r2
   4bb60:	3809883a 	mov	r4,r7
   4bb64:	00406e00 	call	406e0 <__mulsi3>
   4bb68:	a808d43a 	srli	r4,r21,16
   4bb6c:	1705883a 	add	r2,r2,fp
   4bb70:	d8c00217 	ldw	r3,8(sp)
   4bb74:	2085883a 	add	r2,r4,r2
   4bb78:	1700022e 	bgeu	r2,fp,4bb84 <__divdf3+0x630>
   4bb7c:	01000074 	movhi	r4,1
   4bb80:	9125883a 	add	r18,r18,r4
   4bb84:	1008d43a 	srli	r4,r2,16
   4bb88:	1004943a 	slli	r2,r2,16
   4bb8c:	ad7fffcc 	andi	r21,r21,65535
   4bb90:	2489883a 	add	r4,r4,r18
   4bb94:	1545883a 	add	r2,r2,r21
   4bb98:	81003836 	bltu	r16,r4,4bc7c <__divdf3+0x728>
   4bb9c:	81003626 	beq	r16,r4,4bc78 <__divdf3+0x724>
   4bba0:	a5000054 	ori	r20,r20,1
   4bba4:	1880ffc4 	addi	r2,r3,1023
   4bba8:	00bf2e0e 	bge	zero,r2,4b864 <__alt_data_end+0xfffe6064>
   4bbac:	a10001cc 	andi	r4,r20,7
   4bbb0:	20000726 	beq	r4,zero,4bbd0 <__divdf3+0x67c>
   4bbb4:	a10003cc 	andi	r4,r20,15
   4bbb8:	01400104 	movi	r5,4
   4bbbc:	21400426 	beq	r4,r5,4bbd0 <__divdf3+0x67c>
   4bbc0:	a149883a 	add	r4,r20,r5
   4bbc4:	2529803a 	cmpltu	r20,r4,r20
   4bbc8:	8d23883a 	add	r17,r17,r20
   4bbcc:	2029883a 	mov	r20,r4
   4bbd0:	8900402c 	andhi	r4,r17,256
   4bbd4:	20000426 	beq	r4,zero,4bbe8 <__divdf3+0x694>
   4bbd8:	18810004 	addi	r2,r3,1024
   4bbdc:	00ffc034 	movhi	r3,65280
   4bbe0:	18ffffc4 	addi	r3,r3,-1
   4bbe4:	88e2703a 	and	r17,r17,r3
   4bbe8:	00c1ff84 	movi	r3,2046
   4bbec:	18beb416 	blt	r3,r2,4b6c0 <__alt_data_end+0xfffe5ec0>
   4bbf0:	a028d0fa 	srli	r20,r20,3
   4bbf4:	882a977a 	slli	r21,r17,29
   4bbf8:	8820927a 	slli	r16,r17,9
   4bbfc:	1081ffcc 	andi	r2,r2,2047
   4bc00:	ad2ab03a 	or	r21,r21,r20
   4bc04:	8020d33a 	srli	r16,r16,12
   4bc08:	9900004c 	andi	r4,r19,1
   4bc0c:	003eb006 	br	4b6d0 <__alt_data_end+0xfffe5ed0>
   4bc10:	8080022c 	andhi	r2,r16,8
   4bc14:	10001226 	beq	r2,zero,4bc60 <__divdf3+0x70c>
   4bc18:	8880022c 	andhi	r2,r17,8
   4bc1c:	1000101e 	bne	r2,zero,4bc60 <__divdf3+0x70c>
   4bc20:	00800434 	movhi	r2,16
   4bc24:	8c000234 	orhi	r16,r17,8
   4bc28:	10bfffc4 	addi	r2,r2,-1
   4bc2c:	b809883a 	mov	r4,r23
   4bc30:	80a0703a 	and	r16,r16,r2
   4bc34:	a02b883a 	mov	r21,r20
   4bc38:	003f0806 	br	4b85c <__alt_data_end+0xfffe605c>
   4bc3c:	008000c4 	movi	r2,3
   4bc40:	3880b126 	beq	r7,r2,4bf08 <__divdf3+0x9b4>
   4bc44:	00800044 	movi	r2,1
   4bc48:	38805b1e 	bne	r7,r2,4bdb8 <__divdf3+0x864>
   4bc4c:	e009883a 	mov	r4,fp
   4bc50:	0005883a 	mov	r2,zero
   4bc54:	0021883a 	mov	r16,zero
   4bc58:	002b883a 	mov	r21,zero
   4bc5c:	003e9c06 	br	4b6d0 <__alt_data_end+0xfffe5ed0>
   4bc60:	00800434 	movhi	r2,16
   4bc64:	84000234 	orhi	r16,r16,8
   4bc68:	10bfffc4 	addi	r2,r2,-1
   4bc6c:	b009883a 	mov	r4,r22
   4bc70:	80a0703a 	and	r16,r16,r2
   4bc74:	003ef906 	br	4b85c <__alt_data_end+0xfffe605c>
   4bc78:	103fca26 	beq	r2,zero,4bba4 <__alt_data_end+0xfffe63a4>
   4bc7c:	b421883a 	add	r16,r22,r16
   4bc80:	a17fffc4 	addi	r5,r20,-1
   4bc84:	8580422e 	bgeu	r16,r22,4bd90 <__divdf3+0x83c>
   4bc88:	2829883a 	mov	r20,r5
   4bc8c:	813fc41e 	bne	r16,r4,4bba0 <__alt_data_end+0xfffe63a0>
   4bc90:	d9800017 	ldw	r6,0(sp)
   4bc94:	30bfc21e 	bne	r6,r2,4bba0 <__alt_data_end+0xfffe63a0>
   4bc98:	003fc206 	br	4bba4 <__alt_data_end+0xfffe63a4>
   4bc9c:	143ff604 	addi	r16,r2,-40
   4bca0:	8c20983a 	sll	r16,r17,r16
   4bca4:	002b883a 	mov	r21,zero
   4bca8:	003eb406 	br	4b77c <__alt_data_end+0xfffe5f7c>
   4bcac:	d9800215 	stw	r6,8(sp)
   4bcb0:	d9c00515 	stw	r7,20(sp)
   4bcb4:	da000415 	stw	r8,16(sp)
   4bcb8:	004d4e80 	call	4d4e8 <__clzsi2>
   4bcbc:	10800804 	addi	r2,r2,32
   4bcc0:	da000417 	ldw	r8,16(sp)
   4bcc4:	d9c00517 	ldw	r7,20(sp)
   4bcc8:	d9800217 	ldw	r6,8(sp)
   4bccc:	003ea106 	br	4b754 <__alt_data_end+0xfffe5f54>
   4bcd0:	147ff604 	addi	r17,r2,-40
   4bcd4:	3462983a 	sll	r17,r6,r17
   4bcd8:	0029883a 	mov	r20,zero
   4bcdc:	003ec906 	br	4b804 <__alt_data_end+0xfffe6004>
   4bce0:	3009883a 	mov	r4,r6
   4bce4:	d9400115 	stw	r5,4(sp)
   4bce8:	d9800215 	stw	r6,8(sp)
   4bcec:	da000415 	stw	r8,16(sp)
   4bcf0:	da400315 	stw	r9,12(sp)
   4bcf4:	004d4e80 	call	4d4e8 <__clzsi2>
   4bcf8:	10800804 	addi	r2,r2,32
   4bcfc:	da400317 	ldw	r9,12(sp)
   4bd00:	da000417 	ldw	r8,16(sp)
   4bd04:	d9800217 	ldw	r6,8(sp)
   4bd08:	d9400117 	ldw	r5,4(sp)
   4bd0c:	003eb306 	br	4b7dc <__alt_data_end+0xfffe5fdc>
   4bd10:	d9800017 	ldw	r6,0(sp)
   4bd14:	a9ab883a 	add	r21,r21,r6
   4bd18:	a98b803a 	cmpltu	r5,r21,r6
   4bd1c:	2d8b883a 	add	r5,r5,r22
   4bd20:	2a11883a 	add	r8,r5,r8
   4bd24:	897fffc4 	addi	r5,r17,-1
   4bd28:	b2000c2e 	bgeu	r22,r8,4bd5c <__divdf3+0x808>
   4bd2c:	41003f36 	bltu	r8,r4,4be2c <__divdf3+0x8d8>
   4bd30:	22006c26 	beq	r4,r8,4bee4 <__divdf3+0x990>
   4bd34:	4109c83a 	sub	r4,r8,r4
   4bd38:	2823883a 	mov	r17,r5
   4bd3c:	003f3b06 	br	4ba2c <__alt_data_end+0xfffe622c>
   4bd40:	ad3ed336 	bltu	r21,r20,4b890 <__alt_data_end+0xfffe6090>
   4bd44:	a804d07a 	srli	r2,r21,1
   4bd48:	802e97fa 	slli	r23,r16,31
   4bd4c:	a82a97fa 	slli	r21,r21,31
   4bd50:	8020d07a 	srli	r16,r16,1
   4bd54:	b8aeb03a 	or	r23,r23,r2
   4bd58:	003ed006 	br	4b89c <__alt_data_end+0xfffe609c>
   4bd5c:	b23ff51e 	bne	r22,r8,4bd34 <__alt_data_end+0xfffe6534>
   4bd60:	d9800017 	ldw	r6,0(sp)
   4bd64:	a9bff12e 	bgeu	r21,r6,4bd2c <__alt_data_end+0xfffe652c>
   4bd68:	b109c83a 	sub	r4,r22,r4
   4bd6c:	2823883a 	mov	r17,r5
   4bd70:	003f2e06 	br	4ba2c <__alt_data_end+0xfffe622c>
   4bd74:	2021883a 	mov	r16,r4
   4bd78:	003eff06 	br	4b978 <__alt_data_end+0xfffe6178>
   4bd7c:	2023883a 	mov	r17,r4
   4bd80:	003ee406 	br	4b914 <__alt_data_end+0xfffe6114>
   4bd84:	a8bfe236 	bltu	r21,r2,4bd10 <__alt_data_end+0xfffe6510>
   4bd88:	0009883a 	mov	r4,zero
   4bd8c:	003f2706 	br	4ba2c <__alt_data_end+0xfffe622c>
   4bd90:	81002d36 	bltu	r16,r4,4be48 <__divdf3+0x8f4>
   4bd94:	24005626 	beq	r4,r16,4bef0 <__divdf3+0x99c>
   4bd98:	2829883a 	mov	r20,r5
   4bd9c:	003f8006 	br	4bba0 <__alt_data_end+0xfffe63a0>
   4bda0:	053fffc4 	movi	r20,-1
   4bda4:	003f7f06 	br	4bba4 <__alt_data_end+0xfffe63a4>
   4bda8:	200f883a 	mov	r7,r4
   4bdac:	003f3c06 	br	4baa0 <__alt_data_end+0xfffe62a0>
   4bdb0:	1011883a 	mov	r8,r2
   4bdb4:	003f5506 	br	4bb0c <__alt_data_end+0xfffe630c>
   4bdb8:	e027883a 	mov	r19,fp
   4bdbc:	003f7906 	br	4bba4 <__alt_data_end+0xfffe63a4>
   4bdc0:	010007c4 	movi	r4,31
   4bdc4:	20c02816 	blt	r4,r3,4be68 <__divdf3+0x914>
   4bdc8:	00800804 	movi	r2,32
   4bdcc:	10c5c83a 	sub	r2,r2,r3
   4bdd0:	888a983a 	sll	r5,r17,r2
   4bdd4:	a0c8d83a 	srl	r4,r20,r3
   4bdd8:	a084983a 	sll	r2,r20,r2
   4bddc:	88e2d83a 	srl	r17,r17,r3
   4bde0:	2906b03a 	or	r3,r5,r4
   4bde4:	1004c03a 	cmpne	r2,r2,zero
   4bde8:	1886b03a 	or	r3,r3,r2
   4bdec:	188001cc 	andi	r2,r3,7
   4bdf0:	10000726 	beq	r2,zero,4be10 <__divdf3+0x8bc>
   4bdf4:	188003cc 	andi	r2,r3,15
   4bdf8:	01000104 	movi	r4,4
   4bdfc:	11000426 	beq	r2,r4,4be10 <__divdf3+0x8bc>
   4be00:	1805883a 	mov	r2,r3
   4be04:	10c00104 	addi	r3,r2,4
   4be08:	1885803a 	cmpltu	r2,r3,r2
   4be0c:	88a3883a 	add	r17,r17,r2
   4be10:	8880202c 	andhi	r2,r17,128
   4be14:	10002926 	beq	r2,zero,4bebc <__divdf3+0x968>
   4be18:	9900004c 	andi	r4,r19,1
   4be1c:	00800044 	movi	r2,1
   4be20:	0021883a 	mov	r16,zero
   4be24:	002b883a 	mov	r21,zero
   4be28:	003e2906 	br	4b6d0 <__alt_data_end+0xfffe5ed0>
   4be2c:	d9800017 	ldw	r6,0(sp)
   4be30:	8c7fff84 	addi	r17,r17,-2
   4be34:	a9ab883a 	add	r21,r21,r6
   4be38:	a98b803a 	cmpltu	r5,r21,r6
   4be3c:	2d8b883a 	add	r5,r5,r22
   4be40:	2a11883a 	add	r8,r5,r8
   4be44:	003ef806 	br	4ba28 <__alt_data_end+0xfffe6228>
   4be48:	d9800017 	ldw	r6,0(sp)
   4be4c:	318f883a 	add	r7,r6,r6
   4be50:	398b803a 	cmpltu	r5,r7,r6
   4be54:	2d8d883a 	add	r6,r5,r22
   4be58:	81a1883a 	add	r16,r16,r6
   4be5c:	a17fff84 	addi	r5,r20,-2
   4be60:	d9c00015 	stw	r7,0(sp)
   4be64:	003f8806 	br	4bc88 <__alt_data_end+0xfffe6488>
   4be68:	013ff844 	movi	r4,-31
   4be6c:	2085c83a 	sub	r2,r4,r2
   4be70:	8888d83a 	srl	r4,r17,r2
   4be74:	00800804 	movi	r2,32
   4be78:	18802126 	beq	r3,r2,4bf00 <__divdf3+0x9ac>
   4be7c:	04001004 	movi	r16,64
   4be80:	80c7c83a 	sub	r3,r16,r3
   4be84:	88e0983a 	sll	r16,r17,r3
   4be88:	8504b03a 	or	r2,r16,r20
   4be8c:	1004c03a 	cmpne	r2,r2,zero
   4be90:	2084b03a 	or	r2,r4,r2
   4be94:	144001cc 	andi	r17,r2,7
   4be98:	88000d1e 	bne	r17,zero,4bed0 <__divdf3+0x97c>
   4be9c:	0021883a 	mov	r16,zero
   4bea0:	102ad0fa 	srli	r21,r2,3
   4bea4:	9900004c 	andi	r4,r19,1
   4bea8:	0005883a 	mov	r2,zero
   4beac:	ac6ab03a 	or	r21,r21,r17
   4beb0:	003e0706 	br	4b6d0 <__alt_data_end+0xfffe5ed0>
   4beb4:	1007883a 	mov	r3,r2
   4beb8:	0023883a 	mov	r17,zero
   4bebc:	8820927a 	slli	r16,r17,9
   4bec0:	1805883a 	mov	r2,r3
   4bec4:	8822977a 	slli	r17,r17,29
   4bec8:	8020d33a 	srli	r16,r16,12
   4becc:	003ff406 	br	4bea0 <__alt_data_end+0xfffe66a0>
   4bed0:	10c003cc 	andi	r3,r2,15
   4bed4:	01000104 	movi	r4,4
   4bed8:	193ff626 	beq	r3,r4,4beb4 <__alt_data_end+0xfffe66b4>
   4bedc:	0023883a 	mov	r17,zero
   4bee0:	003fc806 	br	4be04 <__alt_data_end+0xfffe6604>
   4bee4:	a8bfd136 	bltu	r21,r2,4be2c <__alt_data_end+0xfffe662c>
   4bee8:	2823883a 	mov	r17,r5
   4beec:	003fa606 	br	4bd88 <__alt_data_end+0xfffe6588>
   4bef0:	d9800017 	ldw	r6,0(sp)
   4bef4:	30bfd436 	bltu	r6,r2,4be48 <__alt_data_end+0xfffe6648>
   4bef8:	2829883a 	mov	r20,r5
   4befc:	003f6406 	br	4bc90 <__alt_data_end+0xfffe6490>
   4bf00:	0021883a 	mov	r16,zero
   4bf04:	003fe006 	br	4be88 <__alt_data_end+0xfffe6688>
   4bf08:	00800434 	movhi	r2,16
   4bf0c:	8c000234 	orhi	r16,r17,8
   4bf10:	10bfffc4 	addi	r2,r2,-1
   4bf14:	e009883a 	mov	r4,fp
   4bf18:	80a0703a 	and	r16,r16,r2
   4bf1c:	a02b883a 	mov	r21,r20
   4bf20:	003e4e06 	br	4b85c <__alt_data_end+0xfffe605c>

0004bf24 <__eqdf2>:
   4bf24:	2804d53a 	srli	r2,r5,20
   4bf28:	3806d53a 	srli	r3,r7,20
   4bf2c:	02000434 	movhi	r8,16
   4bf30:	423fffc4 	addi	r8,r8,-1
   4bf34:	1081ffcc 	andi	r2,r2,2047
   4bf38:	0281ffc4 	movi	r10,2047
   4bf3c:	2a12703a 	and	r9,r5,r8
   4bf40:	18c1ffcc 	andi	r3,r3,2047
   4bf44:	3a10703a 	and	r8,r7,r8
   4bf48:	280ad7fa 	srli	r5,r5,31
   4bf4c:	380ed7fa 	srli	r7,r7,31
   4bf50:	12801026 	beq	r2,r10,4bf94 <__eqdf2+0x70>
   4bf54:	0281ffc4 	movi	r10,2047
   4bf58:	1a800a26 	beq	r3,r10,4bf84 <__eqdf2+0x60>
   4bf5c:	10c00226 	beq	r2,r3,4bf68 <__eqdf2+0x44>
   4bf60:	00800044 	movi	r2,1
   4bf64:	f800283a 	ret
   4bf68:	4a3ffd1e 	bne	r9,r8,4bf60 <__alt_data_end+0xfffe6760>
   4bf6c:	21bffc1e 	bne	r4,r6,4bf60 <__alt_data_end+0xfffe6760>
   4bf70:	29c00c26 	beq	r5,r7,4bfa4 <__eqdf2+0x80>
   4bf74:	103ffa1e 	bne	r2,zero,4bf60 <__alt_data_end+0xfffe6760>
   4bf78:	2244b03a 	or	r2,r4,r9
   4bf7c:	1004c03a 	cmpne	r2,r2,zero
   4bf80:	f800283a 	ret
   4bf84:	3214b03a 	or	r10,r6,r8
   4bf88:	503ff426 	beq	r10,zero,4bf5c <__alt_data_end+0xfffe675c>
   4bf8c:	00800044 	movi	r2,1
   4bf90:	f800283a 	ret
   4bf94:	2254b03a 	or	r10,r4,r9
   4bf98:	503fee26 	beq	r10,zero,4bf54 <__alt_data_end+0xfffe6754>
   4bf9c:	00800044 	movi	r2,1
   4bfa0:	f800283a 	ret
   4bfa4:	0005883a 	mov	r2,zero
   4bfa8:	f800283a 	ret

0004bfac <__gedf2>:
   4bfac:	2804d53a 	srli	r2,r5,20
   4bfb0:	3806d53a 	srli	r3,r7,20
   4bfb4:	02000434 	movhi	r8,16
   4bfb8:	423fffc4 	addi	r8,r8,-1
   4bfbc:	1081ffcc 	andi	r2,r2,2047
   4bfc0:	0241ffc4 	movi	r9,2047
   4bfc4:	2a14703a 	and	r10,r5,r8
   4bfc8:	18c1ffcc 	andi	r3,r3,2047
   4bfcc:	3a10703a 	and	r8,r7,r8
   4bfd0:	280ad7fa 	srli	r5,r5,31
   4bfd4:	380ed7fa 	srli	r7,r7,31
   4bfd8:	12401d26 	beq	r2,r9,4c050 <__gedf2+0xa4>
   4bfdc:	0241ffc4 	movi	r9,2047
   4bfe0:	1a401226 	beq	r3,r9,4c02c <__gedf2+0x80>
   4bfe4:	1000081e 	bne	r2,zero,4c008 <__gedf2+0x5c>
   4bfe8:	2296b03a 	or	r11,r4,r10
   4bfec:	5813003a 	cmpeq	r9,r11,zero
   4bff0:	1800091e 	bne	r3,zero,4c018 <__gedf2+0x6c>
   4bff4:	3218b03a 	or	r12,r6,r8
   4bff8:	6000071e 	bne	r12,zero,4c018 <__gedf2+0x6c>
   4bffc:	0005883a 	mov	r2,zero
   4c000:	5800101e 	bne	r11,zero,4c044 <__gedf2+0x98>
   4c004:	f800283a 	ret
   4c008:	18000c1e 	bne	r3,zero,4c03c <__gedf2+0x90>
   4c00c:	3212b03a 	or	r9,r6,r8
   4c010:	48000c26 	beq	r9,zero,4c044 <__gedf2+0x98>
   4c014:	0013883a 	mov	r9,zero
   4c018:	39c03fcc 	andi	r7,r7,255
   4c01c:	48000826 	beq	r9,zero,4c040 <__gedf2+0x94>
   4c020:	38000926 	beq	r7,zero,4c048 <__gedf2+0x9c>
   4c024:	00800044 	movi	r2,1
   4c028:	f800283a 	ret
   4c02c:	3212b03a 	or	r9,r6,r8
   4c030:	483fec26 	beq	r9,zero,4bfe4 <__alt_data_end+0xfffe67e4>
   4c034:	00bfff84 	movi	r2,-2
   4c038:	f800283a 	ret
   4c03c:	39c03fcc 	andi	r7,r7,255
   4c040:	29c00626 	beq	r5,r7,4c05c <__gedf2+0xb0>
   4c044:	283ff726 	beq	r5,zero,4c024 <__alt_data_end+0xfffe6824>
   4c048:	00bfffc4 	movi	r2,-1
   4c04c:	f800283a 	ret
   4c050:	2292b03a 	or	r9,r4,r10
   4c054:	483fe126 	beq	r9,zero,4bfdc <__alt_data_end+0xfffe67dc>
   4c058:	003ff606 	br	4c034 <__alt_data_end+0xfffe6834>
   4c05c:	18bff916 	blt	r3,r2,4c044 <__alt_data_end+0xfffe6844>
   4c060:	10c00316 	blt	r2,r3,4c070 <__gedf2+0xc4>
   4c064:	42bff736 	bltu	r8,r10,4c044 <__alt_data_end+0xfffe6844>
   4c068:	52000326 	beq	r10,r8,4c078 <__gedf2+0xcc>
   4c06c:	5200042e 	bgeu	r10,r8,4c080 <__gedf2+0xd4>
   4c070:	283fec1e 	bne	r5,zero,4c024 <__alt_data_end+0xfffe6824>
   4c074:	003ff406 	br	4c048 <__alt_data_end+0xfffe6848>
   4c078:	313ff236 	bltu	r6,r4,4c044 <__alt_data_end+0xfffe6844>
   4c07c:	21bffc36 	bltu	r4,r6,4c070 <__alt_data_end+0xfffe6870>
   4c080:	0005883a 	mov	r2,zero
   4c084:	f800283a 	ret

0004c088 <__ledf2>:
   4c088:	2804d53a 	srli	r2,r5,20
   4c08c:	3810d53a 	srli	r8,r7,20
   4c090:	00c00434 	movhi	r3,16
   4c094:	18ffffc4 	addi	r3,r3,-1
   4c098:	1081ffcc 	andi	r2,r2,2047
   4c09c:	0241ffc4 	movi	r9,2047
   4c0a0:	28d4703a 	and	r10,r5,r3
   4c0a4:	4201ffcc 	andi	r8,r8,2047
   4c0a8:	38c6703a 	and	r3,r7,r3
   4c0ac:	280ad7fa 	srli	r5,r5,31
   4c0b0:	380ed7fa 	srli	r7,r7,31
   4c0b4:	12401f26 	beq	r2,r9,4c134 <__ledf2+0xac>
   4c0b8:	0241ffc4 	movi	r9,2047
   4c0bc:	42401426 	beq	r8,r9,4c110 <__ledf2+0x88>
   4c0c0:	1000091e 	bne	r2,zero,4c0e8 <__ledf2+0x60>
   4c0c4:	2296b03a 	or	r11,r4,r10
   4c0c8:	5813003a 	cmpeq	r9,r11,zero
   4c0cc:	29403fcc 	andi	r5,r5,255
   4c0d0:	40000a1e 	bne	r8,zero,4c0fc <__ledf2+0x74>
   4c0d4:	30d8b03a 	or	r12,r6,r3
   4c0d8:	6000081e 	bne	r12,zero,4c0fc <__ledf2+0x74>
   4c0dc:	0005883a 	mov	r2,zero
   4c0e0:	5800111e 	bne	r11,zero,4c128 <__ledf2+0xa0>
   4c0e4:	f800283a 	ret
   4c0e8:	29403fcc 	andi	r5,r5,255
   4c0ec:	40000c1e 	bne	r8,zero,4c120 <__ledf2+0x98>
   4c0f0:	30d2b03a 	or	r9,r6,r3
   4c0f4:	48000c26 	beq	r9,zero,4c128 <__ledf2+0xa0>
   4c0f8:	0013883a 	mov	r9,zero
   4c0fc:	39c03fcc 	andi	r7,r7,255
   4c100:	48000826 	beq	r9,zero,4c124 <__ledf2+0x9c>
   4c104:	38001126 	beq	r7,zero,4c14c <__ledf2+0xc4>
   4c108:	00800044 	movi	r2,1
   4c10c:	f800283a 	ret
   4c110:	30d2b03a 	or	r9,r6,r3
   4c114:	483fea26 	beq	r9,zero,4c0c0 <__alt_data_end+0xfffe68c0>
   4c118:	00800084 	movi	r2,2
   4c11c:	f800283a 	ret
   4c120:	39c03fcc 	andi	r7,r7,255
   4c124:	39400726 	beq	r7,r5,4c144 <__ledf2+0xbc>
   4c128:	2800081e 	bne	r5,zero,4c14c <__ledf2+0xc4>
   4c12c:	00800044 	movi	r2,1
   4c130:	f800283a 	ret
   4c134:	2292b03a 	or	r9,r4,r10
   4c138:	483fdf26 	beq	r9,zero,4c0b8 <__alt_data_end+0xfffe68b8>
   4c13c:	00800084 	movi	r2,2
   4c140:	f800283a 	ret
   4c144:	4080030e 	bge	r8,r2,4c154 <__ledf2+0xcc>
   4c148:	383fef26 	beq	r7,zero,4c108 <__alt_data_end+0xfffe6908>
   4c14c:	00bfffc4 	movi	r2,-1
   4c150:	f800283a 	ret
   4c154:	123feb16 	blt	r2,r8,4c104 <__alt_data_end+0xfffe6904>
   4c158:	1abff336 	bltu	r3,r10,4c128 <__alt_data_end+0xfffe6928>
   4c15c:	50c00326 	beq	r10,r3,4c16c <__ledf2+0xe4>
   4c160:	50c0042e 	bgeu	r10,r3,4c174 <__ledf2+0xec>
   4c164:	283fe81e 	bne	r5,zero,4c108 <__alt_data_end+0xfffe6908>
   4c168:	003ff806 	br	4c14c <__alt_data_end+0xfffe694c>
   4c16c:	313fee36 	bltu	r6,r4,4c128 <__alt_data_end+0xfffe6928>
   4c170:	21bffc36 	bltu	r4,r6,4c164 <__alt_data_end+0xfffe6964>
   4c174:	0005883a 	mov	r2,zero
   4c178:	f800283a 	ret

0004c17c <__muldf3>:
   4c17c:	deffee04 	addi	sp,sp,-72
   4c180:	dd000c15 	stw	r20,48(sp)
   4c184:	2828d53a 	srli	r20,r5,20
   4c188:	ddc00f15 	stw	r23,60(sp)
   4c18c:	282ed7fa 	srli	r23,r5,31
   4c190:	dc000815 	stw	r16,32(sp)
   4c194:	04000434 	movhi	r16,16
   4c198:	dcc00b15 	stw	r19,44(sp)
   4c19c:	843fffc4 	addi	r16,r16,-1
   4c1a0:	dfc01115 	stw	ra,68(sp)
   4c1a4:	df001015 	stw	fp,64(sp)
   4c1a8:	dd800e15 	stw	r22,56(sp)
   4c1ac:	dd400d15 	stw	r21,52(sp)
   4c1b0:	dc800a15 	stw	r18,40(sp)
   4c1b4:	dc400915 	stw	r17,36(sp)
   4c1b8:	a501ffcc 	andi	r20,r20,2047
   4c1bc:	2c20703a 	and	r16,r5,r16
   4c1c0:	b827883a 	mov	r19,r23
   4c1c4:	ba403fcc 	andi	r9,r23,255
   4c1c8:	a0006026 	beq	r20,zero,4c34c <__muldf3+0x1d0>
   4c1cc:	0081ffc4 	movi	r2,2047
   4c1d0:	202d883a 	mov	r22,r4
   4c1d4:	a0803626 	beq	r20,r2,4c2b0 <__muldf3+0x134>
   4c1d8:	84000434 	orhi	r16,r16,16
   4c1dc:	200ad77a 	srli	r5,r4,29
   4c1e0:	800490fa 	slli	r2,r16,3
   4c1e4:	202c90fa 	slli	r22,r4,3
   4c1e8:	a53f0044 	addi	r20,r20,-1023
   4c1ec:	28a0b03a 	or	r16,r5,r2
   4c1f0:	002b883a 	mov	r21,zero
   4c1f4:	000b883a 	mov	r5,zero
   4c1f8:	3804d53a 	srli	r2,r7,20
   4c1fc:	3838d7fa 	srli	fp,r7,31
   4c200:	04400434 	movhi	r17,16
   4c204:	8c7fffc4 	addi	r17,r17,-1
   4c208:	1081ffcc 	andi	r2,r2,2047
   4c20c:	3025883a 	mov	r18,r6
   4c210:	3c62703a 	and	r17,r7,r17
   4c214:	e2803fcc 	andi	r10,fp,255
   4c218:	10006d26 	beq	r2,zero,4c3d0 <__muldf3+0x254>
   4c21c:	00c1ffc4 	movi	r3,2047
   4c220:	10c06526 	beq	r2,r3,4c3b8 <__muldf3+0x23c>
   4c224:	8c400434 	orhi	r17,r17,16
   4c228:	300ed77a 	srli	r7,r6,29
   4c22c:	880690fa 	slli	r3,r17,3
   4c230:	302490fa 	slli	r18,r6,3
   4c234:	10bf0044 	addi	r2,r2,-1023
   4c238:	38e2b03a 	or	r17,r7,r3
   4c23c:	000f883a 	mov	r7,zero
   4c240:	a087883a 	add	r3,r20,r2
   4c244:	010003c4 	movi	r4,15
   4c248:	3d44b03a 	or	r2,r7,r21
   4c24c:	e5ccf03a 	xor	r6,fp,r23
   4c250:	1a000044 	addi	r8,r3,1
   4c254:	20809b36 	bltu	r4,r2,4c4c4 <__muldf3+0x348>
   4c258:	100490ba 	slli	r2,r2,2
   4c25c:	01000174 	movhi	r4,5
   4c260:	21309c04 	addi	r4,r4,-15760
   4c264:	1105883a 	add	r2,r2,r4
   4c268:	10800017 	ldw	r2,0(r2)
   4c26c:	1000683a 	jmp	r2
   4c270:	0004c4c4 	movi	zero,4883
   4c274:	0004c2d0 	cmplti	zero,zero,4875
   4c278:	0004c2d0 	cmplti	zero,zero,4875
   4c27c:	0004c2cc 	andi	zero,zero,4875
   4c280:	0004c4a0 	cmpeqi	zero,zero,4882
   4c284:	0004c4a0 	cmpeqi	zero,zero,4882
   4c288:	0004c488 	cmpgei	zero,zero,4882
   4c28c:	0004c2cc 	andi	zero,zero,4875
   4c290:	0004c4a0 	cmpeqi	zero,zero,4882
   4c294:	0004c488 	cmpgei	zero,zero,4882
   4c298:	0004c4a0 	cmpeqi	zero,zero,4882
   4c29c:	0004c2cc 	andi	zero,zero,4875
   4c2a0:	0004c4b0 	cmpltui	zero,zero,4882
   4c2a4:	0004c4b0 	cmpltui	zero,zero,4882
   4c2a8:	0004c4b0 	cmpltui	zero,zero,4882
   4c2ac:	0004c810 	cmplti	zero,zero,4896
   4c2b0:	2404b03a 	or	r2,r4,r16
   4c2b4:	1000711e 	bne	r2,zero,4c47c <__muldf3+0x300>
   4c2b8:	05400204 	movi	r21,8
   4c2bc:	0021883a 	mov	r16,zero
   4c2c0:	002d883a 	mov	r22,zero
   4c2c4:	01400084 	movi	r5,2
   4c2c8:	003fcb06 	br	4c1f8 <__alt_data_end+0xfffe69f8>
   4c2cc:	500d883a 	mov	r6,r10
   4c2d0:	00800084 	movi	r2,2
   4c2d4:	38805926 	beq	r7,r2,4c43c <__muldf3+0x2c0>
   4c2d8:	008000c4 	movi	r2,3
   4c2dc:	3881bb26 	beq	r7,r2,4c9cc <__muldf3+0x850>
   4c2e0:	00800044 	movi	r2,1
   4c2e4:	3881961e 	bne	r7,r2,4c940 <__muldf3+0x7c4>
   4c2e8:	3027883a 	mov	r19,r6
   4c2ec:	0005883a 	mov	r2,zero
   4c2f0:	0021883a 	mov	r16,zero
   4c2f4:	002d883a 	mov	r22,zero
   4c2f8:	1004953a 	slli	r2,r2,20
   4c2fc:	98c03fcc 	andi	r3,r19,255
   4c300:	04400434 	movhi	r17,16
   4c304:	8c7fffc4 	addi	r17,r17,-1
   4c308:	180697fa 	slli	r3,r3,31
   4c30c:	8460703a 	and	r16,r16,r17
   4c310:	80a0b03a 	or	r16,r16,r2
   4c314:	80c6b03a 	or	r3,r16,r3
   4c318:	b005883a 	mov	r2,r22
   4c31c:	dfc01117 	ldw	ra,68(sp)
   4c320:	df001017 	ldw	fp,64(sp)
   4c324:	ddc00f17 	ldw	r23,60(sp)
   4c328:	dd800e17 	ldw	r22,56(sp)
   4c32c:	dd400d17 	ldw	r21,52(sp)
   4c330:	dd000c17 	ldw	r20,48(sp)
   4c334:	dcc00b17 	ldw	r19,44(sp)
   4c338:	dc800a17 	ldw	r18,40(sp)
   4c33c:	dc400917 	ldw	r17,36(sp)
   4c340:	dc000817 	ldw	r16,32(sp)
   4c344:	dec01204 	addi	sp,sp,72
   4c348:	f800283a 	ret
   4c34c:	2404b03a 	or	r2,r4,r16
   4c350:	202b883a 	mov	r21,r4
   4c354:	10004426 	beq	r2,zero,4c468 <__muldf3+0x2ec>
   4c358:	80015126 	beq	r16,zero,4c8a0 <__muldf3+0x724>
   4c35c:	8009883a 	mov	r4,r16
   4c360:	d9800715 	stw	r6,28(sp)
   4c364:	d9c00215 	stw	r7,8(sp)
   4c368:	da400415 	stw	r9,16(sp)
   4c36c:	004d4e80 	call	4d4e8 <__clzsi2>
   4c370:	d9800717 	ldw	r6,28(sp)
   4c374:	d9c00217 	ldw	r7,8(sp)
   4c378:	da400417 	ldw	r9,16(sp)
   4c37c:	113ffd44 	addi	r4,r2,-11
   4c380:	00c00704 	movi	r3,28
   4c384:	19014216 	blt	r3,r4,4c890 <__muldf3+0x714>
   4c388:	00c00744 	movi	r3,29
   4c38c:	15bffe04 	addi	r22,r2,-8
   4c390:	1907c83a 	sub	r3,r3,r4
   4c394:	85a0983a 	sll	r16,r16,r22
   4c398:	a8c6d83a 	srl	r3,r21,r3
   4c39c:	adac983a 	sll	r22,r21,r22
   4c3a0:	1c20b03a 	or	r16,r3,r16
   4c3a4:	1080fcc4 	addi	r2,r2,1011
   4c3a8:	00a9c83a 	sub	r20,zero,r2
   4c3ac:	002b883a 	mov	r21,zero
   4c3b0:	000b883a 	mov	r5,zero
   4c3b4:	003f9006 	br	4c1f8 <__alt_data_end+0xfffe69f8>
   4c3b8:	3446b03a 	or	r3,r6,r17
   4c3bc:	1800281e 	bne	r3,zero,4c460 <__muldf3+0x2e4>
   4c3c0:	0023883a 	mov	r17,zero
   4c3c4:	0025883a 	mov	r18,zero
   4c3c8:	01c00084 	movi	r7,2
   4c3cc:	003f9c06 	br	4c240 <__alt_data_end+0xfffe6a40>
   4c3d0:	3446b03a 	or	r3,r6,r17
   4c3d4:	18001e26 	beq	r3,zero,4c450 <__muldf3+0x2d4>
   4c3d8:	88012126 	beq	r17,zero,4c860 <__muldf3+0x6e4>
   4c3dc:	8809883a 	mov	r4,r17
   4c3e0:	d9400215 	stw	r5,8(sp)
   4c3e4:	d9800715 	stw	r6,28(sp)
   4c3e8:	da400415 	stw	r9,16(sp)
   4c3ec:	da800315 	stw	r10,12(sp)
   4c3f0:	004d4e80 	call	4d4e8 <__clzsi2>
   4c3f4:	d9400217 	ldw	r5,8(sp)
   4c3f8:	d9800717 	ldw	r6,28(sp)
   4c3fc:	da400417 	ldw	r9,16(sp)
   4c400:	da800317 	ldw	r10,12(sp)
   4c404:	113ffd44 	addi	r4,r2,-11
   4c408:	00c00704 	movi	r3,28
   4c40c:	19011016 	blt	r3,r4,4c850 <__muldf3+0x6d4>
   4c410:	00c00744 	movi	r3,29
   4c414:	14bffe04 	addi	r18,r2,-8
   4c418:	1907c83a 	sub	r3,r3,r4
   4c41c:	8ca2983a 	sll	r17,r17,r18
   4c420:	30c6d83a 	srl	r3,r6,r3
   4c424:	34a4983a 	sll	r18,r6,r18
   4c428:	1c62b03a 	or	r17,r3,r17
   4c42c:	1080fcc4 	addi	r2,r2,1011
   4c430:	0085c83a 	sub	r2,zero,r2
   4c434:	000f883a 	mov	r7,zero
   4c438:	003f8106 	br	4c240 <__alt_data_end+0xfffe6a40>
   4c43c:	3027883a 	mov	r19,r6
   4c440:	0081ffc4 	movi	r2,2047
   4c444:	0021883a 	mov	r16,zero
   4c448:	002d883a 	mov	r22,zero
   4c44c:	003faa06 	br	4c2f8 <__alt_data_end+0xfffe6af8>
   4c450:	0023883a 	mov	r17,zero
   4c454:	0025883a 	mov	r18,zero
   4c458:	01c00044 	movi	r7,1
   4c45c:	003f7806 	br	4c240 <__alt_data_end+0xfffe6a40>
   4c460:	01c000c4 	movi	r7,3
   4c464:	003f7606 	br	4c240 <__alt_data_end+0xfffe6a40>
   4c468:	05400104 	movi	r21,4
   4c46c:	0021883a 	mov	r16,zero
   4c470:	002d883a 	mov	r22,zero
   4c474:	01400044 	movi	r5,1
   4c478:	003f5f06 	br	4c1f8 <__alt_data_end+0xfffe69f8>
   4c47c:	05400304 	movi	r21,12
   4c480:	014000c4 	movi	r5,3
   4c484:	003f5c06 	br	4c1f8 <__alt_data_end+0xfffe69f8>
   4c488:	04000434 	movhi	r16,16
   4c48c:	0027883a 	mov	r19,zero
   4c490:	843fffc4 	addi	r16,r16,-1
   4c494:	05bfffc4 	movi	r22,-1
   4c498:	0081ffc4 	movi	r2,2047
   4c49c:	003f9606 	br	4c2f8 <__alt_data_end+0xfffe6af8>
   4c4a0:	8023883a 	mov	r17,r16
   4c4a4:	b025883a 	mov	r18,r22
   4c4a8:	280f883a 	mov	r7,r5
   4c4ac:	003f8806 	br	4c2d0 <__alt_data_end+0xfffe6ad0>
   4c4b0:	8023883a 	mov	r17,r16
   4c4b4:	b025883a 	mov	r18,r22
   4c4b8:	480d883a 	mov	r6,r9
   4c4bc:	280f883a 	mov	r7,r5
   4c4c0:	003f8306 	br	4c2d0 <__alt_data_end+0xfffe6ad0>
   4c4c4:	b026d43a 	srli	r19,r22,16
   4c4c8:	902ed43a 	srli	r23,r18,16
   4c4cc:	b5bfffcc 	andi	r22,r22,65535
   4c4d0:	94bfffcc 	andi	r18,r18,65535
   4c4d4:	b00b883a 	mov	r5,r22
   4c4d8:	9009883a 	mov	r4,r18
   4c4dc:	d8c00515 	stw	r3,20(sp)
   4c4e0:	d9800715 	stw	r6,28(sp)
   4c4e4:	da000615 	stw	r8,24(sp)
   4c4e8:	00406e00 	call	406e0 <__mulsi3>
   4c4ec:	980b883a 	mov	r5,r19
   4c4f0:	9009883a 	mov	r4,r18
   4c4f4:	1029883a 	mov	r20,r2
   4c4f8:	00406e00 	call	406e0 <__mulsi3>
   4c4fc:	b80b883a 	mov	r5,r23
   4c500:	9809883a 	mov	r4,r19
   4c504:	102b883a 	mov	r21,r2
   4c508:	00406e00 	call	406e0 <__mulsi3>
   4c50c:	b809883a 	mov	r4,r23
   4c510:	b00b883a 	mov	r5,r22
   4c514:	1039883a 	mov	fp,r2
   4c518:	00406e00 	call	406e0 <__mulsi3>
   4c51c:	a008d43a 	srli	r4,r20,16
   4c520:	1545883a 	add	r2,r2,r21
   4c524:	d8c00517 	ldw	r3,20(sp)
   4c528:	2085883a 	add	r2,r4,r2
   4c52c:	d9800717 	ldw	r6,28(sp)
   4c530:	da000617 	ldw	r8,24(sp)
   4c534:	1540022e 	bgeu	r2,r21,4c540 <__muldf3+0x3c4>
   4c538:	01000074 	movhi	r4,1
   4c53c:	e139883a 	add	fp,fp,r4
   4c540:	100e943a 	slli	r7,r2,16
   4c544:	1004d43a 	srli	r2,r2,16
   4c548:	882ad43a 	srli	r21,r17,16
   4c54c:	a53fffcc 	andi	r20,r20,65535
   4c550:	8c7fffcc 	andi	r17,r17,65535
   4c554:	3d29883a 	add	r20,r7,r20
   4c558:	b00b883a 	mov	r5,r22
   4c55c:	8809883a 	mov	r4,r17
   4c560:	d8c00515 	stw	r3,20(sp)
   4c564:	d9800715 	stw	r6,28(sp)
   4c568:	da000615 	stw	r8,24(sp)
   4c56c:	dd000115 	stw	r20,4(sp)
   4c570:	d8800015 	stw	r2,0(sp)
   4c574:	00406e00 	call	406e0 <__mulsi3>
   4c578:	980b883a 	mov	r5,r19
   4c57c:	8809883a 	mov	r4,r17
   4c580:	d8800215 	stw	r2,8(sp)
   4c584:	00406e00 	call	406e0 <__mulsi3>
   4c588:	9809883a 	mov	r4,r19
   4c58c:	a80b883a 	mov	r5,r21
   4c590:	1029883a 	mov	r20,r2
   4c594:	00406e00 	call	406e0 <__mulsi3>
   4c598:	b00b883a 	mov	r5,r22
   4c59c:	a809883a 	mov	r4,r21
   4c5a0:	d8800415 	stw	r2,16(sp)
   4c5a4:	00406e00 	call	406e0 <__mulsi3>
   4c5a8:	d9c00217 	ldw	r7,8(sp)
   4c5ac:	1505883a 	add	r2,r2,r20
   4c5b0:	d8c00517 	ldw	r3,20(sp)
   4c5b4:	3826d43a 	srli	r19,r7,16
   4c5b8:	d9800717 	ldw	r6,28(sp)
   4c5bc:	da000617 	ldw	r8,24(sp)
   4c5c0:	9885883a 	add	r2,r19,r2
   4c5c4:	da400417 	ldw	r9,16(sp)
   4c5c8:	1500022e 	bgeu	r2,r20,4c5d4 <__muldf3+0x458>
   4c5cc:	01000074 	movhi	r4,1
   4c5d0:	4913883a 	add	r9,r9,r4
   4c5d4:	1028d43a 	srli	r20,r2,16
   4c5d8:	1004943a 	slli	r2,r2,16
   4c5dc:	802cd43a 	srli	r22,r16,16
   4c5e0:	843fffcc 	andi	r16,r16,65535
   4c5e4:	3cffffcc 	andi	r19,r7,65535
   4c5e8:	9009883a 	mov	r4,r18
   4c5ec:	800b883a 	mov	r5,r16
   4c5f0:	a269883a 	add	r20,r20,r9
   4c5f4:	d8c00515 	stw	r3,20(sp)
   4c5f8:	d9800715 	stw	r6,28(sp)
   4c5fc:	da000615 	stw	r8,24(sp)
   4c600:	14e7883a 	add	r19,r2,r19
   4c604:	00406e00 	call	406e0 <__mulsi3>
   4c608:	9009883a 	mov	r4,r18
   4c60c:	b00b883a 	mov	r5,r22
   4c610:	d8800315 	stw	r2,12(sp)
   4c614:	00406e00 	call	406e0 <__mulsi3>
   4c618:	b809883a 	mov	r4,r23
   4c61c:	b00b883a 	mov	r5,r22
   4c620:	d8800215 	stw	r2,8(sp)
   4c624:	00406e00 	call	406e0 <__mulsi3>
   4c628:	b80b883a 	mov	r5,r23
   4c62c:	8009883a 	mov	r4,r16
   4c630:	d8800415 	stw	r2,16(sp)
   4c634:	00406e00 	call	406e0 <__mulsi3>
   4c638:	da800317 	ldw	r10,12(sp)
   4c63c:	d9c00217 	ldw	r7,8(sp)
   4c640:	d9000017 	ldw	r4,0(sp)
   4c644:	502ed43a 	srli	r23,r10,16
   4c648:	11c5883a 	add	r2,r2,r7
   4c64c:	24e5883a 	add	r18,r4,r19
   4c650:	b885883a 	add	r2,r23,r2
   4c654:	d8c00517 	ldw	r3,20(sp)
   4c658:	d9800717 	ldw	r6,28(sp)
   4c65c:	da000617 	ldw	r8,24(sp)
   4c660:	da400417 	ldw	r9,16(sp)
   4c664:	11c0022e 	bgeu	r2,r7,4c670 <__muldf3+0x4f4>
   4c668:	01000074 	movhi	r4,1
   4c66c:	4913883a 	add	r9,r9,r4
   4c670:	100ed43a 	srli	r7,r2,16
   4c674:	1004943a 	slli	r2,r2,16
   4c678:	55ffffcc 	andi	r23,r10,65535
   4c67c:	3a53883a 	add	r9,r7,r9
   4c680:	8809883a 	mov	r4,r17
   4c684:	800b883a 	mov	r5,r16
   4c688:	d8c00515 	stw	r3,20(sp)
   4c68c:	d9800715 	stw	r6,28(sp)
   4c690:	da000615 	stw	r8,24(sp)
   4c694:	da400415 	stw	r9,16(sp)
   4c698:	15ef883a 	add	r23,r2,r23
   4c69c:	00406e00 	call	406e0 <__mulsi3>
   4c6a0:	8809883a 	mov	r4,r17
   4c6a4:	b00b883a 	mov	r5,r22
   4c6a8:	d8800215 	stw	r2,8(sp)
   4c6ac:	00406e00 	call	406e0 <__mulsi3>
   4c6b0:	b00b883a 	mov	r5,r22
   4c6b4:	a809883a 	mov	r4,r21
   4c6b8:	d8800315 	stw	r2,12(sp)
   4c6bc:	00406e00 	call	406e0 <__mulsi3>
   4c6c0:	8009883a 	mov	r4,r16
   4c6c4:	a80b883a 	mov	r5,r21
   4c6c8:	1023883a 	mov	r17,r2
   4c6cc:	00406e00 	call	406e0 <__mulsi3>
   4c6d0:	d9c00217 	ldw	r7,8(sp)
   4c6d4:	da800317 	ldw	r10,12(sp)
   4c6d8:	d8c00517 	ldw	r3,20(sp)
   4c6dc:	3808d43a 	srli	r4,r7,16
   4c6e0:	1285883a 	add	r2,r2,r10
   4c6e4:	d9800717 	ldw	r6,28(sp)
   4c6e8:	2085883a 	add	r2,r4,r2
   4c6ec:	da000617 	ldw	r8,24(sp)
   4c6f0:	da400417 	ldw	r9,16(sp)
   4c6f4:	1280022e 	bgeu	r2,r10,4c700 <__muldf3+0x584>
   4c6f8:	01000074 	movhi	r4,1
   4c6fc:	8923883a 	add	r17,r17,r4
   4c700:	1008943a 	slli	r4,r2,16
   4c704:	39ffffcc 	andi	r7,r7,65535
   4c708:	e4b9883a 	add	fp,fp,r18
   4c70c:	21cf883a 	add	r7,r4,r7
   4c710:	e4e7803a 	cmpltu	r19,fp,r19
   4c714:	3d0f883a 	add	r7,r7,r20
   4c718:	bf39883a 	add	fp,r23,fp
   4c71c:	99c9883a 	add	r4,r19,r7
   4c720:	e5ef803a 	cmpltu	r23,fp,r23
   4c724:	490b883a 	add	r5,r9,r4
   4c728:	1004d43a 	srli	r2,r2,16
   4c72c:	b965883a 	add	r18,r23,r5
   4c730:	24c9803a 	cmpltu	r4,r4,r19
   4c734:	3d29803a 	cmpltu	r20,r7,r20
   4c738:	a128b03a 	or	r20,r20,r4
   4c73c:	95ef803a 	cmpltu	r23,r18,r23
   4c740:	2a53803a 	cmpltu	r9,r5,r9
   4c744:	a0a9883a 	add	r20,r20,r2
   4c748:	4deeb03a 	or	r23,r9,r23
   4c74c:	a5ef883a 	add	r23,r20,r23
   4c750:	bc63883a 	add	r17,r23,r17
   4c754:	e004927a 	slli	r2,fp,9
   4c758:	d9000117 	ldw	r4,4(sp)
   4c75c:	882e927a 	slli	r23,r17,9
   4c760:	9022d5fa 	srli	r17,r18,23
   4c764:	e038d5fa 	srli	fp,fp,23
   4c768:	1104b03a 	or	r2,r2,r4
   4c76c:	9024927a 	slli	r18,r18,9
   4c770:	1004c03a 	cmpne	r2,r2,zero
   4c774:	bc62b03a 	or	r17,r23,r17
   4c778:	1738b03a 	or	fp,r2,fp
   4c77c:	8880402c 	andhi	r2,r17,256
   4c780:	e4a4b03a 	or	r18,fp,r18
   4c784:	10000726 	beq	r2,zero,4c7a4 <__muldf3+0x628>
   4c788:	9006d07a 	srli	r3,r18,1
   4c78c:	880497fa 	slli	r2,r17,31
   4c790:	9480004c 	andi	r18,r18,1
   4c794:	8822d07a 	srli	r17,r17,1
   4c798:	1ca4b03a 	or	r18,r3,r18
   4c79c:	14a4b03a 	or	r18,r2,r18
   4c7a0:	4007883a 	mov	r3,r8
   4c7a4:	1880ffc4 	addi	r2,r3,1023
   4c7a8:	0080460e 	bge	zero,r2,4c8c4 <__muldf3+0x748>
   4c7ac:	910001cc 	andi	r4,r18,7
   4c7b0:	20000726 	beq	r4,zero,4c7d0 <__muldf3+0x654>
   4c7b4:	910003cc 	andi	r4,r18,15
   4c7b8:	01400104 	movi	r5,4
   4c7bc:	21400426 	beq	r4,r5,4c7d0 <__muldf3+0x654>
   4c7c0:	9149883a 	add	r4,r18,r5
   4c7c4:	24a5803a 	cmpltu	r18,r4,r18
   4c7c8:	8ca3883a 	add	r17,r17,r18
   4c7cc:	2025883a 	mov	r18,r4
   4c7d0:	8900402c 	andhi	r4,r17,256
   4c7d4:	20000426 	beq	r4,zero,4c7e8 <__muldf3+0x66c>
   4c7d8:	18810004 	addi	r2,r3,1024
   4c7dc:	00ffc034 	movhi	r3,65280
   4c7e0:	18ffffc4 	addi	r3,r3,-1
   4c7e4:	88e2703a 	and	r17,r17,r3
   4c7e8:	00c1ff84 	movi	r3,2046
   4c7ec:	18bf1316 	blt	r3,r2,4c43c <__alt_data_end+0xfffe6c3c>
   4c7f0:	882c977a 	slli	r22,r17,29
   4c7f4:	9024d0fa 	srli	r18,r18,3
   4c7f8:	8822927a 	slli	r17,r17,9
   4c7fc:	1081ffcc 	andi	r2,r2,2047
   4c800:	b4acb03a 	or	r22,r22,r18
   4c804:	8820d33a 	srli	r16,r17,12
   4c808:	3027883a 	mov	r19,r6
   4c80c:	003eba06 	br	4c2f8 <__alt_data_end+0xfffe6af8>
   4c810:	8080022c 	andhi	r2,r16,8
   4c814:	10000926 	beq	r2,zero,4c83c <__muldf3+0x6c0>
   4c818:	8880022c 	andhi	r2,r17,8
   4c81c:	1000071e 	bne	r2,zero,4c83c <__muldf3+0x6c0>
   4c820:	00800434 	movhi	r2,16
   4c824:	8c000234 	orhi	r16,r17,8
   4c828:	10bfffc4 	addi	r2,r2,-1
   4c82c:	e027883a 	mov	r19,fp
   4c830:	80a0703a 	and	r16,r16,r2
   4c834:	902d883a 	mov	r22,r18
   4c838:	003f1706 	br	4c498 <__alt_data_end+0xfffe6c98>
   4c83c:	00800434 	movhi	r2,16
   4c840:	84000234 	orhi	r16,r16,8
   4c844:	10bfffc4 	addi	r2,r2,-1
   4c848:	80a0703a 	and	r16,r16,r2
   4c84c:	003f1206 	br	4c498 <__alt_data_end+0xfffe6c98>
   4c850:	147ff604 	addi	r17,r2,-40
   4c854:	3462983a 	sll	r17,r6,r17
   4c858:	0025883a 	mov	r18,zero
   4c85c:	003ef306 	br	4c42c <__alt_data_end+0xfffe6c2c>
   4c860:	3009883a 	mov	r4,r6
   4c864:	d9400215 	stw	r5,8(sp)
   4c868:	d9800715 	stw	r6,28(sp)
   4c86c:	da400415 	stw	r9,16(sp)
   4c870:	da800315 	stw	r10,12(sp)
   4c874:	004d4e80 	call	4d4e8 <__clzsi2>
   4c878:	10800804 	addi	r2,r2,32
   4c87c:	da800317 	ldw	r10,12(sp)
   4c880:	da400417 	ldw	r9,16(sp)
   4c884:	d9800717 	ldw	r6,28(sp)
   4c888:	d9400217 	ldw	r5,8(sp)
   4c88c:	003edd06 	br	4c404 <__alt_data_end+0xfffe6c04>
   4c890:	143ff604 	addi	r16,r2,-40
   4c894:	ac20983a 	sll	r16,r21,r16
   4c898:	002d883a 	mov	r22,zero
   4c89c:	003ec106 	br	4c3a4 <__alt_data_end+0xfffe6ba4>
   4c8a0:	d9800715 	stw	r6,28(sp)
   4c8a4:	d9c00215 	stw	r7,8(sp)
   4c8a8:	da400415 	stw	r9,16(sp)
   4c8ac:	004d4e80 	call	4d4e8 <__clzsi2>
   4c8b0:	10800804 	addi	r2,r2,32
   4c8b4:	da400417 	ldw	r9,16(sp)
   4c8b8:	d9c00217 	ldw	r7,8(sp)
   4c8bc:	d9800717 	ldw	r6,28(sp)
   4c8c0:	003eae06 	br	4c37c <__alt_data_end+0xfffe6b7c>
   4c8c4:	00c00044 	movi	r3,1
   4c8c8:	1887c83a 	sub	r3,r3,r2
   4c8cc:	01000e04 	movi	r4,56
   4c8d0:	20fe8516 	blt	r4,r3,4c2e8 <__alt_data_end+0xfffe6ae8>
   4c8d4:	010007c4 	movi	r4,31
   4c8d8:	20c01b16 	blt	r4,r3,4c948 <__muldf3+0x7cc>
   4c8dc:	00800804 	movi	r2,32
   4c8e0:	10c5c83a 	sub	r2,r2,r3
   4c8e4:	888a983a 	sll	r5,r17,r2
   4c8e8:	90c8d83a 	srl	r4,r18,r3
   4c8ec:	9084983a 	sll	r2,r18,r2
   4c8f0:	88e2d83a 	srl	r17,r17,r3
   4c8f4:	2906b03a 	or	r3,r5,r4
   4c8f8:	1004c03a 	cmpne	r2,r2,zero
   4c8fc:	1886b03a 	or	r3,r3,r2
   4c900:	188001cc 	andi	r2,r3,7
   4c904:	10000726 	beq	r2,zero,4c924 <__muldf3+0x7a8>
   4c908:	188003cc 	andi	r2,r3,15
   4c90c:	01000104 	movi	r4,4
   4c910:	11000426 	beq	r2,r4,4c924 <__muldf3+0x7a8>
   4c914:	1805883a 	mov	r2,r3
   4c918:	10c00104 	addi	r3,r2,4
   4c91c:	1885803a 	cmpltu	r2,r3,r2
   4c920:	88a3883a 	add	r17,r17,r2
   4c924:	8880202c 	andhi	r2,r17,128
   4c928:	10001c26 	beq	r2,zero,4c99c <__muldf3+0x820>
   4c92c:	3027883a 	mov	r19,r6
   4c930:	00800044 	movi	r2,1
   4c934:	0021883a 	mov	r16,zero
   4c938:	002d883a 	mov	r22,zero
   4c93c:	003e6e06 	br	4c2f8 <__alt_data_end+0xfffe6af8>
   4c940:	4007883a 	mov	r3,r8
   4c944:	003f9706 	br	4c7a4 <__alt_data_end+0xfffe6fa4>
   4c948:	017ff844 	movi	r5,-31
   4c94c:	2885c83a 	sub	r2,r5,r2
   4c950:	888ad83a 	srl	r5,r17,r2
   4c954:	00800804 	movi	r2,32
   4c958:	18801a26 	beq	r3,r2,4c9c4 <__muldf3+0x848>
   4c95c:	01001004 	movi	r4,64
   4c960:	20c7c83a 	sub	r3,r4,r3
   4c964:	88e2983a 	sll	r17,r17,r3
   4c968:	8ca4b03a 	or	r18,r17,r18
   4c96c:	9004c03a 	cmpne	r2,r18,zero
   4c970:	2884b03a 	or	r2,r5,r2
   4c974:	144001cc 	andi	r17,r2,7
   4c978:	88000d1e 	bne	r17,zero,4c9b0 <__muldf3+0x834>
   4c97c:	0021883a 	mov	r16,zero
   4c980:	102cd0fa 	srli	r22,r2,3
   4c984:	3027883a 	mov	r19,r6
   4c988:	0005883a 	mov	r2,zero
   4c98c:	b46cb03a 	or	r22,r22,r17
   4c990:	003e5906 	br	4c2f8 <__alt_data_end+0xfffe6af8>
   4c994:	1007883a 	mov	r3,r2
   4c998:	0023883a 	mov	r17,zero
   4c99c:	8820927a 	slli	r16,r17,9
   4c9a0:	1805883a 	mov	r2,r3
   4c9a4:	8822977a 	slli	r17,r17,29
   4c9a8:	8020d33a 	srli	r16,r16,12
   4c9ac:	003ff406 	br	4c980 <__alt_data_end+0xfffe7180>
   4c9b0:	10c003cc 	andi	r3,r2,15
   4c9b4:	01000104 	movi	r4,4
   4c9b8:	193ff626 	beq	r3,r4,4c994 <__alt_data_end+0xfffe7194>
   4c9bc:	0023883a 	mov	r17,zero
   4c9c0:	003fd506 	br	4c918 <__alt_data_end+0xfffe7118>
   4c9c4:	0023883a 	mov	r17,zero
   4c9c8:	003fe706 	br	4c968 <__alt_data_end+0xfffe7168>
   4c9cc:	00800434 	movhi	r2,16
   4c9d0:	8c000234 	orhi	r16,r17,8
   4c9d4:	10bfffc4 	addi	r2,r2,-1
   4c9d8:	3027883a 	mov	r19,r6
   4c9dc:	80a0703a 	and	r16,r16,r2
   4c9e0:	902d883a 	mov	r22,r18
   4c9e4:	003eac06 	br	4c498 <__alt_data_end+0xfffe6c98>

0004c9e8 <__subdf3>:
   4c9e8:	02000434 	movhi	r8,16
   4c9ec:	423fffc4 	addi	r8,r8,-1
   4c9f0:	defffb04 	addi	sp,sp,-20
   4c9f4:	2a14703a 	and	r10,r5,r8
   4c9f8:	3812d53a 	srli	r9,r7,20
   4c9fc:	3a10703a 	and	r8,r7,r8
   4ca00:	2006d77a 	srli	r3,r4,29
   4ca04:	3004d77a 	srli	r2,r6,29
   4ca08:	dc000015 	stw	r16,0(sp)
   4ca0c:	501490fa 	slli	r10,r10,3
   4ca10:	2820d53a 	srli	r16,r5,20
   4ca14:	401090fa 	slli	r8,r8,3
   4ca18:	dc800215 	stw	r18,8(sp)
   4ca1c:	dc400115 	stw	r17,4(sp)
   4ca20:	dfc00415 	stw	ra,16(sp)
   4ca24:	202290fa 	slli	r17,r4,3
   4ca28:	dcc00315 	stw	r19,12(sp)
   4ca2c:	4a41ffcc 	andi	r9,r9,2047
   4ca30:	0101ffc4 	movi	r4,2047
   4ca34:	2824d7fa 	srli	r18,r5,31
   4ca38:	8401ffcc 	andi	r16,r16,2047
   4ca3c:	50c6b03a 	or	r3,r10,r3
   4ca40:	380ed7fa 	srli	r7,r7,31
   4ca44:	408ab03a 	or	r5,r8,r2
   4ca48:	300c90fa 	slli	r6,r6,3
   4ca4c:	49009626 	beq	r9,r4,4cca8 <__subdf3+0x2c0>
   4ca50:	39c0005c 	xori	r7,r7,1
   4ca54:	8245c83a 	sub	r2,r16,r9
   4ca58:	3c807426 	beq	r7,r18,4cc2c <__subdf3+0x244>
   4ca5c:	0080af0e 	bge	zero,r2,4cd1c <__subdf3+0x334>
   4ca60:	48002a1e 	bne	r9,zero,4cb0c <__subdf3+0x124>
   4ca64:	2988b03a 	or	r4,r5,r6
   4ca68:	20009a1e 	bne	r4,zero,4ccd4 <__subdf3+0x2ec>
   4ca6c:	888001cc 	andi	r2,r17,7
   4ca70:	10000726 	beq	r2,zero,4ca90 <__subdf3+0xa8>
   4ca74:	888003cc 	andi	r2,r17,15
   4ca78:	01000104 	movi	r4,4
   4ca7c:	11000426 	beq	r2,r4,4ca90 <__subdf3+0xa8>
   4ca80:	890b883a 	add	r5,r17,r4
   4ca84:	2c63803a 	cmpltu	r17,r5,r17
   4ca88:	1c47883a 	add	r3,r3,r17
   4ca8c:	2823883a 	mov	r17,r5
   4ca90:	1880202c 	andhi	r2,r3,128
   4ca94:	10005926 	beq	r2,zero,4cbfc <__subdf3+0x214>
   4ca98:	84000044 	addi	r16,r16,1
   4ca9c:	0081ffc4 	movi	r2,2047
   4caa0:	8080be26 	beq	r16,r2,4cd9c <__subdf3+0x3b4>
   4caa4:	017fe034 	movhi	r5,65408
   4caa8:	297fffc4 	addi	r5,r5,-1
   4caac:	1946703a 	and	r3,r3,r5
   4cab0:	1804977a 	slli	r2,r3,29
   4cab4:	1806927a 	slli	r3,r3,9
   4cab8:	8822d0fa 	srli	r17,r17,3
   4cabc:	8401ffcc 	andi	r16,r16,2047
   4cac0:	180ad33a 	srli	r5,r3,12
   4cac4:	9100004c 	andi	r4,r18,1
   4cac8:	1444b03a 	or	r2,r2,r17
   4cacc:	80c1ffcc 	andi	r3,r16,2047
   4cad0:	1820953a 	slli	r16,r3,20
   4cad4:	20c03fcc 	andi	r3,r4,255
   4cad8:	180897fa 	slli	r4,r3,31
   4cadc:	00c00434 	movhi	r3,16
   4cae0:	18ffffc4 	addi	r3,r3,-1
   4cae4:	28c6703a 	and	r3,r5,r3
   4cae8:	1c06b03a 	or	r3,r3,r16
   4caec:	1906b03a 	or	r3,r3,r4
   4caf0:	dfc00417 	ldw	ra,16(sp)
   4caf4:	dcc00317 	ldw	r19,12(sp)
   4caf8:	dc800217 	ldw	r18,8(sp)
   4cafc:	dc400117 	ldw	r17,4(sp)
   4cb00:	dc000017 	ldw	r16,0(sp)
   4cb04:	dec00504 	addi	sp,sp,20
   4cb08:	f800283a 	ret
   4cb0c:	0101ffc4 	movi	r4,2047
   4cb10:	813fd626 	beq	r16,r4,4ca6c <__alt_data_end+0xfffe726c>
   4cb14:	29402034 	orhi	r5,r5,128
   4cb18:	01000e04 	movi	r4,56
   4cb1c:	2080a316 	blt	r4,r2,4cdac <__subdf3+0x3c4>
   4cb20:	010007c4 	movi	r4,31
   4cb24:	2080c616 	blt	r4,r2,4ce40 <__subdf3+0x458>
   4cb28:	01000804 	movi	r4,32
   4cb2c:	2089c83a 	sub	r4,r4,r2
   4cb30:	2910983a 	sll	r8,r5,r4
   4cb34:	308ed83a 	srl	r7,r6,r2
   4cb38:	3108983a 	sll	r4,r6,r4
   4cb3c:	2884d83a 	srl	r2,r5,r2
   4cb40:	41ccb03a 	or	r6,r8,r7
   4cb44:	2008c03a 	cmpne	r4,r4,zero
   4cb48:	310cb03a 	or	r6,r6,r4
   4cb4c:	898dc83a 	sub	r6,r17,r6
   4cb50:	89a3803a 	cmpltu	r17,r17,r6
   4cb54:	1887c83a 	sub	r3,r3,r2
   4cb58:	1c47c83a 	sub	r3,r3,r17
   4cb5c:	3023883a 	mov	r17,r6
   4cb60:	1880202c 	andhi	r2,r3,128
   4cb64:	10002326 	beq	r2,zero,4cbf4 <__subdf3+0x20c>
   4cb68:	04c02034 	movhi	r19,128
   4cb6c:	9cffffc4 	addi	r19,r19,-1
   4cb70:	1ce6703a 	and	r19,r3,r19
   4cb74:	98007a26 	beq	r19,zero,4cd60 <__subdf3+0x378>
   4cb78:	9809883a 	mov	r4,r19
   4cb7c:	004d4e80 	call	4d4e8 <__clzsi2>
   4cb80:	113ffe04 	addi	r4,r2,-8
   4cb84:	00c007c4 	movi	r3,31
   4cb88:	19007b16 	blt	r3,r4,4cd78 <__subdf3+0x390>
   4cb8c:	00800804 	movi	r2,32
   4cb90:	1105c83a 	sub	r2,r2,r4
   4cb94:	8884d83a 	srl	r2,r17,r2
   4cb98:	9906983a 	sll	r3,r19,r4
   4cb9c:	8922983a 	sll	r17,r17,r4
   4cba0:	10c4b03a 	or	r2,r2,r3
   4cba4:	24007816 	blt	r4,r16,4cd88 <__subdf3+0x3a0>
   4cba8:	2421c83a 	sub	r16,r4,r16
   4cbac:	80c00044 	addi	r3,r16,1
   4cbb0:	010007c4 	movi	r4,31
   4cbb4:	20c09516 	blt	r4,r3,4ce0c <__subdf3+0x424>
   4cbb8:	01400804 	movi	r5,32
   4cbbc:	28cbc83a 	sub	r5,r5,r3
   4cbc0:	88c8d83a 	srl	r4,r17,r3
   4cbc4:	8962983a 	sll	r17,r17,r5
   4cbc8:	114a983a 	sll	r5,r2,r5
   4cbcc:	10c6d83a 	srl	r3,r2,r3
   4cbd0:	8804c03a 	cmpne	r2,r17,zero
   4cbd4:	290ab03a 	or	r5,r5,r4
   4cbd8:	28a2b03a 	or	r17,r5,r2
   4cbdc:	0021883a 	mov	r16,zero
   4cbe0:	003fa206 	br	4ca6c <__alt_data_end+0xfffe726c>
   4cbe4:	2090b03a 	or	r8,r4,r2
   4cbe8:	40018e26 	beq	r8,zero,4d224 <__subdf3+0x83c>
   4cbec:	1007883a 	mov	r3,r2
   4cbf0:	2023883a 	mov	r17,r4
   4cbf4:	888001cc 	andi	r2,r17,7
   4cbf8:	103f9e1e 	bne	r2,zero,4ca74 <__alt_data_end+0xfffe7274>
   4cbfc:	1804977a 	slli	r2,r3,29
   4cc00:	8822d0fa 	srli	r17,r17,3
   4cc04:	1810d0fa 	srli	r8,r3,3
   4cc08:	9100004c 	andi	r4,r18,1
   4cc0c:	1444b03a 	or	r2,r2,r17
   4cc10:	00c1ffc4 	movi	r3,2047
   4cc14:	80c02826 	beq	r16,r3,4ccb8 <__subdf3+0x2d0>
   4cc18:	01400434 	movhi	r5,16
   4cc1c:	297fffc4 	addi	r5,r5,-1
   4cc20:	80e0703a 	and	r16,r16,r3
   4cc24:	414a703a 	and	r5,r8,r5
   4cc28:	003fa806 	br	4cacc <__alt_data_end+0xfffe72cc>
   4cc2c:	0080630e 	bge	zero,r2,4cdbc <__subdf3+0x3d4>
   4cc30:	48003026 	beq	r9,zero,4ccf4 <__subdf3+0x30c>
   4cc34:	0101ffc4 	movi	r4,2047
   4cc38:	813f8c26 	beq	r16,r4,4ca6c <__alt_data_end+0xfffe726c>
   4cc3c:	29402034 	orhi	r5,r5,128
   4cc40:	01000e04 	movi	r4,56
   4cc44:	2080a90e 	bge	r4,r2,4ceec <__subdf3+0x504>
   4cc48:	298cb03a 	or	r6,r5,r6
   4cc4c:	3012c03a 	cmpne	r9,r6,zero
   4cc50:	0005883a 	mov	r2,zero
   4cc54:	4c53883a 	add	r9,r9,r17
   4cc58:	4c63803a 	cmpltu	r17,r9,r17
   4cc5c:	10c7883a 	add	r3,r2,r3
   4cc60:	88c7883a 	add	r3,r17,r3
   4cc64:	4823883a 	mov	r17,r9
   4cc68:	1880202c 	andhi	r2,r3,128
   4cc6c:	1000d026 	beq	r2,zero,4cfb0 <__subdf3+0x5c8>
   4cc70:	84000044 	addi	r16,r16,1
   4cc74:	0081ffc4 	movi	r2,2047
   4cc78:	8080fe26 	beq	r16,r2,4d074 <__subdf3+0x68c>
   4cc7c:	00bfe034 	movhi	r2,65408
   4cc80:	10bfffc4 	addi	r2,r2,-1
   4cc84:	1886703a 	and	r3,r3,r2
   4cc88:	880ad07a 	srli	r5,r17,1
   4cc8c:	180497fa 	slli	r2,r3,31
   4cc90:	8900004c 	andi	r4,r17,1
   4cc94:	2922b03a 	or	r17,r5,r4
   4cc98:	1806d07a 	srli	r3,r3,1
   4cc9c:	1462b03a 	or	r17,r2,r17
   4cca0:	3825883a 	mov	r18,r7
   4cca4:	003f7106 	br	4ca6c <__alt_data_end+0xfffe726c>
   4cca8:	2984b03a 	or	r2,r5,r6
   4ccac:	103f6826 	beq	r2,zero,4ca50 <__alt_data_end+0xfffe7250>
   4ccb0:	39c03fcc 	andi	r7,r7,255
   4ccb4:	003f6706 	br	4ca54 <__alt_data_end+0xfffe7254>
   4ccb8:	4086b03a 	or	r3,r8,r2
   4ccbc:	18015226 	beq	r3,zero,4d208 <__subdf3+0x820>
   4ccc0:	00c00434 	movhi	r3,16
   4ccc4:	41400234 	orhi	r5,r8,8
   4ccc8:	18ffffc4 	addi	r3,r3,-1
   4cccc:	28ca703a 	and	r5,r5,r3
   4ccd0:	003f7e06 	br	4cacc <__alt_data_end+0xfffe72cc>
   4ccd4:	10bfffc4 	addi	r2,r2,-1
   4ccd8:	1000491e 	bne	r2,zero,4ce00 <__subdf3+0x418>
   4ccdc:	898fc83a 	sub	r7,r17,r6
   4cce0:	89e3803a 	cmpltu	r17,r17,r7
   4cce4:	1947c83a 	sub	r3,r3,r5
   4cce8:	1c47c83a 	sub	r3,r3,r17
   4ccec:	3823883a 	mov	r17,r7
   4ccf0:	003f9b06 	br	4cb60 <__alt_data_end+0xfffe7360>
   4ccf4:	2988b03a 	or	r4,r5,r6
   4ccf8:	203f5c26 	beq	r4,zero,4ca6c <__alt_data_end+0xfffe726c>
   4ccfc:	10bfffc4 	addi	r2,r2,-1
   4cd00:	1000931e 	bne	r2,zero,4cf50 <__subdf3+0x568>
   4cd04:	898d883a 	add	r6,r17,r6
   4cd08:	3463803a 	cmpltu	r17,r6,r17
   4cd0c:	1947883a 	add	r3,r3,r5
   4cd10:	88c7883a 	add	r3,r17,r3
   4cd14:	3023883a 	mov	r17,r6
   4cd18:	003fd306 	br	4cc68 <__alt_data_end+0xfffe7468>
   4cd1c:	1000541e 	bne	r2,zero,4ce70 <__subdf3+0x488>
   4cd20:	80800044 	addi	r2,r16,1
   4cd24:	1081ffcc 	andi	r2,r2,2047
   4cd28:	01000044 	movi	r4,1
   4cd2c:	2080a20e 	bge	r4,r2,4cfb8 <__subdf3+0x5d0>
   4cd30:	8989c83a 	sub	r4,r17,r6
   4cd34:	8905803a 	cmpltu	r2,r17,r4
   4cd38:	1967c83a 	sub	r19,r3,r5
   4cd3c:	98a7c83a 	sub	r19,r19,r2
   4cd40:	9880202c 	andhi	r2,r19,128
   4cd44:	10006326 	beq	r2,zero,4ced4 <__subdf3+0x4ec>
   4cd48:	3463c83a 	sub	r17,r6,r17
   4cd4c:	28c7c83a 	sub	r3,r5,r3
   4cd50:	344d803a 	cmpltu	r6,r6,r17
   4cd54:	19a7c83a 	sub	r19,r3,r6
   4cd58:	3825883a 	mov	r18,r7
   4cd5c:	983f861e 	bne	r19,zero,4cb78 <__alt_data_end+0xfffe7378>
   4cd60:	8809883a 	mov	r4,r17
   4cd64:	004d4e80 	call	4d4e8 <__clzsi2>
   4cd68:	10800804 	addi	r2,r2,32
   4cd6c:	113ffe04 	addi	r4,r2,-8
   4cd70:	00c007c4 	movi	r3,31
   4cd74:	193f850e 	bge	r3,r4,4cb8c <__alt_data_end+0xfffe738c>
   4cd78:	10bff604 	addi	r2,r2,-40
   4cd7c:	8884983a 	sll	r2,r17,r2
   4cd80:	0023883a 	mov	r17,zero
   4cd84:	243f880e 	bge	r4,r16,4cba8 <__alt_data_end+0xfffe73a8>
   4cd88:	00ffe034 	movhi	r3,65408
   4cd8c:	18ffffc4 	addi	r3,r3,-1
   4cd90:	8121c83a 	sub	r16,r16,r4
   4cd94:	10c6703a 	and	r3,r2,r3
   4cd98:	003f3406 	br	4ca6c <__alt_data_end+0xfffe726c>
   4cd9c:	9100004c 	andi	r4,r18,1
   4cda0:	000b883a 	mov	r5,zero
   4cda4:	0005883a 	mov	r2,zero
   4cda8:	003f4806 	br	4cacc <__alt_data_end+0xfffe72cc>
   4cdac:	298cb03a 	or	r6,r5,r6
   4cdb0:	300cc03a 	cmpne	r6,r6,zero
   4cdb4:	0005883a 	mov	r2,zero
   4cdb8:	003f6406 	br	4cb4c <__alt_data_end+0xfffe734c>
   4cdbc:	10009a1e 	bne	r2,zero,4d028 <__subdf3+0x640>
   4cdc0:	82400044 	addi	r9,r16,1
   4cdc4:	4881ffcc 	andi	r2,r9,2047
   4cdc8:	02800044 	movi	r10,1
   4cdcc:	5080670e 	bge	r10,r2,4cf6c <__subdf3+0x584>
   4cdd0:	0081ffc4 	movi	r2,2047
   4cdd4:	4880af26 	beq	r9,r2,4d094 <__subdf3+0x6ac>
   4cdd8:	898d883a 	add	r6,r17,r6
   4cddc:	1945883a 	add	r2,r3,r5
   4cde0:	3447803a 	cmpltu	r3,r6,r17
   4cde4:	1887883a 	add	r3,r3,r2
   4cde8:	182297fa 	slli	r17,r3,31
   4cdec:	300cd07a 	srli	r6,r6,1
   4cdf0:	1806d07a 	srli	r3,r3,1
   4cdf4:	4821883a 	mov	r16,r9
   4cdf8:	89a2b03a 	or	r17,r17,r6
   4cdfc:	003f1b06 	br	4ca6c <__alt_data_end+0xfffe726c>
   4ce00:	0101ffc4 	movi	r4,2047
   4ce04:	813f441e 	bne	r16,r4,4cb18 <__alt_data_end+0xfffe7318>
   4ce08:	003f1806 	br	4ca6c <__alt_data_end+0xfffe726c>
   4ce0c:	843ff844 	addi	r16,r16,-31
   4ce10:	01400804 	movi	r5,32
   4ce14:	1408d83a 	srl	r4,r2,r16
   4ce18:	19405026 	beq	r3,r5,4cf5c <__subdf3+0x574>
   4ce1c:	01401004 	movi	r5,64
   4ce20:	28c7c83a 	sub	r3,r5,r3
   4ce24:	10c4983a 	sll	r2,r2,r3
   4ce28:	88a2b03a 	or	r17,r17,r2
   4ce2c:	8822c03a 	cmpne	r17,r17,zero
   4ce30:	2462b03a 	or	r17,r4,r17
   4ce34:	0007883a 	mov	r3,zero
   4ce38:	0021883a 	mov	r16,zero
   4ce3c:	003f6d06 	br	4cbf4 <__alt_data_end+0xfffe73f4>
   4ce40:	11fff804 	addi	r7,r2,-32
   4ce44:	01000804 	movi	r4,32
   4ce48:	29ced83a 	srl	r7,r5,r7
   4ce4c:	11004526 	beq	r2,r4,4cf64 <__subdf3+0x57c>
   4ce50:	01001004 	movi	r4,64
   4ce54:	2089c83a 	sub	r4,r4,r2
   4ce58:	2904983a 	sll	r2,r5,r4
   4ce5c:	118cb03a 	or	r6,r2,r6
   4ce60:	300cc03a 	cmpne	r6,r6,zero
   4ce64:	398cb03a 	or	r6,r7,r6
   4ce68:	0005883a 	mov	r2,zero
   4ce6c:	003f3706 	br	4cb4c <__alt_data_end+0xfffe734c>
   4ce70:	80002a26 	beq	r16,zero,4cf1c <__subdf3+0x534>
   4ce74:	0101ffc4 	movi	r4,2047
   4ce78:	49006626 	beq	r9,r4,4d014 <__subdf3+0x62c>
   4ce7c:	0085c83a 	sub	r2,zero,r2
   4ce80:	18c02034 	orhi	r3,r3,128
   4ce84:	01000e04 	movi	r4,56
   4ce88:	20807e16 	blt	r4,r2,4d084 <__subdf3+0x69c>
   4ce8c:	010007c4 	movi	r4,31
   4ce90:	2080e716 	blt	r4,r2,4d230 <__subdf3+0x848>
   4ce94:	01000804 	movi	r4,32
   4ce98:	2089c83a 	sub	r4,r4,r2
   4ce9c:	1914983a 	sll	r10,r3,r4
   4cea0:	8890d83a 	srl	r8,r17,r2
   4cea4:	8908983a 	sll	r4,r17,r4
   4cea8:	1884d83a 	srl	r2,r3,r2
   4ceac:	5222b03a 	or	r17,r10,r8
   4ceb0:	2006c03a 	cmpne	r3,r4,zero
   4ceb4:	88e2b03a 	or	r17,r17,r3
   4ceb8:	3463c83a 	sub	r17,r6,r17
   4cebc:	2885c83a 	sub	r2,r5,r2
   4cec0:	344d803a 	cmpltu	r6,r6,r17
   4cec4:	1187c83a 	sub	r3,r2,r6
   4cec8:	4821883a 	mov	r16,r9
   4cecc:	3825883a 	mov	r18,r7
   4ced0:	003f2306 	br	4cb60 <__alt_data_end+0xfffe7360>
   4ced4:	24d0b03a 	or	r8,r4,r19
   4ced8:	40001b1e 	bne	r8,zero,4cf48 <__subdf3+0x560>
   4cedc:	0005883a 	mov	r2,zero
   4cee0:	0009883a 	mov	r4,zero
   4cee4:	0021883a 	mov	r16,zero
   4cee8:	003f4906 	br	4cc10 <__alt_data_end+0xfffe7410>
   4ceec:	010007c4 	movi	r4,31
   4cef0:	20803a16 	blt	r4,r2,4cfdc <__subdf3+0x5f4>
   4cef4:	01000804 	movi	r4,32
   4cef8:	2089c83a 	sub	r4,r4,r2
   4cefc:	2912983a 	sll	r9,r5,r4
   4cf00:	3090d83a 	srl	r8,r6,r2
   4cf04:	3108983a 	sll	r4,r6,r4
   4cf08:	2884d83a 	srl	r2,r5,r2
   4cf0c:	4a12b03a 	or	r9,r9,r8
   4cf10:	2008c03a 	cmpne	r4,r4,zero
   4cf14:	4912b03a 	or	r9,r9,r4
   4cf18:	003f4e06 	br	4cc54 <__alt_data_end+0xfffe7454>
   4cf1c:	1c48b03a 	or	r4,r3,r17
   4cf20:	20003c26 	beq	r4,zero,4d014 <__subdf3+0x62c>
   4cf24:	0084303a 	nor	r2,zero,r2
   4cf28:	1000381e 	bne	r2,zero,4d00c <__subdf3+0x624>
   4cf2c:	3463c83a 	sub	r17,r6,r17
   4cf30:	28c5c83a 	sub	r2,r5,r3
   4cf34:	344d803a 	cmpltu	r6,r6,r17
   4cf38:	1187c83a 	sub	r3,r2,r6
   4cf3c:	4821883a 	mov	r16,r9
   4cf40:	3825883a 	mov	r18,r7
   4cf44:	003f0606 	br	4cb60 <__alt_data_end+0xfffe7360>
   4cf48:	2023883a 	mov	r17,r4
   4cf4c:	003f0906 	br	4cb74 <__alt_data_end+0xfffe7374>
   4cf50:	0101ffc4 	movi	r4,2047
   4cf54:	813f3a1e 	bne	r16,r4,4cc40 <__alt_data_end+0xfffe7440>
   4cf58:	003ec406 	br	4ca6c <__alt_data_end+0xfffe726c>
   4cf5c:	0005883a 	mov	r2,zero
   4cf60:	003fb106 	br	4ce28 <__alt_data_end+0xfffe7628>
   4cf64:	0005883a 	mov	r2,zero
   4cf68:	003fbc06 	br	4ce5c <__alt_data_end+0xfffe765c>
   4cf6c:	1c44b03a 	or	r2,r3,r17
   4cf70:	80008e1e 	bne	r16,zero,4d1ac <__subdf3+0x7c4>
   4cf74:	1000c826 	beq	r2,zero,4d298 <__subdf3+0x8b0>
   4cf78:	2984b03a 	or	r2,r5,r6
   4cf7c:	103ebb26 	beq	r2,zero,4ca6c <__alt_data_end+0xfffe726c>
   4cf80:	8989883a 	add	r4,r17,r6
   4cf84:	1945883a 	add	r2,r3,r5
   4cf88:	2447803a 	cmpltu	r3,r4,r17
   4cf8c:	1887883a 	add	r3,r3,r2
   4cf90:	1880202c 	andhi	r2,r3,128
   4cf94:	2023883a 	mov	r17,r4
   4cf98:	103f1626 	beq	r2,zero,4cbf4 <__alt_data_end+0xfffe73f4>
   4cf9c:	00bfe034 	movhi	r2,65408
   4cfa0:	10bfffc4 	addi	r2,r2,-1
   4cfa4:	5021883a 	mov	r16,r10
   4cfa8:	1886703a 	and	r3,r3,r2
   4cfac:	003eaf06 	br	4ca6c <__alt_data_end+0xfffe726c>
   4cfb0:	3825883a 	mov	r18,r7
   4cfb4:	003f0f06 	br	4cbf4 <__alt_data_end+0xfffe73f4>
   4cfb8:	1c44b03a 	or	r2,r3,r17
   4cfbc:	8000251e 	bne	r16,zero,4d054 <__subdf3+0x66c>
   4cfc0:	1000661e 	bne	r2,zero,4d15c <__subdf3+0x774>
   4cfc4:	2990b03a 	or	r8,r5,r6
   4cfc8:	40009626 	beq	r8,zero,4d224 <__subdf3+0x83c>
   4cfcc:	2807883a 	mov	r3,r5
   4cfd0:	3023883a 	mov	r17,r6
   4cfd4:	3825883a 	mov	r18,r7
   4cfd8:	003ea406 	br	4ca6c <__alt_data_end+0xfffe726c>
   4cfdc:	127ff804 	addi	r9,r2,-32
   4cfe0:	01000804 	movi	r4,32
   4cfe4:	2a52d83a 	srl	r9,r5,r9
   4cfe8:	11008c26 	beq	r2,r4,4d21c <__subdf3+0x834>
   4cfec:	01001004 	movi	r4,64
   4cff0:	2085c83a 	sub	r2,r4,r2
   4cff4:	2884983a 	sll	r2,r5,r2
   4cff8:	118cb03a 	or	r6,r2,r6
   4cffc:	300cc03a 	cmpne	r6,r6,zero
   4d000:	4992b03a 	or	r9,r9,r6
   4d004:	0005883a 	mov	r2,zero
   4d008:	003f1206 	br	4cc54 <__alt_data_end+0xfffe7454>
   4d00c:	0101ffc4 	movi	r4,2047
   4d010:	493f9c1e 	bne	r9,r4,4ce84 <__alt_data_end+0xfffe7684>
   4d014:	2807883a 	mov	r3,r5
   4d018:	3023883a 	mov	r17,r6
   4d01c:	4821883a 	mov	r16,r9
   4d020:	3825883a 	mov	r18,r7
   4d024:	003e9106 	br	4ca6c <__alt_data_end+0xfffe726c>
   4d028:	80001f1e 	bne	r16,zero,4d0a8 <__subdf3+0x6c0>
   4d02c:	1c48b03a 	or	r4,r3,r17
   4d030:	20005a26 	beq	r4,zero,4d19c <__subdf3+0x7b4>
   4d034:	0084303a 	nor	r2,zero,r2
   4d038:	1000561e 	bne	r2,zero,4d194 <__subdf3+0x7ac>
   4d03c:	89a3883a 	add	r17,r17,r6
   4d040:	1945883a 	add	r2,r3,r5
   4d044:	898d803a 	cmpltu	r6,r17,r6
   4d048:	3087883a 	add	r3,r6,r2
   4d04c:	4821883a 	mov	r16,r9
   4d050:	003f0506 	br	4cc68 <__alt_data_end+0xfffe7468>
   4d054:	10002b1e 	bne	r2,zero,4d104 <__subdf3+0x71c>
   4d058:	2984b03a 	or	r2,r5,r6
   4d05c:	10008026 	beq	r2,zero,4d260 <__subdf3+0x878>
   4d060:	2807883a 	mov	r3,r5
   4d064:	3023883a 	mov	r17,r6
   4d068:	3825883a 	mov	r18,r7
   4d06c:	0401ffc4 	movi	r16,2047
   4d070:	003e7e06 	br	4ca6c <__alt_data_end+0xfffe726c>
   4d074:	3809883a 	mov	r4,r7
   4d078:	0011883a 	mov	r8,zero
   4d07c:	0005883a 	mov	r2,zero
   4d080:	003ee306 	br	4cc10 <__alt_data_end+0xfffe7410>
   4d084:	1c62b03a 	or	r17,r3,r17
   4d088:	8822c03a 	cmpne	r17,r17,zero
   4d08c:	0005883a 	mov	r2,zero
   4d090:	003f8906 	br	4ceb8 <__alt_data_end+0xfffe76b8>
   4d094:	3809883a 	mov	r4,r7
   4d098:	4821883a 	mov	r16,r9
   4d09c:	0011883a 	mov	r8,zero
   4d0a0:	0005883a 	mov	r2,zero
   4d0a4:	003eda06 	br	4cc10 <__alt_data_end+0xfffe7410>
   4d0a8:	0101ffc4 	movi	r4,2047
   4d0ac:	49003b26 	beq	r9,r4,4d19c <__subdf3+0x7b4>
   4d0b0:	0085c83a 	sub	r2,zero,r2
   4d0b4:	18c02034 	orhi	r3,r3,128
   4d0b8:	01000e04 	movi	r4,56
   4d0bc:	20806e16 	blt	r4,r2,4d278 <__subdf3+0x890>
   4d0c0:	010007c4 	movi	r4,31
   4d0c4:	20807716 	blt	r4,r2,4d2a4 <__subdf3+0x8bc>
   4d0c8:	01000804 	movi	r4,32
   4d0cc:	2089c83a 	sub	r4,r4,r2
   4d0d0:	1914983a 	sll	r10,r3,r4
   4d0d4:	8890d83a 	srl	r8,r17,r2
   4d0d8:	8908983a 	sll	r4,r17,r4
   4d0dc:	1884d83a 	srl	r2,r3,r2
   4d0e0:	5222b03a 	or	r17,r10,r8
   4d0e4:	2006c03a 	cmpne	r3,r4,zero
   4d0e8:	88e2b03a 	or	r17,r17,r3
   4d0ec:	89a3883a 	add	r17,r17,r6
   4d0f0:	1145883a 	add	r2,r2,r5
   4d0f4:	898d803a 	cmpltu	r6,r17,r6
   4d0f8:	3087883a 	add	r3,r6,r2
   4d0fc:	4821883a 	mov	r16,r9
   4d100:	003ed906 	br	4cc68 <__alt_data_end+0xfffe7468>
   4d104:	2984b03a 	or	r2,r5,r6
   4d108:	10004226 	beq	r2,zero,4d214 <__subdf3+0x82c>
   4d10c:	1808d0fa 	srli	r4,r3,3
   4d110:	8822d0fa 	srli	r17,r17,3
   4d114:	1806977a 	slli	r3,r3,29
   4d118:	2080022c 	andhi	r2,r4,8
   4d11c:	1c62b03a 	or	r17,r3,r17
   4d120:	10000826 	beq	r2,zero,4d144 <__subdf3+0x75c>
   4d124:	2812d0fa 	srli	r9,r5,3
   4d128:	4880022c 	andhi	r2,r9,8
   4d12c:	1000051e 	bne	r2,zero,4d144 <__subdf3+0x75c>
   4d130:	300cd0fa 	srli	r6,r6,3
   4d134:	2804977a 	slli	r2,r5,29
   4d138:	4809883a 	mov	r4,r9
   4d13c:	3825883a 	mov	r18,r7
   4d140:	11a2b03a 	or	r17,r2,r6
   4d144:	8806d77a 	srli	r3,r17,29
   4d148:	200890fa 	slli	r4,r4,3
   4d14c:	882290fa 	slli	r17,r17,3
   4d150:	0401ffc4 	movi	r16,2047
   4d154:	1906b03a 	or	r3,r3,r4
   4d158:	003e4406 	br	4ca6c <__alt_data_end+0xfffe726c>
   4d15c:	2984b03a 	or	r2,r5,r6
   4d160:	103e4226 	beq	r2,zero,4ca6c <__alt_data_end+0xfffe726c>
   4d164:	8989c83a 	sub	r4,r17,r6
   4d168:	8911803a 	cmpltu	r8,r17,r4
   4d16c:	1945c83a 	sub	r2,r3,r5
   4d170:	1205c83a 	sub	r2,r2,r8
   4d174:	1200202c 	andhi	r8,r2,128
   4d178:	403e9a26 	beq	r8,zero,4cbe4 <__alt_data_end+0xfffe73e4>
   4d17c:	3463c83a 	sub	r17,r6,r17
   4d180:	28c5c83a 	sub	r2,r5,r3
   4d184:	344d803a 	cmpltu	r6,r6,r17
   4d188:	1187c83a 	sub	r3,r2,r6
   4d18c:	3825883a 	mov	r18,r7
   4d190:	003e3606 	br	4ca6c <__alt_data_end+0xfffe726c>
   4d194:	0101ffc4 	movi	r4,2047
   4d198:	493fc71e 	bne	r9,r4,4d0b8 <__alt_data_end+0xfffe78b8>
   4d19c:	2807883a 	mov	r3,r5
   4d1a0:	3023883a 	mov	r17,r6
   4d1a4:	4821883a 	mov	r16,r9
   4d1a8:	003e3006 	br	4ca6c <__alt_data_end+0xfffe726c>
   4d1ac:	10003626 	beq	r2,zero,4d288 <__subdf3+0x8a0>
   4d1b0:	2984b03a 	or	r2,r5,r6
   4d1b4:	10001726 	beq	r2,zero,4d214 <__subdf3+0x82c>
   4d1b8:	1808d0fa 	srli	r4,r3,3
   4d1bc:	8822d0fa 	srli	r17,r17,3
   4d1c0:	1806977a 	slli	r3,r3,29
   4d1c4:	2080022c 	andhi	r2,r4,8
   4d1c8:	1c62b03a 	or	r17,r3,r17
   4d1cc:	10000726 	beq	r2,zero,4d1ec <__subdf3+0x804>
   4d1d0:	2812d0fa 	srli	r9,r5,3
   4d1d4:	4880022c 	andhi	r2,r9,8
   4d1d8:	1000041e 	bne	r2,zero,4d1ec <__subdf3+0x804>
   4d1dc:	300cd0fa 	srli	r6,r6,3
   4d1e0:	2804977a 	slli	r2,r5,29
   4d1e4:	4809883a 	mov	r4,r9
   4d1e8:	11a2b03a 	or	r17,r2,r6
   4d1ec:	8806d77a 	srli	r3,r17,29
   4d1f0:	200890fa 	slli	r4,r4,3
   4d1f4:	882290fa 	slli	r17,r17,3
   4d1f8:	3825883a 	mov	r18,r7
   4d1fc:	1906b03a 	or	r3,r3,r4
   4d200:	0401ffc4 	movi	r16,2047
   4d204:	003e1906 	br	4ca6c <__alt_data_end+0xfffe726c>
   4d208:	000b883a 	mov	r5,zero
   4d20c:	0005883a 	mov	r2,zero
   4d210:	003e2e06 	br	4cacc <__alt_data_end+0xfffe72cc>
   4d214:	0401ffc4 	movi	r16,2047
   4d218:	003e1406 	br	4ca6c <__alt_data_end+0xfffe726c>
   4d21c:	0005883a 	mov	r2,zero
   4d220:	003f7506 	br	4cff8 <__alt_data_end+0xfffe77f8>
   4d224:	0005883a 	mov	r2,zero
   4d228:	0009883a 	mov	r4,zero
   4d22c:	003e7806 	br	4cc10 <__alt_data_end+0xfffe7410>
   4d230:	123ff804 	addi	r8,r2,-32
   4d234:	01000804 	movi	r4,32
   4d238:	1a10d83a 	srl	r8,r3,r8
   4d23c:	11002526 	beq	r2,r4,4d2d4 <__subdf3+0x8ec>
   4d240:	01001004 	movi	r4,64
   4d244:	2085c83a 	sub	r2,r4,r2
   4d248:	1884983a 	sll	r2,r3,r2
   4d24c:	1444b03a 	or	r2,r2,r17
   4d250:	1004c03a 	cmpne	r2,r2,zero
   4d254:	40a2b03a 	or	r17,r8,r2
   4d258:	0005883a 	mov	r2,zero
   4d25c:	003f1606 	br	4ceb8 <__alt_data_end+0xfffe76b8>
   4d260:	02000434 	movhi	r8,16
   4d264:	0009883a 	mov	r4,zero
   4d268:	423fffc4 	addi	r8,r8,-1
   4d26c:	00bfffc4 	movi	r2,-1
   4d270:	0401ffc4 	movi	r16,2047
   4d274:	003e6606 	br	4cc10 <__alt_data_end+0xfffe7410>
   4d278:	1c62b03a 	or	r17,r3,r17
   4d27c:	8822c03a 	cmpne	r17,r17,zero
   4d280:	0005883a 	mov	r2,zero
   4d284:	003f9906 	br	4d0ec <__alt_data_end+0xfffe78ec>
   4d288:	2807883a 	mov	r3,r5
   4d28c:	3023883a 	mov	r17,r6
   4d290:	0401ffc4 	movi	r16,2047
   4d294:	003df506 	br	4ca6c <__alt_data_end+0xfffe726c>
   4d298:	2807883a 	mov	r3,r5
   4d29c:	3023883a 	mov	r17,r6
   4d2a0:	003df206 	br	4ca6c <__alt_data_end+0xfffe726c>
   4d2a4:	123ff804 	addi	r8,r2,-32
   4d2a8:	01000804 	movi	r4,32
   4d2ac:	1a10d83a 	srl	r8,r3,r8
   4d2b0:	11000a26 	beq	r2,r4,4d2dc <__subdf3+0x8f4>
   4d2b4:	01001004 	movi	r4,64
   4d2b8:	2085c83a 	sub	r2,r4,r2
   4d2bc:	1884983a 	sll	r2,r3,r2
   4d2c0:	1444b03a 	or	r2,r2,r17
   4d2c4:	1004c03a 	cmpne	r2,r2,zero
   4d2c8:	40a2b03a 	or	r17,r8,r2
   4d2cc:	0005883a 	mov	r2,zero
   4d2d0:	003f8606 	br	4d0ec <__alt_data_end+0xfffe78ec>
   4d2d4:	0005883a 	mov	r2,zero
   4d2d8:	003fdc06 	br	4d24c <__alt_data_end+0xfffe7a4c>
   4d2dc:	0005883a 	mov	r2,zero
   4d2e0:	003ff706 	br	4d2c0 <__alt_data_end+0xfffe7ac0>

0004d2e4 <__fixdfsi>:
   4d2e4:	280cd53a 	srli	r6,r5,20
   4d2e8:	00c00434 	movhi	r3,16
   4d2ec:	18ffffc4 	addi	r3,r3,-1
   4d2f0:	3181ffcc 	andi	r6,r6,2047
   4d2f4:	01c0ff84 	movi	r7,1022
   4d2f8:	28c6703a 	and	r3,r5,r3
   4d2fc:	280ad7fa 	srli	r5,r5,31
   4d300:	3980120e 	bge	r7,r6,4d34c <__fixdfsi+0x68>
   4d304:	00810744 	movi	r2,1053
   4d308:	11800c16 	blt	r2,r6,4d33c <__fixdfsi+0x58>
   4d30c:	00810cc4 	movi	r2,1075
   4d310:	1185c83a 	sub	r2,r2,r6
   4d314:	01c007c4 	movi	r7,31
   4d318:	18c00434 	orhi	r3,r3,16
   4d31c:	38800d16 	blt	r7,r2,4d354 <__fixdfsi+0x70>
   4d320:	31befb44 	addi	r6,r6,-1043
   4d324:	2084d83a 	srl	r2,r4,r2
   4d328:	1986983a 	sll	r3,r3,r6
   4d32c:	1884b03a 	or	r2,r3,r2
   4d330:	28000726 	beq	r5,zero,4d350 <__fixdfsi+0x6c>
   4d334:	0085c83a 	sub	r2,zero,r2
   4d338:	f800283a 	ret
   4d33c:	00a00034 	movhi	r2,32768
   4d340:	10bfffc4 	addi	r2,r2,-1
   4d344:	2885883a 	add	r2,r5,r2
   4d348:	f800283a 	ret
   4d34c:	0005883a 	mov	r2,zero
   4d350:	f800283a 	ret
   4d354:	008104c4 	movi	r2,1043
   4d358:	1185c83a 	sub	r2,r2,r6
   4d35c:	1884d83a 	srl	r2,r3,r2
   4d360:	003ff306 	br	4d330 <__alt_data_end+0xfffe7b30>

0004d364 <__floatsidf>:
   4d364:	defffd04 	addi	sp,sp,-12
   4d368:	dfc00215 	stw	ra,8(sp)
   4d36c:	dc400115 	stw	r17,4(sp)
   4d370:	dc000015 	stw	r16,0(sp)
   4d374:	20002b26 	beq	r4,zero,4d424 <__floatsidf+0xc0>
   4d378:	2023883a 	mov	r17,r4
   4d37c:	2020d7fa 	srli	r16,r4,31
   4d380:	20002d16 	blt	r4,zero,4d438 <__floatsidf+0xd4>
   4d384:	8809883a 	mov	r4,r17
   4d388:	004d4e80 	call	4d4e8 <__clzsi2>
   4d38c:	01410784 	movi	r5,1054
   4d390:	288bc83a 	sub	r5,r5,r2
   4d394:	01010cc4 	movi	r4,1075
   4d398:	2149c83a 	sub	r4,r4,r5
   4d39c:	00c007c4 	movi	r3,31
   4d3a0:	1900160e 	bge	r3,r4,4d3fc <__floatsidf+0x98>
   4d3a4:	00c104c4 	movi	r3,1043
   4d3a8:	1947c83a 	sub	r3,r3,r5
   4d3ac:	88c6983a 	sll	r3,r17,r3
   4d3b0:	00800434 	movhi	r2,16
   4d3b4:	10bfffc4 	addi	r2,r2,-1
   4d3b8:	1886703a 	and	r3,r3,r2
   4d3bc:	2941ffcc 	andi	r5,r5,2047
   4d3c0:	800d883a 	mov	r6,r16
   4d3c4:	0005883a 	mov	r2,zero
   4d3c8:	280a953a 	slli	r5,r5,20
   4d3cc:	31803fcc 	andi	r6,r6,255
   4d3d0:	01000434 	movhi	r4,16
   4d3d4:	300c97fa 	slli	r6,r6,31
   4d3d8:	213fffc4 	addi	r4,r4,-1
   4d3dc:	1906703a 	and	r3,r3,r4
   4d3e0:	1946b03a 	or	r3,r3,r5
   4d3e4:	1986b03a 	or	r3,r3,r6
   4d3e8:	dfc00217 	ldw	ra,8(sp)
   4d3ec:	dc400117 	ldw	r17,4(sp)
   4d3f0:	dc000017 	ldw	r16,0(sp)
   4d3f4:	dec00304 	addi	sp,sp,12
   4d3f8:	f800283a 	ret
   4d3fc:	00c002c4 	movi	r3,11
   4d400:	1887c83a 	sub	r3,r3,r2
   4d404:	88c6d83a 	srl	r3,r17,r3
   4d408:	8904983a 	sll	r2,r17,r4
   4d40c:	01000434 	movhi	r4,16
   4d410:	213fffc4 	addi	r4,r4,-1
   4d414:	2941ffcc 	andi	r5,r5,2047
   4d418:	1906703a 	and	r3,r3,r4
   4d41c:	800d883a 	mov	r6,r16
   4d420:	003fe906 	br	4d3c8 <__alt_data_end+0xfffe7bc8>
   4d424:	000d883a 	mov	r6,zero
   4d428:	000b883a 	mov	r5,zero
   4d42c:	0007883a 	mov	r3,zero
   4d430:	0005883a 	mov	r2,zero
   4d434:	003fe406 	br	4d3c8 <__alt_data_end+0xfffe7bc8>
   4d438:	0123c83a 	sub	r17,zero,r4
   4d43c:	003fd106 	br	4d384 <__alt_data_end+0xfffe7b84>

0004d440 <__floatunsidf>:
   4d440:	defffe04 	addi	sp,sp,-8
   4d444:	dc000015 	stw	r16,0(sp)
   4d448:	dfc00115 	stw	ra,4(sp)
   4d44c:	2021883a 	mov	r16,r4
   4d450:	20002226 	beq	r4,zero,4d4dc <__floatunsidf+0x9c>
   4d454:	004d4e80 	call	4d4e8 <__clzsi2>
   4d458:	01010784 	movi	r4,1054
   4d45c:	2089c83a 	sub	r4,r4,r2
   4d460:	01810cc4 	movi	r6,1075
   4d464:	310dc83a 	sub	r6,r6,r4
   4d468:	00c007c4 	movi	r3,31
   4d46c:	1980120e 	bge	r3,r6,4d4b8 <__floatunsidf+0x78>
   4d470:	00c104c4 	movi	r3,1043
   4d474:	1907c83a 	sub	r3,r3,r4
   4d478:	80ca983a 	sll	r5,r16,r3
   4d47c:	00800434 	movhi	r2,16
   4d480:	10bfffc4 	addi	r2,r2,-1
   4d484:	2101ffcc 	andi	r4,r4,2047
   4d488:	0021883a 	mov	r16,zero
   4d48c:	288a703a 	and	r5,r5,r2
   4d490:	2008953a 	slli	r4,r4,20
   4d494:	00c00434 	movhi	r3,16
   4d498:	18ffffc4 	addi	r3,r3,-1
   4d49c:	28c6703a 	and	r3,r5,r3
   4d4a0:	8005883a 	mov	r2,r16
   4d4a4:	1906b03a 	or	r3,r3,r4
   4d4a8:	dfc00117 	ldw	ra,4(sp)
   4d4ac:	dc000017 	ldw	r16,0(sp)
   4d4b0:	dec00204 	addi	sp,sp,8
   4d4b4:	f800283a 	ret
   4d4b8:	00c002c4 	movi	r3,11
   4d4bc:	188bc83a 	sub	r5,r3,r2
   4d4c0:	814ad83a 	srl	r5,r16,r5
   4d4c4:	00c00434 	movhi	r3,16
   4d4c8:	18ffffc4 	addi	r3,r3,-1
   4d4cc:	81a0983a 	sll	r16,r16,r6
   4d4d0:	2101ffcc 	andi	r4,r4,2047
   4d4d4:	28ca703a 	and	r5,r5,r3
   4d4d8:	003fed06 	br	4d490 <__alt_data_end+0xfffe7c90>
   4d4dc:	0009883a 	mov	r4,zero
   4d4e0:	000b883a 	mov	r5,zero
   4d4e4:	003fea06 	br	4d490 <__alt_data_end+0xfffe7c90>

0004d4e8 <__clzsi2>:
   4d4e8:	00bfffd4 	movui	r2,65535
   4d4ec:	11000536 	bltu	r2,r4,4d504 <__clzsi2+0x1c>
   4d4f0:	00803fc4 	movi	r2,255
   4d4f4:	11000f36 	bltu	r2,r4,4d534 <__clzsi2+0x4c>
   4d4f8:	00800804 	movi	r2,32
   4d4fc:	0007883a 	mov	r3,zero
   4d500:	00000506 	br	4d518 <__clzsi2+0x30>
   4d504:	00804034 	movhi	r2,256
   4d508:	10bfffc4 	addi	r2,r2,-1
   4d50c:	11000c2e 	bgeu	r2,r4,4d540 <__clzsi2+0x58>
   4d510:	00800204 	movi	r2,8
   4d514:	00c00604 	movi	r3,24
   4d518:	20c8d83a 	srl	r4,r4,r3
   4d51c:	00c001b4 	movhi	r3,6
   4d520:	18e36c04 	addi	r3,r3,-29264
   4d524:	1909883a 	add	r4,r3,r4
   4d528:	20c00003 	ldbu	r3,0(r4)
   4d52c:	10c5c83a 	sub	r2,r2,r3
   4d530:	f800283a 	ret
   4d534:	00800604 	movi	r2,24
   4d538:	00c00204 	movi	r3,8
   4d53c:	003ff606 	br	4d518 <__alt_data_end+0xfffe7d18>
   4d540:	00800404 	movi	r2,16
   4d544:	1007883a 	mov	r3,r2
   4d548:	003ff306 	br	4d518 <__alt_data_end+0xfffe7d18>

0004d54c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d54c:	defffe04 	addi	sp,sp,-8
   4d550:	dfc00115 	stw	ra,4(sp)
   4d554:	df000015 	stw	fp,0(sp)
   4d558:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d55c:	d0a00b17 	ldw	r2,-32724(gp)
   4d560:	10000326 	beq	r2,zero,4d570 <alt_get_errno+0x24>
   4d564:	d0a00b17 	ldw	r2,-32724(gp)
   4d568:	103ee83a 	callr	r2
   4d56c:	00000106 	br	4d574 <alt_get_errno+0x28>
   4d570:	d0a71404 	addi	r2,gp,-25520
}
   4d574:	e037883a 	mov	sp,fp
   4d578:	dfc00117 	ldw	ra,4(sp)
   4d57c:	df000017 	ldw	fp,0(sp)
   4d580:	dec00204 	addi	sp,sp,8
   4d584:	f800283a 	ret

0004d588 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4d588:	defffb04 	addi	sp,sp,-20
   4d58c:	dfc00415 	stw	ra,16(sp)
   4d590:	df000315 	stw	fp,12(sp)
   4d594:	df000304 	addi	fp,sp,12
   4d598:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4d59c:	e0bfff17 	ldw	r2,-4(fp)
   4d5a0:	10000816 	blt	r2,zero,4d5c4 <close+0x3c>
   4d5a4:	01400304 	movi	r5,12
   4d5a8:	e13fff17 	ldw	r4,-4(fp)
   4d5ac:	00406e00 	call	406e0 <__mulsi3>
   4d5b0:	1007883a 	mov	r3,r2
   4d5b4:	008001b4 	movhi	r2,6
   4d5b8:	10a63304 	addi	r2,r2,-26420
   4d5bc:	1885883a 	add	r2,r3,r2
   4d5c0:	00000106 	br	4d5c8 <close+0x40>
   4d5c4:	0005883a 	mov	r2,zero
   4d5c8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4d5cc:	e0bffd17 	ldw	r2,-12(fp)
   4d5d0:	10001926 	beq	r2,zero,4d638 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4d5d4:	e0bffd17 	ldw	r2,-12(fp)
   4d5d8:	10800017 	ldw	r2,0(r2)
   4d5dc:	10800417 	ldw	r2,16(r2)
   4d5e0:	10000626 	beq	r2,zero,4d5fc <close+0x74>
   4d5e4:	e0bffd17 	ldw	r2,-12(fp)
   4d5e8:	10800017 	ldw	r2,0(r2)
   4d5ec:	10800417 	ldw	r2,16(r2)
   4d5f0:	e13ffd17 	ldw	r4,-12(fp)
   4d5f4:	103ee83a 	callr	r2
   4d5f8:	00000106 	br	4d600 <close+0x78>
   4d5fc:	0005883a 	mov	r2,zero
   4d600:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4d604:	e13fff17 	ldw	r4,-4(fp)
   4d608:	004dc680 	call	4dc68 <alt_release_fd>
    if (rval < 0)
   4d60c:	e0bffe17 	ldw	r2,-8(fp)
   4d610:	1000070e 	bge	r2,zero,4d630 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   4d614:	004d54c0 	call	4d54c <alt_get_errno>
   4d618:	1007883a 	mov	r3,r2
   4d61c:	e0bffe17 	ldw	r2,-8(fp)
   4d620:	0085c83a 	sub	r2,zero,r2
   4d624:	18800015 	stw	r2,0(r3)
      return -1;
   4d628:	00bfffc4 	movi	r2,-1
   4d62c:	00000706 	br	4d64c <close+0xc4>
    }
    return 0;
   4d630:	0005883a 	mov	r2,zero
   4d634:	00000506 	br	4d64c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4d638:	004d54c0 	call	4d54c <alt_get_errno>
   4d63c:	1007883a 	mov	r3,r2
   4d640:	00801444 	movi	r2,81
   4d644:	18800015 	stw	r2,0(r3)
    return -1;
   4d648:	00bfffc4 	movi	r2,-1
  }
}
   4d64c:	e037883a 	mov	sp,fp
   4d650:	dfc00117 	ldw	ra,4(sp)
   4d654:	df000017 	ldw	fp,0(sp)
   4d658:	dec00204 	addi	sp,sp,8
   4d65c:	f800283a 	ret

0004d660 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4d660:	defffc04 	addi	sp,sp,-16
   4d664:	df000315 	stw	fp,12(sp)
   4d668:	df000304 	addi	fp,sp,12
   4d66c:	e13ffd15 	stw	r4,-12(fp)
   4d670:	e17ffe15 	stw	r5,-8(fp)
   4d674:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4d678:	e0bfff17 	ldw	r2,-4(fp)
}
   4d67c:	e037883a 	mov	sp,fp
   4d680:	df000017 	ldw	fp,0(sp)
   4d684:	dec00104 	addi	sp,sp,4
   4d688:	f800283a 	ret

0004d68c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d68c:	defffe04 	addi	sp,sp,-8
   4d690:	dfc00115 	stw	ra,4(sp)
   4d694:	df000015 	stw	fp,0(sp)
   4d698:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d69c:	d0a00b17 	ldw	r2,-32724(gp)
   4d6a0:	10000326 	beq	r2,zero,4d6b0 <alt_get_errno+0x24>
   4d6a4:	d0a00b17 	ldw	r2,-32724(gp)
   4d6a8:	103ee83a 	callr	r2
   4d6ac:	00000106 	br	4d6b4 <alt_get_errno+0x28>
   4d6b0:	d0a71404 	addi	r2,gp,-25520
}
   4d6b4:	e037883a 	mov	sp,fp
   4d6b8:	dfc00117 	ldw	ra,4(sp)
   4d6bc:	df000017 	ldw	fp,0(sp)
   4d6c0:	dec00204 	addi	sp,sp,8
   4d6c4:	f800283a 	ret

0004d6c8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4d6c8:	defffb04 	addi	sp,sp,-20
   4d6cc:	dfc00415 	stw	ra,16(sp)
   4d6d0:	df000315 	stw	fp,12(sp)
   4d6d4:	df000304 	addi	fp,sp,12
   4d6d8:	e13ffe15 	stw	r4,-8(fp)
   4d6dc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4d6e0:	e0bffe17 	ldw	r2,-8(fp)
   4d6e4:	10000816 	blt	r2,zero,4d708 <fstat+0x40>
   4d6e8:	01400304 	movi	r5,12
   4d6ec:	e13ffe17 	ldw	r4,-8(fp)
   4d6f0:	00406e00 	call	406e0 <__mulsi3>
   4d6f4:	1007883a 	mov	r3,r2
   4d6f8:	008001b4 	movhi	r2,6
   4d6fc:	10a63304 	addi	r2,r2,-26420
   4d700:	1885883a 	add	r2,r3,r2
   4d704:	00000106 	br	4d70c <fstat+0x44>
   4d708:	0005883a 	mov	r2,zero
   4d70c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   4d710:	e0bffd17 	ldw	r2,-12(fp)
   4d714:	10001026 	beq	r2,zero,4d758 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4d718:	e0bffd17 	ldw	r2,-12(fp)
   4d71c:	10800017 	ldw	r2,0(r2)
   4d720:	10800817 	ldw	r2,32(r2)
   4d724:	10000726 	beq	r2,zero,4d744 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   4d728:	e0bffd17 	ldw	r2,-12(fp)
   4d72c:	10800017 	ldw	r2,0(r2)
   4d730:	10800817 	ldw	r2,32(r2)
   4d734:	e17fff17 	ldw	r5,-4(fp)
   4d738:	e13ffd17 	ldw	r4,-12(fp)
   4d73c:	103ee83a 	callr	r2
   4d740:	00000a06 	br	4d76c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4d744:	e0bfff17 	ldw	r2,-4(fp)
   4d748:	00c80004 	movi	r3,8192
   4d74c:	10c00115 	stw	r3,4(r2)
      return 0;
   4d750:	0005883a 	mov	r2,zero
   4d754:	00000506 	br	4d76c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4d758:	004d68c0 	call	4d68c <alt_get_errno>
   4d75c:	1007883a 	mov	r3,r2
   4d760:	00801444 	movi	r2,81
   4d764:	18800015 	stw	r2,0(r3)
    return -1;
   4d768:	00bfffc4 	movi	r2,-1
  }
}
   4d76c:	e037883a 	mov	sp,fp
   4d770:	dfc00117 	ldw	ra,4(sp)
   4d774:	df000017 	ldw	fp,0(sp)
   4d778:	dec00204 	addi	sp,sp,8
   4d77c:	f800283a 	ret

0004d780 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d780:	defffe04 	addi	sp,sp,-8
   4d784:	dfc00115 	stw	ra,4(sp)
   4d788:	df000015 	stw	fp,0(sp)
   4d78c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d790:	d0a00b17 	ldw	r2,-32724(gp)
   4d794:	10000326 	beq	r2,zero,4d7a4 <alt_get_errno+0x24>
   4d798:	d0a00b17 	ldw	r2,-32724(gp)
   4d79c:	103ee83a 	callr	r2
   4d7a0:	00000106 	br	4d7a8 <alt_get_errno+0x28>
   4d7a4:	d0a71404 	addi	r2,gp,-25520
}
   4d7a8:	e037883a 	mov	sp,fp
   4d7ac:	dfc00117 	ldw	ra,4(sp)
   4d7b0:	df000017 	ldw	fp,0(sp)
   4d7b4:	dec00204 	addi	sp,sp,8
   4d7b8:	f800283a 	ret

0004d7bc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4d7bc:	deffed04 	addi	sp,sp,-76
   4d7c0:	dfc01215 	stw	ra,72(sp)
   4d7c4:	df001115 	stw	fp,68(sp)
   4d7c8:	df001104 	addi	fp,sp,68
   4d7cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4d7d0:	e0bfff17 	ldw	r2,-4(fp)
   4d7d4:	10000816 	blt	r2,zero,4d7f8 <isatty+0x3c>
   4d7d8:	01400304 	movi	r5,12
   4d7dc:	e13fff17 	ldw	r4,-4(fp)
   4d7e0:	00406e00 	call	406e0 <__mulsi3>
   4d7e4:	1007883a 	mov	r3,r2
   4d7e8:	008001b4 	movhi	r2,6
   4d7ec:	10a63304 	addi	r2,r2,-26420
   4d7f0:	1885883a 	add	r2,r3,r2
   4d7f4:	00000106 	br	4d7fc <isatty+0x40>
   4d7f8:	0005883a 	mov	r2,zero
   4d7fc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   4d800:	e0bfef17 	ldw	r2,-68(fp)
   4d804:	10000e26 	beq	r2,zero,4d840 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4d808:	e0bfef17 	ldw	r2,-68(fp)
   4d80c:	10800017 	ldw	r2,0(r2)
   4d810:	10800817 	ldw	r2,32(r2)
   4d814:	1000021e 	bne	r2,zero,4d820 <isatty+0x64>
    {
      return 1;
   4d818:	00800044 	movi	r2,1
   4d81c:	00000d06 	br	4d854 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4d820:	e0bff004 	addi	r2,fp,-64
   4d824:	100b883a 	mov	r5,r2
   4d828:	e13fff17 	ldw	r4,-4(fp)
   4d82c:	004d6c80 	call	4d6c8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4d830:	e0bff117 	ldw	r2,-60(fp)
   4d834:	10880020 	cmpeqi	r2,r2,8192
   4d838:	10803fcc 	andi	r2,r2,255
   4d83c:	00000506 	br	4d854 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4d840:	004d7800 	call	4d780 <alt_get_errno>
   4d844:	1007883a 	mov	r3,r2
   4d848:	00801444 	movi	r2,81
   4d84c:	18800015 	stw	r2,0(r3)
    return 0;
   4d850:	0005883a 	mov	r2,zero
  }
}
   4d854:	e037883a 	mov	sp,fp
   4d858:	dfc00117 	ldw	ra,4(sp)
   4d85c:	df000017 	ldw	fp,0(sp)
   4d860:	dec00204 	addi	sp,sp,8
   4d864:	f800283a 	ret

0004d868 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4d868:	defffc04 	addi	sp,sp,-16
   4d86c:	df000315 	stw	fp,12(sp)
   4d870:	df000304 	addi	fp,sp,12
   4d874:	e13ffd15 	stw	r4,-12(fp)
   4d878:	e17ffe15 	stw	r5,-8(fp)
   4d87c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4d880:	e0fffe17 	ldw	r3,-8(fp)
   4d884:	e0bffd17 	ldw	r2,-12(fp)
   4d888:	18800c26 	beq	r3,r2,4d8bc <alt_load_section+0x54>
  {
    while( to != end )
   4d88c:	00000806 	br	4d8b0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   4d890:	e0bffe17 	ldw	r2,-8(fp)
   4d894:	10c00104 	addi	r3,r2,4
   4d898:	e0fffe15 	stw	r3,-8(fp)
   4d89c:	e0fffd17 	ldw	r3,-12(fp)
   4d8a0:	19000104 	addi	r4,r3,4
   4d8a4:	e13ffd15 	stw	r4,-12(fp)
   4d8a8:	18c00017 	ldw	r3,0(r3)
   4d8ac:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4d8b0:	e0fffe17 	ldw	r3,-8(fp)
   4d8b4:	e0bfff17 	ldw	r2,-4(fp)
   4d8b8:	18bff51e 	bne	r3,r2,4d890 <__alt_data_end+0xfffe8090>
    {
      *to++ = *from++;
    }
  }
}
   4d8bc:	0001883a 	nop
   4d8c0:	e037883a 	mov	sp,fp
   4d8c4:	df000017 	ldw	fp,0(sp)
   4d8c8:	dec00104 	addi	sp,sp,4
   4d8cc:	f800283a 	ret

0004d8d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4d8d0:	defffe04 	addi	sp,sp,-8
   4d8d4:	dfc00115 	stw	ra,4(sp)
   4d8d8:	df000015 	stw	fp,0(sp)
   4d8dc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4d8e0:	018001b4 	movhi	r6,6
   4d8e4:	31aadd04 	addi	r6,r6,-21644
   4d8e8:	014001b4 	movhi	r5,6
   4d8ec:	29640004 	addi	r5,r5,-28672
   4d8f0:	010001b4 	movhi	r4,6
   4d8f4:	212add04 	addi	r4,r4,-21644
   4d8f8:	004d8680 	call	4d868 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4d8fc:	01800134 	movhi	r6,4
   4d900:	31808c04 	addi	r6,r6,560
   4d904:	01400134 	movhi	r5,4
   4d908:	29400804 	addi	r5,r5,32
   4d90c:	01000134 	movhi	r4,4
   4d910:	21000804 	addi	r4,r4,32
   4d914:	004d8680 	call	4d868 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4d918:	018001b4 	movhi	r6,6
   4d91c:	31a40004 	addi	r6,r6,-28672
   4d920:	014001b4 	movhi	r5,6
   4d924:	2962de04 	addi	r5,r5,-29832
   4d928:	010001b4 	movhi	r4,6
   4d92c:	2122de04 	addi	r4,r4,-29832
   4d930:	004d8680 	call	4d868 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4d934:	005775c0 	call	5775c <alt_dcache_flush_all>
  alt_icache_flush_all();
   4d938:	005791c0 	call	5791c <alt_icache_flush_all>
}
   4d93c:	0001883a 	nop
   4d940:	e037883a 	mov	sp,fp
   4d944:	dfc00117 	ldw	ra,4(sp)
   4d948:	df000017 	ldw	fp,0(sp)
   4d94c:	dec00204 	addi	sp,sp,8
   4d950:	f800283a 	ret

0004d954 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d954:	defffe04 	addi	sp,sp,-8
   4d958:	dfc00115 	stw	ra,4(sp)
   4d95c:	df000015 	stw	fp,0(sp)
   4d960:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d964:	d0a00b17 	ldw	r2,-32724(gp)
   4d968:	10000326 	beq	r2,zero,4d978 <alt_get_errno+0x24>
   4d96c:	d0a00b17 	ldw	r2,-32724(gp)
   4d970:	103ee83a 	callr	r2
   4d974:	00000106 	br	4d97c <alt_get_errno+0x28>
   4d978:	d0a71404 	addi	r2,gp,-25520
}
   4d97c:	e037883a 	mov	sp,fp
   4d980:	dfc00117 	ldw	ra,4(sp)
   4d984:	df000017 	ldw	fp,0(sp)
   4d988:	dec00204 	addi	sp,sp,8
   4d98c:	f800283a 	ret

0004d990 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4d990:	defff904 	addi	sp,sp,-28
   4d994:	dfc00615 	stw	ra,24(sp)
   4d998:	df000515 	stw	fp,20(sp)
   4d99c:	df000504 	addi	fp,sp,20
   4d9a0:	e13ffd15 	stw	r4,-12(fp)
   4d9a4:	e17ffe15 	stw	r5,-8(fp)
   4d9a8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4d9ac:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4d9b0:	e0bffd17 	ldw	r2,-12(fp)
   4d9b4:	10000816 	blt	r2,zero,4d9d8 <lseek+0x48>
   4d9b8:	01400304 	movi	r5,12
   4d9bc:	e13ffd17 	ldw	r4,-12(fp)
   4d9c0:	00406e00 	call	406e0 <__mulsi3>
   4d9c4:	1007883a 	mov	r3,r2
   4d9c8:	008001b4 	movhi	r2,6
   4d9cc:	10a63304 	addi	r2,r2,-26420
   4d9d0:	1885883a 	add	r2,r3,r2
   4d9d4:	00000106 	br	4d9dc <lseek+0x4c>
   4d9d8:	0005883a 	mov	r2,zero
   4d9dc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   4d9e0:	e0bffc17 	ldw	r2,-16(fp)
   4d9e4:	10001026 	beq	r2,zero,4da28 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4d9e8:	e0bffc17 	ldw	r2,-16(fp)
   4d9ec:	10800017 	ldw	r2,0(r2)
   4d9f0:	10800717 	ldw	r2,28(r2)
   4d9f4:	10000926 	beq	r2,zero,4da1c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4d9f8:	e0bffc17 	ldw	r2,-16(fp)
   4d9fc:	10800017 	ldw	r2,0(r2)
   4da00:	10800717 	ldw	r2,28(r2)
   4da04:	e1bfff17 	ldw	r6,-4(fp)
   4da08:	e17ffe17 	ldw	r5,-8(fp)
   4da0c:	e13ffc17 	ldw	r4,-16(fp)
   4da10:	103ee83a 	callr	r2
   4da14:	e0bffb15 	stw	r2,-20(fp)
   4da18:	00000506 	br	4da30 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4da1c:	00bfde84 	movi	r2,-134
   4da20:	e0bffb15 	stw	r2,-20(fp)
   4da24:	00000206 	br	4da30 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   4da28:	00bfebc4 	movi	r2,-81
   4da2c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   4da30:	e0bffb17 	ldw	r2,-20(fp)
   4da34:	1000070e 	bge	r2,zero,4da54 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   4da38:	004d9540 	call	4d954 <alt_get_errno>
   4da3c:	1007883a 	mov	r3,r2
   4da40:	e0bffb17 	ldw	r2,-20(fp)
   4da44:	0085c83a 	sub	r2,zero,r2
   4da48:	18800015 	stw	r2,0(r3)
    rc = -1;
   4da4c:	00bfffc4 	movi	r2,-1
   4da50:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   4da54:	e0bffb17 	ldw	r2,-20(fp)
}
   4da58:	e037883a 	mov	sp,fp
   4da5c:	dfc00117 	ldw	ra,4(sp)
   4da60:	df000017 	ldw	fp,0(sp)
   4da64:	dec00204 	addi	sp,sp,8
   4da68:	f800283a 	ret

0004da6c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4da6c:	defff904 	addi	sp,sp,-28
   4da70:	dfc00615 	stw	ra,24(sp)
   4da74:	df000515 	stw	fp,20(sp)
   4da78:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4da7c:	0009883a 	mov	r4,zero
   4da80:	00565000 	call	56500 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4da84:	004ea7c0 	call	4ea7c <OSInit>
   4da88:	01000044 	movi	r4,1
   4da8c:	0053ea00 	call	53ea0 <OSSemCreate>
   4da90:	d0a71a15 	stw	r2,-25496(gp)
   4da94:	01000044 	movi	r4,1
   4da98:	0053ea00 	call	53ea0 <OSSemCreate>
   4da9c:	d0a71c15 	stw	r2,-25488(gp)
   4daa0:	d0a71504 	addi	r2,gp,-25516
   4daa4:	e0bffc15 	stw	r2,-16(fp)
   4daa8:	00800044 	movi	r2,1
   4daac:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   4dab0:	e0bffd0b 	ldhu	r2,-12(fp)
   4dab4:	1009883a 	mov	r4,r2
   4dab8:	0053ea00 	call	53ea0 <OSSemCreate>
   4dabc:	1007883a 	mov	r3,r2
   4dac0:	e0bffc17 	ldw	r2,-16(fp)
   4dac4:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4dac8:	00565380 	call	56538 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4dacc:	018001b4 	movhi	r6,6
   4dad0:	31a3af04 	addi	r6,r6,-28996
   4dad4:	014001b4 	movhi	r5,6
   4dad8:	2963af04 	addi	r5,r5,-28996
   4dadc:	010001b4 	movhi	r4,6
   4dae0:	2123af04 	addi	r4,r4,-28996
   4dae4:	0057cc00 	call	57cc0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4dae8:	005785c0 	call	5785c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4daec:	01000174 	movhi	r4,5
   4daf0:	211e2f04 	addi	r4,r4,30908
   4daf4:	00587e40 	call	587e4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4daf8:	d0a71617 	ldw	r2,-25512(gp)
   4dafc:	d0e71717 	ldw	r3,-25508(gp)
   4db00:	d1271817 	ldw	r4,-25504(gp)
   4db04:	200d883a 	mov	r6,r4
   4db08:	180b883a 	mov	r5,r3
   4db0c:	1009883a 	mov	r4,r2
   4db10:	00406240 	call	40624 <main>
   4db14:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   4db18:	01000044 	movi	r4,1
   4db1c:	004d5880 	call	4d588 <close>
  exit (result);
   4db20:	e13ffb17 	ldw	r4,-20(fp)
   4db24:	00587f80 	call	587f8 <exit>

0004db28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4db28:	defffe04 	addi	sp,sp,-8
   4db2c:	dfc00115 	stw	ra,4(sp)
   4db30:	df000015 	stw	fp,0(sp)
   4db34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4db38:	d0a00b17 	ldw	r2,-32724(gp)
   4db3c:	10000326 	beq	r2,zero,4db4c <alt_get_errno+0x24>
   4db40:	d0a00b17 	ldw	r2,-32724(gp)
   4db44:	103ee83a 	callr	r2
   4db48:	00000106 	br	4db50 <alt_get_errno+0x28>
   4db4c:	d0a71404 	addi	r2,gp,-25520
}
   4db50:	e037883a 	mov	sp,fp
   4db54:	dfc00117 	ldw	ra,4(sp)
   4db58:	df000017 	ldw	fp,0(sp)
   4db5c:	dec00204 	addi	sp,sp,8
   4db60:	f800283a 	ret

0004db64 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4db64:	defff904 	addi	sp,sp,-28
   4db68:	dfc00615 	stw	ra,24(sp)
   4db6c:	df000515 	stw	fp,20(sp)
   4db70:	df000504 	addi	fp,sp,20
   4db74:	e13ffd15 	stw	r4,-12(fp)
   4db78:	e17ffe15 	stw	r5,-8(fp)
   4db7c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4db80:	e0bffd17 	ldw	r2,-12(fp)
   4db84:	10000816 	blt	r2,zero,4dba8 <read+0x44>
   4db88:	01400304 	movi	r5,12
   4db8c:	e13ffd17 	ldw	r4,-12(fp)
   4db90:	00406e00 	call	406e0 <__mulsi3>
   4db94:	1007883a 	mov	r3,r2
   4db98:	008001b4 	movhi	r2,6
   4db9c:	10a63304 	addi	r2,r2,-26420
   4dba0:	1885883a 	add	r2,r3,r2
   4dba4:	00000106 	br	4dbac <read+0x48>
   4dba8:	0005883a 	mov	r2,zero
   4dbac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4dbb0:	e0bffb17 	ldw	r2,-20(fp)
   4dbb4:	10002226 	beq	r2,zero,4dc40 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4dbb8:	e0bffb17 	ldw	r2,-20(fp)
   4dbbc:	10800217 	ldw	r2,8(r2)
   4dbc0:	108000cc 	andi	r2,r2,3
   4dbc4:	10800060 	cmpeqi	r2,r2,1
   4dbc8:	1000181e 	bne	r2,zero,4dc2c <read+0xc8>
        (fd->dev->read))
   4dbcc:	e0bffb17 	ldw	r2,-20(fp)
   4dbd0:	10800017 	ldw	r2,0(r2)
   4dbd4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4dbd8:	10001426 	beq	r2,zero,4dc2c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4dbdc:	e0bffb17 	ldw	r2,-20(fp)
   4dbe0:	10800017 	ldw	r2,0(r2)
   4dbe4:	10800517 	ldw	r2,20(r2)
   4dbe8:	e0ffff17 	ldw	r3,-4(fp)
   4dbec:	180d883a 	mov	r6,r3
   4dbf0:	e17ffe17 	ldw	r5,-8(fp)
   4dbf4:	e13ffb17 	ldw	r4,-20(fp)
   4dbf8:	103ee83a 	callr	r2
   4dbfc:	e0bffc15 	stw	r2,-16(fp)
   4dc00:	e0bffc17 	ldw	r2,-16(fp)
   4dc04:	1000070e 	bge	r2,zero,4dc24 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   4dc08:	004db280 	call	4db28 <alt_get_errno>
   4dc0c:	1007883a 	mov	r3,r2
   4dc10:	e0bffc17 	ldw	r2,-16(fp)
   4dc14:	0085c83a 	sub	r2,zero,r2
   4dc18:	18800015 	stw	r2,0(r3)
          return -1;
   4dc1c:	00bfffc4 	movi	r2,-1
   4dc20:	00000c06 	br	4dc54 <read+0xf0>
        }
        return rval;
   4dc24:	e0bffc17 	ldw	r2,-16(fp)
   4dc28:	00000a06 	br	4dc54 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4dc2c:	004db280 	call	4db28 <alt_get_errno>
   4dc30:	1007883a 	mov	r3,r2
   4dc34:	00800344 	movi	r2,13
   4dc38:	18800015 	stw	r2,0(r3)
   4dc3c:	00000406 	br	4dc50 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4dc40:	004db280 	call	4db28 <alt_get_errno>
   4dc44:	1007883a 	mov	r3,r2
   4dc48:	00801444 	movi	r2,81
   4dc4c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4dc50:	00bfffc4 	movi	r2,-1
}
   4dc54:	e037883a 	mov	sp,fp
   4dc58:	dfc00117 	ldw	ra,4(sp)
   4dc5c:	df000017 	ldw	fp,0(sp)
   4dc60:	dec00204 	addi	sp,sp,8
   4dc64:	f800283a 	ret

0004dc68 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4dc68:	defffc04 	addi	sp,sp,-16
   4dc6c:	dfc00315 	stw	ra,12(sp)
   4dc70:	df000215 	stw	fp,8(sp)
   4dc74:	dc000115 	stw	r16,4(sp)
   4dc78:	df000204 	addi	fp,sp,8
   4dc7c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   4dc80:	e0bffe17 	ldw	r2,-8(fp)
   4dc84:	108000d0 	cmplti	r2,r2,3
   4dc88:	1000111e 	bne	r2,zero,4dcd0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   4dc8c:	040001b4 	movhi	r16,6
   4dc90:	84263304 	addi	r16,r16,-26420
   4dc94:	e0bffe17 	ldw	r2,-8(fp)
   4dc98:	01400304 	movi	r5,12
   4dc9c:	1009883a 	mov	r4,r2
   4dca0:	00406e00 	call	406e0 <__mulsi3>
   4dca4:	8085883a 	add	r2,r16,r2
   4dca8:	10800204 	addi	r2,r2,8
   4dcac:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4dcb0:	040001b4 	movhi	r16,6
   4dcb4:	84263304 	addi	r16,r16,-26420
   4dcb8:	e0bffe17 	ldw	r2,-8(fp)
   4dcbc:	01400304 	movi	r5,12
   4dcc0:	1009883a 	mov	r4,r2
   4dcc4:	00406e00 	call	406e0 <__mulsi3>
   4dcc8:	8085883a 	add	r2,r16,r2
   4dccc:	10000015 	stw	zero,0(r2)
  }
}
   4dcd0:	0001883a 	nop
   4dcd4:	e6ffff04 	addi	sp,fp,-4
   4dcd8:	dfc00217 	ldw	ra,8(sp)
   4dcdc:	df000117 	ldw	fp,4(sp)
   4dce0:	dc000017 	ldw	r16,0(sp)
   4dce4:	dec00304 	addi	sp,sp,12
   4dce8:	f800283a 	ret

0004dcec <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4dcec:	defff904 	addi	sp,sp,-28
   4dcf0:	df000615 	stw	fp,24(sp)
   4dcf4:	df000604 	addi	fp,sp,24
   4dcf8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4dcfc:	0005303a 	rdctl	r2,status
   4dd00:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4dd04:	e0fffe17 	ldw	r3,-8(fp)
   4dd08:	00bfff84 	movi	r2,-2
   4dd0c:	1884703a 	and	r2,r3,r2
   4dd10:	1001703a 	wrctl	status,r2
  
  return context;
   4dd14:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4dd18:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4dd1c:	d0a00c17 	ldw	r2,-32720(gp)
   4dd20:	10c000c4 	addi	r3,r2,3
   4dd24:	00bfff04 	movi	r2,-4
   4dd28:	1884703a 	and	r2,r3,r2
   4dd2c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4dd30:	d0e00c17 	ldw	r3,-32720(gp)
   4dd34:	e0bfff17 	ldw	r2,-4(fp)
   4dd38:	1887883a 	add	r3,r3,r2
   4dd3c:	008001b4 	movhi	r2,6
   4dd40:	10960004 	addi	r2,r2,22528
   4dd44:	10c0062e 	bgeu	r2,r3,4dd60 <sbrk+0x74>
   4dd48:	e0bffb17 	ldw	r2,-20(fp)
   4dd4c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4dd50:	e0bffa17 	ldw	r2,-24(fp)
   4dd54:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4dd58:	00bfffc4 	movi	r2,-1
   4dd5c:	00000b06 	br	4dd8c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   4dd60:	d0a00c17 	ldw	r2,-32720(gp)
   4dd64:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   4dd68:	d0e00c17 	ldw	r3,-32720(gp)
   4dd6c:	e0bfff17 	ldw	r2,-4(fp)
   4dd70:	1885883a 	add	r2,r3,r2
   4dd74:	d0a00c15 	stw	r2,-32720(gp)
   4dd78:	e0bffb17 	ldw	r2,-20(fp)
   4dd7c:	e0bffc15 	stw	r2,-16(fp)
   4dd80:	e0bffc17 	ldw	r2,-16(fp)
   4dd84:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4dd88:	e0bffd17 	ldw	r2,-12(fp)
} 
   4dd8c:	e037883a 	mov	sp,fp
   4dd90:	df000017 	ldw	fp,0(sp)
   4dd94:	dec00104 	addi	sp,sp,4
   4dd98:	f800283a 	ret

0004dd9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4dd9c:	defffe04 	addi	sp,sp,-8
   4dda0:	dfc00115 	stw	ra,4(sp)
   4dda4:	df000015 	stw	fp,0(sp)
   4dda8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4ddac:	d0a00b17 	ldw	r2,-32724(gp)
   4ddb0:	10000326 	beq	r2,zero,4ddc0 <alt_get_errno+0x24>
   4ddb4:	d0a00b17 	ldw	r2,-32724(gp)
   4ddb8:	103ee83a 	callr	r2
   4ddbc:	00000106 	br	4ddc4 <alt_get_errno+0x28>
   4ddc0:	d0a71404 	addi	r2,gp,-25520
}
   4ddc4:	e037883a 	mov	sp,fp
   4ddc8:	dfc00117 	ldw	ra,4(sp)
   4ddcc:	df000017 	ldw	fp,0(sp)
   4ddd0:	dec00204 	addi	sp,sp,8
   4ddd4:	f800283a 	ret

0004ddd8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4ddd8:	defff904 	addi	sp,sp,-28
   4dddc:	dfc00615 	stw	ra,24(sp)
   4dde0:	df000515 	stw	fp,20(sp)
   4dde4:	df000504 	addi	fp,sp,20
   4dde8:	e13ffd15 	stw	r4,-12(fp)
   4ddec:	e17ffe15 	stw	r5,-8(fp)
   4ddf0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4ddf4:	e0bffd17 	ldw	r2,-12(fp)
   4ddf8:	10000816 	blt	r2,zero,4de1c <write+0x44>
   4ddfc:	01400304 	movi	r5,12
   4de00:	e13ffd17 	ldw	r4,-12(fp)
   4de04:	00406e00 	call	406e0 <__mulsi3>
   4de08:	1007883a 	mov	r3,r2
   4de0c:	008001b4 	movhi	r2,6
   4de10:	10a63304 	addi	r2,r2,-26420
   4de14:	1885883a 	add	r2,r3,r2
   4de18:	00000106 	br	4de20 <write+0x48>
   4de1c:	0005883a 	mov	r2,zero
   4de20:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4de24:	e0bffb17 	ldw	r2,-20(fp)
   4de28:	10002126 	beq	r2,zero,4deb0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4de2c:	e0bffb17 	ldw	r2,-20(fp)
   4de30:	10800217 	ldw	r2,8(r2)
   4de34:	108000cc 	andi	r2,r2,3
   4de38:	10001826 	beq	r2,zero,4de9c <write+0xc4>
   4de3c:	e0bffb17 	ldw	r2,-20(fp)
   4de40:	10800017 	ldw	r2,0(r2)
   4de44:	10800617 	ldw	r2,24(r2)
   4de48:	10001426 	beq	r2,zero,4de9c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4de4c:	e0bffb17 	ldw	r2,-20(fp)
   4de50:	10800017 	ldw	r2,0(r2)
   4de54:	10800617 	ldw	r2,24(r2)
   4de58:	e0ffff17 	ldw	r3,-4(fp)
   4de5c:	180d883a 	mov	r6,r3
   4de60:	e17ffe17 	ldw	r5,-8(fp)
   4de64:	e13ffb17 	ldw	r4,-20(fp)
   4de68:	103ee83a 	callr	r2
   4de6c:	e0bffc15 	stw	r2,-16(fp)
   4de70:	e0bffc17 	ldw	r2,-16(fp)
   4de74:	1000070e 	bge	r2,zero,4de94 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   4de78:	004dd9c0 	call	4dd9c <alt_get_errno>
   4de7c:	1007883a 	mov	r3,r2
   4de80:	e0bffc17 	ldw	r2,-16(fp)
   4de84:	0085c83a 	sub	r2,zero,r2
   4de88:	18800015 	stw	r2,0(r3)
        return -1;
   4de8c:	00bfffc4 	movi	r2,-1
   4de90:	00000c06 	br	4dec4 <write+0xec>
      }
      return rval;
   4de94:	e0bffc17 	ldw	r2,-16(fp)
   4de98:	00000a06 	br	4dec4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4de9c:	004dd9c0 	call	4dd9c <alt_get_errno>
   4dea0:	1007883a 	mov	r3,r2
   4dea4:	00800344 	movi	r2,13
   4dea8:	18800015 	stw	r2,0(r3)
   4deac:	00000406 	br	4dec0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4deb0:	004dd9c0 	call	4dd9c <alt_get_errno>
   4deb4:	1007883a 	mov	r3,r2
   4deb8:	00801444 	movi	r2,81
   4debc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4dec0:	00bfffc4 	movi	r2,-1
}
   4dec4:	e037883a 	mov	sp,fp
   4dec8:	dfc00117 	ldw	ra,4(sp)
   4decc:	df000017 	ldw	fp,0(sp)
   4ded0:	dec00204 	addi	sp,sp,8
   4ded4:	f800283a 	ret

0004ded8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   4ded8:	deffff04 	addi	sp,sp,-4
   4dedc:	df000015 	stw	fp,0(sp)
   4dee0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4dee4:	000170fa 	wrctl	ienable,zero
}
   4dee8:	0001883a 	nop
   4deec:	e037883a 	mov	sp,fp
   4def0:	df000017 	ldw	fp,0(sp)
   4def4:	dec00104 	addi	sp,sp,4
   4def8:	f800283a 	ret

0004defc <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   4defc:	deffdf04 	addi	sp,sp,-132
   4df00:	dfc02015 	stw	ra,128(sp)
   4df04:	df001f15 	stw	fp,124(sp)
   4df08:	df001f04 	addi	fp,sp,124
   4df0c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   4df10:	e0bfe204 	addi	r2,fp,-120
   4df14:	100b883a 	mov	r5,r2
   4df18:	01003fc4 	movi	r4,255
   4df1c:	0055e280 	call	55e28 <OSTaskQuery>
   4df20:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   4df24:	e0bffe83 	ldbu	r2,-6(fp)
   4df28:	10803fcc 	andi	r2,r2,255
   4df2c:	10001e1e 	bne	r2,zero,4dfa8 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
   4df30:	e0bfee83 	ldbu	r2,-70(fp)
   4df34:	10803fcc 	andi	r2,r2,255
   4df38:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   4df3c:	d0a71a17 	ldw	r2,-25496(gp)
   4df40:	e0fffd04 	addi	r3,fp,-12
   4df44:	180b883a 	mov	r5,r3
   4df48:	1009883a 	mov	r4,r2
   4df4c:	00546400 	call	54640 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   4df50:	e0bffe43 	ldbu	r2,-7(fp)
   4df54:	10803fcc 	andi	r2,r2,255
   4df58:	10000726 	beq	r2,zero,4df78 <__env_lock+0x7c>
   4df5c:	d0a00d17 	ldw	r2,-32716(gp)
   4df60:	e0ffe117 	ldw	r3,-124(fp)
   4df64:	1880041e 	bne	r3,r2,4df78 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
   4df68:	d0a71917 	ldw	r2,-25500(gp)
   4df6c:	10800044 	addi	r2,r2,1
   4df70:	d0a71915 	stw	r2,-25500(gp)
   4df74:	00000a06 	br	4dfa0 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   4df78:	d0a71a17 	ldw	r2,-25496(gp)
   4df7c:	e0fffe84 	addi	r3,fp,-6
   4df80:	180d883a 	mov	r6,r3
   4df84:	000b883a 	mov	r5,zero
   4df88:	1009883a 	mov	r4,r2
   4df8c:	00541b80 	call	541b8 <OSSemPend>
    locks  = 1;
   4df90:	00800044 	movi	r2,1
   4df94:	d0a71915 	stw	r2,-25500(gp)
    lockid = id;
   4df98:	e0bfe117 	ldw	r2,-124(fp)
   4df9c:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   4dfa0:	0001883a 	nop
   4dfa4:	00000106 	br	4dfac <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   4dfa8:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   4dfac:	e037883a 	mov	sp,fp
   4dfb0:	dfc00117 	ldw	ra,4(sp)
   4dfb4:	df000017 	ldw	fp,0(sp)
   4dfb8:	dec00204 	addi	sp,sp,8
   4dfbc:	f800283a 	ret

0004dfc0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   4dfc0:	defffd04 	addi	sp,sp,-12
   4dfc4:	dfc00215 	stw	ra,8(sp)
   4dfc8:	df000115 	stw	fp,4(sp)
   4dfcc:	df000104 	addi	fp,sp,4
   4dfd0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   4dfd4:	d0a71917 	ldw	r2,-25500(gp)
   4dfd8:	10000b26 	beq	r2,zero,4e008 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   4dfdc:	d0a71917 	ldw	r2,-25500(gp)
   4dfe0:	10bfffc4 	addi	r2,r2,-1
   4dfe4:	d0a71915 	stw	r2,-25500(gp)
   4dfe8:	d0a71917 	ldw	r2,-25500(gp)
   4dfec:	1000071e 	bne	r2,zero,4e00c <__env_unlock+0x4c>
  {
    lockid = -1;
   4dff0:	00bfffc4 	movi	r2,-1
   4dff4:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
   4dff8:	d0a71a17 	ldw	r2,-25496(gp)
   4dffc:	1009883a 	mov	r4,r2
   4e000:	00545300 	call	54530 <OSSemPost>
   4e004:	00000106 	br	4e00c <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
   4e008:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   4e00c:	e037883a 	mov	sp,fp
   4e010:	dfc00117 	ldw	ra,4(sp)
   4e014:	df000017 	ldw	fp,0(sp)
   4e018:	dec00204 	addi	sp,sp,8
   4e01c:	f800283a 	ret

0004e020 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   4e020:	deffdb04 	addi	sp,sp,-148
   4e024:	dfc02415 	stw	ra,144(sp)
   4e028:	df002315 	stw	fp,140(sp)
   4e02c:	df002304 	addi	fp,sp,140
   4e030:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4e034:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   4e038:	d0a71d43 	ldbu	r2,-25483(gp)
   4e03c:	10803fcc 	andi	r2,r2,255
   4e040:	10800060 	cmpeqi	r2,r2,1
   4e044:	10003626 	beq	r2,zero,4e120 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   4e048:	e0bfe204 	addi	r2,fp,-120
   4e04c:	100b883a 	mov	r5,r2
   4e050:	01003fc4 	movi	r4,255
   4e054:	0055e280 	call	55e28 <OSTaskQuery>
   4e058:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   4e05c:	e0bffe83 	ldbu	r2,-6(fp)
   4e060:	10803fcc 	andi	r2,r2,255
   4e064:	1000301e 	bne	r2,zero,4e128 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
   4e068:	e0bfee83 	ldbu	r2,-70(fp)
   4e06c:	10803fcc 	andi	r2,r2,255
   4e070:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   4e074:	d0a71c17 	ldw	r2,-25488(gp)
   4e078:	e0fffd04 	addi	r3,fp,-12
   4e07c:	180b883a 	mov	r5,r3
   4e080:	1009883a 	mov	r4,r2
   4e084:	00546400 	call	54640 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e088:	0005303a 	rdctl	r2,status
   4e08c:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e090:	e0ffe117 	ldw	r3,-124(fp)
   4e094:	00bfff84 	movi	r2,-2
   4e098:	1884703a 	and	r2,r3,r2
   4e09c:	1001703a 	wrctl	status,r2
  
  return context;
   4e0a0:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
   4e0a4:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   4e0a8:	e0bffd0b 	ldhu	r2,-12(fp)
   4e0ac:	10bfffcc 	andi	r2,r2,65535
   4e0b0:	10000b1e 	bne	r2,zero,4e0e0 <__malloc_lock+0xc0>
   4e0b4:	d0a00e17 	ldw	r2,-32712(gp)
   4e0b8:	e0ffde17 	ldw	r3,-136(fp)
   4e0bc:	1880081e 	bne	r3,r2,4e0e0 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
   4e0c0:	d0a71b17 	ldw	r2,-25492(gp)
   4e0c4:	10800044 	addi	r2,r2,1
   4e0c8:	d0a71b15 	stw	r2,-25492(gp)
   4e0cc:	e0bfdd17 	ldw	r2,-140(fp)
   4e0d0:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e0d4:	e0bfdf17 	ldw	r2,-132(fp)
   4e0d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   4e0dc:	00000e06 	br	4e118 <__malloc_lock+0xf8>
   4e0e0:	e0bfdd17 	ldw	r2,-140(fp)
   4e0e4:	e0bfe015 	stw	r2,-128(fp)
   4e0e8:	e0bfe017 	ldw	r2,-128(fp)
   4e0ec:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   4e0f0:	d0a71c17 	ldw	r2,-25488(gp)
   4e0f4:	e0fffe84 	addi	r3,fp,-6
   4e0f8:	180d883a 	mov	r6,r3
   4e0fc:	000b883a 	mov	r5,zero
   4e100:	1009883a 	mov	r4,r2
   4e104:	00541b80 	call	541b8 <OSSemPend>
    locks  = 1;
   4e108:	00800044 	movi	r2,1
   4e10c:	d0a71b15 	stw	r2,-25492(gp)
    lockid = id;
   4e110:	e0bfde17 	ldw	r2,-136(fp)
   4e114:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   4e118:	0001883a 	nop
   4e11c:	00000306 	br	4e12c <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
   4e120:	0001883a 	nop
   4e124:	00000106 	br	4e12c <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   4e128:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   4e12c:	e037883a 	mov	sp,fp
   4e130:	dfc00117 	ldw	ra,4(sp)
   4e134:	df000017 	ldw	fp,0(sp)
   4e138:	dec00204 	addi	sp,sp,8
   4e13c:	f800283a 	ret

0004e140 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4e140:	defff804 	addi	sp,sp,-32
   4e144:	dfc00715 	stw	ra,28(sp)
   4e148:	df000615 	stw	fp,24(sp)
   4e14c:	df000604 	addi	fp,sp,24
   4e150:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4e154:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   4e158:	d0a71d43 	ldbu	r2,-25483(gp)
   4e15c:	10803fcc 	andi	r2,r2,255
   4e160:	10800060 	cmpeqi	r2,r2,1
   4e164:	10002326 	beq	r2,zero,4e1f4 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e168:	0005303a 	rdctl	r2,status
   4e16c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e170:	e0fffe17 	ldw	r3,-8(fp)
   4e174:	00bfff84 	movi	r2,-2
   4e178:	1884703a 	and	r2,r3,r2
   4e17c:	1001703a 	wrctl	status,r2
  
  return context;
   4e180:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
   4e184:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   4e188:	d0a71b17 	ldw	r2,-25492(gp)
   4e18c:	1000051e 	bne	r2,zero,4e1a4 <__malloc_unlock+0x64>
   4e190:	e0bffa17 	ldw	r2,-24(fp)
   4e194:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e198:	e0bffb17 	ldw	r2,-20(fp)
   4e19c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   4e1a0:	00001506 	br	4e1f8 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   4e1a4:	d0a71b17 	ldw	r2,-25492(gp)
   4e1a8:	10bfffc4 	addi	r2,r2,-1
   4e1ac:	d0a71b15 	stw	r2,-25492(gp)
   4e1b0:	d0a71b17 	ldw	r2,-25492(gp)
   4e1b4:	10000a1e 	bne	r2,zero,4e1e0 <__malloc_unlock+0xa0>
  {
    lockid = -1;
   4e1b8:	00bfffc4 	movi	r2,-1
   4e1bc:	d0a00e15 	stw	r2,-32712(gp)
   4e1c0:	e0bffa17 	ldw	r2,-24(fp)
   4e1c4:	e0bffc15 	stw	r2,-16(fp)
   4e1c8:	e0bffc17 	ldw	r2,-16(fp)
   4e1cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   4e1d0:	d0a71c17 	ldw	r2,-25488(gp)
   4e1d4:	1009883a 	mov	r4,r2
   4e1d8:	00545300 	call	54530 <OSSemPost>
   4e1dc:	00000606 	br	4e1f8 <__malloc_unlock+0xb8>
   4e1e0:	e0bffa17 	ldw	r2,-24(fp)
   4e1e4:	e0bffd15 	stw	r2,-12(fp)
   4e1e8:	e0bffd17 	ldw	r2,-12(fp)
   4e1ec:	1001703a 	wrctl	status,r2
   4e1f0:	00000106 	br	4e1f8 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
   4e1f4:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   4e1f8:	e037883a 	mov	sp,fp
   4e1fc:	dfc00117 	ldw	ra,4(sp)
   4e200:	df000017 	ldw	fp,0(sp)
   4e204:	dec00204 	addi	sp,sp,8
   4e208:	f800283a 	ret

0004e20c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   4e20c:	defff704 	addi	sp,sp,-36
   4e210:	dfc00815 	stw	ra,32(sp)
   4e214:	df000715 	stw	fp,28(sp)
   4e218:	df000704 	addi	fp,sp,28
   4e21c:	e13ffd15 	stw	r4,-12(fp)
   4e220:	e17ffe15 	stw	r5,-8(fp)
   4e224:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4e228:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   4e22c:	e0bfff17 	ldw	r2,-4(fp)
   4e230:	1000021e 	bne	r2,zero,4e23c <OSEventNameGet+0x30>
        return (0);
   4e234:	0005883a 	mov	r2,zero
   4e238:	00003706 	br	4e318 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   4e23c:	e0bffd17 	ldw	r2,-12(fp)
   4e240:	1000051e 	bne	r2,zero,4e258 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   4e244:	e0bfff17 	ldw	r2,-4(fp)
   4e248:	00c00104 	movi	r3,4
   4e24c:	10c00005 	stb	r3,0(r2)
        return (0);
   4e250:	0005883a 	mov	r2,zero
   4e254:	00003006 	br	4e318 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   4e258:	e0bffe17 	ldw	r2,-8(fp)
   4e25c:	1000051e 	bne	r2,zero,4e274 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   4e260:	e0bfff17 	ldw	r2,-4(fp)
   4e264:	00c00304 	movi	r3,12
   4e268:	10c00005 	stb	r3,0(r2)
        return (0);
   4e26c:	0005883a 	mov	r2,zero
   4e270:	00002906 	br	4e318 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   4e274:	d0a72b03 	ldbu	r2,-25428(gp)
   4e278:	10803fcc 	andi	r2,r2,255
   4e27c:	10000526 	beq	r2,zero,4e294 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   4e280:	e0bfff17 	ldw	r2,-4(fp)
   4e284:	00c00444 	movi	r3,17
   4e288:	10c00005 	stb	r3,0(r2)
        return (0);
   4e28c:	0005883a 	mov	r2,zero
   4e290:	00002106 	br	4e318 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   4e294:	e0bffd17 	ldw	r2,-12(fp)
   4e298:	10800003 	ldbu	r2,0(r2)
   4e29c:	10803fcc 	andi	r2,r2,255
   4e2a0:	10bfffc4 	addi	r2,r2,-1
   4e2a4:	10800128 	cmpgeui	r2,r2,4
   4e2a8:	10000526 	beq	r2,zero,4e2c0 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   4e2ac:	e0bfff17 	ldw	r2,-4(fp)
   4e2b0:	00c00044 	movi	r3,1
   4e2b4:	10c00005 	stb	r3,0(r2)
             return (0);
   4e2b8:	0005883a 	mov	r2,zero
   4e2bc:	00001606 	br	4e318 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   4e2c0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e2c4:	0005303a 	rdctl	r2,status
   4e2c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e2cc:	e0fffb17 	ldw	r3,-20(fp)
   4e2d0:	00bfff84 	movi	r2,-2
   4e2d4:	1884703a 	and	r2,r3,r2
   4e2d8:	1001703a 	wrctl	status,r2
  
  return context;
   4e2dc:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   4e2e0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   4e2e4:	e0bffd17 	ldw	r2,-12(fp)
   4e2e8:	10800384 	addi	r2,r2,14
   4e2ec:	100b883a 	mov	r5,r2
   4e2f0:	e13ffe17 	ldw	r4,-8(fp)
   4e2f4:	004fc900 	call	4fc90 <OS_StrCopy>
   4e2f8:	e0bffa05 	stb	r2,-24(fp)
   4e2fc:	e0bff917 	ldw	r2,-28(fp)
   4e300:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e304:	e0bffc17 	ldw	r2,-16(fp)
   4e308:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   4e30c:	e0bfff17 	ldw	r2,-4(fp)
   4e310:	10000005 	stb	zero,0(r2)
    return (len);
   4e314:	e0bffa03 	ldbu	r2,-24(fp)
}
   4e318:	e037883a 	mov	sp,fp
   4e31c:	dfc00117 	ldw	ra,4(sp)
   4e320:	df000017 	ldw	fp,0(sp)
   4e324:	dec00204 	addi	sp,sp,8
   4e328:	f800283a 	ret

0004e32c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   4e32c:	defff604 	addi	sp,sp,-40
   4e330:	dfc00915 	stw	ra,36(sp)
   4e334:	df000815 	stw	fp,32(sp)
   4e338:	df000804 	addi	fp,sp,32
   4e33c:	e13ffd15 	stw	r4,-12(fp)
   4e340:	e17ffe15 	stw	r5,-8(fp)
   4e344:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4e348:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   4e34c:	e0bfff17 	ldw	r2,-4(fp)
   4e350:	10004026 	beq	r2,zero,4e454 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   4e354:	e0bffd17 	ldw	r2,-12(fp)
   4e358:	1000041e 	bne	r2,zero,4e36c <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   4e35c:	e0bfff17 	ldw	r2,-4(fp)
   4e360:	00c00104 	movi	r3,4
   4e364:	10c00005 	stb	r3,0(r2)
        return;
   4e368:	00003b06 	br	4e458 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   4e36c:	e0bffe17 	ldw	r2,-8(fp)
   4e370:	1000041e 	bne	r2,zero,4e384 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   4e374:	e0bfff17 	ldw	r2,-4(fp)
   4e378:	00c00304 	movi	r3,12
   4e37c:	10c00005 	stb	r3,0(r2)
        return;
   4e380:	00003506 	br	4e458 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   4e384:	d0a72b03 	ldbu	r2,-25428(gp)
   4e388:	10803fcc 	andi	r2,r2,255
   4e38c:	10000426 	beq	r2,zero,4e3a0 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   4e390:	e0bfff17 	ldw	r2,-4(fp)
   4e394:	00c00484 	movi	r3,18
   4e398:	10c00005 	stb	r3,0(r2)
        return;
   4e39c:	00002e06 	br	4e458 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
   4e3a0:	e0bffd17 	ldw	r2,-12(fp)
   4e3a4:	10800003 	ldbu	r2,0(r2)
   4e3a8:	10803fcc 	andi	r2,r2,255
   4e3ac:	10bfffc4 	addi	r2,r2,-1
   4e3b0:	10800128 	cmpgeui	r2,r2,4
   4e3b4:	10000426 	beq	r2,zero,4e3c8 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   4e3b8:	e0bfff17 	ldw	r2,-4(fp)
   4e3bc:	00c00044 	movi	r3,1
   4e3c0:	10c00005 	stb	r3,0(r2)
             return;
   4e3c4:	00002406 	br	4e458 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   4e3c8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e3cc:	0005303a 	rdctl	r2,status
   4e3d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e3d4:	e0fffc17 	ldw	r3,-16(fp)
   4e3d8:	00bfff84 	movi	r2,-2
   4e3dc:	1884703a 	and	r2,r3,r2
   4e3e0:	1001703a 	wrctl	status,r2
  
  return context;
   4e3e4:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   4e3e8:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   4e3ec:	e13ffe17 	ldw	r4,-8(fp)
   4e3f0:	004fd040 	call	4fd04 <OS_StrLen>
   4e3f4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   4e3f8:	e0bffa03 	ldbu	r2,-24(fp)
   4e3fc:	10800830 	cmpltui	r2,r2,32
   4e400:	1000081e 	bne	r2,zero,4e424 <OSEventNameSet+0xf8>
   4e404:	e0bff817 	ldw	r2,-32(fp)
   4e408:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e40c:	e0bff917 	ldw	r2,-28(fp)
   4e410:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   4e414:	e0bfff17 	ldw	r2,-4(fp)
   4e418:	00c002c4 	movi	r3,11
   4e41c:	10c00005 	stb	r3,0(r2)
        return;
   4e420:	00000d06 	br	4e458 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   4e424:	e0bffd17 	ldw	r2,-12(fp)
   4e428:	10800384 	addi	r2,r2,14
   4e42c:	e17ffe17 	ldw	r5,-8(fp)
   4e430:	1009883a 	mov	r4,r2
   4e434:	004fc900 	call	4fc90 <OS_StrCopy>
   4e438:	e0bff817 	ldw	r2,-32(fp)
   4e43c:	e0bffb15 	stw	r2,-20(fp)
   4e440:	e0bffb17 	ldw	r2,-20(fp)
   4e444:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   4e448:	e0bfff17 	ldw	r2,-4(fp)
   4e44c:	10000005 	stb	zero,0(r2)
   4e450:	00000106 	br	4e458 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   4e454:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   4e458:	e037883a 	mov	sp,fp
   4e45c:	dfc00117 	ldw	ra,4(sp)
   4e460:	df000017 	ldw	fp,0(sp)
   4e464:	dec00204 	addi	sp,sp,8
   4e468:	f800283a 	ret

0004e46c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   4e46c:	deffed04 	addi	sp,sp,-76
   4e470:	dfc01215 	stw	ra,72(sp)
   4e474:	df001115 	stw	fp,68(sp)
   4e478:	df001104 	addi	fp,sp,68
   4e47c:	e13ffc15 	stw	r4,-16(fp)
   4e480:	e17ffd15 	stw	r5,-12(fp)
   4e484:	e1bffe15 	stw	r6,-8(fp)
   4e488:	3805883a 	mov	r2,r7
   4e48c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   4e490:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   4e494:	e0800217 	ldw	r2,8(fp)
   4e498:	1000021e 	bne	r2,zero,4e4a4 <OSEventPendMulti+0x38>
        return (0);
   4e49c:	0005883a 	mov	r2,zero
   4e4a0:	00017106 	br	4ea68 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   4e4a4:	e0bffc17 	ldw	r2,-16(fp)
   4e4a8:	1000051e 	bne	r2,zero,4e4c0 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   4e4ac:	e0800217 	ldw	r2,8(fp)
   4e4b0:	00c00104 	movi	r3,4
   4e4b4:	10c00005 	stb	r3,0(r2)
        return (0);
   4e4b8:	0005883a 	mov	r2,zero
   4e4bc:	00016a06 	br	4ea68 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   4e4c0:	e0bffd17 	ldw	r2,-12(fp)
   4e4c4:	1000051e 	bne	r2,zero,4e4dc <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   4e4c8:	e0800217 	ldw	r2,8(fp)
   4e4cc:	00c00104 	movi	r3,4
   4e4d0:	10c00005 	stb	r3,0(r2)
        return (0);
   4e4d4:	0005883a 	mov	r2,zero
   4e4d8:	00016306 	br	4ea68 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   4e4dc:	e0bffe17 	ldw	r2,-8(fp)
   4e4e0:	1000051e 	bne	r2,zero,4e4f8 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   4e4e4:	e0800217 	ldw	r2,8(fp)
   4e4e8:	00c00104 	movi	r3,4
   4e4ec:	10c00005 	stb	r3,0(r2)
        return (0);
   4e4f0:	0005883a 	mov	r2,zero
   4e4f4:	00015c06 	br	4ea68 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   4e4f8:	e0bffd17 	ldw	r2,-12(fp)
   4e4fc:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   4e500:	e0bffc17 	ldw	r2,-16(fp)
   4e504:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   4e508:	e0bfef17 	ldw	r2,-68(fp)
   4e50c:	10800017 	ldw	r2,0(r2)
   4e510:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   4e514:	00001906 	br	4e57c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   4e518:	e0bff017 	ldw	r2,-64(fp)
   4e51c:	10800003 	ldbu	r2,0(r2)
   4e520:	10803fcc 	andi	r2,r2,255
   4e524:	10c000a0 	cmpeqi	r3,r2,2
   4e528:	1800091e 	bne	r3,zero,4e550 <OSEventPendMulti+0xe4>
   4e52c:	10c000e0 	cmpeqi	r3,r2,3
   4e530:	1800091e 	bne	r3,zero,4e558 <OSEventPendMulti+0xec>
   4e534:	10800060 	cmpeqi	r2,r2,1
   4e538:	1000091e 	bne	r2,zero,4e560 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   4e53c:	e0800217 	ldw	r2,8(fp)
   4e540:	00c00044 	movi	r3,1
   4e544:	10c00005 	stb	r3,0(r2)
                 return (0);
   4e548:	0005883a 	mov	r2,zero
   4e54c:	00014606 	br	4ea68 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   4e550:	0001883a 	nop
   4e554:	00000306 	br	4e564 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   4e558:	0001883a 	nop
   4e55c:	00000106 	br	4e564 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   4e560:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   4e564:	e0bfef17 	ldw	r2,-68(fp)
   4e568:	10800104 	addi	r2,r2,4
   4e56c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   4e570:	e0bfef17 	ldw	r2,-68(fp)
   4e574:	10800017 	ldw	r2,0(r2)
   4e578:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   4e57c:	e0bff017 	ldw	r2,-64(fp)
   4e580:	103fe51e 	bne	r2,zero,4e518 <__alt_data_end+0xfffe8d18>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   4e584:	d0a72b03 	ldbu	r2,-25428(gp)
   4e588:	10803fcc 	andi	r2,r2,255
   4e58c:	10000526 	beq	r2,zero,4e5a4 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   4e590:	e0800217 	ldw	r2,8(fp)
   4e594:	00c00084 	movi	r3,2
   4e598:	10c00005 	stb	r3,0(r2)
        return (0);
   4e59c:	0005883a 	mov	r2,zero
   4e5a0:	00013106 	br	4ea68 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   4e5a4:	d0a71d03 	ldbu	r2,-25484(gp)
   4e5a8:	10803fcc 	andi	r2,r2,255
   4e5ac:	10000526 	beq	r2,zero,4e5c4 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   4e5b0:	e0800217 	ldw	r2,8(fp)
   4e5b4:	00c00344 	movi	r3,13
   4e5b8:	10c00005 	stb	r3,0(r2)
        return (0);
   4e5bc:	0005883a 	mov	r2,zero
   4e5c0:	00012906 	br	4ea68 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e5c4:	0005303a 	rdctl	r2,status
   4e5c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e5cc:	e0fffb17 	ldw	r3,-20(fp)
   4e5d0:	00bfff84 	movi	r2,-2
   4e5d4:	1884703a 	and	r2,r3,r2
   4e5d8:	1001703a 	wrctl	status,r2
  
  return context;
   4e5dc:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   4e5e0:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   4e5e4:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   4e5e8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   4e5ec:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   4e5f0:	e0bffc17 	ldw	r2,-16(fp)
   4e5f4:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   4e5f8:	e0bfef17 	ldw	r2,-68(fp)
   4e5fc:	10800017 	ldw	r2,0(r2)
   4e600:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   4e604:	00008106 	br	4e80c <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   4e608:	e0bff017 	ldw	r2,-64(fp)
   4e60c:	10800003 	ldbu	r2,0(r2)
   4e610:	10803fcc 	andi	r2,r2,255
   4e614:	10c000a0 	cmpeqi	r3,r2,2
   4e618:	18003c1e 	bne	r3,zero,4e70c <OSEventPendMulti+0x2a0>
   4e61c:	10c000e0 	cmpeqi	r3,r2,3
   4e620:	1800031e 	bne	r3,zero,4e630 <OSEventPendMulti+0x1c4>
   4e624:	10800060 	cmpeqi	r2,r2,1
   4e628:	10001e1e 	bne	r2,zero,4e6a4 <OSEventPendMulti+0x238>
   4e62c:	00006606 	br	4e7c8 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   4e630:	e0bff017 	ldw	r2,-64(fp)
   4e634:	1080020b 	ldhu	r2,8(r2)
   4e638:	10bfffcc 	andi	r2,r2,65535
   4e63c:	10001526 	beq	r2,zero,4e694 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   4e640:	e0bff017 	ldw	r2,-64(fp)
   4e644:	1080020b 	ldhu	r2,8(r2)
   4e648:	10bfffc4 	addi	r2,r2,-1
   4e64c:	1007883a 	mov	r3,r2
   4e650:	e0bff017 	ldw	r2,-64(fp)
   4e654:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   4e658:	e0bffd17 	ldw	r2,-12(fp)
   4e65c:	10c00104 	addi	r3,r2,4
   4e660:	e0fffd15 	stw	r3,-12(fp)
   4e664:	e0fff017 	ldw	r3,-64(fp)
   4e668:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   4e66c:	00800044 	movi	r2,1
   4e670:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   4e674:	e0bffe17 	ldw	r2,-8(fp)
   4e678:	10c00104 	addi	r3,r2,4
   4e67c:	e0fffe15 	stw	r3,-8(fp)
   4e680:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   4e684:	e0bff18b 	ldhu	r2,-58(fp)
   4e688:	10800044 	addi	r2,r2,1
   4e68c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   4e690:	00005806 	br	4e7f4 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   4e694:	e0bff203 	ldbu	r2,-56(fp)
   4e698:	10800054 	ori	r2,r2,1
   4e69c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   4e6a0:	00005406 	br	4e7f4 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   4e6a4:	e0bff017 	ldw	r2,-64(fp)
   4e6a8:	10800117 	ldw	r2,4(r2)
   4e6ac:	10001326 	beq	r2,zero,4e6fc <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   4e6b0:	e0bffe17 	ldw	r2,-8(fp)
   4e6b4:	10c00104 	addi	r3,r2,4
   4e6b8:	e0fffe15 	stw	r3,-8(fp)
   4e6bc:	e0fff017 	ldw	r3,-64(fp)
   4e6c0:	18c00117 	ldw	r3,4(r3)
   4e6c4:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   4e6c8:	e0bff017 	ldw	r2,-64(fp)
   4e6cc:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   4e6d0:	e0bffd17 	ldw	r2,-12(fp)
   4e6d4:	10c00104 	addi	r3,r2,4
   4e6d8:	e0fffd15 	stw	r3,-12(fp)
   4e6dc:	e0fff017 	ldw	r3,-64(fp)
   4e6e0:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   4e6e4:	00800044 	movi	r2,1
   4e6e8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   4e6ec:	e0bff18b 	ldhu	r2,-58(fp)
   4e6f0:	10800044 	addi	r2,r2,1
   4e6f4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   4e6f8:	00003e06 	br	4e7f4 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   4e6fc:	e0bff203 	ldbu	r2,-56(fp)
   4e700:	10800094 	ori	r2,r2,2
   4e704:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   4e708:	00003a06 	br	4e7f4 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   4e70c:	e0bff017 	ldw	r2,-64(fp)
   4e710:	10800117 	ldw	r2,4(r2)
   4e714:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   4e718:	e0bff517 	ldw	r2,-44(fp)
   4e71c:	1080058b 	ldhu	r2,22(r2)
   4e720:	10bfffcc 	andi	r2,r2,65535
   4e724:	10002426 	beq	r2,zero,4e7b8 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   4e728:	e0bffe17 	ldw	r2,-8(fp)
   4e72c:	10c00104 	addi	r3,r2,4
   4e730:	e0fffe15 	stw	r3,-8(fp)
   4e734:	e0fff517 	ldw	r3,-44(fp)
   4e738:	18c00417 	ldw	r3,16(r3)
   4e73c:	19400104 	addi	r5,r3,4
   4e740:	e13ff517 	ldw	r4,-44(fp)
   4e744:	21400415 	stw	r5,16(r4)
   4e748:	18c00017 	ldw	r3,0(r3)
   4e74c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   4e750:	e0bff517 	ldw	r2,-44(fp)
   4e754:	10c00417 	ldw	r3,16(r2)
   4e758:	e0bff517 	ldw	r2,-44(fp)
   4e75c:	10800217 	ldw	r2,8(r2)
   4e760:	1880041e 	bne	r3,r2,4e774 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   4e764:	e0bff517 	ldw	r2,-44(fp)
   4e768:	10c00117 	ldw	r3,4(r2)
   4e76c:	e0bff517 	ldw	r2,-44(fp)
   4e770:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   4e774:	e0bff517 	ldw	r2,-44(fp)
   4e778:	1080058b 	ldhu	r2,22(r2)
   4e77c:	10bfffc4 	addi	r2,r2,-1
   4e780:	1007883a 	mov	r3,r2
   4e784:	e0bff517 	ldw	r2,-44(fp)
   4e788:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   4e78c:	e0bffd17 	ldw	r2,-12(fp)
   4e790:	10c00104 	addi	r3,r2,4
   4e794:	e0fffd15 	stw	r3,-12(fp)
   4e798:	e0fff017 	ldw	r3,-64(fp)
   4e79c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   4e7a0:	00800044 	movi	r2,1
   4e7a4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   4e7a8:	e0bff18b 	ldhu	r2,-58(fp)
   4e7ac:	10800044 	addi	r2,r2,1
   4e7b0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   4e7b4:	00000f06 	br	4e7f4 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   4e7b8:	e0bff203 	ldbu	r2,-56(fp)
   4e7bc:	10800114 	ori	r2,r2,4
   4e7c0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   4e7c4:	00000b06 	br	4e7f4 <OSEventPendMulti+0x388>
   4e7c8:	e0bff317 	ldw	r2,-52(fp)
   4e7cc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e7d0:	e0bff417 	ldw	r2,-48(fp)
   4e7d4:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   4e7d8:	e0bffd17 	ldw	r2,-12(fp)
   4e7dc:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   4e7e0:	e0800217 	ldw	r2,8(fp)
   4e7e4:	00c00044 	movi	r3,1
   4e7e8:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   4e7ec:	e0bff18b 	ldhu	r2,-58(fp)
   4e7f0:	00009d06 	br	4ea68 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   4e7f4:	e0bfef17 	ldw	r2,-68(fp)
   4e7f8:	10800104 	addi	r2,r2,4
   4e7fc:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   4e800:	e0bfef17 	ldw	r2,-68(fp)
   4e804:	10800017 	ldw	r2,0(r2)
   4e808:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   4e80c:	e0bff017 	ldw	r2,-64(fp)
   4e810:	103f7d1e 	bne	r2,zero,4e608 <__alt_data_end+0xfffe8e08>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   4e814:	e0bff103 	ldbu	r2,-60(fp)
   4e818:	10800058 	cmpnei	r2,r2,1
   4e81c:	10000a1e 	bne	r2,zero,4e848 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   4e820:	e0bffd17 	ldw	r2,-12(fp)
   4e824:	10000015 	stw	zero,0(r2)
   4e828:	e0bff317 	ldw	r2,-52(fp)
   4e82c:	e0bff615 	stw	r2,-40(fp)
   4e830:	e0bff617 	ldw	r2,-40(fp)
   4e834:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   4e838:	e0800217 	ldw	r2,8(fp)
   4e83c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   4e840:	e0bff18b 	ldhu	r2,-58(fp)
   4e844:	00008806 	br	4ea68 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   4e848:	d0a72c17 	ldw	r2,-25424(gp)
   4e84c:	d0e72c17 	ldw	r3,-25424(gp)
   4e850:	19000c03 	ldbu	r4,48(r3)
   4e854:	e0fff203 	ldbu	r3,-56(fp)
   4e858:	20c6b03a 	or	r3,r4,r3
   4e85c:	1809883a 	mov	r4,r3
   4e860:	00ffe004 	movi	r3,-128
   4e864:	20c6b03a 	or	r3,r4,r3
   4e868:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   4e86c:	d0a72c17 	ldw	r2,-25424(gp)
   4e870:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   4e874:	d0a72c17 	ldw	r2,-25424(gp)
   4e878:	e0ffff0b 	ldhu	r3,-4(fp)
   4e87c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   4e880:	e13ffc17 	ldw	r4,-16(fp)
   4e884:	004f3a80 	call	4f3a8 <OS_EventTaskWaitMulti>
   4e888:	e0bff317 	ldw	r2,-52(fp)
   4e88c:	e0bff915 	stw	r2,-28(fp)
   4e890:	e0bff917 	ldw	r2,-28(fp)
   4e894:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   4e898:	004fb4c0 	call	4fb4c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e89c:	0005303a 	rdctl	r2,status
   4e8a0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e8a4:	e0fff717 	ldw	r3,-36(fp)
   4e8a8:	00bfff84 	movi	r2,-2
   4e8ac:	1884703a 	and	r2,r3,r2
   4e8b0:	1001703a 	wrctl	status,r2
  
  return context;
   4e8b4:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   4e8b8:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   4e8bc:	d0a72c17 	ldw	r2,-25424(gp)
   4e8c0:	10800c43 	ldbu	r2,49(r2)
   4e8c4:	10803fcc 	andi	r2,r2,255
   4e8c8:	10000226 	beq	r2,zero,4e8d4 <OSEventPendMulti+0x468>
   4e8cc:	108000a0 	cmpeqi	r2,r2,2
   4e8d0:	10001826 	beq	r2,zero,4e934 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   4e8d4:	d0a72c17 	ldw	r2,-25424(gp)
   4e8d8:	10800717 	ldw	r2,28(r2)
   4e8dc:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   4e8e0:	e0bff017 	ldw	r2,-64(fp)
   4e8e4:	10000b26 	beq	r2,zero,4e914 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   4e8e8:	e0bffd17 	ldw	r2,-12(fp)
   4e8ec:	10c00104 	addi	r3,r2,4
   4e8f0:	e0fffd15 	stw	r3,-12(fp)
   4e8f4:	e0fff017 	ldw	r3,-64(fp)
   4e8f8:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   4e8fc:	e0bffd17 	ldw	r2,-12(fp)
   4e900:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   4e904:	e0bff18b 	ldhu	r2,-58(fp)
   4e908:	10800044 	addi	r2,r2,1
   4e90c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   4e910:	00000d06 	br	4e948 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   4e914:	d0a72c17 	ldw	r2,-25424(gp)
   4e918:	00c00044 	movi	r3,1
   4e91c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   4e920:	d0a72c17 	ldw	r2,-25424(gp)
   4e924:	e17ffc17 	ldw	r5,-16(fp)
   4e928:	1009883a 	mov	r4,r2
   4e92c:	004f5b00 	call	4f5b0 <OS_EventTaskRemoveMulti>
             }
			 break;
   4e930:	00000506 	br	4e948 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   4e934:	d0a72c17 	ldw	r2,-25424(gp)
   4e938:	e17ffc17 	ldw	r5,-16(fp)
   4e93c:	1009883a 	mov	r4,r2
   4e940:	004f5b00 	call	4f5b0 <OS_EventTaskRemoveMulti>
             break;
   4e944:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   4e948:	d0a72c17 	ldw	r2,-25424(gp)
   4e94c:	10800c43 	ldbu	r2,49(r2)
   4e950:	10803fcc 	andi	r2,r2,255
   4e954:	10000326 	beq	r2,zero,4e964 <OSEventPendMulti+0x4f8>
   4e958:	108000a0 	cmpeqi	r2,r2,2
   4e95c:	1000231e 	bne	r2,zero,4e9ec <OSEventPendMulti+0x580>
   4e960:	00002a06 	br	4ea0c <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   4e964:	e0bff017 	ldw	r2,-64(fp)
   4e968:	10800003 	ldbu	r2,0(r2)
   4e96c:	10803fcc 	andi	r2,r2,255
   4e970:	0080100e 	bge	zero,r2,4e9b4 <OSEventPendMulti+0x548>
   4e974:	10c000d0 	cmplti	r3,r2,3
   4e978:	1800071e 	bne	r3,zero,4e998 <OSEventPendMulti+0x52c>
   4e97c:	108000e0 	cmpeqi	r2,r2,3
   4e980:	10000c26 	beq	r2,zero,4e9b4 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   4e984:	e0bffe17 	ldw	r2,-8(fp)
   4e988:	10c00104 	addi	r3,r2,4
   4e98c:	e0fffe15 	stw	r3,-8(fp)
   4e990:	10000015 	stw	zero,0(r2)
                      break;
   4e994:	00001206 	br	4e9e0 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   4e998:	e0bffe17 	ldw	r2,-8(fp)
   4e99c:	10c00104 	addi	r3,r2,4
   4e9a0:	e0fffe15 	stw	r3,-8(fp)
   4e9a4:	d0e72c17 	ldw	r3,-25424(gp)
   4e9a8:	18c00917 	ldw	r3,36(r3)
   4e9ac:	10c00015 	stw	r3,0(r2)
                      break;
   4e9b0:	00000b06 	br	4e9e0 <OSEventPendMulti+0x574>
   4e9b4:	e0bff317 	ldw	r2,-52(fp)
   4e9b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e9bc:	e0bff817 	ldw	r2,-32(fp)
   4e9c0:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   4e9c4:	e0bffd17 	ldw	r2,-12(fp)
   4e9c8:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   4e9cc:	e0800217 	ldw	r2,8(fp)
   4e9d0:	00c00044 	movi	r3,1
   4e9d4:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   4e9d8:	e0bff18b 	ldhu	r2,-58(fp)
   4e9dc:	00002206 	br	4ea68 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   4e9e0:	e0800217 	ldw	r2,8(fp)
   4e9e4:	10000005 	stb	zero,0(r2)
             break;
   4e9e8:	00001006 	br	4ea2c <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   4e9ec:	e0bffe17 	ldw	r2,-8(fp)
   4e9f0:	10c00104 	addi	r3,r2,4
   4e9f4:	e0fffe15 	stw	r3,-8(fp)
   4e9f8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   4e9fc:	e0800217 	ldw	r2,8(fp)
   4ea00:	00c00384 	movi	r3,14
   4ea04:	10c00005 	stb	r3,0(r2)
             break;
   4ea08:	00000806 	br	4ea2c <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   4ea0c:	e0bffe17 	ldw	r2,-8(fp)
   4ea10:	10c00104 	addi	r3,r2,4
   4ea14:	e0fffe15 	stw	r3,-8(fp)
   4ea18:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   4ea1c:	e0800217 	ldw	r2,8(fp)
   4ea20:	00c00284 	movi	r3,10
   4ea24:	10c00005 	stb	r3,0(r2)
             break;
   4ea28:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   4ea2c:	d0a72c17 	ldw	r2,-25424(gp)
   4ea30:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   4ea34:	d0a72c17 	ldw	r2,-25424(gp)
   4ea38:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   4ea3c:	d0a72c17 	ldw	r2,-25424(gp)
   4ea40:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   4ea44:	d0a72c17 	ldw	r2,-25424(gp)
   4ea48:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   4ea4c:	d0a72c17 	ldw	r2,-25424(gp)
   4ea50:	10000915 	stw	zero,36(r2)
   4ea54:	e0bff317 	ldw	r2,-52(fp)
   4ea58:	e0bffa15 	stw	r2,-24(fp)
   4ea5c:	e0bffa17 	ldw	r2,-24(fp)
   4ea60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   4ea64:	e0bff18b 	ldhu	r2,-58(fp)
}
   4ea68:	e037883a 	mov	sp,fp
   4ea6c:	dfc00117 	ldw	ra,4(sp)
   4ea70:	df000017 	ldw	fp,0(sp)
   4ea74:	dec00204 	addi	sp,sp,8
   4ea78:	f800283a 	ret

0004ea7c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   4ea7c:	defffe04 	addi	sp,sp,-8
   4ea80:	dfc00115 	stw	ra,4(sp)
   4ea84:	df000015 	stw	fp,0(sp)
   4ea88:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   4ea8c:	00584380 	call	58438 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   4ea90:	004f7f80 	call	4f7f8 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   4ea94:	004f8400 	call	4f840 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   4ea98:	004f9ac0 	call	4f9ac <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   4ea9c:	004f7180 	call	4f718 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   4eaa0:	005184c0 	call	5184c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   4eaa4:	0052c140 	call	52c14 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   4eaa8:	0053d480 	call	53d48 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   4eaac:	004f8ac0 	call	4f8ac <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   4eab0:	004f92c0 	call	4f92c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   4eab4:	00584580 	call	58458 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   4eab8:	00502200 	call	50220 <OSDebugInit>
#endif
}
   4eabc:	0001883a 	nop
   4eac0:	e037883a 	mov	sp,fp
   4eac4:	dfc00117 	ldw	ra,4(sp)
   4eac8:	df000017 	ldw	fp,0(sp)
   4eacc:	dec00204 	addi	sp,sp,8
   4ead0:	f800283a 	ret

0004ead4 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   4ead4:	deffff04 	addi	sp,sp,-4
   4ead8:	df000015 	stw	fp,0(sp)
   4eadc:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
   4eae0:	d0a71d43 	ldbu	r2,-25483(gp)
   4eae4:	10803fcc 	andi	r2,r2,255
   4eae8:	10800058 	cmpnei	r2,r2,1
   4eaec:	1000071e 	bne	r2,zero,4eb0c <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
   4eaf0:	d0a72b03 	ldbu	r2,-25428(gp)
   4eaf4:	10803fcc 	andi	r2,r2,255
   4eaf8:	10803fe0 	cmpeqi	r2,r2,255
   4eafc:	1000031e 	bne	r2,zero,4eb0c <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   4eb00:	d0a72b03 	ldbu	r2,-25428(gp)
   4eb04:	10800044 	addi	r2,r2,1
   4eb08:	d0a72b05 	stb	r2,-25428(gp)
        }
    }
}
   4eb0c:	0001883a 	nop
   4eb10:	e037883a 	mov	sp,fp
   4eb14:	df000017 	ldw	fp,0(sp)
   4eb18:	dec00104 	addi	sp,sp,4
   4eb1c:	f800283a 	ret

0004eb20 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   4eb20:	defffb04 	addi	sp,sp,-20
   4eb24:	dfc00415 	stw	ra,16(sp)
   4eb28:	df000315 	stw	fp,12(sp)
   4eb2c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   4eb30:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   4eb34:	d0a71d43 	ldbu	r2,-25483(gp)
   4eb38:	10803fcc 	andi	r2,r2,255
   4eb3c:	10800058 	cmpnei	r2,r2,1
   4eb40:	10002f1e 	bne	r2,zero,4ec00 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4eb44:	0005303a 	rdctl	r2,status
   4eb48:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4eb4c:	e0ffff17 	ldw	r3,-4(fp)
   4eb50:	00bfff84 	movi	r2,-2
   4eb54:	1884703a 	and	r2,r3,r2
   4eb58:	1001703a 	wrctl	status,r2
  
  return context;
   4eb5c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   4eb60:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   4eb64:	d0a72b03 	ldbu	r2,-25428(gp)
   4eb68:	10803fcc 	andi	r2,r2,255
   4eb6c:	10000326 	beq	r2,zero,4eb7c <OSIntExit+0x5c>
            OSIntNesting--;
   4eb70:	d0a72b03 	ldbu	r2,-25428(gp)
   4eb74:	10bfffc4 	addi	r2,r2,-1
   4eb78:	d0a72b05 	stb	r2,-25428(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   4eb7c:	d0a72b03 	ldbu	r2,-25428(gp)
   4eb80:	10803fcc 	andi	r2,r2,255
   4eb84:	10001a1e 	bne	r2,zero,4ebf0 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   4eb88:	d0a71d03 	ldbu	r2,-25484(gp)
   4eb8c:	10803fcc 	andi	r2,r2,255
   4eb90:	1000171e 	bne	r2,zero,4ebf0 <OSIntExit+0xd0>
                OS_SchedNew();
   4eb94:	004fc1c0 	call	4fc1c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   4eb98:	d0e71f03 	ldbu	r3,-25476(gp)
   4eb9c:	d0a71f43 	ldbu	r2,-25475(gp)
   4eba0:	18c03fcc 	andi	r3,r3,255
   4eba4:	10803fcc 	andi	r2,r2,255
   4eba8:	18801126 	beq	r3,r2,4ebf0 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   4ebac:	d0a71f03 	ldbu	r2,-25476(gp)
   4ebb0:	10c03fcc 	andi	r3,r2,255
   4ebb4:	008001b4 	movhi	r2,6
   4ebb8:	108e6104 	addi	r2,r2,14724
   4ebbc:	18c7883a 	add	r3,r3,r3
   4ebc0:	18c7883a 	add	r3,r3,r3
   4ebc4:	10c5883a 	add	r2,r2,r3
   4ebc8:	10800017 	ldw	r2,0(r2)
   4ebcc:	d0a72715 	stw	r2,-25444(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   4ebd0:	d0a72717 	ldw	r2,-25444(gp)
   4ebd4:	10c00e17 	ldw	r3,56(r2)
   4ebd8:	18c00044 	addi	r3,r3,1
   4ebdc:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   4ebe0:	d0a72217 	ldw	r2,-25464(gp)
   4ebe4:	10800044 	addi	r2,r2,1
   4ebe8:	d0a72215 	stw	r2,-25464(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   4ebec:	00581640 	call	58164 <OSCtxSw>
   4ebf0:	e0bffd17 	ldw	r2,-12(fp)
   4ebf4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ebf8:	e0bffe17 	ldw	r2,-8(fp)
   4ebfc:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   4ec00:	0001883a 	nop
   4ec04:	e037883a 	mov	sp,fp
   4ec08:	dfc00117 	ldw	ra,4(sp)
   4ec0c:	df000017 	ldw	fp,0(sp)
   4ec10:	dec00204 	addi	sp,sp,8
   4ec14:	f800283a 	ret

0004ec18 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   4ec18:	defffc04 	addi	sp,sp,-16
   4ec1c:	df000315 	stw	fp,12(sp)
   4ec20:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4ec24:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   4ec28:	d0a71d43 	ldbu	r2,-25483(gp)
   4ec2c:	10803fcc 	andi	r2,r2,255
   4ec30:	10800058 	cmpnei	r2,r2,1
   4ec34:	1000161e 	bne	r2,zero,4ec90 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ec38:	0005303a 	rdctl	r2,status
   4ec3c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ec40:	e0ffff17 	ldw	r3,-4(fp)
   4ec44:	00bfff84 	movi	r2,-2
   4ec48:	1884703a 	and	r2,r3,r2
   4ec4c:	1001703a 	wrctl	status,r2
  
  return context;
   4ec50:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   4ec54:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   4ec58:	d0a72b03 	ldbu	r2,-25428(gp)
   4ec5c:	10803fcc 	andi	r2,r2,255
   4ec60:	1000071e 	bne	r2,zero,4ec80 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   4ec64:	d0a71d03 	ldbu	r2,-25484(gp)
   4ec68:	10803fcc 	andi	r2,r2,255
   4ec6c:	10803fe0 	cmpeqi	r2,r2,255
   4ec70:	1000031e 	bne	r2,zero,4ec80 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   4ec74:	d0a71d03 	ldbu	r2,-25484(gp)
   4ec78:	10800044 	addi	r2,r2,1
   4ec7c:	d0a71d05 	stb	r2,-25484(gp)
   4ec80:	e0bffd17 	ldw	r2,-12(fp)
   4ec84:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ec88:	e0bffe17 	ldw	r2,-8(fp)
   4ec8c:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   4ec90:	0001883a 	nop
   4ec94:	e037883a 	mov	sp,fp
   4ec98:	df000017 	ldw	fp,0(sp)
   4ec9c:	dec00104 	addi	sp,sp,4
   4eca0:	f800283a 	ret

0004eca4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   4eca4:	defff804 	addi	sp,sp,-32
   4eca8:	dfc00715 	stw	ra,28(sp)
   4ecac:	df000615 	stw	fp,24(sp)
   4ecb0:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   4ecb4:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   4ecb8:	d0a71d43 	ldbu	r2,-25483(gp)
   4ecbc:	10803fcc 	andi	r2,r2,255
   4ecc0:	10800058 	cmpnei	r2,r2,1
   4ecc4:	1000281e 	bne	r2,zero,4ed68 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ecc8:	0005303a 	rdctl	r2,status
   4eccc:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ecd0:	e0ffff17 	ldw	r3,-4(fp)
   4ecd4:	00bfff84 	movi	r2,-2
   4ecd8:	1884703a 	and	r2,r3,r2
   4ecdc:	1001703a 	wrctl	status,r2
  
  return context;
   4ece0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   4ece4:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   4ece8:	d0a71d03 	ldbu	r2,-25484(gp)
   4ecec:	10803fcc 	andi	r2,r2,255
   4ecf0:	10001926 	beq	r2,zero,4ed58 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   4ecf4:	d0a71d03 	ldbu	r2,-25484(gp)
   4ecf8:	10bfffc4 	addi	r2,r2,-1
   4ecfc:	d0a71d05 	stb	r2,-25484(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   4ed00:	d0a71d03 	ldbu	r2,-25484(gp)
   4ed04:	10803fcc 	andi	r2,r2,255
   4ed08:	10000e1e 	bne	r2,zero,4ed44 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   4ed0c:	d0a72b03 	ldbu	r2,-25428(gp)
   4ed10:	10803fcc 	andi	r2,r2,255
   4ed14:	1000061e 	bne	r2,zero,4ed30 <OSSchedUnlock+0x8c>
   4ed18:	e0bffa17 	ldw	r2,-24(fp)
   4ed1c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ed20:	e0bffb17 	ldw	r2,-20(fp)
   4ed24:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   4ed28:	004fb4c0 	call	4fb4c <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   4ed2c:	00000e06 	br	4ed68 <OSSchedUnlock+0xc4>
   4ed30:	e0bffa17 	ldw	r2,-24(fp)
   4ed34:	e0bffc15 	stw	r2,-16(fp)
   4ed38:	e0bffc17 	ldw	r2,-16(fp)
   4ed3c:	1001703a 	wrctl	status,r2
   4ed40:	00000906 	br	4ed68 <OSSchedUnlock+0xc4>
   4ed44:	e0bffa17 	ldw	r2,-24(fp)
   4ed48:	e0bffd15 	stw	r2,-12(fp)
   4ed4c:	e0bffd17 	ldw	r2,-12(fp)
   4ed50:	1001703a 	wrctl	status,r2
   4ed54:	00000406 	br	4ed68 <OSSchedUnlock+0xc4>
   4ed58:	e0bffa17 	ldw	r2,-24(fp)
   4ed5c:	e0bffe15 	stw	r2,-8(fp)
   4ed60:	e0bffe17 	ldw	r2,-8(fp)
   4ed64:	1001703a 	wrctl	status,r2
   4ed68:	0001883a 	nop
   4ed6c:	e037883a 	mov	sp,fp
   4ed70:	dfc00117 	ldw	ra,4(sp)
   4ed74:	df000017 	ldw	fp,0(sp)
   4ed78:	dec00204 	addi	sp,sp,8
   4ed7c:	f800283a 	ret

0004ed80 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   4ed80:	defffe04 	addi	sp,sp,-8
   4ed84:	dfc00115 	stw	ra,4(sp)
   4ed88:	df000015 	stw	fp,0(sp)
   4ed8c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   4ed90:	d0a71d43 	ldbu	r2,-25483(gp)
   4ed94:	10803fcc 	andi	r2,r2,255
   4ed98:	10000f1e 	bne	r2,zero,4edd8 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   4ed9c:	004fc1c0 	call	4fc1c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   4eda0:	d0a71f03 	ldbu	r2,-25476(gp)
   4eda4:	d0a71f45 	stb	r2,-25475(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   4eda8:	d0a71f03 	ldbu	r2,-25476(gp)
   4edac:	10c03fcc 	andi	r3,r2,255
   4edb0:	008001b4 	movhi	r2,6
   4edb4:	108e6104 	addi	r2,r2,14724
   4edb8:	18c7883a 	add	r3,r3,r3
   4edbc:	18c7883a 	add	r3,r3,r3
   4edc0:	10c5883a 	add	r2,r2,r3
   4edc4:	10800017 	ldw	r2,0(r2)
   4edc8:	d0a72715 	stw	r2,-25444(gp)
        OSTCBCur      = OSTCBHighRdy;
   4edcc:	d0a72717 	ldw	r2,-25444(gp)
   4edd0:	d0a72c15 	stw	r2,-25424(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   4edd4:	00581f00 	call	581f0 <OSStartHighRdy>
    }
}
   4edd8:	0001883a 	nop
   4eddc:	e037883a 	mov	sp,fp
   4ede0:	dfc00117 	ldw	ra,4(sp)
   4ede4:	df000017 	ldw	fp,0(sp)
   4ede8:	dec00204 	addi	sp,sp,8
   4edec:	f800283a 	ret

0004edf0 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   4edf0:	defff904 	addi	sp,sp,-28
   4edf4:	dfc00615 	stw	ra,24(sp)
   4edf8:	df000515 	stw	fp,20(sp)
   4edfc:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4ee00:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   4ee04:	01000084 	movi	r4,2
   4ee08:	0055fbc0 	call	55fbc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ee0c:	0005303a 	rdctl	r2,status
   4ee10:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ee14:	e0fffc17 	ldw	r3,-16(fp)
   4ee18:	00bfff84 	movi	r2,-2
   4ee1c:	1884703a 	and	r2,r3,r2
   4ee20:	1001703a 	wrctl	status,r2
  
  return context;
   4ee24:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   4ee28:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   4ee2c:	d0271e15 	stw	zero,-25480(gp)
   4ee30:	e0bffb17 	ldw	r2,-20(fp)
   4ee34:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ee38:	e0bffd17 	ldw	r2,-12(fp)
   4ee3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   4ee40:	01001904 	movi	r4,100
   4ee44:	0055fbc0 	call	55fbc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ee48:	0005303a 	rdctl	r2,status
   4ee4c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ee50:	e0fffe17 	ldw	r3,-8(fp)
   4ee54:	00bfff84 	movi	r2,-2
   4ee58:	1884703a 	and	r2,r3,r2
   4ee5c:	1001703a 	wrctl	status,r2
  
  return context;
   4ee60:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   4ee64:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   4ee68:	d0a71e17 	ldw	r2,-25480(gp)
   4ee6c:	d0a72315 	stw	r2,-25460(gp)
    OSStatRdy    = OS_TRUE;
   4ee70:	00800044 	movi	r2,1
   4ee74:	d0a72f05 	stb	r2,-25412(gp)
   4ee78:	e0bffb17 	ldw	r2,-20(fp)
   4ee7c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ee80:	e0bfff17 	ldw	r2,-4(fp)
   4ee84:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   4ee88:	0001883a 	nop
   4ee8c:	e037883a 	mov	sp,fp
   4ee90:	dfc00117 	ldw	ra,4(sp)
   4ee94:	df000017 	ldw	fp,0(sp)
   4ee98:	dec00204 	addi	sp,sp,8
   4ee9c:	f800283a 	ret

0004eea0 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   4eea0:	defff704 	addi	sp,sp,-36
   4eea4:	dfc00815 	stw	ra,32(sp)
   4eea8:	df000715 	stw	fp,28(sp)
   4eeac:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   4eeb0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   4eeb4:	00584180 	call	58418 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4eeb8:	0005303a 	rdctl	r2,status
   4eebc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4eec0:	e0fffd17 	ldw	r3,-12(fp)
   4eec4:	00bfff84 	movi	r2,-2
   4eec8:	1884703a 	and	r2,r3,r2
   4eecc:	1001703a 	wrctl	status,r2
  
  return context;
   4eed0:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   4eed4:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   4eed8:	d0a72d17 	ldw	r2,-25420(gp)
   4eedc:	10800044 	addi	r2,r2,1
   4eee0:	d0a72d15 	stw	r2,-25420(gp)
   4eee4:	e0bffb17 	ldw	r2,-20(fp)
   4eee8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4eeec:	e0bfff17 	ldw	r2,-4(fp)
   4eef0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   4eef4:	d0a71d43 	ldbu	r2,-25483(gp)
   4eef8:	10803fcc 	andi	r2,r2,255
   4eefc:	10800058 	cmpnei	r2,r2,1
   4ef00:	10006a1e 	bne	r2,zero,4f0ac <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   4ef04:	d0a72103 	ldbu	r2,-25468(gp)
   4ef08:	10803fcc 	andi	r2,r2,255
   4ef0c:	10c00060 	cmpeqi	r3,r2,1
   4ef10:	1800061e 	bne	r3,zero,4ef2c <OSTimeTick+0x8c>
   4ef14:	10c000a0 	cmpeqi	r3,r2,2
   4ef18:	1800061e 	bne	r3,zero,4ef34 <OSTimeTick+0x94>
   4ef1c:	10000a1e 	bne	r2,zero,4ef48 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   4ef20:	00800044 	movi	r2,1
   4ef24:	e0bffa05 	stb	r2,-24(fp)
                 break;
   4ef28:	00000b06 	br	4ef58 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   4ef2c:	e03ffa05 	stb	zero,-24(fp)
                 break;
   4ef30:	00000906 	br	4ef58 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   4ef34:	00800044 	movi	r2,1
   4ef38:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   4ef3c:	00800044 	movi	r2,1
   4ef40:	d0a72105 	stb	r2,-25468(gp)
                 break;
   4ef44:	00000406 	br	4ef58 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   4ef48:	00800044 	movi	r2,1
   4ef4c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   4ef50:	d0272105 	stb	zero,-25468(gp)
                 break;
   4ef54:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   4ef58:	e0bffa03 	ldbu	r2,-24(fp)
   4ef5c:	10005226 	beq	r2,zero,4f0a8 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   4ef60:	d0a72017 	ldw	r2,-25472(gp)
   4ef64:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   4ef68:	00004906 	br	4f090 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ef6c:	0005303a 	rdctl	r2,status
   4ef70:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ef74:	e0fffc17 	ldw	r3,-16(fp)
   4ef78:	00bfff84 	movi	r2,-2
   4ef7c:	1884703a 	and	r2,r3,r2
   4ef80:	1001703a 	wrctl	status,r2
  
  return context;
   4ef84:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
   4ef88:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   4ef8c:	e0bff917 	ldw	r2,-28(fp)
   4ef90:	10800b8b 	ldhu	r2,46(r2)
   4ef94:	10bfffcc 	andi	r2,r2,65535
   4ef98:	10003626 	beq	r2,zero,4f074 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   4ef9c:	e0bff917 	ldw	r2,-28(fp)
   4efa0:	10800b8b 	ldhu	r2,46(r2)
   4efa4:	10bfffc4 	addi	r2,r2,-1
   4efa8:	1007883a 	mov	r3,r2
   4efac:	e0bff917 	ldw	r2,-28(fp)
   4efb0:	10c00b8d 	sth	r3,46(r2)
   4efb4:	e0bff917 	ldw	r2,-28(fp)
   4efb8:	10800b8b 	ldhu	r2,46(r2)
   4efbc:	10bfffcc 	andi	r2,r2,65535
   4efc0:	10002c1e 	bne	r2,zero,4f074 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   4efc4:	e0bff917 	ldw	r2,-28(fp)
   4efc8:	10800c03 	ldbu	r2,48(r2)
   4efcc:	10803fcc 	andi	r2,r2,255
   4efd0:	10800dcc 	andi	r2,r2,55
   4efd4:	10000b26 	beq	r2,zero,4f004 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   4efd8:	e0bff917 	ldw	r2,-28(fp)
   4efdc:	10c00c03 	ldbu	r3,48(r2)
   4efe0:	00bff204 	movi	r2,-56
   4efe4:	1884703a 	and	r2,r3,r2
   4efe8:	1007883a 	mov	r3,r2
   4efec:	e0bff917 	ldw	r2,-28(fp)
   4eff0:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   4eff4:	e0bff917 	ldw	r2,-28(fp)
   4eff8:	00c00044 	movi	r3,1
   4effc:	10c00c45 	stb	r3,49(r2)
   4f000:	00000206 	br	4f00c <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   4f004:	e0bff917 	ldw	r2,-28(fp)
   4f008:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   4f00c:	e0bff917 	ldw	r2,-28(fp)
   4f010:	10800c03 	ldbu	r2,48(r2)
   4f014:	10803fcc 	andi	r2,r2,255
   4f018:	1080020c 	andi	r2,r2,8
   4f01c:	1000151e 	bne	r2,zero,4f074 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   4f020:	e0bff917 	ldw	r2,-28(fp)
   4f024:	10c00d83 	ldbu	r3,54(r2)
   4f028:	d0a72903 	ldbu	r2,-25436(gp)
   4f02c:	1884b03a 	or	r2,r3,r2
   4f030:	d0a72905 	stb	r2,-25436(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   4f034:	e0bff917 	ldw	r2,-28(fp)
   4f038:	10800d03 	ldbu	r2,52(r2)
   4f03c:	10c03fcc 	andi	r3,r2,255
   4f040:	e0bff917 	ldw	r2,-28(fp)
   4f044:	10800d03 	ldbu	r2,52(r2)
   4f048:	11003fcc 	andi	r4,r2,255
   4f04c:	d0a72944 	addi	r2,gp,-25435
   4f050:	2085883a 	add	r2,r4,r2
   4f054:	11000003 	ldbu	r4,0(r2)
   4f058:	e0bff917 	ldw	r2,-28(fp)
   4f05c:	10800d43 	ldbu	r2,53(r2)
   4f060:	2084b03a 	or	r2,r4,r2
   4f064:	1009883a 	mov	r4,r2
   4f068:	d0a72944 	addi	r2,gp,-25435
   4f06c:	1885883a 	add	r2,r3,r2
   4f070:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   4f074:	e0bff917 	ldw	r2,-28(fp)
   4f078:	10800517 	ldw	r2,20(r2)
   4f07c:	e0bff915 	stw	r2,-28(fp)
   4f080:	e0bffb17 	ldw	r2,-20(fp)
   4f084:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f088:	e0bffe17 	ldw	r2,-8(fp)
   4f08c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   4f090:	e0bff917 	ldw	r2,-28(fp)
   4f094:	10800c83 	ldbu	r2,50(r2)
   4f098:	10803fcc 	andi	r2,r2,255
   4f09c:	10800518 	cmpnei	r2,r2,20
   4f0a0:	103fb21e 	bne	r2,zero,4ef6c <__alt_data_end+0xfffe976c>
   4f0a4:	00000106 	br	4f0ac <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
   4f0a8:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   4f0ac:	e037883a 	mov	sp,fp
   4f0b0:	dfc00117 	ldw	ra,4(sp)
   4f0b4:	df000017 	ldw	fp,0(sp)
   4f0b8:	dec00204 	addi	sp,sp,8
   4f0bc:	f800283a 	ret

0004f0c0 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   4f0c0:	deffff04 	addi	sp,sp,-4
   4f0c4:	df000015 	stw	fp,0(sp)
   4f0c8:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   4f0cc:	00804784 	movi	r2,286
}
   4f0d0:	e037883a 	mov	sp,fp
   4f0d4:	df000017 	ldw	fp,0(sp)
   4f0d8:	dec00104 	addi	sp,sp,4
   4f0dc:	f800283a 	ret

0004f0e0 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   4f0e0:	deffff04 	addi	sp,sp,-4
   4f0e4:	df000015 	stw	fp,0(sp)
   4f0e8:	d839883a 	mov	fp,sp
}
   4f0ec:	0001883a 	nop
   4f0f0:	e037883a 	mov	sp,fp
   4f0f4:	df000017 	ldw	fp,0(sp)
   4f0f8:	dec00104 	addi	sp,sp,4
   4f0fc:	f800283a 	ret

0004f100 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   4f100:	defff804 	addi	sp,sp,-32
   4f104:	dfc00715 	stw	ra,28(sp)
   4f108:	df000615 	stw	fp,24(sp)
   4f10c:	df000604 	addi	fp,sp,24
   4f110:	e13ffc15 	stw	r4,-16(fp)
   4f114:	e17ffd15 	stw	r5,-12(fp)
   4f118:	3007883a 	mov	r3,r6
   4f11c:	3805883a 	mov	r2,r7
   4f120:	e0fffe05 	stb	r3,-8(fp)
   4f124:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   4f128:	e0bffc17 	ldw	r2,-16(fp)
   4f12c:	10800283 	ldbu	r2,10(r2)
   4f130:	10c03fcc 	andi	r3,r2,255
   4f134:	008001b4 	movhi	r2,6
   4f138:	10a3b304 	addi	r2,r2,-28980
   4f13c:	10c5883a 	add	r2,r2,r3
   4f140:	10800003 	ldbu	r2,0(r2)
   4f144:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   4f148:	e0bffa03 	ldbu	r2,-24(fp)
   4f14c:	e0fffc17 	ldw	r3,-16(fp)
   4f150:	1885883a 	add	r2,r3,r2
   4f154:	108002c4 	addi	r2,r2,11
   4f158:	10800003 	ldbu	r2,0(r2)
   4f15c:	10c03fcc 	andi	r3,r2,255
   4f160:	008001b4 	movhi	r2,6
   4f164:	10a3b304 	addi	r2,r2,-28980
   4f168:	10c5883a 	add	r2,r2,r3
   4f16c:	10800003 	ldbu	r2,0(r2)
   4f170:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   4f174:	e0bffa03 	ldbu	r2,-24(fp)
   4f178:	100490fa 	slli	r2,r2,3
   4f17c:	1007883a 	mov	r3,r2
   4f180:	e0bffa43 	ldbu	r2,-23(fp)
   4f184:	1885883a 	add	r2,r3,r2
   4f188:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   4f18c:	e0fffa83 	ldbu	r3,-22(fp)
   4f190:	008001b4 	movhi	r2,6
   4f194:	108e6104 	addi	r2,r2,14724
   4f198:	18c7883a 	add	r3,r3,r3
   4f19c:	18c7883a 	add	r3,r3,r3
   4f1a0:	10c5883a 	add	r2,r2,r3
   4f1a4:	10800017 	ldw	r2,0(r2)
   4f1a8:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   4f1ac:	e0bffb17 	ldw	r2,-20(fp)
   4f1b0:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   4f1b4:	e0bffb17 	ldw	r2,-20(fp)
   4f1b8:	e0fffd17 	ldw	r3,-12(fp)
   4f1bc:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   4f1c0:	e0bffb17 	ldw	r2,-20(fp)
   4f1c4:	10800c03 	ldbu	r2,48(r2)
   4f1c8:	1007883a 	mov	r3,r2
   4f1cc:	e0bffe03 	ldbu	r2,-8(fp)
   4f1d0:	0084303a 	nor	r2,zero,r2
   4f1d4:	1884703a 	and	r2,r3,r2
   4f1d8:	1007883a 	mov	r3,r2
   4f1dc:	e0bffb17 	ldw	r2,-20(fp)
   4f1e0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   4f1e4:	e0bffb17 	ldw	r2,-20(fp)
   4f1e8:	e0ffff03 	ldbu	r3,-4(fp)
   4f1ec:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   4f1f0:	e0bffb17 	ldw	r2,-20(fp)
   4f1f4:	10800c03 	ldbu	r2,48(r2)
   4f1f8:	10803fcc 	andi	r2,r2,255
   4f1fc:	1080020c 	andi	r2,r2,8
   4f200:	1000111e 	bne	r2,zero,4f248 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   4f204:	e0bffb17 	ldw	r2,-20(fp)
   4f208:	10c00d83 	ldbu	r3,54(r2)
   4f20c:	d0a72903 	ldbu	r2,-25436(gp)
   4f210:	1884b03a 	or	r2,r3,r2
   4f214:	d0a72905 	stb	r2,-25436(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   4f218:	e0fffa03 	ldbu	r3,-24(fp)
   4f21c:	e13ffa03 	ldbu	r4,-24(fp)
   4f220:	d0a72944 	addi	r2,gp,-25435
   4f224:	2085883a 	add	r2,r4,r2
   4f228:	11000003 	ldbu	r4,0(r2)
   4f22c:	e0bffb17 	ldw	r2,-20(fp)
   4f230:	10800d43 	ldbu	r2,53(r2)
   4f234:	2084b03a 	or	r2,r4,r2
   4f238:	1009883a 	mov	r4,r2
   4f23c:	d0a72944 	addi	r2,gp,-25435
   4f240:	1885883a 	add	r2,r3,r2
   4f244:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   4f248:	e17ffc17 	ldw	r5,-16(fp)
   4f24c:	e13ffb17 	ldw	r4,-20(fp)
   4f250:	004f4f80 	call	4f4f8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   4f254:	e0bffb17 	ldw	r2,-20(fp)
   4f258:	10800817 	ldw	r2,32(r2)
   4f25c:	10000826 	beq	r2,zero,4f280 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   4f260:	e0bffb17 	ldw	r2,-20(fp)
   4f264:	10800817 	ldw	r2,32(r2)
   4f268:	100b883a 	mov	r5,r2
   4f26c:	e13ffb17 	ldw	r4,-20(fp)
   4f270:	004f5b00 	call	4f5b0 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   4f274:	e0bffb17 	ldw	r2,-20(fp)
   4f278:	e0fffc17 	ldw	r3,-16(fp)
   4f27c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   4f280:	e0bffa83 	ldbu	r2,-22(fp)
}
   4f284:	e037883a 	mov	sp,fp
   4f288:	dfc00117 	ldw	ra,4(sp)
   4f28c:	df000017 	ldw	fp,0(sp)
   4f290:	dec00204 	addi	sp,sp,8
   4f294:	f800283a 	ret

0004f298 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   4f298:	defffd04 	addi	sp,sp,-12
   4f29c:	df000215 	stw	fp,8(sp)
   4f2a0:	df000204 	addi	fp,sp,8
   4f2a4:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   4f2a8:	d0a72c17 	ldw	r2,-25424(gp)
   4f2ac:	e0ffff17 	ldw	r3,-4(fp)
   4f2b0:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   4f2b4:	d0a72c17 	ldw	r2,-25424(gp)
   4f2b8:	10800d03 	ldbu	r2,52(r2)
   4f2bc:	10803fcc 	andi	r2,r2,255
   4f2c0:	d0e72c17 	ldw	r3,-25424(gp)
   4f2c4:	18c00d03 	ldbu	r3,52(r3)
   4f2c8:	18c03fcc 	andi	r3,r3,255
   4f2cc:	e13fff17 	ldw	r4,-4(fp)
   4f2d0:	20c7883a 	add	r3,r4,r3
   4f2d4:	18c002c4 	addi	r3,r3,11
   4f2d8:	19000003 	ldbu	r4,0(r3)
   4f2dc:	d0e72c17 	ldw	r3,-25424(gp)
   4f2e0:	18c00d43 	ldbu	r3,53(r3)
   4f2e4:	20c6b03a 	or	r3,r4,r3
   4f2e8:	1809883a 	mov	r4,r3
   4f2ec:	e0ffff17 	ldw	r3,-4(fp)
   4f2f0:	1885883a 	add	r2,r3,r2
   4f2f4:	108002c4 	addi	r2,r2,11
   4f2f8:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   4f2fc:	e0bfff17 	ldw	r2,-4(fp)
   4f300:	10c00283 	ldbu	r3,10(r2)
   4f304:	d0a72c17 	ldw	r2,-25424(gp)
   4f308:	10800d83 	ldbu	r2,54(r2)
   4f30c:	1884b03a 	or	r2,r3,r2
   4f310:	1007883a 	mov	r3,r2
   4f314:	e0bfff17 	ldw	r2,-4(fp)
   4f318:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   4f31c:	d0a72c17 	ldw	r2,-25424(gp)
   4f320:	10800d03 	ldbu	r2,52(r2)
   4f324:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   4f328:	e0fffe03 	ldbu	r3,-8(fp)
   4f32c:	e13ffe03 	ldbu	r4,-8(fp)
   4f330:	d0a72944 	addi	r2,gp,-25435
   4f334:	2085883a 	add	r2,r4,r2
   4f338:	10800003 	ldbu	r2,0(r2)
   4f33c:	1009883a 	mov	r4,r2
   4f340:	d0a72c17 	ldw	r2,-25424(gp)
   4f344:	10800d43 	ldbu	r2,53(r2)
   4f348:	0084303a 	nor	r2,zero,r2
   4f34c:	2084703a 	and	r2,r4,r2
   4f350:	1009883a 	mov	r4,r2
   4f354:	d0a72944 	addi	r2,gp,-25435
   4f358:	1885883a 	add	r2,r3,r2
   4f35c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   4f360:	e0fffe03 	ldbu	r3,-8(fp)
   4f364:	d0a72944 	addi	r2,gp,-25435
   4f368:	1885883a 	add	r2,r3,r2
   4f36c:	10800003 	ldbu	r2,0(r2)
   4f370:	10803fcc 	andi	r2,r2,255
   4f374:	1000071e 	bne	r2,zero,4f394 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   4f378:	d0a72c17 	ldw	r2,-25424(gp)
   4f37c:	10800d83 	ldbu	r2,54(r2)
   4f380:	0084303a 	nor	r2,zero,r2
   4f384:	1007883a 	mov	r3,r2
   4f388:	d0a72903 	ldbu	r2,-25436(gp)
   4f38c:	1884703a 	and	r2,r3,r2
   4f390:	d0a72905 	stb	r2,-25436(gp)
    }
}
   4f394:	0001883a 	nop
   4f398:	e037883a 	mov	sp,fp
   4f39c:	df000017 	ldw	fp,0(sp)
   4f3a0:	dec00104 	addi	sp,sp,4
   4f3a4:	f800283a 	ret

0004f3a8 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   4f3a8:	defffb04 	addi	sp,sp,-20
   4f3ac:	df000415 	stw	fp,16(sp)
   4f3b0:	df000404 	addi	fp,sp,16
   4f3b4:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   4f3b8:	d0a72c17 	ldw	r2,-25424(gp)
   4f3bc:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   4f3c0:	d0a72c17 	ldw	r2,-25424(gp)
   4f3c4:	e0ffff17 	ldw	r3,-4(fp)
   4f3c8:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   4f3cc:	e0bfff17 	ldw	r2,-4(fp)
   4f3d0:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   4f3d4:	e0bffc17 	ldw	r2,-16(fp)
   4f3d8:	10800017 	ldw	r2,0(r2)
   4f3dc:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   4f3e0:	00002006 	br	4f464 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   4f3e4:	d0a72c17 	ldw	r2,-25424(gp)
   4f3e8:	10800d03 	ldbu	r2,52(r2)
   4f3ec:	10803fcc 	andi	r2,r2,255
   4f3f0:	d0e72c17 	ldw	r3,-25424(gp)
   4f3f4:	18c00d03 	ldbu	r3,52(r3)
   4f3f8:	18c03fcc 	andi	r3,r3,255
   4f3fc:	e13ffd17 	ldw	r4,-12(fp)
   4f400:	20c7883a 	add	r3,r4,r3
   4f404:	18c002c4 	addi	r3,r3,11
   4f408:	19000003 	ldbu	r4,0(r3)
   4f40c:	d0e72c17 	ldw	r3,-25424(gp)
   4f410:	18c00d43 	ldbu	r3,53(r3)
   4f414:	20c6b03a 	or	r3,r4,r3
   4f418:	1809883a 	mov	r4,r3
   4f41c:	e0fffd17 	ldw	r3,-12(fp)
   4f420:	1885883a 	add	r2,r3,r2
   4f424:	108002c4 	addi	r2,r2,11
   4f428:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   4f42c:	e0bffd17 	ldw	r2,-12(fp)
   4f430:	10c00283 	ldbu	r3,10(r2)
   4f434:	d0a72c17 	ldw	r2,-25424(gp)
   4f438:	10800d83 	ldbu	r2,54(r2)
   4f43c:	1884b03a 	or	r2,r3,r2
   4f440:	1007883a 	mov	r3,r2
   4f444:	e0bffd17 	ldw	r2,-12(fp)
   4f448:	10c00285 	stb	r3,10(r2)
        pevents++;
   4f44c:	e0bffc17 	ldw	r2,-16(fp)
   4f450:	10800104 	addi	r2,r2,4
   4f454:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   4f458:	e0bffc17 	ldw	r2,-16(fp)
   4f45c:	10800017 	ldw	r2,0(r2)
   4f460:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   4f464:	e0bffd17 	ldw	r2,-12(fp)
   4f468:	103fde1e 	bne	r2,zero,4f3e4 <__alt_data_end+0xfffe9be4>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   4f46c:	d0a72c17 	ldw	r2,-25424(gp)
   4f470:	10800d03 	ldbu	r2,52(r2)
   4f474:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   4f478:	e0fffe03 	ldbu	r3,-8(fp)
   4f47c:	e13ffe03 	ldbu	r4,-8(fp)
   4f480:	d0a72944 	addi	r2,gp,-25435
   4f484:	2085883a 	add	r2,r4,r2
   4f488:	10800003 	ldbu	r2,0(r2)
   4f48c:	1009883a 	mov	r4,r2
   4f490:	d0a72c17 	ldw	r2,-25424(gp)
   4f494:	10800d43 	ldbu	r2,53(r2)
   4f498:	0084303a 	nor	r2,zero,r2
   4f49c:	2084703a 	and	r2,r4,r2
   4f4a0:	1009883a 	mov	r4,r2
   4f4a4:	d0a72944 	addi	r2,gp,-25435
   4f4a8:	1885883a 	add	r2,r3,r2
   4f4ac:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   4f4b0:	e0fffe03 	ldbu	r3,-8(fp)
   4f4b4:	d0a72944 	addi	r2,gp,-25435
   4f4b8:	1885883a 	add	r2,r3,r2
   4f4bc:	10800003 	ldbu	r2,0(r2)
   4f4c0:	10803fcc 	andi	r2,r2,255
   4f4c4:	1000071e 	bne	r2,zero,4f4e4 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   4f4c8:	d0a72c17 	ldw	r2,-25424(gp)
   4f4cc:	10800d83 	ldbu	r2,54(r2)
   4f4d0:	0084303a 	nor	r2,zero,r2
   4f4d4:	1007883a 	mov	r3,r2
   4f4d8:	d0a72903 	ldbu	r2,-25436(gp)
   4f4dc:	1884703a 	and	r2,r3,r2
   4f4e0:	d0a72905 	stb	r2,-25436(gp)
    }
}
   4f4e4:	0001883a 	nop
   4f4e8:	e037883a 	mov	sp,fp
   4f4ec:	df000017 	ldw	fp,0(sp)
   4f4f0:	dec00104 	addi	sp,sp,4
   4f4f4:	f800283a 	ret

0004f4f8 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   4f4f8:	defffc04 	addi	sp,sp,-16
   4f4fc:	df000315 	stw	fp,12(sp)
   4f500:	df000304 	addi	fp,sp,12
   4f504:	e13ffe15 	stw	r4,-8(fp)
   4f508:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   4f50c:	e0bffe17 	ldw	r2,-8(fp)
   4f510:	10800d03 	ldbu	r2,52(r2)
   4f514:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   4f518:	e0bffd03 	ldbu	r2,-12(fp)
   4f51c:	e0fffd03 	ldbu	r3,-12(fp)
   4f520:	e13fff17 	ldw	r4,-4(fp)
   4f524:	20c7883a 	add	r3,r4,r3
   4f528:	18c002c4 	addi	r3,r3,11
   4f52c:	18c00003 	ldbu	r3,0(r3)
   4f530:	1809883a 	mov	r4,r3
   4f534:	e0fffe17 	ldw	r3,-8(fp)
   4f538:	18c00d43 	ldbu	r3,53(r3)
   4f53c:	00c6303a 	nor	r3,zero,r3
   4f540:	20c6703a 	and	r3,r4,r3
   4f544:	1809883a 	mov	r4,r3
   4f548:	e0ffff17 	ldw	r3,-4(fp)
   4f54c:	1885883a 	add	r2,r3,r2
   4f550:	108002c4 	addi	r2,r2,11
   4f554:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
   4f558:	e0bffd03 	ldbu	r2,-12(fp)
   4f55c:	e0ffff17 	ldw	r3,-4(fp)
   4f560:	1885883a 	add	r2,r3,r2
   4f564:	108002c4 	addi	r2,r2,11
   4f568:	10800003 	ldbu	r2,0(r2)
   4f56c:	10803fcc 	andi	r2,r2,255
   4f570:	10000a1e 	bne	r2,zero,4f59c <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   4f574:	e0bfff17 	ldw	r2,-4(fp)
   4f578:	10800283 	ldbu	r2,10(r2)
   4f57c:	1007883a 	mov	r3,r2
   4f580:	e0bffe17 	ldw	r2,-8(fp)
   4f584:	10800d83 	ldbu	r2,54(r2)
   4f588:	0084303a 	nor	r2,zero,r2
   4f58c:	1884703a 	and	r2,r3,r2
   4f590:	1007883a 	mov	r3,r2
   4f594:	e0bfff17 	ldw	r2,-4(fp)
   4f598:	10c00285 	stb	r3,10(r2)
    }
}
   4f59c:	0001883a 	nop
   4f5a0:	e037883a 	mov	sp,fp
   4f5a4:	df000017 	ldw	fp,0(sp)
   4f5a8:	dec00104 	addi	sp,sp,4
   4f5ac:	f800283a 	ret

0004f5b0 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   4f5b0:	defffa04 	addi	sp,sp,-24
   4f5b4:	df000515 	stw	fp,20(sp)
   4f5b8:	df000504 	addi	fp,sp,20
   4f5bc:	e13ffe15 	stw	r4,-8(fp)
   4f5c0:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   4f5c4:	e0bffe17 	ldw	r2,-8(fp)
   4f5c8:	10800d03 	ldbu	r2,52(r2)
   4f5cc:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   4f5d0:	e0bffe17 	ldw	r2,-8(fp)
   4f5d4:	10800d83 	ldbu	r2,54(r2)
   4f5d8:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   4f5dc:	e0bffe17 	ldw	r2,-8(fp)
   4f5e0:	10800d43 	ldbu	r2,53(r2)
   4f5e4:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   4f5e8:	e0bfff17 	ldw	r2,-4(fp)
   4f5ec:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   4f5f0:	e0bffb17 	ldw	r2,-20(fp)
   4f5f4:	10800017 	ldw	r2,0(r2)
   4f5f8:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   4f5fc:	00002506 	br	4f694 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   4f600:	e0bffd03 	ldbu	r2,-12(fp)
   4f604:	e0fffd03 	ldbu	r3,-12(fp)
   4f608:	e13ffc17 	ldw	r4,-16(fp)
   4f60c:	20c7883a 	add	r3,r4,r3
   4f610:	18c002c4 	addi	r3,r3,11
   4f614:	18c00003 	ldbu	r3,0(r3)
   4f618:	1809883a 	mov	r4,r3
   4f61c:	e0fffd83 	ldbu	r3,-10(fp)
   4f620:	00c6303a 	nor	r3,zero,r3
   4f624:	20c6703a 	and	r3,r4,r3
   4f628:	1809883a 	mov	r4,r3
   4f62c:	e0fffc17 	ldw	r3,-16(fp)
   4f630:	1885883a 	add	r2,r3,r2
   4f634:	108002c4 	addi	r2,r2,11
   4f638:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
   4f63c:	e0bffd03 	ldbu	r2,-12(fp)
   4f640:	e0fffc17 	ldw	r3,-16(fp)
   4f644:	1885883a 	add	r2,r3,r2
   4f648:	108002c4 	addi	r2,r2,11
   4f64c:	10800003 	ldbu	r2,0(r2)
   4f650:	10803fcc 	andi	r2,r2,255
   4f654:	1000091e 	bne	r2,zero,4f67c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   4f658:	e0bffc17 	ldw	r2,-16(fp)
   4f65c:	10800283 	ldbu	r2,10(r2)
   4f660:	1007883a 	mov	r3,r2
   4f664:	e0bffd43 	ldbu	r2,-11(fp)
   4f668:	0084303a 	nor	r2,zero,r2
   4f66c:	1884703a 	and	r2,r3,r2
   4f670:	1007883a 	mov	r3,r2
   4f674:	e0bffc17 	ldw	r2,-16(fp)
   4f678:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   4f67c:	e0bffb17 	ldw	r2,-20(fp)
   4f680:	10800104 	addi	r2,r2,4
   4f684:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   4f688:	e0bffb17 	ldw	r2,-20(fp)
   4f68c:	10800017 	ldw	r2,0(r2)
   4f690:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   4f694:	e0bffc17 	ldw	r2,-16(fp)
   4f698:	103fd91e 	bne	r2,zero,4f600 <__alt_data_end+0xfffe9e00>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   4f69c:	0001883a 	nop
   4f6a0:	e037883a 	mov	sp,fp
   4f6a4:	df000017 	ldw	fp,0(sp)
   4f6a8:	dec00104 	addi	sp,sp,4
   4f6ac:	f800283a 	ret

0004f6b0 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   4f6b0:	defffc04 	addi	sp,sp,-16
   4f6b4:	df000315 	stw	fp,12(sp)
   4f6b8:	df000304 	addi	fp,sp,12
   4f6bc:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   4f6c0:	e0bfff17 	ldw	r2,-4(fp)
   4f6c4:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   4f6c8:	e0bfff17 	ldw	r2,-4(fp)
   4f6cc:	108002c4 	addi	r2,r2,11
   4f6d0:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   4f6d4:	e03ffe05 	stb	zero,-8(fp)
   4f6d8:	00000706 	br	4f6f8 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   4f6dc:	e0bffd17 	ldw	r2,-12(fp)
   4f6e0:	10c00044 	addi	r3,r2,1
   4f6e4:	e0fffd15 	stw	r3,-12(fp)
   4f6e8:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   4f6ec:	e0bffe03 	ldbu	r2,-8(fp)
   4f6f0:	10800044 	addi	r2,r2,1
   4f6f4:	e0bffe05 	stb	r2,-8(fp)
   4f6f8:	e0bffe03 	ldbu	r2,-8(fp)
   4f6fc:	108000f0 	cmpltui	r2,r2,3
   4f700:	103ff61e 	bne	r2,zero,4f6dc <__alt_data_end+0xfffe9edc>
        *ptbl++ = 0;
    }
}
   4f704:	0001883a 	nop
   4f708:	e037883a 	mov	sp,fp
   4f70c:	df000017 	ldw	fp,0(sp)
   4f710:	dec00104 	addi	sp,sp,4
   4f714:	f800283a 	ret

0004f718 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   4f718:	defffb04 	addi	sp,sp,-20
   4f71c:	dfc00415 	stw	ra,16(sp)
   4f720:	df000315 	stw	fp,12(sp)
   4f724:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   4f728:	0142d004 	movi	r5,2880
   4f72c:	010001b4 	movhi	r4,6
   4f730:	210a4d04 	addi	r4,r4,10548
   4f734:	004fa900 	call	4fa90 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   4f738:	008001b4 	movhi	r2,6
   4f73c:	108a4d04 	addi	r2,r2,10548
   4f740:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   4f744:	008001b4 	movhi	r2,6
   4f748:	108a5904 	addi	r2,r2,10596
   4f74c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   4f750:	e03ffd0d 	sth	zero,-12(fp)
   4f754:	00001306 	br	4f7a4 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   4f758:	e0bffe17 	ldw	r2,-8(fp)
   4f75c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   4f760:	e0bffe17 	ldw	r2,-8(fp)
   4f764:	e0ffff17 	ldw	r3,-4(fp)
   4f768:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   4f76c:	e0bffe17 	ldw	r2,-8(fp)
   4f770:	00c00fc4 	movi	r3,63
   4f774:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   4f778:	e0bffe17 	ldw	r2,-8(fp)
   4f77c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   4f780:	e0bffe17 	ldw	r2,-8(fp)
   4f784:	10800c04 	addi	r2,r2,48
   4f788:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   4f78c:	e0bfff17 	ldw	r2,-4(fp)
   4f790:	10800c04 	addi	r2,r2,48
   4f794:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   4f798:	e0bffd0b 	ldhu	r2,-12(fp)
   4f79c:	10800044 	addi	r2,r2,1
   4f7a0:	e0bffd0d 	sth	r2,-12(fp)
   4f7a4:	e0bffd0b 	ldhu	r2,-12(fp)
   4f7a8:	10800ef0 	cmpltui	r2,r2,59
   4f7ac:	103fea1e 	bne	r2,zero,4f758 <__alt_data_end+0xfffe9f58>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   4f7b0:	e0bffe17 	ldw	r2,-8(fp)
   4f7b4:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   4f7b8:	e0bffe17 	ldw	r2,-8(fp)
   4f7bc:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   4f7c0:	e0bffe17 	ldw	r2,-8(fp)
   4f7c4:	00c00fc4 	movi	r3,63
   4f7c8:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   4f7cc:	e0bffe17 	ldw	r2,-8(fp)
   4f7d0:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   4f7d4:	008001b4 	movhi	r2,6
   4f7d8:	108a4d04 	addi	r2,r2,10548
   4f7dc:	d0a72a15 	stw	r2,-25432(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   4f7e0:	0001883a 	nop
   4f7e4:	e037883a 	mov	sp,fp
   4f7e8:	dfc00117 	ldw	ra,4(sp)
   4f7ec:	df000017 	ldw	fp,0(sp)
   4f7f0:	dec00204 	addi	sp,sp,8
   4f7f4:	f800283a 	ret

0004f7f8 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   4f7f8:	deffff04 	addi	sp,sp,-4
   4f7fc:	df000015 	stw	fp,0(sp)
   4f800:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   4f804:	d0272d15 	stw	zero,-25420(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   4f808:	d0272b05 	stb	zero,-25428(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   4f80c:	d0271d05 	stb	zero,-25484(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   4f810:	d0272545 	stb	zero,-25451(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   4f814:	d0271d45 	stb	zero,-25483(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   4f818:	d0272215 	stw	zero,-25464(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   4f81c:	d0271e15 	stw	zero,-25480(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   4f820:	d0273015 	stw	zero,-25408(gp)
    OSIdleCtrMax  = 0L;
   4f824:	d0272315 	stw	zero,-25460(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   4f828:	d0272f05 	stb	zero,-25412(gp)
#endif
}
   4f82c:	0001883a 	nop
   4f830:	e037883a 	mov	sp,fp
   4f834:	df000017 	ldw	fp,0(sp)
   4f838:	dec00104 	addi	sp,sp,4
   4f83c:	f800283a 	ret

0004f840 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   4f840:	defffd04 	addi	sp,sp,-12
   4f844:	df000215 	stw	fp,8(sp)
   4f848:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   4f84c:	d0272905 	stb	zero,-25436(gp)
    prdytbl       = &OSRdyTbl[0];
   4f850:	d0a72944 	addi	r2,gp,-25435
   4f854:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   4f858:	e03ffe05 	stb	zero,-8(fp)
   4f85c:	00000706 	br	4f87c <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   4f860:	e0bfff17 	ldw	r2,-4(fp)
   4f864:	10c00044 	addi	r3,r2,1
   4f868:	e0ffff15 	stw	r3,-4(fp)
   4f86c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   4f870:	e0bffe03 	ldbu	r2,-8(fp)
   4f874:	10800044 	addi	r2,r2,1
   4f878:	e0bffe05 	stb	r2,-8(fp)
   4f87c:	e0bffe03 	ldbu	r2,-8(fp)
   4f880:	108000f0 	cmpltui	r2,r2,3
   4f884:	103ff61e 	bne	r2,zero,4f860 <__alt_data_end+0xfffea060>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   4f888:	d0271f45 	stb	zero,-25475(gp)
    OSPrioHighRdy = 0;
   4f88c:	d0271f05 	stb	zero,-25476(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   4f890:	d0272715 	stw	zero,-25444(gp)
    OSTCBCur      = (OS_TCB *)0;
   4f894:	d0272c15 	stw	zero,-25424(gp)
}
   4f898:	0001883a 	nop
   4f89c:	e037883a 	mov	sp,fp
   4f8a0:	df000017 	ldw	fp,0(sp)
   4f8a4:	dec00104 	addi	sp,sp,4
   4f8a8:	f800283a 	ret

0004f8ac <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   4f8ac:	defff804 	addi	sp,sp,-32
   4f8b0:	dfc00715 	stw	ra,28(sp)
   4f8b4:	df000615 	stw	fp,24(sp)
   4f8b8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   4f8bc:	008000c4 	movi	r2,3
   4f8c0:	d8800415 	stw	r2,16(sp)
   4f8c4:	d8000315 	stw	zero,12(sp)
   4f8c8:	00808004 	movi	r2,512
   4f8cc:	d8800215 	stw	r2,8(sp)
   4f8d0:	008001b4 	movhi	r2,6
   4f8d4:	10884d04 	addi	r2,r2,8500
   4f8d8:	d8800115 	stw	r2,4(sp)
   4f8dc:	00bfffd4 	movui	r2,65535
   4f8e0:	d8800015 	stw	r2,0(sp)
   4f8e4:	01c00504 	movi	r7,20
   4f8e8:	018001b4 	movhi	r6,6
   4f8ec:	318a4c04 	addi	r6,r6,10544
   4f8f0:	000b883a 	mov	r5,zero
   4f8f4:	01000174 	movhi	r4,5
   4f8f8:	213f5604 	addi	r4,r4,-680
   4f8fc:	0054eec0 	call	54eec <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   4f900:	e1bfff04 	addi	r6,fp,-4
   4f904:	014001b4 	movhi	r5,6
   4f908:	2963f304 	addi	r5,r5,-28724
   4f90c:	01000504 	movi	r4,20
   4f910:	00556fc0 	call	556fc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   4f914:	0001883a 	nop
   4f918:	e037883a 	mov	sp,fp
   4f91c:	dfc00117 	ldw	ra,4(sp)
   4f920:	df000017 	ldw	fp,0(sp)
   4f924:	dec00204 	addi	sp,sp,8
   4f928:	f800283a 	ret

0004f92c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   4f92c:	defff804 	addi	sp,sp,-32
   4f930:	dfc00715 	stw	ra,28(sp)
   4f934:	df000615 	stw	fp,24(sp)
   4f938:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   4f93c:	008000c4 	movi	r2,3
   4f940:	d8800415 	stw	r2,16(sp)
   4f944:	d8000315 	stw	zero,12(sp)
   4f948:	00808004 	movi	r2,512
   4f94c:	d8800215 	stw	r2,8(sp)
   4f950:	008001b4 	movhi	r2,6
   4f954:	1085d504 	addi	r2,r2,5972
   4f958:	d8800115 	stw	r2,4(sp)
   4f95c:	00bfff94 	movui	r2,65534
   4f960:	d8800015 	stw	r2,0(sp)
   4f964:	01c004c4 	movi	r7,19
   4f968:	018001b4 	movhi	r6,6
   4f96c:	3187d404 	addi	r6,r6,8016
   4f970:	000b883a 	mov	r5,zero
   4f974:	01000174 	movhi	r4,5
   4f978:	213f6d04 	addi	r4,r4,-588
   4f97c:	0054eec0 	call	54eec <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   4f980:	e1bfff04 	addi	r6,fp,-4
   4f984:	014001b4 	movhi	r5,6
   4f988:	2963f704 	addi	r5,r5,-28708
   4f98c:	010004c4 	movi	r4,19
   4f990:	00556fc0 	call	556fc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   4f994:	0001883a 	nop
   4f998:	e037883a 	mov	sp,fp
   4f99c:	dfc00117 	ldw	ra,4(sp)
   4f9a0:	df000017 	ldw	fp,0(sp)
   4f9a4:	dec00204 	addi	sp,sp,8
   4f9a8:	f800283a 	ret

0004f9ac <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   4f9ac:	defffb04 	addi	sp,sp,-20
   4f9b0:	dfc00415 	stw	ra,16(sp)
   4f9b4:	df000315 	stw	fp,12(sp)
   4f9b8:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   4f9bc:	01414404 	movi	r5,1296
   4f9c0:	010001b4 	movhi	r4,6
   4f9c4:	210d1d04 	addi	r4,r4,13428
   4f9c8:	004fa900 	call	4fa90 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   4f9cc:	01401504 	movi	r5,84
   4f9d0:	010001b4 	movhi	r4,6
   4f9d4:	210e6104 	addi	r4,r4,14724
   4f9d8:	004fa900 	call	4fa90 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   4f9dc:	008001b4 	movhi	r2,6
   4f9e0:	108d1d04 	addi	r2,r2,13428
   4f9e4:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   4f9e8:	008001b4 	movhi	r2,6
   4f9ec:	108d3804 	addi	r2,r2,13536
   4f9f0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   4f9f4:	e03ffd05 	stb	zero,-12(fp)
   4f9f8:	00001106 	br	4fa40 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   4f9fc:	e0bffe17 	ldw	r2,-8(fp)
   4fa00:	e0ffff17 	ldw	r3,-4(fp)
   4fa04:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   4fa08:	e0bffe17 	ldw	r2,-8(fp)
   4fa0c:	00c00fc4 	movi	r3,63
   4fa10:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   4fa14:	e0bffe17 	ldw	r2,-8(fp)
   4fa18:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   4fa1c:	e0bffe17 	ldw	r2,-8(fp)
   4fa20:	10801b04 	addi	r2,r2,108
   4fa24:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   4fa28:	e0bfff17 	ldw	r2,-4(fp)
   4fa2c:	10801b04 	addi	r2,r2,108
   4fa30:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   4fa34:	e0bffd03 	ldbu	r2,-12(fp)
   4fa38:	10800044 	addi	r2,r2,1
   4fa3c:	e0bffd05 	stb	r2,-12(fp)
   4fa40:	e0bffd03 	ldbu	r2,-12(fp)
   4fa44:	108002f0 	cmpltui	r2,r2,11
   4fa48:	103fec1e 	bne	r2,zero,4f9fc <__alt_data_end+0xfffea1fc>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   4fa4c:	e0bffe17 	ldw	r2,-8(fp)
   4fa50:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   4fa54:	e0bffe17 	ldw	r2,-8(fp)
   4fa58:	00c00fc4 	movi	r3,63
   4fa5c:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   4fa60:	e0bffe17 	ldw	r2,-8(fp)
   4fa64:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   4fa68:	d0272015 	stw	zero,-25472(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   4fa6c:	008001b4 	movhi	r2,6
   4fa70:	108d1d04 	addi	r2,r2,13428
   4fa74:	d0a72415 	stw	r2,-25456(gp)
}
   4fa78:	0001883a 	nop
   4fa7c:	e037883a 	mov	sp,fp
   4fa80:	dfc00117 	ldw	ra,4(sp)
   4fa84:	df000017 	ldw	fp,0(sp)
   4fa88:	dec00204 	addi	sp,sp,8
   4fa8c:	f800283a 	ret

0004fa90 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   4fa90:	defffd04 	addi	sp,sp,-12
   4fa94:	df000215 	stw	fp,8(sp)
   4fa98:	df000204 	addi	fp,sp,8
   4fa9c:	e13ffe15 	stw	r4,-8(fp)
   4faa0:	2805883a 	mov	r2,r5
   4faa4:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   4faa8:	00000706 	br	4fac8 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   4faac:	e0bffe17 	ldw	r2,-8(fp)
   4fab0:	10c00044 	addi	r3,r2,1
   4fab4:	e0fffe15 	stw	r3,-8(fp)
   4fab8:	10000005 	stb	zero,0(r2)
        size--;
   4fabc:	e0bfff0b 	ldhu	r2,-4(fp)
   4fac0:	10bfffc4 	addi	r2,r2,-1
   4fac4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   4fac8:	e0bfff0b 	ldhu	r2,-4(fp)
   4facc:	103ff71e 	bne	r2,zero,4faac <__alt_data_end+0xfffea2ac>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   4fad0:	0001883a 	nop
   4fad4:	e037883a 	mov	sp,fp
   4fad8:	df000017 	ldw	fp,0(sp)
   4fadc:	dec00104 	addi	sp,sp,4
   4fae0:	f800283a 	ret

0004fae4 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   4fae4:	defffc04 	addi	sp,sp,-16
   4fae8:	df000315 	stw	fp,12(sp)
   4faec:	df000304 	addi	fp,sp,12
   4faf0:	e13ffd15 	stw	r4,-12(fp)
   4faf4:	e17ffe15 	stw	r5,-8(fp)
   4faf8:	3005883a 	mov	r2,r6
   4fafc:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   4fb00:	00000b06 	br	4fb30 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   4fb04:	e0bffd17 	ldw	r2,-12(fp)
   4fb08:	10c00044 	addi	r3,r2,1
   4fb0c:	e0fffd15 	stw	r3,-12(fp)
   4fb10:	e0fffe17 	ldw	r3,-8(fp)
   4fb14:	19000044 	addi	r4,r3,1
   4fb18:	e13ffe15 	stw	r4,-8(fp)
   4fb1c:	18c00003 	ldbu	r3,0(r3)
   4fb20:	10c00005 	stb	r3,0(r2)
        size--;
   4fb24:	e0bfff0b 	ldhu	r2,-4(fp)
   4fb28:	10bfffc4 	addi	r2,r2,-1
   4fb2c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   4fb30:	e0bfff0b 	ldhu	r2,-4(fp)
   4fb34:	103ff31e 	bne	r2,zero,4fb04 <__alt_data_end+0xfffea304>
        *pdest++ = *psrc++;
        size--;
    }
}
   4fb38:	0001883a 	nop
   4fb3c:	e037883a 	mov	sp,fp
   4fb40:	df000017 	ldw	fp,0(sp)
   4fb44:	dec00104 	addi	sp,sp,4
   4fb48:	f800283a 	ret

0004fb4c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   4fb4c:	defffb04 	addi	sp,sp,-20
   4fb50:	dfc00415 	stw	ra,16(sp)
   4fb54:	df000315 	stw	fp,12(sp)
   4fb58:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   4fb5c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4fb60:	0005303a 	rdctl	r2,status
   4fb64:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4fb68:	e0ffff17 	ldw	r3,-4(fp)
   4fb6c:	00bfff84 	movi	r2,-2
   4fb70:	1884703a 	and	r2,r3,r2
   4fb74:	1001703a 	wrctl	status,r2
  
  return context;
   4fb78:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
   4fb7c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   4fb80:	d0a72b03 	ldbu	r2,-25428(gp)
   4fb84:	10803fcc 	andi	r2,r2,255
   4fb88:	10001a1e 	bne	r2,zero,4fbf4 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   4fb8c:	d0a71d03 	ldbu	r2,-25484(gp)
   4fb90:	10803fcc 	andi	r2,r2,255
   4fb94:	1000171e 	bne	r2,zero,4fbf4 <OS_Sched+0xa8>
            OS_SchedNew();
   4fb98:	004fc1c0 	call	4fc1c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   4fb9c:	d0e71f03 	ldbu	r3,-25476(gp)
   4fba0:	d0a71f43 	ldbu	r2,-25475(gp)
   4fba4:	18c03fcc 	andi	r3,r3,255
   4fba8:	10803fcc 	andi	r2,r2,255
   4fbac:	18801126 	beq	r3,r2,4fbf4 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   4fbb0:	d0a71f03 	ldbu	r2,-25476(gp)
   4fbb4:	10c03fcc 	andi	r3,r2,255
   4fbb8:	008001b4 	movhi	r2,6
   4fbbc:	108e6104 	addi	r2,r2,14724
   4fbc0:	18c7883a 	add	r3,r3,r3
   4fbc4:	18c7883a 	add	r3,r3,r3
   4fbc8:	10c5883a 	add	r2,r2,r3
   4fbcc:	10800017 	ldw	r2,0(r2)
   4fbd0:	d0a72715 	stw	r2,-25444(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   4fbd4:	d0a72717 	ldw	r2,-25444(gp)
   4fbd8:	10c00e17 	ldw	r3,56(r2)
   4fbdc:	18c00044 	addi	r3,r3,1
   4fbe0:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   4fbe4:	d0a72217 	ldw	r2,-25464(gp)
   4fbe8:	10800044 	addi	r2,r2,1
   4fbec:	d0a72215 	stw	r2,-25464(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   4fbf0:	00581640 	call	58164 <OSCtxSw>
   4fbf4:	e0bffd17 	ldw	r2,-12(fp)
   4fbf8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4fbfc:	e0bffe17 	ldw	r2,-8(fp)
   4fc00:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   4fc04:	0001883a 	nop
   4fc08:	e037883a 	mov	sp,fp
   4fc0c:	dfc00117 	ldw	ra,4(sp)
   4fc10:	df000017 	ldw	fp,0(sp)
   4fc14:	dec00204 	addi	sp,sp,8
   4fc18:	f800283a 	ret

0004fc1c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   4fc1c:	defffe04 	addi	sp,sp,-8
   4fc20:	df000115 	stw	fp,4(sp)
   4fc24:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   4fc28:	d0a72903 	ldbu	r2,-25436(gp)
   4fc2c:	10c03fcc 	andi	r3,r2,255
   4fc30:	008001b4 	movhi	r2,6
   4fc34:	10a3b304 	addi	r2,r2,-28980
   4fc38:	10c5883a 	add	r2,r2,r3
   4fc3c:	10800003 	ldbu	r2,0(r2)
   4fc40:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   4fc44:	e0bfff03 	ldbu	r2,-4(fp)
   4fc48:	100490fa 	slli	r2,r2,3
   4fc4c:	1009883a 	mov	r4,r2
   4fc50:	e0ffff03 	ldbu	r3,-4(fp)
   4fc54:	d0a72944 	addi	r2,gp,-25435
   4fc58:	1885883a 	add	r2,r3,r2
   4fc5c:	10800003 	ldbu	r2,0(r2)
   4fc60:	10c03fcc 	andi	r3,r2,255
   4fc64:	008001b4 	movhi	r2,6
   4fc68:	10a3b304 	addi	r2,r2,-28980
   4fc6c:	10c5883a 	add	r2,r2,r3
   4fc70:	10800003 	ldbu	r2,0(r2)
   4fc74:	2085883a 	add	r2,r4,r2
   4fc78:	d0a71f05 	stb	r2,-25476(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   4fc7c:	0001883a 	nop
   4fc80:	e037883a 	mov	sp,fp
   4fc84:	df000017 	ldw	fp,0(sp)
   4fc88:	dec00104 	addi	sp,sp,4
   4fc8c:	f800283a 	ret

0004fc90 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   4fc90:	defffc04 	addi	sp,sp,-16
   4fc94:	df000315 	stw	fp,12(sp)
   4fc98:	df000304 	addi	fp,sp,12
   4fc9c:	e13ffe15 	stw	r4,-8(fp)
   4fca0:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   4fca4:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   4fca8:	00000b06 	br	4fcd8 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   4fcac:	e0bffe17 	ldw	r2,-8(fp)
   4fcb0:	10c00044 	addi	r3,r2,1
   4fcb4:	e0fffe15 	stw	r3,-8(fp)
   4fcb8:	e0ffff17 	ldw	r3,-4(fp)
   4fcbc:	19000044 	addi	r4,r3,1
   4fcc0:	e13fff15 	stw	r4,-4(fp)
   4fcc4:	18c00003 	ldbu	r3,0(r3)
   4fcc8:	10c00005 	stb	r3,0(r2)
        len++;
   4fccc:	e0bffd03 	ldbu	r2,-12(fp)
   4fcd0:	10800044 	addi	r2,r2,1
   4fcd4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   4fcd8:	e0bfff17 	ldw	r2,-4(fp)
   4fcdc:	10800003 	ldbu	r2,0(r2)
   4fce0:	10803fcc 	andi	r2,r2,255
   4fce4:	103ff11e 	bne	r2,zero,4fcac <__alt_data_end+0xfffea4ac>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   4fce8:	e0bffe17 	ldw	r2,-8(fp)
   4fcec:	10000005 	stb	zero,0(r2)
    return (len);
   4fcf0:	e0bffd03 	ldbu	r2,-12(fp)
}
   4fcf4:	e037883a 	mov	sp,fp
   4fcf8:	df000017 	ldw	fp,0(sp)
   4fcfc:	dec00104 	addi	sp,sp,4
   4fd00:	f800283a 	ret

0004fd04 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   4fd04:	defffd04 	addi	sp,sp,-12
   4fd08:	df000215 	stw	fp,8(sp)
   4fd0c:	df000204 	addi	fp,sp,8
   4fd10:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   4fd14:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   4fd18:	00000606 	br	4fd34 <OS_StrLen+0x30>
        psrc++;
   4fd1c:	e0bfff17 	ldw	r2,-4(fp)
   4fd20:	10800044 	addi	r2,r2,1
   4fd24:	e0bfff15 	stw	r2,-4(fp)
        len++;
   4fd28:	e0bffe03 	ldbu	r2,-8(fp)
   4fd2c:	10800044 	addi	r2,r2,1
   4fd30:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   4fd34:	e0bfff17 	ldw	r2,-4(fp)
   4fd38:	10800003 	ldbu	r2,0(r2)
   4fd3c:	10803fcc 	andi	r2,r2,255
   4fd40:	103ff61e 	bne	r2,zero,4fd1c <__alt_data_end+0xfffea51c>
        psrc++;
        len++;
    }
    return (len);
   4fd44:	e0bffe03 	ldbu	r2,-8(fp)
}
   4fd48:	e037883a 	mov	sp,fp
   4fd4c:	df000017 	ldw	fp,0(sp)
   4fd50:	dec00104 	addi	sp,sp,4
   4fd54:	f800283a 	ret

0004fd58 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   4fd58:	defffa04 	addi	sp,sp,-24
   4fd5c:	dfc00515 	stw	ra,20(sp)
   4fd60:	df000415 	stw	fp,16(sp)
   4fd64:	df000404 	addi	fp,sp,16
   4fd68:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4fd6c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4fd70:	0005303a 	rdctl	r2,status
   4fd74:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4fd78:	e0fffd17 	ldw	r3,-12(fp)
   4fd7c:	00bfff84 	movi	r2,-2
   4fd80:	1884703a 	and	r2,r3,r2
   4fd84:	1001703a 	wrctl	status,r2
  
  return context;
   4fd88:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   4fd8c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   4fd90:	d0a71e17 	ldw	r2,-25480(gp)
   4fd94:	10800044 	addi	r2,r2,1
   4fd98:	d0a71e15 	stw	r2,-25480(gp)
   4fd9c:	e0bffc17 	ldw	r2,-16(fp)
   4fda0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4fda4:	e0bffe17 	ldw	r2,-8(fp)
   4fda8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   4fdac:	00584780 	call	58478 <OSTaskIdleHook>
    }
   4fdb0:	003fef06 	br	4fd70 <__alt_data_end+0xfffea570>

0004fdb4 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   4fdb4:	defffa04 	addi	sp,sp,-24
   4fdb8:	dfc00515 	stw	ra,20(sp)
   4fdbc:	df000415 	stw	fp,16(sp)
   4fdc0:	df000404 	addi	fp,sp,16
   4fdc4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4fdc8:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   4fdcc:	00000206 	br	4fdd8 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   4fdd0:	01003204 	movi	r4,200
   4fdd4:	0055fbc0 	call	55fbc <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   4fdd8:	d0a72f03 	ldbu	r2,-25412(gp)
   4fddc:	10803fcc 	andi	r2,r2,255
   4fde0:	103ffb26 	beq	r2,zero,4fdd0 <__alt_data_end+0xfffea5d0>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   4fde4:	d0a72317 	ldw	r2,-25460(gp)
   4fde8:	01401904 	movi	r5,100
   4fdec:	1009883a 	mov	r4,r2
   4fdf0:	004abec0 	call	4abec <__udivsi3>
   4fdf4:	d0a72315 	stw	r2,-25460(gp)
    if (OSIdleCtrMax == 0L) {
   4fdf8:	d0a72317 	ldw	r2,-25460(gp)
   4fdfc:	1000031e 	bne	r2,zero,4fe0c <OS_TaskStat+0x58>
        OSCPUUsage = 0;
   4fe00:	d0272505 	stb	zero,-25452(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   4fe04:	01003fc4 	movi	r4,255
   4fe08:	0055c440 	call	55c44 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4fe0c:	0005303a 	rdctl	r2,status
   4fe10:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4fe14:	e0fffd17 	ldw	r3,-12(fp)
   4fe18:	00bfff84 	movi	r2,-2
   4fe1c:	1884703a 	and	r2,r3,r2
   4fe20:	1001703a 	wrctl	status,r2
  
  return context;
   4fe24:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   4fe28:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   4fe2c:	d0a71e17 	ldw	r2,-25480(gp)
   4fe30:	d0a73015 	stw	r2,-25408(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   4fe34:	d0271e15 	stw	zero,-25480(gp)
   4fe38:	e0bffc17 	ldw	r2,-16(fp)
   4fe3c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4fe40:	e0bffe17 	ldw	r2,-8(fp)
   4fe44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   4fe48:	d0a73017 	ldw	r2,-25408(gp)
   4fe4c:	d0e72317 	ldw	r3,-25460(gp)
   4fe50:	180b883a 	mov	r5,r3
   4fe54:	1009883a 	mov	r4,r2
   4fe58:	004abec0 	call	4abec <__udivsi3>
   4fe5c:	1007883a 	mov	r3,r2
   4fe60:	00801904 	movi	r2,100
   4fe64:	10c5c83a 	sub	r2,r2,r3
   4fe68:	d0a72505 	stb	r2,-25452(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   4fe6c:	00583f80 	call	583f8 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   4fe70:	004fe800 	call	4fe80 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   4fe74:	01001904 	movi	r4,100
   4fe78:	0055fbc0 	call	55fbc <OSTimeDly>
    }
   4fe7c:	003fe306 	br	4fe0c <__alt_data_end+0xfffea60c>

0004fe80 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   4fe80:	defffa04 	addi	sp,sp,-24
   4fe84:	dfc00515 	stw	ra,20(sp)
   4fe88:	df000415 	stw	fp,16(sp)
   4fe8c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   4fe90:	e03ffc05 	stb	zero,-16(fp)
   4fe94:	00002406 	br	4ff28 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   4fe98:	e0bffc03 	ldbu	r2,-16(fp)
   4fe9c:	e0fffe04 	addi	r3,fp,-8
   4fea0:	180b883a 	mov	r5,r3
   4fea4:	1009883a 	mov	r4,r2
   4fea8:	0055a840 	call	55a84 <OSTaskStkChk>
   4feac:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   4feb0:	e0bffc43 	ldbu	r2,-15(fp)
   4feb4:	1000191e 	bne	r2,zero,4ff1c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   4feb8:	e0fffc03 	ldbu	r3,-16(fp)
   4febc:	008001b4 	movhi	r2,6
   4fec0:	108e6104 	addi	r2,r2,14724
   4fec4:	18c7883a 	add	r3,r3,r3
   4fec8:	18c7883a 	add	r3,r3,r3
   4fecc:	10c5883a 	add	r2,r2,r3
   4fed0:	10800017 	ldw	r2,0(r2)
   4fed4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   4fed8:	e0bffd17 	ldw	r2,-12(fp)
   4fedc:	10000f26 	beq	r2,zero,4ff1c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   4fee0:	e0bffd17 	ldw	r2,-12(fp)
   4fee4:	10800060 	cmpeqi	r2,r2,1
   4fee8:	10000c1e 	bne	r2,zero,4ff1c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   4feec:	e0bffd17 	ldw	r2,-12(fp)
   4fef0:	10c00217 	ldw	r3,8(r2)
   4fef4:	e0bffd17 	ldw	r2,-12(fp)
   4fef8:	10800317 	ldw	r2,12(r2)
   4fefc:	1085883a 	add	r2,r2,r2
   4ff00:	1085883a 	add	r2,r2,r2
   4ff04:	1887883a 	add	r3,r3,r2
   4ff08:	e0bffd17 	ldw	r2,-12(fp)
   4ff0c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   4ff10:	e0ffff17 	ldw	r3,-4(fp)
   4ff14:	e0bffd17 	ldw	r2,-12(fp)
   4ff18:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   4ff1c:	e0bffc03 	ldbu	r2,-16(fp)
   4ff20:	10800044 	addi	r2,r2,1
   4ff24:	e0bffc05 	stb	r2,-16(fp)
   4ff28:	e0bffc03 	ldbu	r2,-16(fp)
   4ff2c:	10800570 	cmpltui	r2,r2,21
   4ff30:	103fd91e 	bne	r2,zero,4fe98 <__alt_data_end+0xfffea698>
#endif
                }
            }
        }
    }
}
   4ff34:	0001883a 	nop
   4ff38:	e037883a 	mov	sp,fp
   4ff3c:	dfc00117 	ldw	ra,4(sp)
   4ff40:	df000017 	ldw	fp,0(sp)
   4ff44:	dec00204 	addi	sp,sp,8
   4ff48:	f800283a 	ret

0004ff4c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   4ff4c:	defff204 	addi	sp,sp,-56
   4ff50:	dfc00d15 	stw	ra,52(sp)
   4ff54:	df000c15 	stw	fp,48(sp)
   4ff58:	df000c04 	addi	fp,sp,48
   4ff5c:	e17ffc15 	stw	r5,-16(fp)
   4ff60:	e1bffd15 	stw	r6,-12(fp)
   4ff64:	3807883a 	mov	r3,r7
   4ff68:	e0800417 	ldw	r2,16(fp)
   4ff6c:	e13ffb05 	stb	r4,-20(fp)
   4ff70:	e0fffe0d 	sth	r3,-8(fp)
   4ff74:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   4ff78:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ff7c:	0005303a 	rdctl	r2,status
   4ff80:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ff84:	e0fffa17 	ldw	r3,-24(fp)
   4ff88:	00bfff84 	movi	r2,-2
   4ff8c:	1884703a 	and	r2,r3,r2
   4ff90:	1001703a 	wrctl	status,r2
  
  return context;
   4ff94:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
   4ff98:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   4ff9c:	d0a72417 	ldw	r2,-25456(gp)
   4ffa0:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
   4ffa4:	e0bff617 	ldw	r2,-40(fp)
   4ffa8:	10009326 	beq	r2,zero,501f8 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   4ffac:	e0bff617 	ldw	r2,-40(fp)
   4ffb0:	10800517 	ldw	r2,20(r2)
   4ffb4:	d0a72415 	stw	r2,-25456(gp)
   4ffb8:	e0bff417 	ldw	r2,-48(fp)
   4ffbc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ffc0:	e0bff817 	ldw	r2,-32(fp)
   4ffc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   4ffc8:	e0bff617 	ldw	r2,-40(fp)
   4ffcc:	e0fffc17 	ldw	r3,-16(fp)
   4ffd0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   4ffd4:	e0bff617 	ldw	r2,-40(fp)
   4ffd8:	e0fffb03 	ldbu	r3,-20(fp)
   4ffdc:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   4ffe0:	e0bff617 	ldw	r2,-40(fp)
   4ffe4:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   4ffe8:	e0bff617 	ldw	r2,-40(fp)
   4ffec:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   4fff0:	e0bff617 	ldw	r2,-40(fp)
   4fff4:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   4fff8:	e0bff617 	ldw	r2,-40(fp)
   4fffc:	e0c00317 	ldw	r3,12(fp)
   50000:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   50004:	e0bff617 	ldw	r2,-40(fp)
   50008:	e0c00217 	ldw	r3,8(fp)
   5000c:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   50010:	e0bff617 	ldw	r2,-40(fp)
   50014:	e0fffd17 	ldw	r3,-12(fp)
   50018:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   5001c:	e0bff617 	ldw	r2,-40(fp)
   50020:	e0ffff0b 	ldhu	r3,-4(fp)
   50024:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   50028:	e0bff617 	ldw	r2,-40(fp)
   5002c:	e0fffe0b 	ldhu	r3,-8(fp)
   50030:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   50034:	e0bff617 	ldw	r2,-40(fp)
   50038:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   5003c:	e0bffb03 	ldbu	r2,-20(fp)
   50040:	1004d0fa 	srli	r2,r2,3
   50044:	1007883a 	mov	r3,r2
   50048:	e0bff617 	ldw	r2,-40(fp)
   5004c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   50050:	e0bffb03 	ldbu	r2,-20(fp)
   50054:	108001cc 	andi	r2,r2,7
   50058:	1007883a 	mov	r3,r2
   5005c:	e0bff617 	ldw	r2,-40(fp)
   50060:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   50064:	e0bff617 	ldw	r2,-40(fp)
   50068:	10800d03 	ldbu	r2,52(r2)
   5006c:	10803fcc 	andi	r2,r2,255
   50070:	00c00044 	movi	r3,1
   50074:	1884983a 	sll	r2,r3,r2
   50078:	1007883a 	mov	r3,r2
   5007c:	e0bff617 	ldw	r2,-40(fp)
   50080:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   50084:	e0bff617 	ldw	r2,-40(fp)
   50088:	10800cc3 	ldbu	r2,51(r2)
   5008c:	10803fcc 	andi	r2,r2,255
   50090:	00c00044 	movi	r3,1
   50094:	1884983a 	sll	r2,r3,r2
   50098:	1007883a 	mov	r3,r2
   5009c:	e0bff617 	ldw	r2,-40(fp)
   500a0:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   500a4:	e0bff617 	ldw	r2,-40(fp)
   500a8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   500ac:	e0bff617 	ldw	r2,-40(fp)
   500b0:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   500b4:	e0bff617 	ldw	r2,-40(fp)
   500b8:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   500bc:	e0bff617 	ldw	r2,-40(fp)
   500c0:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   500c4:	e0bff617 	ldw	r2,-40(fp)
   500c8:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   500cc:	e0bff617 	ldw	r2,-40(fp)
   500d0:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   500d4:	e0bff617 	ldw	r2,-40(fp)
   500d8:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   500dc:	e0bff617 	ldw	r2,-40(fp)
   500e0:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   500e4:	e0bff617 	ldw	r2,-40(fp)
   500e8:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   500ec:	e0bff617 	ldw	r2,-40(fp)
   500f0:	00c00fc4 	movi	r3,63
   500f4:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   500f8:	e0bff617 	ldw	r2,-40(fp)
   500fc:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   50100:	e13ff617 	ldw	r4,-40(fp)
   50104:	00584980 	call	58498 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   50108:	e13ff617 	ldw	r4,-40(fp)
   5010c:	00583900 	call	58390 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50110:	0005303a 	rdctl	r2,status
   50114:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50118:	e0fff517 	ldw	r3,-44(fp)
   5011c:	00bfff84 	movi	r2,-2
   50120:	1884703a 	and	r2,r3,r2
   50124:	1001703a 	wrctl	status,r2
  
  return context;
   50128:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   5012c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   50130:	e0fffb03 	ldbu	r3,-20(fp)
   50134:	008001b4 	movhi	r2,6
   50138:	108e6104 	addi	r2,r2,14724
   5013c:	18c7883a 	add	r3,r3,r3
   50140:	18c7883a 	add	r3,r3,r3
   50144:	10c5883a 	add	r2,r2,r3
   50148:	e0fff617 	ldw	r3,-40(fp)
   5014c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   50150:	d0e72017 	ldw	r3,-25472(gp)
   50154:	e0bff617 	ldw	r2,-40(fp)
   50158:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   5015c:	e0bff617 	ldw	r2,-40(fp)
   50160:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   50164:	d0a72017 	ldw	r2,-25472(gp)
   50168:	10000326 	beq	r2,zero,50178 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   5016c:	d0a72017 	ldw	r2,-25472(gp)
   50170:	e0fff617 	ldw	r3,-40(fp)
   50174:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   50178:	e0bff617 	ldw	r2,-40(fp)
   5017c:	d0a72015 	stw	r2,-25472(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   50180:	e0bff617 	ldw	r2,-40(fp)
   50184:	10c00d83 	ldbu	r3,54(r2)
   50188:	d0a72903 	ldbu	r2,-25436(gp)
   5018c:	1884b03a 	or	r2,r3,r2
   50190:	d0a72905 	stb	r2,-25436(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   50194:	e0bff617 	ldw	r2,-40(fp)
   50198:	10800d03 	ldbu	r2,52(r2)
   5019c:	10c03fcc 	andi	r3,r2,255
   501a0:	e0bff617 	ldw	r2,-40(fp)
   501a4:	10800d03 	ldbu	r2,52(r2)
   501a8:	11003fcc 	andi	r4,r2,255
   501ac:	d0a72944 	addi	r2,gp,-25435
   501b0:	2085883a 	add	r2,r4,r2
   501b4:	11000003 	ldbu	r4,0(r2)
   501b8:	e0bff617 	ldw	r2,-40(fp)
   501bc:	10800d43 	ldbu	r2,53(r2)
   501c0:	2084b03a 	or	r2,r4,r2
   501c4:	1009883a 	mov	r4,r2
   501c8:	d0a72944 	addi	r2,gp,-25435
   501cc:	1885883a 	add	r2,r3,r2
   501d0:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   501d4:	d0a72543 	ldbu	r2,-25451(gp)
   501d8:	10800044 	addi	r2,r2,1
   501dc:	d0a72545 	stb	r2,-25451(gp)
   501e0:	e0bff417 	ldw	r2,-48(fp)
   501e4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   501e8:	e0bff717 	ldw	r2,-36(fp)
   501ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   501f0:	0005883a 	mov	r2,zero
   501f4:	00000506 	br	5020c <OS_TCBInit+0x2c0>
   501f8:	e0bff417 	ldw	r2,-48(fp)
   501fc:	e0bff915 	stw	r2,-28(fp)
   50200:	e0bff917 	ldw	r2,-28(fp)
   50204:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   50208:	00801084 	movi	r2,66
}
   5020c:	e037883a 	mov	sp,fp
   50210:	dfc00117 	ldw	ra,4(sp)
   50214:	df000017 	ldw	fp,0(sp)
   50218:	dec00204 	addi	sp,sp,8
   5021c:	f800283a 	ret

00050220 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   50220:	defffe04 	addi	sp,sp,-8
   50224:	df000115 	stw	fp,4(sp)
   50228:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   5022c:	d0a00f04 	addi	r2,gp,-32708
   50230:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   50234:	d0a01004 	addi	r2,gp,-32704
   50238:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   5023c:	d0a01184 	addi	r2,gp,-32698
   50240:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   50244:	d0a01204 	addi	r2,gp,-32696
   50248:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   5024c:	d0a01104 	addi	r2,gp,-32700
   50250:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   50254:	d0a01284 	addi	r2,gp,-32694
   50258:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   5025c:	d0a01304 	addi	r2,gp,-32692
   50260:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   50264:	d0a01384 	addi	r2,gp,-32690
   50268:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   5026c:	d0a01404 	addi	r2,gp,-32688
   50270:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   50274:	d0a01484 	addi	r2,gp,-32686
   50278:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   5027c:	d0a01504 	addi	r2,gp,-32684
   50280:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   50284:	d0a01584 	addi	r2,gp,-32682
   50288:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   5028c:	d0a01604 	addi	r2,gp,-32680
   50290:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   50294:	d0a01684 	addi	r2,gp,-32678
   50298:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   5029c:	d0a01704 	addi	r2,gp,-32676
   502a0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   502a4:	d0a01784 	addi	r2,gp,-32674
   502a8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   502ac:	d0a01804 	addi	r2,gp,-32672
   502b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   502b4:	d0a01884 	addi	r2,gp,-32670
   502b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   502bc:	d0a01904 	addi	r2,gp,-32668
   502c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   502c4:	d0a01984 	addi	r2,gp,-32666
   502c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   502cc:	d0a01a04 	addi	r2,gp,-32664
   502d0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   502d4:	d0a01a84 	addi	r2,gp,-32662
   502d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   502dc:	d0a01b04 	addi	r2,gp,-32660
   502e0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   502e4:	d0a01b84 	addi	r2,gp,-32658
   502e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   502ec:	d0a01c04 	addi	r2,gp,-32656
   502f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   502f4:	d0a01c84 	addi	r2,gp,-32654
   502f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   502fc:	d0a01d04 	addi	r2,gp,-32652
   50300:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   50304:	d0a01d84 	addi	r2,gp,-32650
   50308:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   5030c:	d0a01e04 	addi	r2,gp,-32648
   50310:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   50314:	d0a01e84 	addi	r2,gp,-32646
   50318:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   5031c:	d0a01f04 	addi	r2,gp,-32644
   50320:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   50324:	d0a01f84 	addi	r2,gp,-32642
   50328:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   5032c:	d0a02004 	addi	r2,gp,-32640
   50330:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   50334:	d0a02084 	addi	r2,gp,-32638
   50338:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   5033c:	d0a02104 	addi	r2,gp,-32636
   50340:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   50344:	d0a02184 	addi	r2,gp,-32634
   50348:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   5034c:	d0a02204 	addi	r2,gp,-32632
   50350:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   50354:	d0a02284 	addi	r2,gp,-32630
   50358:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   5035c:	d0a02304 	addi	r2,gp,-32628
   50360:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   50364:	d0a02384 	addi	r2,gp,-32626
   50368:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   5036c:	d0a02404 	addi	r2,gp,-32624
   50370:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   50374:	d0a02484 	addi	r2,gp,-32622
   50378:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   5037c:	d0a02504 	addi	r2,gp,-32620
   50380:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   50384:	d0a02584 	addi	r2,gp,-32618
   50388:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   5038c:	d0a02604 	addi	r2,gp,-32616
   50390:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   50394:	d0a02b04 	addi	r2,gp,-32596
   50398:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   5039c:	0001883a 	nop
   503a0:	e037883a 	mov	sp,fp
   503a4:	df000017 	ldw	fp,0(sp)
   503a8:	dec00104 	addi	sp,sp,4
   503ac:	f800283a 	ret

000503b0 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   503b0:	defff204 	addi	sp,sp,-56
   503b4:	df000d15 	stw	fp,52(sp)
   503b8:	df000d04 	addi	fp,sp,52
   503bc:	e13ffc15 	stw	r4,-16(fp)
   503c0:	2807883a 	mov	r3,r5
   503c4:	3005883a 	mov	r2,r6
   503c8:	e1ffff15 	stw	r7,-4(fp)
   503cc:	e0fffd0d 	sth	r3,-12(fp)
   503d0:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   503d4:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   503d8:	e0bfff17 	ldw	r2,-4(fp)
   503dc:	1000021e 	bne	r2,zero,503e8 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   503e0:	0005883a 	mov	r2,zero
   503e4:	0000b006 	br	506a8 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   503e8:	e0bffc17 	ldw	r2,-16(fp)
   503ec:	1000051e 	bne	r2,zero,50404 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   503f0:	e0bfff17 	ldw	r2,-4(fp)
   503f4:	00c01b84 	movi	r3,110
   503f8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   503fc:	0005883a 	mov	r2,zero
   50400:	0000a906 	br	506a8 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   50404:	e0bffc17 	ldw	r2,-16(fp)
   50408:	10800003 	ldbu	r2,0(r2)
   5040c:	10803fcc 	andi	r2,r2,255
   50410:	10800160 	cmpeqi	r2,r2,5
   50414:	1000051e 	bne	r2,zero,5042c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   50418:	e0bfff17 	ldw	r2,-4(fp)
   5041c:	00c00044 	movi	r3,1
   50420:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   50424:	0005883a 	mov	r2,zero
   50428:	00009f06 	br	506a8 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   5042c:	e0fffe03 	ldbu	r3,-8(fp)
   50430:	00bfe004 	movi	r2,-128
   50434:	1884703a 	and	r2,r3,r2
   50438:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   5043c:	e0bff503 	ldbu	r2,-44(fp)
   50440:	10000626 	beq	r2,zero,5045c <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   50444:	e0bffe03 	ldbu	r2,-8(fp)
   50448:	10801fcc 	andi	r2,r2,127
   5044c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   50450:	00800044 	movi	r2,1
   50454:	e0bff385 	stb	r2,-50(fp)
   50458:	00000106 	br	50460 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   5045c:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   50460:	e0bfff17 	ldw	r2,-4(fp)
   50464:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50468:	0005303a 	rdctl	r2,status
   5046c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50470:	e0fffb17 	ldw	r3,-20(fp)
   50474:	00bfff84 	movi	r2,-2
   50478:	1884703a 	and	r2,r3,r2
   5047c:	1001703a 	wrctl	status,r2
  
  return context;
   50480:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   50484:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   50488:	e0bffe03 	ldbu	r2,-8(fp)
   5048c:	10c00060 	cmpeqi	r3,r2,1
   50490:	18005f1e 	bne	r3,zero,50610 <OSFlagAccept+0x260>
   50494:	10c00088 	cmpgei	r3,r2,2
   50498:	1800021e 	bne	r3,zero,504a4 <OSFlagAccept+0xf4>
   5049c:	10003f26 	beq	r2,zero,5059c <OSFlagAccept+0x1ec>
   504a0:	00007706 	br	50680 <OSFlagAccept+0x2d0>
   504a4:	10c000a0 	cmpeqi	r3,r2,2
   504a8:	1800031e 	bne	r3,zero,504b8 <OSFlagAccept+0x108>
   504ac:	108000e0 	cmpeqi	r2,r2,3
   504b0:	10001e1e 	bne	r2,zero,5052c <OSFlagAccept+0x17c>
   504b4:	00007206 	br	50680 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   504b8:	e0bffc17 	ldw	r2,-16(fp)
   504bc:	10c0020b 	ldhu	r3,8(r2)
   504c0:	e0bffd0b 	ldhu	r2,-12(fp)
   504c4:	1884703a 	and	r2,r3,r2
   504c8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   504cc:	e0fff30b 	ldhu	r3,-52(fp)
   504d0:	e0bffd0b 	ldhu	r2,-12(fp)
   504d4:	18800d1e 	bne	r3,r2,5050c <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   504d8:	e0bff383 	ldbu	r2,-50(fp)
   504dc:	10800058 	cmpnei	r2,r2,1
   504e0:	10000d1e 	bne	r2,zero,50518 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   504e4:	e0bffc17 	ldw	r2,-16(fp)
   504e8:	1080020b 	ldhu	r2,8(r2)
   504ec:	1007883a 	mov	r3,r2
   504f0:	e0bff30b 	ldhu	r2,-52(fp)
   504f4:	0084303a 	nor	r2,zero,r2
   504f8:	1884703a 	and	r2,r3,r2
   504fc:	1007883a 	mov	r3,r2
   50500:	e0bffc17 	ldw	r2,-16(fp)
   50504:	10c0020d 	sth	r3,8(r2)
   50508:	00000306 	br	50518 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   5050c:	e0bfff17 	ldw	r2,-4(fp)
   50510:	00c01c04 	movi	r3,112
   50514:	10c00005 	stb	r3,0(r2)
   50518:	e0bff417 	ldw	r2,-48(fp)
   5051c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50520:	e0bff617 	ldw	r2,-40(fp)
   50524:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   50528:	00005e06 	br	506a4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   5052c:	e0bffc17 	ldw	r2,-16(fp)
   50530:	10c0020b 	ldhu	r3,8(r2)
   50534:	e0bffd0b 	ldhu	r2,-12(fp)
   50538:	1884703a 	and	r2,r3,r2
   5053c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   50540:	e0bff30b 	ldhu	r2,-52(fp)
   50544:	10000d26 	beq	r2,zero,5057c <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   50548:	e0bff383 	ldbu	r2,-50(fp)
   5054c:	10800058 	cmpnei	r2,r2,1
   50550:	10000d1e 	bne	r2,zero,50588 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   50554:	e0bffc17 	ldw	r2,-16(fp)
   50558:	1080020b 	ldhu	r2,8(r2)
   5055c:	1007883a 	mov	r3,r2
   50560:	e0bff30b 	ldhu	r2,-52(fp)
   50564:	0084303a 	nor	r2,zero,r2
   50568:	1884703a 	and	r2,r3,r2
   5056c:	1007883a 	mov	r3,r2
   50570:	e0bffc17 	ldw	r2,-16(fp)
   50574:	10c0020d 	sth	r3,8(r2)
   50578:	00000306 	br	50588 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   5057c:	e0bfff17 	ldw	r2,-4(fp)
   50580:	00c01c04 	movi	r3,112
   50584:	10c00005 	stb	r3,0(r2)
   50588:	e0bff417 	ldw	r2,-48(fp)
   5058c:	e0bff715 	stw	r2,-36(fp)
   50590:	e0bff717 	ldw	r2,-36(fp)
   50594:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   50598:	00004206 	br	506a4 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   5059c:	e0bffc17 	ldw	r2,-16(fp)
   505a0:	1080020b 	ldhu	r2,8(r2)
   505a4:	0084303a 	nor	r2,zero,r2
   505a8:	1007883a 	mov	r3,r2
   505ac:	e0bffd0b 	ldhu	r2,-12(fp)
   505b0:	1884703a 	and	r2,r3,r2
   505b4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   505b8:	e0fff30b 	ldhu	r3,-52(fp)
   505bc:	e0bffd0b 	ldhu	r2,-12(fp)
   505c0:	18800b1e 	bne	r3,r2,505f0 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   505c4:	e0bff383 	ldbu	r2,-50(fp)
   505c8:	10800058 	cmpnei	r2,r2,1
   505cc:	10000b1e 	bne	r2,zero,505fc <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   505d0:	e0bffc17 	ldw	r2,-16(fp)
   505d4:	10c0020b 	ldhu	r3,8(r2)
   505d8:	e0bff30b 	ldhu	r2,-52(fp)
   505dc:	1884b03a 	or	r2,r3,r2
   505e0:	1007883a 	mov	r3,r2
   505e4:	e0bffc17 	ldw	r2,-16(fp)
   505e8:	10c0020d 	sth	r3,8(r2)
   505ec:	00000306 	br	505fc <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   505f0:	e0bfff17 	ldw	r2,-4(fp)
   505f4:	00c01c04 	movi	r3,112
   505f8:	10c00005 	stb	r3,0(r2)
   505fc:	e0bff417 	ldw	r2,-48(fp)
   50600:	e0bff815 	stw	r2,-32(fp)
   50604:	e0bff817 	ldw	r2,-32(fp)
   50608:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   5060c:	00002506 	br	506a4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   50610:	e0bffc17 	ldw	r2,-16(fp)
   50614:	1080020b 	ldhu	r2,8(r2)
   50618:	0084303a 	nor	r2,zero,r2
   5061c:	1007883a 	mov	r3,r2
   50620:	e0bffd0b 	ldhu	r2,-12(fp)
   50624:	1884703a 	and	r2,r3,r2
   50628:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   5062c:	e0bff30b 	ldhu	r2,-52(fp)
   50630:	10000b26 	beq	r2,zero,50660 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   50634:	e0bff383 	ldbu	r2,-50(fp)
   50638:	10800058 	cmpnei	r2,r2,1
   5063c:	10000b1e 	bne	r2,zero,5066c <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   50640:	e0bffc17 	ldw	r2,-16(fp)
   50644:	10c0020b 	ldhu	r3,8(r2)
   50648:	e0bff30b 	ldhu	r2,-52(fp)
   5064c:	1884b03a 	or	r2,r3,r2
   50650:	1007883a 	mov	r3,r2
   50654:	e0bffc17 	ldw	r2,-16(fp)
   50658:	10c0020d 	sth	r3,8(r2)
   5065c:	00000306 	br	5066c <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   50660:	e0bfff17 	ldw	r2,-4(fp)
   50664:	00c01c04 	movi	r3,112
   50668:	10c00005 	stb	r3,0(r2)
   5066c:	e0bff417 	ldw	r2,-48(fp)
   50670:	e0bff915 	stw	r2,-28(fp)
   50674:	e0bff917 	ldw	r2,-28(fp)
   50678:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   5067c:	00000906 	br	506a4 <OSFlagAccept+0x2f4>
   50680:	e0bff417 	ldw	r2,-48(fp)
   50684:	e0bffa15 	stw	r2,-24(fp)
   50688:	e0bffa17 	ldw	r2,-24(fp)
   5068c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   50690:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   50694:	e0bfff17 	ldw	r2,-4(fp)
   50698:	00c01bc4 	movi	r3,111
   5069c:	10c00005 	stb	r3,0(r2)
             break;
   506a0:	0001883a 	nop
    }
    return (flags_rdy);
   506a4:	e0bff30b 	ldhu	r2,-52(fp)
}
   506a8:	e037883a 	mov	sp,fp
   506ac:	df000017 	ldw	fp,0(sp)
   506b0:	dec00104 	addi	sp,sp,4
   506b4:	f800283a 	ret

000506b8 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   506b8:	defff804 	addi	sp,sp,-32
   506bc:	df000715 	stw	fp,28(sp)
   506c0:	df000704 	addi	fp,sp,28
   506c4:	2005883a 	mov	r2,r4
   506c8:	e17fff15 	stw	r5,-4(fp)
   506cc:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   506d0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   506d4:	e0bfff17 	ldw	r2,-4(fp)
   506d8:	1000021e 	bne	r2,zero,506e4 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   506dc:	0005883a 	mov	r2,zero
   506e0:	00003306 	br	507b0 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   506e4:	d0a72b03 	ldbu	r2,-25428(gp)
   506e8:	10803fcc 	andi	r2,r2,255
   506ec:	10000526 	beq	r2,zero,50704 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   506f0:	e0bfff17 	ldw	r2,-4(fp)
   506f4:	00c00404 	movi	r3,16
   506f8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   506fc:	0005883a 	mov	r2,zero
   50700:	00002b06 	br	507b0 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50704:	0005303a 	rdctl	r2,status
   50708:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5070c:	e0fffd17 	ldw	r3,-12(fp)
   50710:	00bfff84 	movi	r2,-2
   50714:	1884703a 	and	r2,r3,r2
   50718:	1001703a 	wrctl	status,r2
  
  return context;
   5071c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   50720:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   50724:	d0a72e17 	ldw	r2,-25416(gp)
   50728:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   5072c:	e0bffb17 	ldw	r2,-20(fp)
   50730:	10001726 	beq	r2,zero,50790 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   50734:	d0a72e17 	ldw	r2,-25416(gp)
   50738:	10800117 	ldw	r2,4(r2)
   5073c:	d0a72e15 	stw	r2,-25416(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   50740:	e0bffb17 	ldw	r2,-20(fp)
   50744:	00c00144 	movi	r3,5
   50748:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   5074c:	e0bffb17 	ldw	r2,-20(fp)
   50750:	e0fffe0b 	ldhu	r3,-8(fp)
   50754:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   50758:	e0bffb17 	ldw	r2,-20(fp)
   5075c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   50760:	e0bffb17 	ldw	r2,-20(fp)
   50764:	00c00fc4 	movi	r3,63
   50768:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   5076c:	e0bffb17 	ldw	r2,-20(fp)
   50770:	100002c5 	stb	zero,11(r2)
   50774:	e0bff917 	ldw	r2,-28(fp)
   50778:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5077c:	e0bffa17 	ldw	r2,-24(fp)
   50780:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   50784:	e0bfff17 	ldw	r2,-4(fp)
   50788:	10000005 	stb	zero,0(r2)
   5078c:	00000706 	br	507ac <OSFlagCreate+0xf4>
   50790:	e0bff917 	ldw	r2,-28(fp)
   50794:	e0bffc15 	stw	r2,-16(fp)
   50798:	e0bffc17 	ldw	r2,-16(fp)
   5079c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   507a0:	e0bfff17 	ldw	r2,-4(fp)
   507a4:	00c01c84 	movi	r3,114
   507a8:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   507ac:	e0bffb17 	ldw	r2,-20(fp)
}
   507b0:	e037883a 	mov	sp,fp
   507b4:	df000017 	ldw	fp,0(sp)
   507b8:	dec00104 	addi	sp,sp,4
   507bc:	f800283a 	ret

000507c0 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   507c0:	defff204 	addi	sp,sp,-56
   507c4:	dfc00d15 	stw	ra,52(sp)
   507c8:	df000c15 	stw	fp,48(sp)
   507cc:	df000c04 	addi	fp,sp,48
   507d0:	e13ffd15 	stw	r4,-12(fp)
   507d4:	2805883a 	mov	r2,r5
   507d8:	e1bfff15 	stw	r6,-4(fp)
   507dc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   507e0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   507e4:	e0bfff17 	ldw	r2,-4(fp)
   507e8:	1000021e 	bne	r2,zero,507f4 <OSFlagDel+0x34>
        return (pgrp);
   507ec:	e0bffd17 	ldw	r2,-12(fp)
   507f0:	00008006 	br	509f4 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   507f4:	e0bffd17 	ldw	r2,-12(fp)
   507f8:	1000051e 	bne	r2,zero,50810 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   507fc:	e0bfff17 	ldw	r2,-4(fp)
   50800:	00c01b84 	movi	r3,110
   50804:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   50808:	e0bffd17 	ldw	r2,-12(fp)
   5080c:	00007906 	br	509f4 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   50810:	d0a72b03 	ldbu	r2,-25428(gp)
   50814:	10803fcc 	andi	r2,r2,255
   50818:	10000526 	beq	r2,zero,50830 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   5081c:	e0bfff17 	ldw	r2,-4(fp)
   50820:	00c003c4 	movi	r3,15
   50824:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   50828:	e0bffd17 	ldw	r2,-12(fp)
   5082c:	00007106 	br	509f4 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   50830:	e0bffd17 	ldw	r2,-12(fp)
   50834:	10800003 	ldbu	r2,0(r2)
   50838:	10803fcc 	andi	r2,r2,255
   5083c:	10800160 	cmpeqi	r2,r2,5
   50840:	1000051e 	bne	r2,zero,50858 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   50844:	e0bfff17 	ldw	r2,-4(fp)
   50848:	00c00044 	movi	r3,1
   5084c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   50850:	e0bffd17 	ldw	r2,-12(fp)
   50854:	00006706 	br	509f4 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50858:	0005303a 	rdctl	r2,status
   5085c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50860:	e0fffc17 	ldw	r3,-16(fp)
   50864:	00bfff84 	movi	r2,-2
   50868:	1884703a 	and	r2,r3,r2
   5086c:	1001703a 	wrctl	status,r2
  
  return context;
   50870:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   50874:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   50878:	e0bffd17 	ldw	r2,-12(fp)
   5087c:	10800117 	ldw	r2,4(r2)
   50880:	10000326 	beq	r2,zero,50890 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   50884:	00800044 	movi	r2,1
   50888:	e0bff405 	stb	r2,-48(fp)
   5088c:	00000106 	br	50894 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   50890:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   50894:	e0bffe03 	ldbu	r2,-8(fp)
   50898:	10000326 	beq	r2,zero,508a8 <OSFlagDel+0xe8>
   5089c:	10800060 	cmpeqi	r2,r2,1
   508a0:	1000231e 	bne	r2,zero,50930 <OSFlagDel+0x170>
   508a4:	00004806 	br	509c8 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   508a8:	e0bff403 	ldbu	r2,-48(fp)
   508ac:	1000161e 	bne	r2,zero,50908 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   508b0:	e0bffd17 	ldw	r2,-12(fp)
   508b4:	00c00fc4 	movi	r3,63
   508b8:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   508bc:	e0bffd17 	ldw	r2,-12(fp)
   508c0:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   508c4:	e0bffd17 	ldw	r2,-12(fp)
   508c8:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   508cc:	d0e72e17 	ldw	r3,-25416(gp)
   508d0:	e0bffd17 	ldw	r2,-12(fp)
   508d4:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   508d8:	e0bffd17 	ldw	r2,-12(fp)
   508dc:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   508e0:	e0bffd17 	ldw	r2,-12(fp)
   508e4:	d0a72e15 	stw	r2,-25416(gp)
   508e8:	e0bff717 	ldw	r2,-36(fp)
   508ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   508f0:	e0bff817 	ldw	r2,-32(fp)
   508f4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   508f8:	e0bfff17 	ldw	r2,-4(fp)
   508fc:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   50900:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   50904:	00003a06 	br	509f0 <OSFlagDel+0x230>
   50908:	e0bff717 	ldw	r2,-36(fp)
   5090c:	e0bff915 	stw	r2,-28(fp)
   50910:	e0bff917 	ldw	r2,-28(fp)
   50914:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   50918:	e0bfff17 	ldw	r2,-4(fp)
   5091c:	00c01244 	movi	r3,73
   50920:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   50924:	e0bffd17 	ldw	r2,-12(fp)
   50928:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   5092c:	00003006 	br	509f0 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   50930:	e0bffd17 	ldw	r2,-12(fp)
   50934:	10800117 	ldw	r2,4(r2)
   50938:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   5093c:	00000606 	br	50958 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   50940:	000b883a 	mov	r5,zero
   50944:	e13ff517 	ldw	r4,-44(fp)
   50948:	005192c0 	call	5192c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   5094c:	e0bff517 	ldw	r2,-44(fp)
   50950:	10800017 	ldw	r2,0(r2)
   50954:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   50958:	e0bff517 	ldw	r2,-44(fp)
   5095c:	103ff81e 	bne	r2,zero,50940 <__alt_data_end+0xfffeb140>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   50960:	e0bffd17 	ldw	r2,-12(fp)
   50964:	00c00fc4 	movi	r3,63
   50968:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   5096c:	e0bffd17 	ldw	r2,-12(fp)
   50970:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   50974:	e0bffd17 	ldw	r2,-12(fp)
   50978:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   5097c:	d0e72e17 	ldw	r3,-25416(gp)
   50980:	e0bffd17 	ldw	r2,-12(fp)
   50984:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   50988:	e0bffd17 	ldw	r2,-12(fp)
   5098c:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   50990:	e0bffd17 	ldw	r2,-12(fp)
   50994:	d0a72e15 	stw	r2,-25416(gp)
   50998:	e0bff717 	ldw	r2,-36(fp)
   5099c:	e0bffa15 	stw	r2,-24(fp)
   509a0:	e0bffa17 	ldw	r2,-24(fp)
   509a4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   509a8:	e0bff403 	ldbu	r2,-48(fp)
   509ac:	10800058 	cmpnei	r2,r2,1
   509b0:	1000011e 	bne	r2,zero,509b8 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   509b4:	004fb4c0 	call	4fb4c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   509b8:	e0bfff17 	ldw	r2,-4(fp)
   509bc:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   509c0:	e03ff615 	stw	zero,-40(fp)
             break;
   509c4:	00000a06 	br	509f0 <OSFlagDel+0x230>
   509c8:	e0bff717 	ldw	r2,-36(fp)
   509cc:	e0bffb15 	stw	r2,-20(fp)
   509d0:	e0bffb17 	ldw	r2,-20(fp)
   509d4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   509d8:	e0bfff17 	ldw	r2,-4(fp)
   509dc:	00c001c4 	movi	r3,7
   509e0:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   509e4:	e0bffd17 	ldw	r2,-12(fp)
   509e8:	e0bff615 	stw	r2,-40(fp)
             break;
   509ec:	0001883a 	nop
    }
    return (pgrp_return);
   509f0:	e0bff617 	ldw	r2,-40(fp)
}
   509f4:	e037883a 	mov	sp,fp
   509f8:	dfc00117 	ldw	ra,4(sp)
   509fc:	df000017 	ldw	fp,0(sp)
   50a00:	dec00204 	addi	sp,sp,8
   50a04:	f800283a 	ret

00050a08 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   50a08:	defff604 	addi	sp,sp,-40
   50a0c:	dfc00915 	stw	ra,36(sp)
   50a10:	df000815 	stw	fp,32(sp)
   50a14:	df000804 	addi	fp,sp,32
   50a18:	e13ffd15 	stw	r4,-12(fp)
   50a1c:	e17ffe15 	stw	r5,-8(fp)
   50a20:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   50a24:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   50a28:	e0bfff17 	ldw	r2,-4(fp)
   50a2c:	1000021e 	bne	r2,zero,50a38 <OSFlagNameGet+0x30>
        return (0);
   50a30:	0005883a 	mov	r2,zero
   50a34:	00003906 	br	50b1c <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   50a38:	e0bffd17 	ldw	r2,-12(fp)
   50a3c:	1000051e 	bne	r2,zero,50a54 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   50a40:	e0bfff17 	ldw	r2,-4(fp)
   50a44:	00c01b84 	movi	r3,110
   50a48:	10c00005 	stb	r3,0(r2)
        return (0);
   50a4c:	0005883a 	mov	r2,zero
   50a50:	00003206 	br	50b1c <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   50a54:	e0bffe17 	ldw	r2,-8(fp)
   50a58:	1000051e 	bne	r2,zero,50a70 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   50a5c:	e0bfff17 	ldw	r2,-4(fp)
   50a60:	00c00304 	movi	r3,12
   50a64:	10c00005 	stb	r3,0(r2)
        return (0);
   50a68:	0005883a 	mov	r2,zero
   50a6c:	00002b06 	br	50b1c <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   50a70:	d0a72b03 	ldbu	r2,-25428(gp)
   50a74:	10803fcc 	andi	r2,r2,255
   50a78:	10000526 	beq	r2,zero,50a90 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   50a7c:	e0bfff17 	ldw	r2,-4(fp)
   50a80:	00c00444 	movi	r3,17
   50a84:	10c00005 	stb	r3,0(r2)
        return (0);
   50a88:	0005883a 	mov	r2,zero
   50a8c:	00002306 	br	50b1c <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50a90:	0005303a 	rdctl	r2,status
   50a94:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50a98:	e0fffc17 	ldw	r3,-16(fp)
   50a9c:	00bfff84 	movi	r2,-2
   50aa0:	1884703a 	and	r2,r3,r2
   50aa4:	1001703a 	wrctl	status,r2
  
  return context;
   50aa8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   50aac:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   50ab0:	e0bffd17 	ldw	r2,-12(fp)
   50ab4:	10800003 	ldbu	r2,0(r2)
   50ab8:	10803fcc 	andi	r2,r2,255
   50abc:	10800160 	cmpeqi	r2,r2,5
   50ac0:	1000091e 	bne	r2,zero,50ae8 <OSFlagNameGet+0xe0>
   50ac4:	e0bff817 	ldw	r2,-32(fp)
   50ac8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50acc:	e0bff917 	ldw	r2,-28(fp)
   50ad0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   50ad4:	e0bfff17 	ldw	r2,-4(fp)
   50ad8:	00c00044 	movi	r3,1
   50adc:	10c00005 	stb	r3,0(r2)
        return (0);
   50ae0:	0005883a 	mov	r2,zero
   50ae4:	00000d06 	br	50b1c <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   50ae8:	e0bffd17 	ldw	r2,-12(fp)
   50aec:	10800284 	addi	r2,r2,10
   50af0:	100b883a 	mov	r5,r2
   50af4:	e13ffe17 	ldw	r4,-8(fp)
   50af8:	004fc900 	call	4fc90 <OS_StrCopy>
   50afc:	e0bffb05 	stb	r2,-20(fp)
   50b00:	e0bff817 	ldw	r2,-32(fp)
   50b04:	e0bffa15 	stw	r2,-24(fp)
   50b08:	e0bffa17 	ldw	r2,-24(fp)
   50b0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   50b10:	e0bfff17 	ldw	r2,-4(fp)
   50b14:	10000005 	stb	zero,0(r2)
    return (len);
   50b18:	e0bffb03 	ldbu	r2,-20(fp)
}
   50b1c:	e037883a 	mov	sp,fp
   50b20:	dfc00117 	ldw	ra,4(sp)
   50b24:	df000017 	ldw	fp,0(sp)
   50b28:	dec00204 	addi	sp,sp,8
   50b2c:	f800283a 	ret

00050b30 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   50b30:	defff504 	addi	sp,sp,-44
   50b34:	dfc00a15 	stw	ra,40(sp)
   50b38:	df000915 	stw	fp,36(sp)
   50b3c:	df000904 	addi	fp,sp,36
   50b40:	e13ffd15 	stw	r4,-12(fp)
   50b44:	e17ffe15 	stw	r5,-8(fp)
   50b48:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   50b4c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   50b50:	e0bfff17 	ldw	r2,-4(fp)
   50b54:	10004326 	beq	r2,zero,50c64 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   50b58:	e0bffd17 	ldw	r2,-12(fp)
   50b5c:	1000041e 	bne	r2,zero,50b70 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   50b60:	e0bfff17 	ldw	r2,-4(fp)
   50b64:	00c01b84 	movi	r3,110
   50b68:	10c00005 	stb	r3,0(r2)
        return;
   50b6c:	00003e06 	br	50c68 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   50b70:	e0bffe17 	ldw	r2,-8(fp)
   50b74:	1000041e 	bne	r2,zero,50b88 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   50b78:	e0bfff17 	ldw	r2,-4(fp)
   50b7c:	00c00304 	movi	r3,12
   50b80:	10c00005 	stb	r3,0(r2)
        return;
   50b84:	00003806 	br	50c68 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   50b88:	d0a72b03 	ldbu	r2,-25428(gp)
   50b8c:	10803fcc 	andi	r2,r2,255
   50b90:	10000426 	beq	r2,zero,50ba4 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   50b94:	e0bfff17 	ldw	r2,-4(fp)
   50b98:	00c00484 	movi	r3,18
   50b9c:	10c00005 	stb	r3,0(r2)
        return;
   50ba0:	00003106 	br	50c68 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50ba4:	0005303a 	rdctl	r2,status
   50ba8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50bac:	e0fffc17 	ldw	r3,-16(fp)
   50bb0:	00bfff84 	movi	r2,-2
   50bb4:	1884703a 	and	r2,r3,r2
   50bb8:	1001703a 	wrctl	status,r2
  
  return context;
   50bbc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   50bc0:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   50bc4:	e0bffd17 	ldw	r2,-12(fp)
   50bc8:	10800003 	ldbu	r2,0(r2)
   50bcc:	10803fcc 	andi	r2,r2,255
   50bd0:	10800160 	cmpeqi	r2,r2,5
   50bd4:	1000081e 	bne	r2,zero,50bf8 <OSFlagNameSet+0xc8>
   50bd8:	e0bff717 	ldw	r2,-36(fp)
   50bdc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50be0:	e0bff817 	ldw	r2,-32(fp)
   50be4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   50be8:	e0bfff17 	ldw	r2,-4(fp)
   50bec:	00c00044 	movi	r3,1
   50bf0:	10c00005 	stb	r3,0(r2)
        return;
   50bf4:	00001c06 	br	50c68 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   50bf8:	e13ffe17 	ldw	r4,-8(fp)
   50bfc:	004fd040 	call	4fd04 <OS_StrLen>
   50c00:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   50c04:	e0bffa03 	ldbu	r2,-24(fp)
   50c08:	10800830 	cmpltui	r2,r2,32
   50c0c:	1000081e 	bne	r2,zero,50c30 <OSFlagNameSet+0x100>
   50c10:	e0bff717 	ldw	r2,-36(fp)
   50c14:	e0bff915 	stw	r2,-28(fp)
   50c18:	e0bff917 	ldw	r2,-28(fp)
   50c1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   50c20:	e0bfff17 	ldw	r2,-4(fp)
   50c24:	00c01cc4 	movi	r3,115
   50c28:	10c00005 	stb	r3,0(r2)
        return;
   50c2c:	00000e06 	br	50c68 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   50c30:	e0bffd17 	ldw	r2,-12(fp)
   50c34:	10800284 	addi	r2,r2,10
   50c38:	e17ffe17 	ldw	r5,-8(fp)
   50c3c:	1009883a 	mov	r4,r2
   50c40:	004fc900 	call	4fc90 <OS_StrCopy>
   50c44:	e0bff717 	ldw	r2,-36(fp)
   50c48:	e0bffb15 	stw	r2,-20(fp)
   50c4c:	e0bffb17 	ldw	r2,-20(fp)
   50c50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   50c54:	e0bfff17 	ldw	r2,-4(fp)
   50c58:	10000005 	stb	zero,0(r2)
    return;
   50c5c:	0001883a 	nop
   50c60:	00000106 	br	50c68 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   50c64:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   50c68:	e037883a 	mov	sp,fp
   50c6c:	dfc00117 	ldw	ra,4(sp)
   50c70:	df000017 	ldw	fp,0(sp)
   50c74:	dec00204 	addi	sp,sp,8
   50c78:	f800283a 	ret

00050c7c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   50c7c:	deffe104 	addi	sp,sp,-124
   50c80:	dfc01e15 	stw	ra,120(sp)
   50c84:	df001d15 	stw	fp,116(sp)
   50c88:	df001d04 	addi	fp,sp,116
   50c8c:	e13ffc15 	stw	r4,-16(fp)
   50c90:	2809883a 	mov	r4,r5
   50c94:	3007883a 	mov	r3,r6
   50c98:	3805883a 	mov	r2,r7
   50c9c:	e13ffd0d 	sth	r4,-12(fp)
   50ca0:	e0fffe05 	stb	r3,-8(fp)
   50ca4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   50ca8:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   50cac:	e0800217 	ldw	r2,8(fp)
   50cb0:	1000021e 	bne	r2,zero,50cbc <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   50cb4:	0005883a 	mov	r2,zero
   50cb8:	00015906 	br	51220 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   50cbc:	e0bffc17 	ldw	r2,-16(fp)
   50cc0:	1000051e 	bne	r2,zero,50cd8 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   50cc4:	e0800217 	ldw	r2,8(fp)
   50cc8:	00c01b84 	movi	r3,110
   50ccc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   50cd0:	0005883a 	mov	r2,zero
   50cd4:	00015206 	br	51220 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   50cd8:	d0a72b03 	ldbu	r2,-25428(gp)
   50cdc:	10803fcc 	andi	r2,r2,255
   50ce0:	10000526 	beq	r2,zero,50cf8 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   50ce4:	e0800217 	ldw	r2,8(fp)
   50ce8:	00c00084 	movi	r3,2
   50cec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   50cf0:	0005883a 	mov	r2,zero
   50cf4:	00014a06 	br	51220 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   50cf8:	d0a71d03 	ldbu	r2,-25484(gp)
   50cfc:	10803fcc 	andi	r2,r2,255
   50d00:	10000526 	beq	r2,zero,50d18 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   50d04:	e0800217 	ldw	r2,8(fp)
   50d08:	00c00344 	movi	r3,13
   50d0c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   50d10:	0005883a 	mov	r2,zero
   50d14:	00014206 	br	51220 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   50d18:	e0bffc17 	ldw	r2,-16(fp)
   50d1c:	10800003 	ldbu	r2,0(r2)
   50d20:	10803fcc 	andi	r2,r2,255
   50d24:	10800160 	cmpeqi	r2,r2,5
   50d28:	1000051e 	bne	r2,zero,50d40 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   50d2c:	e0800217 	ldw	r2,8(fp)
   50d30:	00c00044 	movi	r3,1
   50d34:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   50d38:	0005883a 	mov	r2,zero
   50d3c:	00013806 	br	51220 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   50d40:	e0fffe03 	ldbu	r3,-8(fp)
   50d44:	00bfe004 	movi	r2,-128
   50d48:	1884703a 	and	r2,r3,r2
   50d4c:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   50d50:	e0bfe603 	ldbu	r2,-104(fp)
   50d54:	10000626 	beq	r2,zero,50d70 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   50d58:	e0bffe03 	ldbu	r2,-8(fp)
   50d5c:	10801fcc 	andi	r2,r2,127
   50d60:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   50d64:	00800044 	movi	r2,1
   50d68:	e0bfe405 	stb	r2,-112(fp)
   50d6c:	00000106 	br	50d74 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   50d70:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50d74:	0005303a 	rdctl	r2,status
   50d78:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50d7c:	e0fff617 	ldw	r3,-40(fp)
   50d80:	00bfff84 	movi	r2,-2
   50d84:	1884703a 	and	r2,r3,r2
   50d88:	1001703a 	wrctl	status,r2
  
  return context;
   50d8c:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   50d90:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   50d94:	e0bffe03 	ldbu	r2,-8(fp)
   50d98:	10c00060 	cmpeqi	r3,r2,1
   50d9c:	1800921e 	bne	r3,zero,50fe8 <OSFlagPend+0x36c>
   50da0:	10c00088 	cmpgei	r3,r2,2
   50da4:	1800021e 	bne	r3,zero,50db0 <OSFlagPend+0x134>
   50da8:	10006126 	beq	r2,zero,50f30 <OSFlagPend+0x2b4>
   50dac:	0000bb06 	br	5109c <OSFlagPend+0x420>
   50db0:	10c000a0 	cmpeqi	r3,r2,2
   50db4:	1800031e 	bne	r3,zero,50dc4 <OSFlagPend+0x148>
   50db8:	108000e0 	cmpeqi	r2,r2,3
   50dbc:	10002f1e 	bne	r2,zero,50e7c <OSFlagPend+0x200>
   50dc0:	0000b606 	br	5109c <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   50dc4:	e0bffc17 	ldw	r2,-16(fp)
   50dc8:	10c0020b 	ldhu	r3,8(r2)
   50dcc:	e0bffd0b 	ldhu	r2,-12(fp)
   50dd0:	1884703a 	and	r2,r3,r2
   50dd4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   50dd8:	e0ffe80b 	ldhu	r3,-96(fp)
   50ddc:	e0bffd0b 	ldhu	r2,-12(fp)
   50de0:	1880171e 	bne	r3,r2,50e40 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   50de4:	e0bfe403 	ldbu	r2,-112(fp)
   50de8:	10800058 	cmpnei	r2,r2,1
   50dec:	1000091e 	bne	r2,zero,50e14 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   50df0:	e0bffc17 	ldw	r2,-16(fp)
   50df4:	1080020b 	ldhu	r2,8(r2)
   50df8:	1007883a 	mov	r3,r2
   50dfc:	e0bfe80b 	ldhu	r2,-96(fp)
   50e00:	0084303a 	nor	r2,zero,r2
   50e04:	1884703a 	and	r2,r3,r2
   50e08:	1007883a 	mov	r3,r2
   50e0c:	e0bffc17 	ldw	r2,-16(fp)
   50e10:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   50e14:	d0a72c17 	ldw	r2,-25424(gp)
   50e18:	e0ffe80b 	ldhu	r3,-96(fp)
   50e1c:	10c00b0d 	sth	r3,44(r2)
   50e20:	e0bfe517 	ldw	r2,-108(fp)
   50e24:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50e28:	e0bfe717 	ldw	r2,-100(fp)
   50e2c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   50e30:	e0800217 	ldw	r2,8(fp)
   50e34:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   50e38:	e0bfe80b 	ldhu	r2,-96(fp)
   50e3c:	0000f806 	br	51220 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   50e40:	e13ffd0b 	ldhu	r4,-12(fp)
   50e44:	e17ffe03 	ldbu	r5,-8(fp)
   50e48:	e0bfff0b 	ldhu	r2,-4(fp)
   50e4c:	e0fff704 	addi	r3,fp,-36
   50e50:	d8800015 	stw	r2,0(sp)
   50e54:	280f883a 	mov	r7,r5
   50e58:	200d883a 	mov	r6,r4
   50e5c:	180b883a 	mov	r5,r3
   50e60:	e13ffc17 	ldw	r4,-16(fp)
   50e64:	00516ec0 	call	516ec <OS_FlagBlock>
   50e68:	e0bfe517 	ldw	r2,-108(fp)
   50e6c:	e0bfe915 	stw	r2,-92(fp)
   50e70:	e0bfe917 	ldw	r2,-92(fp)
   50e74:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   50e78:	00009206 	br	510c4 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   50e7c:	e0bffc17 	ldw	r2,-16(fp)
   50e80:	10c0020b 	ldhu	r3,8(r2)
   50e84:	e0bffd0b 	ldhu	r2,-12(fp)
   50e88:	1884703a 	and	r2,r3,r2
   50e8c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   50e90:	e0bfe80b 	ldhu	r2,-96(fp)
   50e94:	10001726 	beq	r2,zero,50ef4 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   50e98:	e0bfe403 	ldbu	r2,-112(fp)
   50e9c:	10800058 	cmpnei	r2,r2,1
   50ea0:	1000091e 	bne	r2,zero,50ec8 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   50ea4:	e0bffc17 	ldw	r2,-16(fp)
   50ea8:	1080020b 	ldhu	r2,8(r2)
   50eac:	1007883a 	mov	r3,r2
   50eb0:	e0bfe80b 	ldhu	r2,-96(fp)
   50eb4:	0084303a 	nor	r2,zero,r2
   50eb8:	1884703a 	and	r2,r3,r2
   50ebc:	1007883a 	mov	r3,r2
   50ec0:	e0bffc17 	ldw	r2,-16(fp)
   50ec4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   50ec8:	d0a72c17 	ldw	r2,-25424(gp)
   50ecc:	e0ffe80b 	ldhu	r3,-96(fp)
   50ed0:	10c00b0d 	sth	r3,44(r2)
   50ed4:	e0bfe517 	ldw	r2,-108(fp)
   50ed8:	e0bfea15 	stw	r2,-88(fp)
   50edc:	e0bfea17 	ldw	r2,-88(fp)
   50ee0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   50ee4:	e0800217 	ldw	r2,8(fp)
   50ee8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   50eec:	e0bfe80b 	ldhu	r2,-96(fp)
   50ef0:	0000cb06 	br	51220 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   50ef4:	e13ffd0b 	ldhu	r4,-12(fp)
   50ef8:	e17ffe03 	ldbu	r5,-8(fp)
   50efc:	e0bfff0b 	ldhu	r2,-4(fp)
   50f00:	e0fff704 	addi	r3,fp,-36
   50f04:	d8800015 	stw	r2,0(sp)
   50f08:	280f883a 	mov	r7,r5
   50f0c:	200d883a 	mov	r6,r4
   50f10:	180b883a 	mov	r5,r3
   50f14:	e13ffc17 	ldw	r4,-16(fp)
   50f18:	00516ec0 	call	516ec <OS_FlagBlock>
   50f1c:	e0bfe517 	ldw	r2,-108(fp)
   50f20:	e0bfeb15 	stw	r2,-84(fp)
   50f24:	e0bfeb17 	ldw	r2,-84(fp)
   50f28:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   50f2c:	00006506 	br	510c4 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   50f30:	e0bffc17 	ldw	r2,-16(fp)
   50f34:	1080020b 	ldhu	r2,8(r2)
   50f38:	0084303a 	nor	r2,zero,r2
   50f3c:	1007883a 	mov	r3,r2
   50f40:	e0bffd0b 	ldhu	r2,-12(fp)
   50f44:	1884703a 	and	r2,r3,r2
   50f48:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   50f4c:	e0ffe80b 	ldhu	r3,-96(fp)
   50f50:	e0bffd0b 	ldhu	r2,-12(fp)
   50f54:	1880151e 	bne	r3,r2,50fac <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   50f58:	e0bfe403 	ldbu	r2,-112(fp)
   50f5c:	10800058 	cmpnei	r2,r2,1
   50f60:	1000071e 	bne	r2,zero,50f80 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   50f64:	e0bffc17 	ldw	r2,-16(fp)
   50f68:	10c0020b 	ldhu	r3,8(r2)
   50f6c:	e0bfe80b 	ldhu	r2,-96(fp)
   50f70:	1884b03a 	or	r2,r3,r2
   50f74:	1007883a 	mov	r3,r2
   50f78:	e0bffc17 	ldw	r2,-16(fp)
   50f7c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   50f80:	d0a72c17 	ldw	r2,-25424(gp)
   50f84:	e0ffe80b 	ldhu	r3,-96(fp)
   50f88:	10c00b0d 	sth	r3,44(r2)
   50f8c:	e0bfe517 	ldw	r2,-108(fp)
   50f90:	e0bfec15 	stw	r2,-80(fp)
   50f94:	e0bfec17 	ldw	r2,-80(fp)
   50f98:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   50f9c:	e0800217 	ldw	r2,8(fp)
   50fa0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   50fa4:	e0bfe80b 	ldhu	r2,-96(fp)
   50fa8:	00009d06 	br	51220 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   50fac:	e13ffd0b 	ldhu	r4,-12(fp)
   50fb0:	e17ffe03 	ldbu	r5,-8(fp)
   50fb4:	e0bfff0b 	ldhu	r2,-4(fp)
   50fb8:	e0fff704 	addi	r3,fp,-36
   50fbc:	d8800015 	stw	r2,0(sp)
   50fc0:	280f883a 	mov	r7,r5
   50fc4:	200d883a 	mov	r6,r4
   50fc8:	180b883a 	mov	r5,r3
   50fcc:	e13ffc17 	ldw	r4,-16(fp)
   50fd0:	00516ec0 	call	516ec <OS_FlagBlock>
   50fd4:	e0bfe517 	ldw	r2,-108(fp)
   50fd8:	e0bfed15 	stw	r2,-76(fp)
   50fdc:	e0bfed17 	ldw	r2,-76(fp)
   50fe0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   50fe4:	00003706 	br	510c4 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   50fe8:	e0bffc17 	ldw	r2,-16(fp)
   50fec:	1080020b 	ldhu	r2,8(r2)
   50ff0:	0084303a 	nor	r2,zero,r2
   50ff4:	1007883a 	mov	r3,r2
   50ff8:	e0bffd0b 	ldhu	r2,-12(fp)
   50ffc:	1884703a 	and	r2,r3,r2
   51000:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   51004:	e0bfe80b 	ldhu	r2,-96(fp)
   51008:	10001526 	beq	r2,zero,51060 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   5100c:	e0bfe403 	ldbu	r2,-112(fp)
   51010:	10800058 	cmpnei	r2,r2,1
   51014:	1000071e 	bne	r2,zero,51034 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   51018:	e0bffc17 	ldw	r2,-16(fp)
   5101c:	10c0020b 	ldhu	r3,8(r2)
   51020:	e0bfe80b 	ldhu	r2,-96(fp)
   51024:	1884b03a 	or	r2,r3,r2
   51028:	1007883a 	mov	r3,r2
   5102c:	e0bffc17 	ldw	r2,-16(fp)
   51030:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   51034:	d0a72c17 	ldw	r2,-25424(gp)
   51038:	e0ffe80b 	ldhu	r3,-96(fp)
   5103c:	10c00b0d 	sth	r3,44(r2)
   51040:	e0bfe517 	ldw	r2,-108(fp)
   51044:	e0bfee15 	stw	r2,-72(fp)
   51048:	e0bfee17 	ldw	r2,-72(fp)
   5104c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   51050:	e0800217 	ldw	r2,8(fp)
   51054:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   51058:	e0bfe80b 	ldhu	r2,-96(fp)
   5105c:	00007006 	br	51220 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   51060:	e13ffd0b 	ldhu	r4,-12(fp)
   51064:	e17ffe03 	ldbu	r5,-8(fp)
   51068:	e0bfff0b 	ldhu	r2,-4(fp)
   5106c:	e0fff704 	addi	r3,fp,-36
   51070:	d8800015 	stw	r2,0(sp)
   51074:	280f883a 	mov	r7,r5
   51078:	200d883a 	mov	r6,r4
   5107c:	180b883a 	mov	r5,r3
   51080:	e13ffc17 	ldw	r4,-16(fp)
   51084:	00516ec0 	call	516ec <OS_FlagBlock>
   51088:	e0bfe517 	ldw	r2,-108(fp)
   5108c:	e0bfef15 	stw	r2,-68(fp)
   51090:	e0bfef17 	ldw	r2,-68(fp)
   51094:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   51098:	00000a06 	br	510c4 <OSFlagPend+0x448>
   5109c:	e0bfe517 	ldw	r2,-108(fp)
   510a0:	e0bff015 	stw	r2,-64(fp)
   510a4:	e0bff017 	ldw	r2,-64(fp)
   510a8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   510ac:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   510b0:	e0800217 	ldw	r2,8(fp)
   510b4:	00c01bc4 	movi	r3,111
   510b8:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   510bc:	e0bfe80b 	ldhu	r2,-96(fp)
   510c0:	00005706 	br	51220 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   510c4:	004fb4c0 	call	4fb4c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   510c8:	0005303a 	rdctl	r2,status
   510cc:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   510d0:	e0fff117 	ldw	r3,-60(fp)
   510d4:	00bfff84 	movi	r2,-2
   510d8:	1884703a 	and	r2,r3,r2
   510dc:	1001703a 	wrctl	status,r2
  
  return context;
   510e0:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   510e4:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   510e8:	d0a72c17 	ldw	r2,-25424(gp)
   510ec:	10800c43 	ldbu	r2,49(r2)
   510f0:	10803fcc 	andi	r2,r2,255
   510f4:	10001c26 	beq	r2,zero,51168 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   510f8:	d0a72c17 	ldw	r2,-25424(gp)
   510fc:	10800c43 	ldbu	r2,49(r2)
   51100:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   51104:	d0a72c17 	ldw	r2,-25424(gp)
   51108:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   5110c:	e0bff704 	addi	r2,fp,-36
   51110:	1009883a 	mov	r4,r2
   51114:	0051a200 	call	51a20 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   51118:	d0a72c17 	ldw	r2,-25424(gp)
   5111c:	10000c05 	stb	zero,48(r2)
   51120:	e0bfe517 	ldw	r2,-108(fp)
   51124:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51128:	e0bff217 	ldw	r2,-56(fp)
   5112c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   51130:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   51134:	e0bff303 	ldbu	r2,-52(fp)
   51138:	108000a0 	cmpeqi	r2,r2,2
   5113c:	10000426 	beq	r2,zero,51150 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   51140:	e0800217 	ldw	r2,8(fp)
   51144:	00c00384 	movi	r3,14
   51148:	10c00005 	stb	r3,0(r2)
                 break;
   5114c:	00000406 	br	51160 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   51150:	e0800217 	ldw	r2,8(fp)
   51154:	00c00284 	movi	r3,10
   51158:	10c00005 	stb	r3,0(r2)
                 break;
   5115c:	0001883a 	nop
        }
        return (flags_rdy);
   51160:	e0bfe80b 	ldhu	r2,-96(fp)
   51164:	00002e06 	br	51220 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   51168:	d0a72c17 	ldw	r2,-25424(gp)
   5116c:	10800b0b 	ldhu	r2,44(r2)
   51170:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   51174:	e0bfe403 	ldbu	r2,-112(fp)
   51178:	10800058 	cmpnei	r2,r2,1
   5117c:	1000211e 	bne	r2,zero,51204 <OSFlagPend+0x588>
        switch (wait_type) {
   51180:	e0bffe03 	ldbu	r2,-8(fp)
   51184:	10001616 	blt	r2,zero,511e0 <OSFlagPend+0x564>
   51188:	10c00090 	cmplti	r3,r2,2
   5118c:	18000c1e 	bne	r3,zero,511c0 <OSFlagPend+0x544>
   51190:	10800108 	cmpgei	r2,r2,4
   51194:	1000121e 	bne	r2,zero,511e0 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   51198:	e0bffc17 	ldw	r2,-16(fp)
   5119c:	1080020b 	ldhu	r2,8(r2)
   511a0:	1007883a 	mov	r3,r2
   511a4:	e0bfe80b 	ldhu	r2,-96(fp)
   511a8:	0084303a 	nor	r2,zero,r2
   511ac:	1884703a 	and	r2,r3,r2
   511b0:	1007883a 	mov	r3,r2
   511b4:	e0bffc17 	ldw	r2,-16(fp)
   511b8:	10c0020d 	sth	r3,8(r2)
                 break;
   511bc:	00001106 	br	51204 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   511c0:	e0bffc17 	ldw	r2,-16(fp)
   511c4:	10c0020b 	ldhu	r3,8(r2)
   511c8:	e0bfe80b 	ldhu	r2,-96(fp)
   511cc:	1884b03a 	or	r2,r3,r2
   511d0:	1007883a 	mov	r3,r2
   511d4:	e0bffc17 	ldw	r2,-16(fp)
   511d8:	10c0020d 	sth	r3,8(r2)
                 break;
   511dc:	00000906 	br	51204 <OSFlagPend+0x588>
   511e0:	e0bfe517 	ldw	r2,-108(fp)
   511e4:	e0bff415 	stw	r2,-48(fp)
   511e8:	e0bff417 	ldw	r2,-48(fp)
   511ec:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   511f0:	e0800217 	ldw	r2,8(fp)
   511f4:	00c01bc4 	movi	r3,111
   511f8:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   511fc:	0005883a 	mov	r2,zero
   51200:	00000706 	br	51220 <OSFlagPend+0x5a4>
   51204:	e0bfe517 	ldw	r2,-108(fp)
   51208:	e0bff515 	stw	r2,-44(fp)
   5120c:	e0bff517 	ldw	r2,-44(fp)
   51210:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   51214:	e0800217 	ldw	r2,8(fp)
   51218:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   5121c:	e0bfe80b 	ldhu	r2,-96(fp)
}
   51220:	e037883a 	mov	sp,fp
   51224:	dfc00117 	ldw	ra,4(sp)
   51228:	df000017 	ldw	fp,0(sp)
   5122c:	dec00204 	addi	sp,sp,8
   51230:	f800283a 	ret

00051234 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   51234:	defffb04 	addi	sp,sp,-20
   51238:	df000415 	stw	fp,16(sp)
   5123c:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   51240:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51244:	0005303a 	rdctl	r2,status
   51248:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5124c:	e0fffe17 	ldw	r3,-8(fp)
   51250:	00bfff84 	movi	r2,-2
   51254:	1884703a 	and	r2,r3,r2
   51258:	1001703a 	wrctl	status,r2
  
  return context;
   5125c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   51260:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   51264:	d0a72c17 	ldw	r2,-25424(gp)
   51268:	10800b0b 	ldhu	r2,44(r2)
   5126c:	e0bffd0d 	sth	r2,-12(fp)
   51270:	e0bffc17 	ldw	r2,-16(fp)
   51274:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51278:	e0bfff17 	ldw	r2,-4(fp)
   5127c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   51280:	e0bffd0b 	ldhu	r2,-12(fp)
}
   51284:	e037883a 	mov	sp,fp
   51288:	df000017 	ldw	fp,0(sp)
   5128c:	dec00104 	addi	sp,sp,4
   51290:	f800283a 	ret

00051294 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   51294:	deffef04 	addi	sp,sp,-68
   51298:	dfc01015 	stw	ra,64(sp)
   5129c:	df000f15 	stw	fp,60(sp)
   512a0:	df000f04 	addi	fp,sp,60
   512a4:	e13ffc15 	stw	r4,-16(fp)
   512a8:	2807883a 	mov	r3,r5
   512ac:	3005883a 	mov	r2,r6
   512b0:	e1ffff15 	stw	r7,-4(fp)
   512b4:	e0fffd0d 	sth	r3,-12(fp)
   512b8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   512bc:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   512c0:	e0bfff17 	ldw	r2,-4(fp)
   512c4:	1000021e 	bne	r2,zero,512d0 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   512c8:	0005883a 	mov	r2,zero
   512cc:	0000d106 	br	51614 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   512d0:	e0bffc17 	ldw	r2,-16(fp)
   512d4:	1000051e 	bne	r2,zero,512ec <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   512d8:	e0bfff17 	ldw	r2,-4(fp)
   512dc:	00c01b84 	movi	r3,110
   512e0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   512e4:	0005883a 	mov	r2,zero
   512e8:	0000ca06 	br	51614 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   512ec:	e0bffc17 	ldw	r2,-16(fp)
   512f0:	10800003 	ldbu	r2,0(r2)
   512f4:	10803fcc 	andi	r2,r2,255
   512f8:	10800160 	cmpeqi	r2,r2,5
   512fc:	1000051e 	bne	r2,zero,51314 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   51300:	e0bfff17 	ldw	r2,-4(fp)
   51304:	00c00044 	movi	r3,1
   51308:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   5130c:	0005883a 	mov	r2,zero
   51310:	0000c006 	br	51614 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51314:	0005303a 	rdctl	r2,status
   51318:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5131c:	e0fffb17 	ldw	r3,-20(fp)
   51320:	00bfff84 	movi	r2,-2
   51324:	1884703a 	and	r2,r3,r2
   51328:	1001703a 	wrctl	status,r2
  
  return context;
   5132c:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   51330:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   51334:	e0bffe03 	ldbu	r2,-8(fp)
   51338:	10000326 	beq	r2,zero,51348 <OSFlagPost+0xb4>
   5133c:	10800060 	cmpeqi	r2,r2,1
   51340:	10000b1e 	bne	r2,zero,51370 <OSFlagPost+0xdc>
   51344:	00001206 	br	51390 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   51348:	e0bffc17 	ldw	r2,-16(fp)
   5134c:	1080020b 	ldhu	r2,8(r2)
   51350:	1007883a 	mov	r3,r2
   51354:	e0bffd0b 	ldhu	r2,-12(fp)
   51358:	0084303a 	nor	r2,zero,r2
   5135c:	1884703a 	and	r2,r3,r2
   51360:	1007883a 	mov	r3,r2
   51364:	e0bffc17 	ldw	r2,-16(fp)
   51368:	10c0020d 	sth	r3,8(r2)
             break;
   5136c:	00001106 	br	513b4 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   51370:	e0bffc17 	ldw	r2,-16(fp)
   51374:	10c0020b 	ldhu	r3,8(r2)
   51378:	e0bffd0b 	ldhu	r2,-12(fp)
   5137c:	1884b03a 	or	r2,r3,r2
   51380:	1007883a 	mov	r3,r2
   51384:	e0bffc17 	ldw	r2,-16(fp)
   51388:	10c0020d 	sth	r3,8(r2)
             break;
   5138c:	00000906 	br	513b4 <OSFlagPost+0x120>
   51390:	e0bff317 	ldw	r2,-52(fp)
   51394:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51398:	e0bff417 	ldw	r2,-48(fp)
   5139c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   513a0:	e0bfff17 	ldw	r2,-4(fp)
   513a4:	00c01c44 	movi	r3,113
   513a8:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   513ac:	0005883a 	mov	r2,zero
   513b0:	00009806 	br	51614 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   513b4:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   513b8:	e0bffc17 	ldw	r2,-16(fp)
   513bc:	10800117 	ldw	r2,4(r2)
   513c0:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   513c4:	00007706 	br	515a4 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   513c8:	e0bff117 	ldw	r2,-60(fp)
   513cc:	10800483 	ldbu	r2,18(r2)
   513d0:	10803fcc 	andi	r2,r2,255
   513d4:	10c00060 	cmpeqi	r3,r2,1
   513d8:	18004a1e 	bne	r3,zero,51504 <OSFlagPost+0x270>
   513dc:	10c00088 	cmpgei	r3,r2,2
   513e0:	1800021e 	bne	r3,zero,513ec <OSFlagPost+0x158>
   513e4:	10002f26 	beq	r2,zero,514a4 <OSFlagPost+0x210>
   513e8:	00005b06 	br	51558 <OSFlagPost+0x2c4>
   513ec:	10c000a0 	cmpeqi	r3,r2,2
   513f0:	1800031e 	bne	r3,zero,51400 <OSFlagPost+0x16c>
   513f4:	108000e0 	cmpeqi	r2,r2,3
   513f8:	1000171e 	bne	r2,zero,51458 <OSFlagPost+0x1c4>
   513fc:	00005606 	br	51558 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   51400:	e0bffc17 	ldw	r2,-16(fp)
   51404:	10c0020b 	ldhu	r3,8(r2)
   51408:	e0bff117 	ldw	r2,-60(fp)
   5140c:	1080040b 	ldhu	r2,16(r2)
   51410:	1884703a 	and	r2,r3,r2
   51414:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   51418:	e0bff117 	ldw	r2,-60(fp)
   5141c:	1080040b 	ldhu	r2,16(r2)
   51420:	10ffffcc 	andi	r3,r2,65535
   51424:	e0bff60b 	ldhu	r2,-40(fp)
   51428:	1880541e 	bne	r3,r2,5157c <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   5142c:	e0bff60b 	ldhu	r2,-40(fp)
   51430:	100b883a 	mov	r5,r2
   51434:	e13ff117 	ldw	r4,-60(fp)
   51438:	005192c0 	call	5192c <OS_FlagTaskRdy>
   5143c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   51440:	e0bff683 	ldbu	r2,-38(fp)
   51444:	10800058 	cmpnei	r2,r2,1
   51448:	10004c1e 	bne	r2,zero,5157c <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   5144c:	00800044 	movi	r2,1
   51450:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   51454:	00004906 	br	5157c <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   51458:	e0bffc17 	ldw	r2,-16(fp)
   5145c:	10c0020b 	ldhu	r3,8(r2)
   51460:	e0bff117 	ldw	r2,-60(fp)
   51464:	1080040b 	ldhu	r2,16(r2)
   51468:	1884703a 	and	r2,r3,r2
   5146c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   51470:	e0bff60b 	ldhu	r2,-40(fp)
   51474:	10004326 	beq	r2,zero,51584 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   51478:	e0bff60b 	ldhu	r2,-40(fp)
   5147c:	100b883a 	mov	r5,r2
   51480:	e13ff117 	ldw	r4,-60(fp)
   51484:	005192c0 	call	5192c <OS_FlagTaskRdy>
   51488:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   5148c:	e0bff683 	ldbu	r2,-38(fp)
   51490:	10800058 	cmpnei	r2,r2,1
   51494:	10003b1e 	bne	r2,zero,51584 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   51498:	00800044 	movi	r2,1
   5149c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   514a0:	00003806 	br	51584 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   514a4:	e0bffc17 	ldw	r2,-16(fp)
   514a8:	1080020b 	ldhu	r2,8(r2)
   514ac:	0084303a 	nor	r2,zero,r2
   514b0:	1007883a 	mov	r3,r2
   514b4:	e0bff117 	ldw	r2,-60(fp)
   514b8:	1080040b 	ldhu	r2,16(r2)
   514bc:	1884703a 	and	r2,r3,r2
   514c0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   514c4:	e0bff117 	ldw	r2,-60(fp)
   514c8:	1080040b 	ldhu	r2,16(r2)
   514cc:	10ffffcc 	andi	r3,r2,65535
   514d0:	e0bff60b 	ldhu	r2,-40(fp)
   514d4:	18802d1e 	bne	r3,r2,5158c <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   514d8:	e0bff60b 	ldhu	r2,-40(fp)
   514dc:	100b883a 	mov	r5,r2
   514e0:	e13ff117 	ldw	r4,-60(fp)
   514e4:	005192c0 	call	5192c <OS_FlagTaskRdy>
   514e8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   514ec:	e0bff683 	ldbu	r2,-38(fp)
   514f0:	10800058 	cmpnei	r2,r2,1
   514f4:	1000251e 	bne	r2,zero,5158c <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   514f8:	00800044 	movi	r2,1
   514fc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   51500:	00002206 	br	5158c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   51504:	e0bffc17 	ldw	r2,-16(fp)
   51508:	1080020b 	ldhu	r2,8(r2)
   5150c:	0084303a 	nor	r2,zero,r2
   51510:	1007883a 	mov	r3,r2
   51514:	e0bff117 	ldw	r2,-60(fp)
   51518:	1080040b 	ldhu	r2,16(r2)
   5151c:	1884703a 	and	r2,r3,r2
   51520:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   51524:	e0bff60b 	ldhu	r2,-40(fp)
   51528:	10001a26 	beq	r2,zero,51594 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   5152c:	e0bff60b 	ldhu	r2,-40(fp)
   51530:	100b883a 	mov	r5,r2
   51534:	e13ff117 	ldw	r4,-60(fp)
   51538:	005192c0 	call	5192c <OS_FlagTaskRdy>
   5153c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   51540:	e0bff683 	ldbu	r2,-38(fp)
   51544:	10800058 	cmpnei	r2,r2,1
   51548:	1000121e 	bne	r2,zero,51594 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   5154c:	00800044 	movi	r2,1
   51550:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   51554:	00000f06 	br	51594 <OSFlagPost+0x300>
   51558:	e0bff317 	ldw	r2,-52(fp)
   5155c:	e0bff515 	stw	r2,-44(fp)
   51560:	e0bff517 	ldw	r2,-44(fp)
   51564:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   51568:	e0bfff17 	ldw	r2,-4(fp)
   5156c:	00c01bc4 	movi	r3,111
   51570:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   51574:	0005883a 	mov	r2,zero
   51578:	00002606 	br	51614 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   5157c:	0001883a 	nop
   51580:	00000506 	br	51598 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   51584:	0001883a 	nop
   51588:	00000306 	br	51598 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   5158c:	0001883a 	nop
   51590:	00000106 	br	51598 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   51594:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   51598:	e0bff117 	ldw	r2,-60(fp)
   5159c:	10800017 	ldw	r2,0(r2)
   515a0:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   515a4:	e0bff117 	ldw	r2,-60(fp)
   515a8:	103f871e 	bne	r2,zero,513c8 <__alt_data_end+0xfffebbc8>
   515ac:	e0bff317 	ldw	r2,-52(fp)
   515b0:	e0bff715 	stw	r2,-36(fp)
   515b4:	e0bff717 	ldw	r2,-36(fp)
   515b8:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   515bc:	e0bff203 	ldbu	r2,-56(fp)
   515c0:	10800058 	cmpnei	r2,r2,1
   515c4:	1000011e 	bne	r2,zero,515cc <OSFlagPost+0x338>
        OS_Sched();
   515c8:	004fb4c0 	call	4fb4c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   515cc:	0005303a 	rdctl	r2,status
   515d0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   515d4:	e0fffa17 	ldw	r3,-24(fp)
   515d8:	00bfff84 	movi	r2,-2
   515dc:	1884703a 	and	r2,r3,r2
   515e0:	1001703a 	wrctl	status,r2
  
  return context;
   515e4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   515e8:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   515ec:	e0bffc17 	ldw	r2,-16(fp)
   515f0:	1080020b 	ldhu	r2,8(r2)
   515f4:	e0bff90d 	sth	r2,-28(fp)
   515f8:	e0bff317 	ldw	r2,-52(fp)
   515fc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51600:	e0bff817 	ldw	r2,-32(fp)
   51604:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   51608:	e0bfff17 	ldw	r2,-4(fp)
   5160c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   51610:	e0bff90b 	ldhu	r2,-28(fp)
}
   51614:	e037883a 	mov	sp,fp
   51618:	dfc00117 	ldw	ra,4(sp)
   5161c:	df000017 	ldw	fp,0(sp)
   51620:	dec00204 	addi	sp,sp,8
   51624:	f800283a 	ret

00051628 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   51628:	defff904 	addi	sp,sp,-28
   5162c:	df000615 	stw	fp,24(sp)
   51630:	df000604 	addi	fp,sp,24
   51634:	e13ffe15 	stw	r4,-8(fp)
   51638:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   5163c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   51640:	e0bfff17 	ldw	r2,-4(fp)
   51644:	1000021e 	bne	r2,zero,51650 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   51648:	0005883a 	mov	r2,zero
   5164c:	00002306 	br	516dc <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   51650:	e0bffe17 	ldw	r2,-8(fp)
   51654:	1000051e 	bne	r2,zero,5166c <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   51658:	e0bfff17 	ldw	r2,-4(fp)
   5165c:	00c01b84 	movi	r3,110
   51660:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   51664:	0005883a 	mov	r2,zero
   51668:	00001c06 	br	516dc <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   5166c:	e0bffe17 	ldw	r2,-8(fp)
   51670:	10800003 	ldbu	r2,0(r2)
   51674:	10803fcc 	andi	r2,r2,255
   51678:	10800160 	cmpeqi	r2,r2,5
   5167c:	1000051e 	bne	r2,zero,51694 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   51680:	e0bfff17 	ldw	r2,-4(fp)
   51684:	00c00044 	movi	r3,1
   51688:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   5168c:	0005883a 	mov	r2,zero
   51690:	00001206 	br	516dc <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51694:	0005303a 	rdctl	r2,status
   51698:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5169c:	e0fffc17 	ldw	r3,-16(fp)
   516a0:	00bfff84 	movi	r2,-2
   516a4:	1884703a 	and	r2,r3,r2
   516a8:	1001703a 	wrctl	status,r2
  
  return context;
   516ac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   516b0:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   516b4:	e0bffe17 	ldw	r2,-8(fp)
   516b8:	1080020b 	ldhu	r2,8(r2)
   516bc:	e0bffb0d 	sth	r2,-20(fp)
   516c0:	e0bffa17 	ldw	r2,-24(fp)
   516c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   516c8:	e0bffd17 	ldw	r2,-12(fp)
   516cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   516d0:	e0bfff17 	ldw	r2,-4(fp)
   516d4:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   516d8:	e0bffb0b 	ldhu	r2,-20(fp)
}
   516dc:	e037883a 	mov	sp,fp
   516e0:	df000017 	ldw	fp,0(sp)
   516e4:	dec00104 	addi	sp,sp,4
   516e8:	f800283a 	ret

000516ec <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   516ec:	defff804 	addi	sp,sp,-32
   516f0:	df000715 	stw	fp,28(sp)
   516f4:	df000704 	addi	fp,sp,28
   516f8:	e13ffb15 	stw	r4,-20(fp)
   516fc:	e17ffc15 	stw	r5,-16(fp)
   51700:	3009883a 	mov	r4,r6
   51704:	3807883a 	mov	r3,r7
   51708:	e0800117 	ldw	r2,4(fp)
   5170c:	e13ffd0d 	sth	r4,-12(fp)
   51710:	e0fffe05 	stb	r3,-8(fp)
   51714:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   51718:	d0a72c17 	ldw	r2,-25424(gp)
   5171c:	d0e72c17 	ldw	r3,-25424(gp)
   51720:	18c00c03 	ldbu	r3,48(r3)
   51724:	18c00814 	ori	r3,r3,32
   51728:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   5172c:	d0a72c17 	ldw	r2,-25424(gp)
   51730:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   51734:	d0a72c17 	ldw	r2,-25424(gp)
   51738:	e0ffff0b 	ldhu	r3,-4(fp)
   5173c:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   51740:	d0a72c17 	ldw	r2,-25424(gp)
   51744:	e0fffc17 	ldw	r3,-16(fp)
   51748:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   5174c:	e0bffc17 	ldw	r2,-16(fp)
   51750:	e0fffd0b 	ldhu	r3,-12(fp)
   51754:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   51758:	e0bffc17 	ldw	r2,-16(fp)
   5175c:	e0fffe03 	ldbu	r3,-8(fp)
   51760:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   51764:	d0e72c17 	ldw	r3,-25424(gp)
   51768:	e0bffc17 	ldw	r2,-16(fp)
   5176c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   51770:	e0bffb17 	ldw	r2,-20(fp)
   51774:	10c00117 	ldw	r3,4(r2)
   51778:	e0bffc17 	ldw	r2,-16(fp)
   5177c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   51780:	e0bffc17 	ldw	r2,-16(fp)
   51784:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   51788:	e0bffc17 	ldw	r2,-16(fp)
   5178c:	e0fffb17 	ldw	r3,-20(fp)
   51790:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   51794:	e0bffb17 	ldw	r2,-20(fp)
   51798:	10800117 	ldw	r2,4(r2)
   5179c:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   517a0:	e0bff917 	ldw	r2,-28(fp)
   517a4:	10000326 	beq	r2,zero,517b4 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   517a8:	e0bff917 	ldw	r2,-28(fp)
   517ac:	e0fffc17 	ldw	r3,-16(fp)
   517b0:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   517b4:	e0bffb17 	ldw	r2,-20(fp)
   517b8:	e0fffc17 	ldw	r3,-16(fp)
   517bc:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   517c0:	d0a72c17 	ldw	r2,-25424(gp)
   517c4:	10800d03 	ldbu	r2,52(r2)
   517c8:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   517cc:	e0fffa03 	ldbu	r3,-24(fp)
   517d0:	e13ffa03 	ldbu	r4,-24(fp)
   517d4:	d0a72944 	addi	r2,gp,-25435
   517d8:	2085883a 	add	r2,r4,r2
   517dc:	10800003 	ldbu	r2,0(r2)
   517e0:	1009883a 	mov	r4,r2
   517e4:	d0a72c17 	ldw	r2,-25424(gp)
   517e8:	10800d43 	ldbu	r2,53(r2)
   517ec:	0084303a 	nor	r2,zero,r2
   517f0:	2084703a 	and	r2,r4,r2
   517f4:	1009883a 	mov	r4,r2
   517f8:	d0a72944 	addi	r2,gp,-25435
   517fc:	1885883a 	add	r2,r3,r2
   51800:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   51804:	e0fffa03 	ldbu	r3,-24(fp)
   51808:	d0a72944 	addi	r2,gp,-25435
   5180c:	1885883a 	add	r2,r3,r2
   51810:	10800003 	ldbu	r2,0(r2)
   51814:	10803fcc 	andi	r2,r2,255
   51818:	1000071e 	bne	r2,zero,51838 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   5181c:	d0a72c17 	ldw	r2,-25424(gp)
   51820:	10800d83 	ldbu	r2,54(r2)
   51824:	0084303a 	nor	r2,zero,r2
   51828:	1007883a 	mov	r3,r2
   5182c:	d0a72903 	ldbu	r2,-25436(gp)
   51830:	1884703a 	and	r2,r3,r2
   51834:	d0a72905 	stb	r2,-25436(gp)
    }
}
   51838:	0001883a 	nop
   5183c:	e037883a 	mov	sp,fp
   51840:	df000017 	ldw	fp,0(sp)
   51844:	dec00104 	addi	sp,sp,4
   51848:	f800283a 	ret

0005184c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   5184c:	defffb04 	addi	sp,sp,-20
   51850:	dfc00415 	stw	ra,16(sp)
   51854:	df000315 	stw	fp,12(sp)
   51858:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   5185c:	0140dc04 	movi	r5,880
   51860:	010001b4 	movhi	r4,6
   51864:	2101ed04 	addi	r4,r4,1972
   51868:	004fa900 	call	4fa90 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   5186c:	008001b4 	movhi	r2,6
   51870:	1081ed04 	addi	r2,r2,1972
   51874:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   51878:	008001b4 	movhi	r2,6
   5187c:	1081f804 	addi	r2,r2,2016
   51880:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   51884:	e03ffd0d 	sth	zero,-12(fp)
   51888:	00001306 	br	518d8 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   5188c:	e0bffe17 	ldw	r2,-8(fp)
   51890:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   51894:	e0bffe17 	ldw	r2,-8(fp)
   51898:	e0ffff17 	ldw	r3,-4(fp)
   5189c:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   518a0:	e0bffe17 	ldw	r2,-8(fp)
   518a4:	00c00fc4 	movi	r3,63
   518a8:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   518ac:	e0bffe17 	ldw	r2,-8(fp)
   518b0:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   518b4:	e0bffe17 	ldw	r2,-8(fp)
   518b8:	10800b04 	addi	r2,r2,44
   518bc:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   518c0:	e0bfff17 	ldw	r2,-4(fp)
   518c4:	10800b04 	addi	r2,r2,44
   518c8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   518cc:	e0bffd0b 	ldhu	r2,-12(fp)
   518d0:	10800044 	addi	r2,r2,1
   518d4:	e0bffd0d 	sth	r2,-12(fp)
   518d8:	e0bffd0b 	ldhu	r2,-12(fp)
   518dc:	108004f0 	cmpltui	r2,r2,19
   518e0:	103fea1e 	bne	r2,zero,5188c <__alt_data_end+0xfffec08c>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   518e4:	e0bffe17 	ldw	r2,-8(fp)
   518e8:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   518ec:	e0bffe17 	ldw	r2,-8(fp)
   518f0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   518f4:	e0bffe17 	ldw	r2,-8(fp)
   518f8:	00c00fc4 	movi	r3,63
   518fc:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   51900:	e0bffe17 	ldw	r2,-8(fp)
   51904:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   51908:	008001b4 	movhi	r2,6
   5190c:	1081ed04 	addi	r2,r2,1972
   51910:	d0a72e15 	stw	r2,-25416(gp)
#endif
}
   51914:	0001883a 	nop
   51918:	e037883a 	mov	sp,fp
   5191c:	dfc00117 	ldw	ra,4(sp)
   51920:	df000017 	ldw	fp,0(sp)
   51924:	dec00204 	addi	sp,sp,8
   51928:	f800283a 	ret

0005192c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   5192c:	defffa04 	addi	sp,sp,-24
   51930:	dfc00515 	stw	ra,20(sp)
   51934:	df000415 	stw	fp,16(sp)
   51938:	df000404 	addi	fp,sp,16
   5193c:	e13ffe15 	stw	r4,-8(fp)
   51940:	2805883a 	mov	r2,r5
   51944:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   51948:	e0bffe17 	ldw	r2,-8(fp)
   5194c:	10800217 	ldw	r2,8(r2)
   51950:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   51954:	e0bffd17 	ldw	r2,-12(fp)
   51958:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   5195c:	e0bffd17 	ldw	r2,-12(fp)
   51960:	e0ffff0b 	ldhu	r3,-4(fp)
   51964:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   51968:	e0bffd17 	ldw	r2,-12(fp)
   5196c:	10c00c03 	ldbu	r3,48(r2)
   51970:	00bff7c4 	movi	r2,-33
   51974:	1884703a 	and	r2,r3,r2
   51978:	1007883a 	mov	r3,r2
   5197c:	e0bffd17 	ldw	r2,-12(fp)
   51980:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   51984:	e0bffd17 	ldw	r2,-12(fp)
   51988:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   5198c:	e0bffd17 	ldw	r2,-12(fp)
   51990:	10800c03 	ldbu	r2,48(r2)
   51994:	10803fcc 	andi	r2,r2,255
   51998:	1000181e 	bne	r2,zero,519fc <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   5199c:	e0bffd17 	ldw	r2,-12(fp)
   519a0:	10c00d83 	ldbu	r3,54(r2)
   519a4:	d0a72903 	ldbu	r2,-25436(gp)
   519a8:	1884b03a 	or	r2,r3,r2
   519ac:	d0a72905 	stb	r2,-25436(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   519b0:	e0bffd17 	ldw	r2,-12(fp)
   519b4:	10800d03 	ldbu	r2,52(r2)
   519b8:	10c03fcc 	andi	r3,r2,255
   519bc:	e0bffd17 	ldw	r2,-12(fp)
   519c0:	10800d03 	ldbu	r2,52(r2)
   519c4:	11003fcc 	andi	r4,r2,255
   519c8:	d0a72944 	addi	r2,gp,-25435
   519cc:	2085883a 	add	r2,r4,r2
   519d0:	11000003 	ldbu	r4,0(r2)
   519d4:	e0bffd17 	ldw	r2,-12(fp)
   519d8:	10800d43 	ldbu	r2,53(r2)
   519dc:	2084b03a 	or	r2,r4,r2
   519e0:	1009883a 	mov	r4,r2
   519e4:	d0a72944 	addi	r2,gp,-25435
   519e8:	1885883a 	add	r2,r3,r2
   519ec:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   519f0:	00800044 	movi	r2,1
   519f4:	e0bffc05 	stb	r2,-16(fp)
   519f8:	00000106 	br	51a00 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   519fc:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   51a00:	e13ffe17 	ldw	r4,-8(fp)
   51a04:	0051a200 	call	51a20 <OS_FlagUnlink>
    return (sched);
   51a08:	e0bffc03 	ldbu	r2,-16(fp)
}
   51a0c:	e037883a 	mov	sp,fp
   51a10:	dfc00117 	ldw	ra,4(sp)
   51a14:	df000017 	ldw	fp,0(sp)
   51a18:	dec00204 	addi	sp,sp,8
   51a1c:	f800283a 	ret

00051a20 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   51a20:	defffa04 	addi	sp,sp,-24
   51a24:	df000515 	stw	fp,20(sp)
   51a28:	df000504 	addi	fp,sp,20
   51a2c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   51a30:	e0bfff17 	ldw	r2,-4(fp)
   51a34:	10800117 	ldw	r2,4(r2)
   51a38:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   51a3c:	e0bfff17 	ldw	r2,-4(fp)
   51a40:	10800017 	ldw	r2,0(r2)
   51a44:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   51a48:	e0bffb17 	ldw	r2,-20(fp)
   51a4c:	10000b1e 	bne	r2,zero,51a7c <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   51a50:	e0bfff17 	ldw	r2,-4(fp)
   51a54:	10800317 	ldw	r2,12(r2)
   51a58:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   51a5c:	e0bffd17 	ldw	r2,-12(fp)
   51a60:	e0fffc17 	ldw	r3,-16(fp)
   51a64:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   51a68:	e0bffc17 	ldw	r2,-16(fp)
   51a6c:	10000b26 	beq	r2,zero,51a9c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   51a70:	e0bffc17 	ldw	r2,-16(fp)
   51a74:	10000115 	stw	zero,4(r2)
   51a78:	00000806 	br	51a9c <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   51a7c:	e0bffb17 	ldw	r2,-20(fp)
   51a80:	e0fffc17 	ldw	r3,-16(fp)
   51a84:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   51a88:	e0bffc17 	ldw	r2,-16(fp)
   51a8c:	10000326 	beq	r2,zero,51a9c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   51a90:	e0bffc17 	ldw	r2,-16(fp)
   51a94:	e0fffb17 	ldw	r3,-20(fp)
   51a98:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   51a9c:	e0bfff17 	ldw	r2,-4(fp)
   51aa0:	10800217 	ldw	r2,8(r2)
   51aa4:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   51aa8:	e0bffe17 	ldw	r2,-8(fp)
   51aac:	10000a15 	stw	zero,40(r2)
#endif
}
   51ab0:	0001883a 	nop
   51ab4:	e037883a 	mov	sp,fp
   51ab8:	df000017 	ldw	fp,0(sp)
   51abc:	dec00104 	addi	sp,sp,4
   51ac0:	f800283a 	ret

00051ac4 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
   51ac4:	defffa04 	addi	sp,sp,-24
   51ac8:	df000515 	stw	fp,20(sp)
   51acc:	df000504 	addi	fp,sp,20
   51ad0:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
   51ad4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
   51ad8:	e0bfff17 	ldw	r2,-4(fp)
   51adc:	1000021e 	bne	r2,zero,51ae8 <OSMboxAccept+0x24>
        return ((void *)0);
   51ae0:	0005883a 	mov	r2,zero
   51ae4:	00001906 	br	51b4c <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
   51ae8:	e0bfff17 	ldw	r2,-4(fp)
   51aec:	10800003 	ldbu	r2,0(r2)
   51af0:	10803fcc 	andi	r2,r2,255
   51af4:	10800060 	cmpeqi	r2,r2,1
   51af8:	1000021e 	bne	r2,zero,51b04 <OSMboxAccept+0x40>
        return ((void *)0);
   51afc:	0005883a 	mov	r2,zero
   51b00:	00001206 	br	51b4c <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51b04:	0005303a 	rdctl	r2,status
   51b08:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51b0c:	e0fffd17 	ldw	r3,-12(fp)
   51b10:	00bfff84 	movi	r2,-2
   51b14:	1884703a 	and	r2,r3,r2
   51b18:	1001703a 	wrctl	status,r2
  
  return context;
   51b1c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   51b20:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
   51b24:	e0bfff17 	ldw	r2,-4(fp)
   51b28:	10800117 	ldw	r2,4(r2)
   51b2c:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
   51b30:	e0bfff17 	ldw	r2,-4(fp)
   51b34:	10000115 	stw	zero,4(r2)
   51b38:	e0bffb17 	ldw	r2,-20(fp)
   51b3c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51b40:	e0bffe17 	ldw	r2,-8(fp)
   51b44:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
   51b48:	e0bffc17 	ldw	r2,-16(fp)
}
   51b4c:	e037883a 	mov	sp,fp
   51b50:	df000017 	ldw	fp,0(sp)
   51b54:	dec00104 	addi	sp,sp,4
   51b58:	f800283a 	ret

00051b5c <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
   51b5c:	defff904 	addi	sp,sp,-28
   51b60:	dfc00615 	stw	ra,24(sp)
   51b64:	df000515 	stw	fp,20(sp)
   51b68:	df000504 	addi	fp,sp,20
   51b6c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   51b70:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   51b74:	d0a72b03 	ldbu	r2,-25428(gp)
   51b78:	10803fcc 	andi	r2,r2,255
   51b7c:	10000226 	beq	r2,zero,51b88 <OSMboxCreate+0x2c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   51b80:	0005883a 	mov	r2,zero
   51b84:	00002506 	br	51c1c <OSMboxCreate+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51b88:	0005303a 	rdctl	r2,status
   51b8c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51b90:	e0fffe17 	ldw	r3,-8(fp)
   51b94:	00bfff84 	movi	r2,-2
   51b98:	1884703a 	and	r2,r3,r2
   51b9c:	1001703a 	wrctl	status,r2
  
  return context;
   51ba0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   51ba4:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   51ba8:	d0a72a17 	ldw	r2,-25432(gp)
   51bac:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   51bb0:	d0a72a17 	ldw	r2,-25432(gp)
   51bb4:	10000326 	beq	r2,zero,51bc4 <OSMboxCreate+0x68>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   51bb8:	d0a72a17 	ldw	r2,-25432(gp)
   51bbc:	10800117 	ldw	r2,4(r2)
   51bc0:	d0a72a15 	stw	r2,-25432(gp)
   51bc4:	e0bffb17 	ldw	r2,-20(fp)
   51bc8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51bcc:	e0bffc17 	ldw	r2,-16(fp)
   51bd0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
   51bd4:	e0bffd17 	ldw	r2,-12(fp)
   51bd8:	10000f26 	beq	r2,zero,51c18 <OSMboxCreate+0xbc>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
   51bdc:	e0bffd17 	ldw	r2,-12(fp)
   51be0:	00c00044 	movi	r3,1
   51be4:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
   51be8:	e0bffd17 	ldw	r2,-12(fp)
   51bec:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
   51bf0:	e0bffd17 	ldw	r2,-12(fp)
   51bf4:	e0ffff17 	ldw	r3,-4(fp)
   51bf8:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
   51bfc:	e0bffd17 	ldw	r2,-12(fp)
   51c00:	00c00fc4 	movi	r3,63
   51c04:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   51c08:	e0bffd17 	ldw	r2,-12(fp)
   51c0c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
   51c10:	e13ffd17 	ldw	r4,-12(fp)
   51c14:	004f6b00 	call	4f6b0 <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
   51c18:	e0bffd17 	ldw	r2,-12(fp)
}
   51c1c:	e037883a 	mov	sp,fp
   51c20:	dfc00117 	ldw	ra,4(sp)
   51c24:	df000017 	ldw	fp,0(sp)
   51c28:	dec00204 	addi	sp,sp,8
   51c2c:	f800283a 	ret

00051c30 <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   51c30:	defff304 	addi	sp,sp,-52
   51c34:	dfc00c15 	stw	ra,48(sp)
   51c38:	df000b15 	stw	fp,44(sp)
   51c3c:	df000b04 	addi	fp,sp,44
   51c40:	e13ffd15 	stw	r4,-12(fp)
   51c44:	2805883a 	mov	r2,r5
   51c48:	e1bfff15 	stw	r6,-4(fp)
   51c4c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   51c50:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   51c54:	e0bfff17 	ldw	r2,-4(fp)
   51c58:	1000021e 	bne	r2,zero,51c64 <OSMboxDel+0x34>
        return (pevent);
   51c5c:	e0bffd17 	ldw	r2,-12(fp)
   51c60:	00007e06 	br	51e5c <OSMboxDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   51c64:	e0bffd17 	ldw	r2,-12(fp)
   51c68:	1000051e 	bne	r2,zero,51c80 <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   51c6c:	e0bfff17 	ldw	r2,-4(fp)
   51c70:	00c00104 	movi	r3,4
   51c74:	10c00005 	stb	r3,0(r2)
        return (pevent);
   51c78:	e0bffd17 	ldw	r2,-12(fp)
   51c7c:	00007706 	br	51e5c <OSMboxDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   51c80:	e0bffd17 	ldw	r2,-12(fp)
   51c84:	10800003 	ldbu	r2,0(r2)
   51c88:	10803fcc 	andi	r2,r2,255
   51c8c:	10800060 	cmpeqi	r2,r2,1
   51c90:	1000051e 	bne	r2,zero,51ca8 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   51c94:	e0bfff17 	ldw	r2,-4(fp)
   51c98:	00c00044 	movi	r3,1
   51c9c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   51ca0:	e0bffd17 	ldw	r2,-12(fp)
   51ca4:	00006d06 	br	51e5c <OSMboxDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   51ca8:	d0a72b03 	ldbu	r2,-25428(gp)
   51cac:	10803fcc 	andi	r2,r2,255
   51cb0:	10000526 	beq	r2,zero,51cc8 <OSMboxDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   51cb4:	e0bfff17 	ldw	r2,-4(fp)
   51cb8:	00c003c4 	movi	r3,15
   51cbc:	10c00005 	stb	r3,0(r2)
        return (pevent);
   51cc0:	e0bffd17 	ldw	r2,-12(fp)
   51cc4:	00006506 	br	51e5c <OSMboxDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51cc8:	0005303a 	rdctl	r2,status
   51ccc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51cd0:	e0fffc17 	ldw	r3,-16(fp)
   51cd4:	00bfff84 	movi	r2,-2
   51cd8:	1884703a 	and	r2,r3,r2
   51cdc:	1001703a 	wrctl	status,r2
  
  return context;
   51ce0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   51ce4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
   51ce8:	e0bffd17 	ldw	r2,-12(fp)
   51cec:	10800283 	ldbu	r2,10(r2)
   51cf0:	10803fcc 	andi	r2,r2,255
   51cf4:	10000326 	beq	r2,zero,51d04 <OSMboxDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   51cf8:	00800044 	movi	r2,1
   51cfc:	e0bff505 	stb	r2,-44(fp)
   51d00:	00000106 	br	51d08 <OSMboxDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   51d04:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   51d08:	e0bffe03 	ldbu	r2,-8(fp)
   51d0c:	10000326 	beq	r2,zero,51d1c <OSMboxDel+0xec>
   51d10:	10800060 	cmpeqi	r2,r2,1
   51d14:	1000281e 	bne	r2,zero,51db8 <OSMboxDel+0x188>
   51d18:	00004506 	br	51e30 <OSMboxDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
   51d1c:	e0bff503 	ldbu	r2,-44(fp)
   51d20:	1000161e 	bne	r2,zero,51d7c <OSMboxDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   51d24:	e0bffd17 	ldw	r2,-12(fp)
   51d28:	00c00fc4 	movi	r3,63
   51d2c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   51d30:	e0bffd17 	ldw	r2,-12(fp)
   51d34:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
   51d38:	e0bffd17 	ldw	r2,-12(fp)
   51d3c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
   51d40:	d0e72a17 	ldw	r3,-25432(gp)
   51d44:	e0bffd17 	ldw	r2,-12(fp)
   51d48:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
   51d4c:	e0bffd17 	ldw	r2,-12(fp)
   51d50:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
   51d54:	e0bffd17 	ldw	r2,-12(fp)
   51d58:	d0a72a15 	stw	r2,-25432(gp)
   51d5c:	e0bff717 	ldw	r2,-36(fp)
   51d60:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51d64:	e0bff817 	ldw	r2,-32(fp)
   51d68:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
   51d6c:	e0bfff17 	ldw	r2,-4(fp)
   51d70:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
   51d74:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
   51d78:	00003706 	br	51e58 <OSMboxDel+0x228>
   51d7c:	e0bff717 	ldw	r2,-36(fp)
   51d80:	e0bff915 	stw	r2,-28(fp)
   51d84:	e0bff917 	ldw	r2,-28(fp)
   51d88:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
   51d8c:	e0bfff17 	ldw	r2,-4(fp)
   51d90:	00c01244 	movi	r3,73
   51d94:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
   51d98:	e0bffd17 	ldw	r2,-12(fp)
   51d9c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   51da0:	00002d06 	br	51e58 <OSMboxDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
   51da4:	000f883a 	mov	r7,zero
   51da8:	01800084 	movi	r6,2
   51dac:	000b883a 	mov	r5,zero
   51db0:	e13ffd17 	ldw	r4,-12(fp)
   51db4:	004f1000 	call	4f100 <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
   51db8:	e0bffd17 	ldw	r2,-12(fp)
   51dbc:	10800283 	ldbu	r2,10(r2)
   51dc0:	10803fcc 	andi	r2,r2,255
   51dc4:	103ff71e 	bne	r2,zero,51da4 <__alt_data_end+0xfffec5a4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   51dc8:	e0bffd17 	ldw	r2,-12(fp)
   51dcc:	00c00fc4 	movi	r3,63
   51dd0:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   51dd4:	e0bffd17 	ldw	r2,-12(fp)
   51dd8:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   51ddc:	e0bffd17 	ldw	r2,-12(fp)
   51de0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   51de4:	d0e72a17 	ldw	r3,-25432(gp)
   51de8:	e0bffd17 	ldw	r2,-12(fp)
   51dec:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   51df0:	e0bffd17 	ldw	r2,-12(fp)
   51df4:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   51df8:	e0bffd17 	ldw	r2,-12(fp)
   51dfc:	d0a72a15 	stw	r2,-25432(gp)
   51e00:	e0bff717 	ldw	r2,-36(fp)
   51e04:	e0bffa15 	stw	r2,-24(fp)
   51e08:	e0bffa17 	ldw	r2,-24(fp)
   51e0c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   51e10:	e0bff503 	ldbu	r2,-44(fp)
   51e14:	10800058 	cmpnei	r2,r2,1
   51e18:	1000011e 	bne	r2,zero,51e20 <OSMboxDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   51e1c:	004fb4c0 	call	4fb4c <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
   51e20:	e0bfff17 	ldw	r2,-4(fp)
   51e24:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
   51e28:	e03ff615 	stw	zero,-40(fp)
             break;
   51e2c:	00000a06 	br	51e58 <OSMboxDel+0x228>
   51e30:	e0bff717 	ldw	r2,-36(fp)
   51e34:	e0bffb15 	stw	r2,-20(fp)
   51e38:	e0bffb17 	ldw	r2,-20(fp)
   51e3c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
   51e40:	e0bfff17 	ldw	r2,-4(fp)
   51e44:	00c001c4 	movi	r3,7
   51e48:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
   51e4c:	e0bffd17 	ldw	r2,-12(fp)
   51e50:	e0bff615 	stw	r2,-40(fp)
             break;
   51e54:	0001883a 	nop
    }
    return (pevent_return);
   51e58:	e0bff617 	ldw	r2,-40(fp)
}
   51e5c:	e037883a 	mov	sp,fp
   51e60:	dfc00117 	ldw	ra,4(sp)
   51e64:	df000017 	ldw	fp,0(sp)
   51e68:	dec00204 	addi	sp,sp,8
   51e6c:	f800283a 	ret

00051e70 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   51e70:	defff404 	addi	sp,sp,-48
   51e74:	dfc00b15 	stw	ra,44(sp)
   51e78:	df000a15 	stw	fp,40(sp)
   51e7c:	df000a04 	addi	fp,sp,40
   51e80:	e13ffd15 	stw	r4,-12(fp)
   51e84:	2805883a 	mov	r2,r5
   51e88:	e1bfff15 	stw	r6,-4(fp)
   51e8c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   51e90:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   51e94:	e0bfff17 	ldw	r2,-4(fp)
   51e98:	1000021e 	bne	r2,zero,51ea4 <OSMboxPend+0x34>
        return ((void *)0);
   51e9c:	0005883a 	mov	r2,zero
   51ea0:	00007b06 	br	52090 <OSMboxPend+0x220>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   51ea4:	e0bffd17 	ldw	r2,-12(fp)
   51ea8:	1000051e 	bne	r2,zero,51ec0 <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   51eac:	e0bfff17 	ldw	r2,-4(fp)
   51eb0:	00c00104 	movi	r3,4
   51eb4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   51eb8:	0005883a 	mov	r2,zero
   51ebc:	00007406 	br	52090 <OSMboxPend+0x220>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   51ec0:	e0bffd17 	ldw	r2,-12(fp)
   51ec4:	10800003 	ldbu	r2,0(r2)
   51ec8:	10803fcc 	andi	r2,r2,255
   51ecc:	10800060 	cmpeqi	r2,r2,1
   51ed0:	1000051e 	bne	r2,zero,51ee8 <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   51ed4:	e0bfff17 	ldw	r2,-4(fp)
   51ed8:	00c00044 	movi	r3,1
   51edc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   51ee0:	0005883a 	mov	r2,zero
   51ee4:	00006a06 	br	52090 <OSMboxPend+0x220>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   51ee8:	d0a72b03 	ldbu	r2,-25428(gp)
   51eec:	10803fcc 	andi	r2,r2,255
   51ef0:	10000526 	beq	r2,zero,51f08 <OSMboxPend+0x98>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   51ef4:	e0bfff17 	ldw	r2,-4(fp)
   51ef8:	00c00084 	movi	r3,2
   51efc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   51f00:	0005883a 	mov	r2,zero
   51f04:	00006206 	br	52090 <OSMboxPend+0x220>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   51f08:	d0a71d03 	ldbu	r2,-25484(gp)
   51f0c:	10803fcc 	andi	r2,r2,255
   51f10:	10000526 	beq	r2,zero,51f28 <OSMboxPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   51f14:	e0bfff17 	ldw	r2,-4(fp)
   51f18:	00c00344 	movi	r3,13
   51f1c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   51f20:	0005883a 	mov	r2,zero
   51f24:	00005a06 	br	52090 <OSMboxPend+0x220>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51f28:	0005303a 	rdctl	r2,status
   51f2c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51f30:	e0fffc17 	ldw	r3,-16(fp)
   51f34:	00bfff84 	movi	r2,-2
   51f38:	1884703a 	and	r2,r3,r2
   51f3c:	1001703a 	wrctl	status,r2
  
  return context;
   51f40:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   51f44:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
   51f48:	e0bffd17 	ldw	r2,-12(fp)
   51f4c:	10800117 	ldw	r2,4(r2)
   51f50:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
   51f54:	e0bff617 	ldw	r2,-40(fp)
   51f58:	10000a26 	beq	r2,zero,51f84 <OSMboxPend+0x114>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
   51f5c:	e0bffd17 	ldw	r2,-12(fp)
   51f60:	10000115 	stw	zero,4(r2)
   51f64:	e0bff717 	ldw	r2,-36(fp)
   51f68:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51f6c:	e0bff817 	ldw	r2,-32(fp)
   51f70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   51f74:	e0bfff17 	ldw	r2,-4(fp)
   51f78:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
   51f7c:	e0bff617 	ldw	r2,-40(fp)
   51f80:	00004306 	br	52090 <OSMboxPend+0x220>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
   51f84:	d0a72c17 	ldw	r2,-25424(gp)
   51f88:	d0e72c17 	ldw	r3,-25424(gp)
   51f8c:	18c00c03 	ldbu	r3,48(r3)
   51f90:	18c00094 	ori	r3,r3,2
   51f94:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   51f98:	d0a72c17 	ldw	r2,-25424(gp)
   51f9c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
   51fa0:	d0a72c17 	ldw	r2,-25424(gp)
   51fa4:	e0fffe0b 	ldhu	r3,-8(fp)
   51fa8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   51fac:	e13ffd17 	ldw	r4,-12(fp)
   51fb0:	004f2980 	call	4f298 <OS_EventTaskWait>
   51fb4:	e0bff717 	ldw	r2,-36(fp)
   51fb8:	e0bffb15 	stw	r2,-20(fp)
   51fbc:	e0bffb17 	ldw	r2,-20(fp)
   51fc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
   51fc4:	004fb4c0 	call	4fb4c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51fc8:	0005303a 	rdctl	r2,status
   51fcc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51fd0:	e0fff917 	ldw	r3,-28(fp)
   51fd4:	00bfff84 	movi	r2,-2
   51fd8:	1884703a 	and	r2,r3,r2
   51fdc:	1001703a 	wrctl	status,r2
  
  return context;
   51fe0:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   51fe4:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   51fe8:	d0a72c17 	ldw	r2,-25424(gp)
   51fec:	10800c43 	ldbu	r2,49(r2)
   51ff0:	10803fcc 	andi	r2,r2,255
   51ff4:	10000326 	beq	r2,zero,52004 <OSMboxPend+0x194>
   51ff8:	108000a0 	cmpeqi	r2,r2,2
   51ffc:	1000071e 	bne	r2,zero,5201c <OSMboxPend+0x1ac>
   52000:	00000b06 	br	52030 <OSMboxPend+0x1c0>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
   52004:	d0a72c17 	ldw	r2,-25424(gp)
   52008:	10800917 	ldw	r2,36(r2)
   5200c:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
   52010:	e0bfff17 	ldw	r2,-4(fp)
   52014:	10000005 	stb	zero,0(r2)
             break;
   52018:	00000e06 	br	52054 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   5201c:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   52020:	e0bfff17 	ldw	r2,-4(fp)
   52024:	00c00384 	movi	r3,14
   52028:	10c00005 	stb	r3,0(r2)
             break;
   5202c:	00000906 	br	52054 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   52030:	d0a72c17 	ldw	r2,-25424(gp)
   52034:	e17ffd17 	ldw	r5,-12(fp)
   52038:	1009883a 	mov	r4,r2
   5203c:	004f4f80 	call	4f4f8 <OS_EventTaskRemove>
             pmsg = (void *)0;
   52040:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   52044:	e0bfff17 	ldw	r2,-4(fp)
   52048:	00c00284 	movi	r3,10
   5204c:	10c00005 	stb	r3,0(r2)
             break;
   52050:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   52054:	d0a72c17 	ldw	r2,-25424(gp)
   52058:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   5205c:	d0a72c17 	ldw	r2,-25424(gp)
   52060:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   52064:	d0a72c17 	ldw	r2,-25424(gp)
   52068:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   5206c:	d0a72c17 	ldw	r2,-25424(gp)
   52070:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   52074:	d0a72c17 	ldw	r2,-25424(gp)
   52078:	10000915 	stw	zero,36(r2)
   5207c:	e0bff717 	ldw	r2,-36(fp)
   52080:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52084:	e0bffa17 	ldw	r2,-24(fp)
   52088:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   5208c:	e0bff617 	ldw	r2,-40(fp)
}
   52090:	e037883a 	mov	sp,fp
   52094:	dfc00117 	ldw	ra,4(sp)
   52098:	df000017 	ldw	fp,0(sp)
   5209c:	dec00204 	addi	sp,sp,8
   520a0:	f800283a 	ret

000520a4 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   520a4:	defff604 	addi	sp,sp,-40
   520a8:	dfc00915 	stw	ra,36(sp)
   520ac:	df000815 	stw	fp,32(sp)
   520b0:	df000804 	addi	fp,sp,32
   520b4:	e13ffd15 	stw	r4,-12(fp)
   520b8:	2805883a 	mov	r2,r5
   520bc:	e1bfff15 	stw	r6,-4(fp)
   520c0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   520c4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   520c8:	e0bfff17 	ldw	r2,-4(fp)
   520cc:	1000021e 	bne	r2,zero,520d8 <OSMboxPendAbort+0x34>
        return (0);
   520d0:	0005883a 	mov	r2,zero
   520d4:	00004906 	br	521fc <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   520d8:	e0bffd17 	ldw	r2,-12(fp)
   520dc:	1000051e 	bne	r2,zero,520f4 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   520e0:	e0bfff17 	ldw	r2,-4(fp)
   520e4:	00c00104 	movi	r3,4
   520e8:	10c00005 	stb	r3,0(r2)
        return (0);
   520ec:	0005883a 	mov	r2,zero
   520f0:	00004206 	br	521fc <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   520f4:	e0bffd17 	ldw	r2,-12(fp)
   520f8:	10800003 	ldbu	r2,0(r2)
   520fc:	10803fcc 	andi	r2,r2,255
   52100:	10800060 	cmpeqi	r2,r2,1
   52104:	1000051e 	bne	r2,zero,5211c <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   52108:	e0bfff17 	ldw	r2,-4(fp)
   5210c:	00c00044 	movi	r3,1
   52110:	10c00005 	stb	r3,0(r2)
        return (0);
   52114:	0005883a 	mov	r2,zero
   52118:	00003806 	br	521fc <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5211c:	0005303a 	rdctl	r2,status
   52120:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52124:	e0fffc17 	ldw	r3,-16(fp)
   52128:	00bfff84 	movi	r2,-2
   5212c:	1884703a 	and	r2,r3,r2
   52130:	1001703a 	wrctl	status,r2
  
  return context;
   52134:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   52138:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
   5213c:	e0bffd17 	ldw	r2,-12(fp)
   52140:	10800283 	ldbu	r2,10(r2)
   52144:	10803fcc 	andi	r2,r2,255
   52148:	10002526 	beq	r2,zero,521e0 <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
   5214c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   52150:	e0bffe03 	ldbu	r2,-8(fp)
   52154:	10800060 	cmpeqi	r2,r2,1
   52158:	10000e26 	beq	r2,zero,52194 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   5215c:	00000806 	br	52180 <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   52160:	01c00084 	movi	r7,2
   52164:	01800084 	movi	r6,2
   52168:	000b883a 	mov	r5,zero
   5216c:	e13ffd17 	ldw	r4,-12(fp)
   52170:	004f1000 	call	4f100 <OS_EventTaskRdy>
                     nbr_tasks++;
   52174:	e0bff803 	ldbu	r2,-32(fp)
   52178:	10800044 	addi	r2,r2,1
   5217c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   52180:	e0bffd17 	ldw	r2,-12(fp)
   52184:	10800283 	ldbu	r2,10(r2)
   52188:	10803fcc 	andi	r2,r2,255
   5218c:	103ff41e 	bne	r2,zero,52160 <__alt_data_end+0xfffec960>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   52190:	00000906 	br	521b8 <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   52194:	01c00084 	movi	r7,2
   52198:	01800084 	movi	r6,2
   5219c:	000b883a 	mov	r5,zero
   521a0:	e13ffd17 	ldw	r4,-12(fp)
   521a4:	004f1000 	call	4f100 <OS_EventTaskRdy>
                 nbr_tasks++;
   521a8:	e0bff803 	ldbu	r2,-32(fp)
   521ac:	10800044 	addi	r2,r2,1
   521b0:	e0bff805 	stb	r2,-32(fp)
                 break;
   521b4:	0001883a 	nop
   521b8:	e0bff917 	ldw	r2,-28(fp)
   521bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   521c0:	e0bffa17 	ldw	r2,-24(fp)
   521c4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   521c8:	004fb4c0 	call	4fb4c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   521cc:	e0bfff17 	ldw	r2,-4(fp)
   521d0:	00c00384 	movi	r3,14
   521d4:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   521d8:	e0bff803 	ldbu	r2,-32(fp)
   521dc:	00000706 	br	521fc <OSMboxPendAbort+0x158>
   521e0:	e0bff917 	ldw	r2,-28(fp)
   521e4:	e0bffb15 	stw	r2,-20(fp)
   521e8:	e0bffb17 	ldw	r2,-20(fp)
   521ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   521f0:	e0bfff17 	ldw	r2,-4(fp)
   521f4:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
   521f8:	0005883a 	mov	r2,zero
}
   521fc:	e037883a 	mov	sp,fp
   52200:	dfc00117 	ldw	ra,4(sp)
   52204:	df000017 	ldw	fp,0(sp)
   52208:	dec00204 	addi	sp,sp,8
   5220c:	f800283a 	ret

00052210 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
   52210:	defff704 	addi	sp,sp,-36
   52214:	dfc00815 	stw	ra,32(sp)
   52218:	df000715 	stw	fp,28(sp)
   5221c:	df000704 	addi	fp,sp,28
   52220:	e13ffe15 	stw	r4,-8(fp)
   52224:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   52228:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   5222c:	e0bffe17 	ldw	r2,-8(fp)
   52230:	1000021e 	bne	r2,zero,5223c <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   52234:	00800104 	movi	r2,4
   52238:	00003406 	br	5230c <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   5223c:	e0bfff17 	ldw	r2,-4(fp)
   52240:	1000021e 	bne	r2,zero,5224c <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
   52244:	008000c4 	movi	r2,3
   52248:	00003006 	br	5230c <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   5224c:	e0bffe17 	ldw	r2,-8(fp)
   52250:	10800003 	ldbu	r2,0(r2)
   52254:	10803fcc 	andi	r2,r2,255
   52258:	10800060 	cmpeqi	r2,r2,1
   5225c:	1000021e 	bne	r2,zero,52268 <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
   52260:	00800044 	movi	r2,1
   52264:	00002906 	br	5230c <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52268:	0005303a 	rdctl	r2,status
   5226c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52270:	e0fffd17 	ldw	r3,-12(fp)
   52274:	00bfff84 	movi	r2,-2
   52278:	1884703a 	and	r2,r3,r2
   5227c:	1001703a 	wrctl	status,r2
  
  return context;
   52280:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   52284:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   52288:	e0bffe17 	ldw	r2,-8(fp)
   5228c:	10800283 	ldbu	r2,10(r2)
   52290:	10803fcc 	andi	r2,r2,255
   52294:	10000c26 	beq	r2,zero,522c8 <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   52298:	000f883a 	mov	r7,zero
   5229c:	01800084 	movi	r6,2
   522a0:	e17fff17 	ldw	r5,-4(fp)
   522a4:	e13ffe17 	ldw	r4,-8(fp)
   522a8:	004f1000 	call	4f100 <OS_EventTaskRdy>
   522ac:	e0bff917 	ldw	r2,-28(fp)
   522b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   522b4:	e0bffa17 	ldw	r2,-24(fp)
   522b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   522bc:	004fb4c0 	call	4fb4c <OS_Sched>
        return (OS_ERR_NONE);
   522c0:	0005883a 	mov	r2,zero
   522c4:	00001106 	br	5230c <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   522c8:	e0bffe17 	ldw	r2,-8(fp)
   522cc:	10800117 	ldw	r2,4(r2)
   522d0:	10000626 	beq	r2,zero,522ec <OSMboxPost+0xdc>
   522d4:	e0bff917 	ldw	r2,-28(fp)
   522d8:	e0bffb15 	stw	r2,-20(fp)
   522dc:	e0bffb17 	ldw	r2,-20(fp)
   522e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   522e4:	00800504 	movi	r2,20
   522e8:	00000806 	br	5230c <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   522ec:	e0bffe17 	ldw	r2,-8(fp)
   522f0:	e0ffff17 	ldw	r3,-4(fp)
   522f4:	10c00115 	stw	r3,4(r2)
   522f8:	e0bff917 	ldw	r2,-28(fp)
   522fc:	e0bffc15 	stw	r2,-16(fp)
   52300:	e0bffc17 	ldw	r2,-16(fp)
   52304:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   52308:	0005883a 	mov	r2,zero
}
   5230c:	e037883a 	mov	sp,fp
   52310:	dfc00117 	ldw	ra,4(sp)
   52314:	df000017 	ldw	fp,0(sp)
   52318:	dec00204 	addi	sp,sp,8
   5231c:	f800283a 	ret

00052320 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   52320:	defff604 	addi	sp,sp,-40
   52324:	dfc00915 	stw	ra,36(sp)
   52328:	df000815 	stw	fp,32(sp)
   5232c:	df000804 	addi	fp,sp,32
   52330:	e13ffd15 	stw	r4,-12(fp)
   52334:	e17ffe15 	stw	r5,-8(fp)
   52338:	3005883a 	mov	r2,r6
   5233c:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   52340:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   52344:	e0bffd17 	ldw	r2,-12(fp)
   52348:	1000021e 	bne	r2,zero,52354 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   5234c:	00800104 	movi	r2,4
   52350:	00004506 	br	52468 <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   52354:	e0bffe17 	ldw	r2,-8(fp)
   52358:	1000021e 	bne	r2,zero,52364 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
   5235c:	008000c4 	movi	r2,3
   52360:	00004106 	br	52468 <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   52364:	e0bffd17 	ldw	r2,-12(fp)
   52368:	10800003 	ldbu	r2,0(r2)
   5236c:	10803fcc 	andi	r2,r2,255
   52370:	10800060 	cmpeqi	r2,r2,1
   52374:	1000021e 	bne	r2,zero,52380 <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
   52378:	00800044 	movi	r2,1
   5237c:	00003a06 	br	52468 <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52380:	0005303a 	rdctl	r2,status
   52384:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52388:	e0fffc17 	ldw	r3,-16(fp)
   5238c:	00bfff84 	movi	r2,-2
   52390:	1884703a 	and	r2,r3,r2
   52394:	1001703a 	wrctl	status,r2
  
  return context;
   52398:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   5239c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   523a0:	e0bffd17 	ldw	r2,-12(fp)
   523a4:	10800283 	ldbu	r2,10(r2)
   523a8:	10803fcc 	andi	r2,r2,255
   523ac:	10001d26 	beq	r2,zero,52424 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   523b0:	e0bfff03 	ldbu	r2,-4(fp)
   523b4:	1080004c 	andi	r2,r2,1
   523b8:	10000b26 	beq	r2,zero,523e8 <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   523bc:	00000506 	br	523d4 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   523c0:	000f883a 	mov	r7,zero
   523c4:	01800084 	movi	r6,2
   523c8:	e17ffe17 	ldw	r5,-8(fp)
   523cc:	e13ffd17 	ldw	r4,-12(fp)
   523d0:	004f1000 	call	4f100 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   523d4:	e0bffd17 	ldw	r2,-12(fp)
   523d8:	10800283 	ldbu	r2,10(r2)
   523dc:	10803fcc 	andi	r2,r2,255
   523e0:	103ff71e 	bne	r2,zero,523c0 <__alt_data_end+0xfffecbc0>
   523e4:	00000506 	br	523fc <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   523e8:	000f883a 	mov	r7,zero
   523ec:	01800084 	movi	r6,2
   523f0:	e17ffe17 	ldw	r5,-8(fp)
   523f4:	e13ffd17 	ldw	r4,-12(fp)
   523f8:	004f1000 	call	4f100 <OS_EventTaskRdy>
   523fc:	e0bff817 	ldw	r2,-32(fp)
   52400:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52404:	e0bff917 	ldw	r2,-28(fp)
   52408:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   5240c:	e0bfff03 	ldbu	r2,-4(fp)
   52410:	1080010c 	andi	r2,r2,4
   52414:	1000011e 	bne	r2,zero,5241c <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
   52418:	004fb4c0 	call	4fb4c <OS_Sched>
        }
        return (OS_ERR_NONE);
   5241c:	0005883a 	mov	r2,zero
   52420:	00001106 	br	52468 <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   52424:	e0bffd17 	ldw	r2,-12(fp)
   52428:	10800117 	ldw	r2,4(r2)
   5242c:	10000626 	beq	r2,zero,52448 <OSMboxPostOpt+0x128>
   52430:	e0bff817 	ldw	r2,-32(fp)
   52434:	e0bffa15 	stw	r2,-24(fp)
   52438:	e0bffa17 	ldw	r2,-24(fp)
   5243c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   52440:	00800504 	movi	r2,20
   52444:	00000806 	br	52468 <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   52448:	e0bffd17 	ldw	r2,-12(fp)
   5244c:	e0fffe17 	ldw	r3,-8(fp)
   52450:	10c00115 	stw	r3,4(r2)
   52454:	e0bff817 	ldw	r2,-32(fp)
   52458:	e0bffb15 	stw	r2,-20(fp)
   5245c:	e0bffb17 	ldw	r2,-20(fp)
   52460:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   52464:	0005883a 	mov	r2,zero
}
   52468:	e037883a 	mov	sp,fp
   5246c:	dfc00117 	ldw	ra,4(sp)
   52470:	df000017 	ldw	fp,0(sp)
   52474:	dec00204 	addi	sp,sp,8
   52478:	f800283a 	ret

0005247c <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
   5247c:	defff704 	addi	sp,sp,-36
   52480:	df000815 	stw	fp,32(sp)
   52484:	df000804 	addi	fp,sp,32
   52488:	e13ffe15 	stw	r4,-8(fp)
   5248c:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   52490:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   52494:	e0bffe17 	ldw	r2,-8(fp)
   52498:	1000021e 	bne	r2,zero,524a4 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   5249c:	00800104 	movi	r2,4
   524a0:	00003606 	br	5257c <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
   524a4:	e0bfff17 	ldw	r2,-4(fp)
   524a8:	1000021e 	bne	r2,zero,524b4 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   524ac:	00800244 	movi	r2,9
   524b0:	00003206 	br	5257c <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   524b4:	e0bffe17 	ldw	r2,-8(fp)
   524b8:	10800003 	ldbu	r2,0(r2)
   524bc:	10803fcc 	andi	r2,r2,255
   524c0:	10800060 	cmpeqi	r2,r2,1
   524c4:	1000021e 	bne	r2,zero,524d0 <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   524c8:	00800044 	movi	r2,1
   524cc:	00002b06 	br	5257c <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   524d0:	0005303a 	rdctl	r2,status
   524d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   524d8:	e0fffd17 	ldw	r3,-12(fp)
   524dc:	00bfff84 	movi	r2,-2
   524e0:	1884703a 	and	r2,r3,r2
   524e4:	1001703a 	wrctl	status,r2
  
  return context;
   524e8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   524ec:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
   524f0:	e0bffe17 	ldw	r2,-8(fp)
   524f4:	10c00283 	ldbu	r3,10(r2)
   524f8:	e0bfff17 	ldw	r2,-4(fp)
   524fc:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
   52500:	e0bffe17 	ldw	r2,-8(fp)
   52504:	108002c4 	addi	r2,r2,11
   52508:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
   5250c:	e0bfff17 	ldw	r2,-4(fp)
   52510:	10800104 	addi	r2,r2,4
   52514:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   52518:	e03ff805 	stb	zero,-32(fp)
   5251c:	00000b06 	br	5254c <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
   52520:	e0bffa17 	ldw	r2,-24(fp)
   52524:	10c00044 	addi	r3,r2,1
   52528:	e0fffa15 	stw	r3,-24(fp)
   5252c:	e0fff917 	ldw	r3,-28(fp)
   52530:	19000044 	addi	r4,r3,1
   52534:	e13ff915 	stw	r4,-28(fp)
   52538:	18c00003 	ldbu	r3,0(r3)
   5253c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   52540:	e0bff803 	ldbu	r2,-32(fp)
   52544:	10800044 	addi	r2,r2,1
   52548:	e0bff805 	stb	r2,-32(fp)
   5254c:	e0bff803 	ldbu	r2,-32(fp)
   52550:	108000f0 	cmpltui	r2,r2,3
   52554:	103ff21e 	bne	r2,zero,52520 <__alt_data_end+0xfffecd20>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
   52558:	e0bffe17 	ldw	r2,-8(fp)
   5255c:	10c00117 	ldw	r3,4(r2)
   52560:	e0bfff17 	ldw	r2,-4(fp)
   52564:	10c00015 	stw	r3,0(r2)
   52568:	e0bffb17 	ldw	r2,-20(fp)
   5256c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52570:	e0bffc17 	ldw	r2,-16(fp)
   52574:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   52578:	0005883a 	mov	r2,zero
}
   5257c:	e037883a 	mov	sp,fp
   52580:	df000017 	ldw	fp,0(sp)
   52584:	dec00104 	addi	sp,sp,4
   52588:	f800283a 	ret

0005258c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   5258c:	defff404 	addi	sp,sp,-48
   52590:	df000b15 	stw	fp,44(sp)
   52594:	df000b04 	addi	fp,sp,44
   52598:	e13ffc15 	stw	r4,-16(fp)
   5259c:	e17ffd15 	stw	r5,-12(fp)
   525a0:	e1bffe15 	stw	r6,-8(fp)
   525a4:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   525a8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   525ac:	e0bfff17 	ldw	r2,-4(fp)
   525b0:	1000021e 	bne	r2,zero,525bc <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   525b4:	0005883a 	mov	r2,zero
   525b8:	00006506 	br	52750 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   525bc:	e0bffc17 	ldw	r2,-16(fp)
   525c0:	1000051e 	bne	r2,zero,525d8 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   525c4:	e0bfff17 	ldw	r2,-4(fp)
   525c8:	00c01884 	movi	r3,98
   525cc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   525d0:	0005883a 	mov	r2,zero
   525d4:	00005e06 	br	52750 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   525d8:	e0bffc17 	ldw	r2,-16(fp)
   525dc:	108000cc 	andi	r2,r2,3
   525e0:	10000526 	beq	r2,zero,525f8 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   525e4:	e0bfff17 	ldw	r2,-4(fp)
   525e8:	00c01884 	movi	r3,98
   525ec:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   525f0:	0005883a 	mov	r2,zero
   525f4:	00005606 	br	52750 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   525f8:	e0bffd17 	ldw	r2,-12(fp)
   525fc:	108000a8 	cmpgeui	r2,r2,2
   52600:	1000051e 	bne	r2,zero,52618 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   52604:	e0bfff17 	ldw	r2,-4(fp)
   52608:	00c016c4 	movi	r3,91
   5260c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   52610:	0005883a 	mov	r2,zero
   52614:	00004e06 	br	52750 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   52618:	e0bffe17 	ldw	r2,-8(fp)
   5261c:	10800128 	cmpgeui	r2,r2,4
   52620:	1000051e 	bne	r2,zero,52638 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   52624:	e0bfff17 	ldw	r2,-4(fp)
   52628:	00c01704 	movi	r3,92
   5262c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   52630:	0005883a 	mov	r2,zero
   52634:	00004606 	br	52750 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52638:	0005303a 	rdctl	r2,status
   5263c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52640:	e0fffb17 	ldw	r3,-20(fp)
   52644:	00bfff84 	movi	r2,-2
   52648:	1884703a 	and	r2,r3,r2
   5264c:	1001703a 	wrctl	status,r2
  
  return context;
   52650:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   52654:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   52658:	d0a72617 	ldw	r2,-25448(gp)
   5265c:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   52660:	d0a72617 	ldw	r2,-25448(gp)
   52664:	10000326 	beq	r2,zero,52674 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   52668:	d0a72617 	ldw	r2,-25448(gp)
   5266c:	10800117 	ldw	r2,4(r2)
   52670:	d0a72615 	stw	r2,-25448(gp)
   52674:	e0bff817 	ldw	r2,-32(fp)
   52678:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5267c:	e0bff917 	ldw	r2,-28(fp)
   52680:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   52684:	e0bffa17 	ldw	r2,-24(fp)
   52688:	1000051e 	bne	r2,zero,526a0 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   5268c:	e0bfff17 	ldw	r2,-4(fp)
   52690:	00c01684 	movi	r3,90
   52694:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   52698:	0005883a 	mov	r2,zero
   5269c:	00002c06 	br	52750 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   526a0:	e0bffc17 	ldw	r2,-16(fp)
   526a4:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   526a8:	e0fffc17 	ldw	r3,-16(fp)
   526ac:	e0bffe17 	ldw	r2,-8(fp)
   526b0:	1885883a 	add	r2,r3,r2
   526b4:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   526b8:	e03ff715 	stw	zero,-36(fp)
   526bc:	00000c06 	br	526f0 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   526c0:	e0bff617 	ldw	r2,-40(fp)
   526c4:	e0fff517 	ldw	r3,-44(fp)
   526c8:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   526cc:	e0bff517 	ldw	r2,-44(fp)
   526d0:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   526d4:	e0fff517 	ldw	r3,-44(fp)
   526d8:	e0bffe17 	ldw	r2,-8(fp)
   526dc:	1885883a 	add	r2,r3,r2
   526e0:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   526e4:	e0bff717 	ldw	r2,-36(fp)
   526e8:	10800044 	addi	r2,r2,1
   526ec:	e0bff715 	stw	r2,-36(fp)
   526f0:	e0bffd17 	ldw	r2,-12(fp)
   526f4:	10bfffc4 	addi	r2,r2,-1
   526f8:	e0fff717 	ldw	r3,-36(fp)
   526fc:	18bff036 	bltu	r3,r2,526c0 <__alt_data_end+0xfffecec0>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   52700:	e0bff617 	ldw	r2,-40(fp)
   52704:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   52708:	e0bffa17 	ldw	r2,-24(fp)
   5270c:	e0fffc17 	ldw	r3,-16(fp)
   52710:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   52714:	e0bffa17 	ldw	r2,-24(fp)
   52718:	e0fffc17 	ldw	r3,-16(fp)
   5271c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   52720:	e0bffa17 	ldw	r2,-24(fp)
   52724:	e0fffd17 	ldw	r3,-12(fp)
   52728:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   5272c:	e0bffa17 	ldw	r2,-24(fp)
   52730:	e0fffd17 	ldw	r3,-12(fp)
   52734:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   52738:	e0bffa17 	ldw	r2,-24(fp)
   5273c:	e0fffe17 	ldw	r3,-8(fp)
   52740:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   52744:	e0bfff17 	ldw	r2,-4(fp)
   52748:	10000005 	stb	zero,0(r2)
    return (pmem);
   5274c:	e0bffa17 	ldw	r2,-24(fp)
}
   52750:	e037883a 	mov	sp,fp
   52754:	df000017 	ldw	fp,0(sp)
   52758:	dec00104 	addi	sp,sp,4
   5275c:	f800283a 	ret

00052760 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   52760:	defff804 	addi	sp,sp,-32
   52764:	df000715 	stw	fp,28(sp)
   52768:	df000704 	addi	fp,sp,28
   5276c:	e13ffe15 	stw	r4,-8(fp)
   52770:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   52774:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   52778:	e0bfff17 	ldw	r2,-4(fp)
   5277c:	1000021e 	bne	r2,zero,52788 <OSMemGet+0x28>
        return ((void *)0);
   52780:	0005883a 	mov	r2,zero
   52784:	00002e06 	br	52840 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   52788:	e0bffe17 	ldw	r2,-8(fp)
   5278c:	1000051e 	bne	r2,zero,527a4 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   52790:	e0bfff17 	ldw	r2,-4(fp)
   52794:	00c01804 	movi	r3,96
   52798:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   5279c:	0005883a 	mov	r2,zero
   527a0:	00002706 	br	52840 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   527a4:	0005303a 	rdctl	r2,status
   527a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   527ac:	e0fffd17 	ldw	r3,-12(fp)
   527b0:	00bfff84 	movi	r2,-2
   527b4:	1884703a 	and	r2,r3,r2
   527b8:	1001703a 	wrctl	status,r2
  
  return context;
   527bc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   527c0:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   527c4:	e0bffe17 	ldw	r2,-8(fp)
   527c8:	10800417 	ldw	r2,16(r2)
   527cc:	10001426 	beq	r2,zero,52820 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   527d0:	e0bffe17 	ldw	r2,-8(fp)
   527d4:	10800117 	ldw	r2,4(r2)
   527d8:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   527dc:	e0bffb17 	ldw	r2,-20(fp)
   527e0:	10c00017 	ldw	r3,0(r2)
   527e4:	e0bffe17 	ldw	r2,-8(fp)
   527e8:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   527ec:	e0bffe17 	ldw	r2,-8(fp)
   527f0:	10800417 	ldw	r2,16(r2)
   527f4:	10ffffc4 	addi	r3,r2,-1
   527f8:	e0bffe17 	ldw	r2,-8(fp)
   527fc:	10c00415 	stw	r3,16(r2)
   52800:	e0bff917 	ldw	r2,-28(fp)
   52804:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52808:	e0bffa17 	ldw	r2,-24(fp)
   5280c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   52810:	e0bfff17 	ldw	r2,-4(fp)
   52814:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   52818:	e0bffb17 	ldw	r2,-20(fp)
   5281c:	00000806 	br	52840 <OSMemGet+0xe0>
   52820:	e0bff917 	ldw	r2,-28(fp)
   52824:	e0bffc15 	stw	r2,-16(fp)
   52828:	e0bffc17 	ldw	r2,-16(fp)
   5282c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   52830:	e0bfff17 	ldw	r2,-4(fp)
   52834:	00c01744 	movi	r3,93
   52838:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   5283c:	0005883a 	mov	r2,zero
}
   52840:	e037883a 	mov	sp,fp
   52844:	df000017 	ldw	fp,0(sp)
   52848:	dec00104 	addi	sp,sp,4
   5284c:	f800283a 	ret

00052850 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   52850:	defff704 	addi	sp,sp,-36
   52854:	dfc00815 	stw	ra,32(sp)
   52858:	df000715 	stw	fp,28(sp)
   5285c:	df000704 	addi	fp,sp,28
   52860:	e13ffd15 	stw	r4,-12(fp)
   52864:	e17ffe15 	stw	r5,-8(fp)
   52868:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   5286c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   52870:	e0bfff17 	ldw	r2,-4(fp)
   52874:	1000021e 	bne	r2,zero,52880 <OSMemNameGet+0x30>
        return (0);
   52878:	0005883a 	mov	r2,zero
   5287c:	00002b06 	br	5292c <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   52880:	e0bffd17 	ldw	r2,-12(fp)
   52884:	1000051e 	bne	r2,zero,5289c <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   52888:	e0bfff17 	ldw	r2,-4(fp)
   5288c:	00c01804 	movi	r3,96
   52890:	10c00005 	stb	r3,0(r2)
        return (0);
   52894:	0005883a 	mov	r2,zero
   52898:	00002406 	br	5292c <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   5289c:	e0bffe17 	ldw	r2,-8(fp)
   528a0:	1000051e 	bne	r2,zero,528b8 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   528a4:	e0bfff17 	ldw	r2,-4(fp)
   528a8:	00c00304 	movi	r3,12
   528ac:	10c00005 	stb	r3,0(r2)
        return (0);
   528b0:	0005883a 	mov	r2,zero
   528b4:	00001d06 	br	5292c <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   528b8:	d0a72b03 	ldbu	r2,-25428(gp)
   528bc:	10803fcc 	andi	r2,r2,255
   528c0:	10000526 	beq	r2,zero,528d8 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   528c4:	e0bfff17 	ldw	r2,-4(fp)
   528c8:	00c00444 	movi	r3,17
   528cc:	10c00005 	stb	r3,0(r2)
        return (0);
   528d0:	0005883a 	mov	r2,zero
   528d4:	00001506 	br	5292c <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   528d8:	0005303a 	rdctl	r2,status
   528dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   528e0:	e0fffb17 	ldw	r3,-20(fp)
   528e4:	00bfff84 	movi	r2,-2
   528e8:	1884703a 	and	r2,r3,r2
   528ec:	1001703a 	wrctl	status,r2
  
  return context;
   528f0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   528f4:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   528f8:	e0bffd17 	ldw	r2,-12(fp)
   528fc:	10800504 	addi	r2,r2,20
   52900:	100b883a 	mov	r5,r2
   52904:	e13ffe17 	ldw	r4,-8(fp)
   52908:	004fc900 	call	4fc90 <OS_StrCopy>
   5290c:	e0bffa05 	stb	r2,-24(fp)
   52910:	e0bff917 	ldw	r2,-28(fp)
   52914:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52918:	e0bffc17 	ldw	r2,-16(fp)
   5291c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   52920:	e0bfff17 	ldw	r2,-4(fp)
   52924:	10000005 	stb	zero,0(r2)
    return (len);
   52928:	e0bffa03 	ldbu	r2,-24(fp)
}
   5292c:	e037883a 	mov	sp,fp
   52930:	dfc00117 	ldw	ra,4(sp)
   52934:	df000017 	ldw	fp,0(sp)
   52938:	dec00204 	addi	sp,sp,8
   5293c:	f800283a 	ret

00052940 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   52940:	defff604 	addi	sp,sp,-40
   52944:	dfc00915 	stw	ra,36(sp)
   52948:	df000815 	stw	fp,32(sp)
   5294c:	df000804 	addi	fp,sp,32
   52950:	e13ffd15 	stw	r4,-12(fp)
   52954:	e17ffe15 	stw	r5,-8(fp)
   52958:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   5295c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   52960:	e0bfff17 	ldw	r2,-4(fp)
   52964:	10003526 	beq	r2,zero,52a3c <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   52968:	e0bffd17 	ldw	r2,-12(fp)
   5296c:	1000041e 	bne	r2,zero,52980 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   52970:	e0bfff17 	ldw	r2,-4(fp)
   52974:	00c01804 	movi	r3,96
   52978:	10c00005 	stb	r3,0(r2)
        return;
   5297c:	00003006 	br	52a40 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   52980:	e0bffe17 	ldw	r2,-8(fp)
   52984:	1000041e 	bne	r2,zero,52998 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   52988:	e0bfff17 	ldw	r2,-4(fp)
   5298c:	00c00304 	movi	r3,12
   52990:	10c00005 	stb	r3,0(r2)
        return;
   52994:	00002a06 	br	52a40 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   52998:	d0a72b03 	ldbu	r2,-25428(gp)
   5299c:	10803fcc 	andi	r2,r2,255
   529a0:	10000426 	beq	r2,zero,529b4 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   529a4:	e0bfff17 	ldw	r2,-4(fp)
   529a8:	00c00484 	movi	r3,18
   529ac:	10c00005 	stb	r3,0(r2)
        return;
   529b0:	00002306 	br	52a40 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   529b4:	0005303a 	rdctl	r2,status
   529b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   529bc:	e0fffc17 	ldw	r3,-16(fp)
   529c0:	00bfff84 	movi	r2,-2
   529c4:	1884703a 	and	r2,r3,r2
   529c8:	1001703a 	wrctl	status,r2
  
  return context;
   529cc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   529d0:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   529d4:	e13ffe17 	ldw	r4,-8(fp)
   529d8:	004fd040 	call	4fd04 <OS_StrLen>
   529dc:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   529e0:	e0bffa03 	ldbu	r2,-24(fp)
   529e4:	10800830 	cmpltui	r2,r2,32
   529e8:	1000081e 	bne	r2,zero,52a0c <OSMemNameSet+0xcc>
   529ec:	e0bff817 	ldw	r2,-32(fp)
   529f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   529f4:	e0bff917 	ldw	r2,-28(fp)
   529f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   529fc:	e0bfff17 	ldw	r2,-4(fp)
   52a00:	00c018c4 	movi	r3,99
   52a04:	10c00005 	stb	r3,0(r2)
        return;
   52a08:	00000d06 	br	52a40 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   52a0c:	e0bffd17 	ldw	r2,-12(fp)
   52a10:	10800504 	addi	r2,r2,20
   52a14:	e17ffe17 	ldw	r5,-8(fp)
   52a18:	1009883a 	mov	r4,r2
   52a1c:	004fc900 	call	4fc90 <OS_StrCopy>
   52a20:	e0bff817 	ldw	r2,-32(fp)
   52a24:	e0bffb15 	stw	r2,-20(fp)
   52a28:	e0bffb17 	ldw	r2,-20(fp)
   52a2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   52a30:	e0bfff17 	ldw	r2,-4(fp)
   52a34:	10000005 	stb	zero,0(r2)
   52a38:	00000106 	br	52a40 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   52a3c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   52a40:	e037883a 	mov	sp,fp
   52a44:	dfc00117 	ldw	ra,4(sp)
   52a48:	df000017 	ldw	fp,0(sp)
   52a4c:	dec00204 	addi	sp,sp,8
   52a50:	f800283a 	ret

00052a54 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   52a54:	defff904 	addi	sp,sp,-28
   52a58:	df000615 	stw	fp,24(sp)
   52a5c:	df000604 	addi	fp,sp,24
   52a60:	e13ffe15 	stw	r4,-8(fp)
   52a64:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   52a68:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   52a6c:	e0bffe17 	ldw	r2,-8(fp)
   52a70:	1000021e 	bne	r2,zero,52a7c <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   52a74:	00801804 	movi	r2,96
   52a78:	00002806 	br	52b1c <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   52a7c:	e0bfff17 	ldw	r2,-4(fp)
   52a80:	1000021e 	bne	r2,zero,52a8c <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   52a84:	008017c4 	movi	r2,95
   52a88:	00002406 	br	52b1c <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52a8c:	0005303a 	rdctl	r2,status
   52a90:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52a94:	e0fffd17 	ldw	r3,-12(fp)
   52a98:	00bfff84 	movi	r2,-2
   52a9c:	1884703a 	and	r2,r3,r2
   52aa0:	1001703a 	wrctl	status,r2
  
  return context;
   52aa4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   52aa8:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   52aac:	e0bffe17 	ldw	r2,-8(fp)
   52ab0:	10c00417 	ldw	r3,16(r2)
   52ab4:	e0bffe17 	ldw	r2,-8(fp)
   52ab8:	10800317 	ldw	r2,12(r2)
   52abc:	18800636 	bltu	r3,r2,52ad8 <OSMemPut+0x84>
   52ac0:	e0bffa17 	ldw	r2,-24(fp)
   52ac4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52ac8:	e0bffb17 	ldw	r2,-20(fp)
   52acc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   52ad0:	00801784 	movi	r2,94
   52ad4:	00001106 	br	52b1c <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   52ad8:	e0bffe17 	ldw	r2,-8(fp)
   52adc:	10c00117 	ldw	r3,4(r2)
   52ae0:	e0bfff17 	ldw	r2,-4(fp)
   52ae4:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   52ae8:	e0bffe17 	ldw	r2,-8(fp)
   52aec:	e0ffff17 	ldw	r3,-4(fp)
   52af0:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   52af4:	e0bffe17 	ldw	r2,-8(fp)
   52af8:	10800417 	ldw	r2,16(r2)
   52afc:	10c00044 	addi	r3,r2,1
   52b00:	e0bffe17 	ldw	r2,-8(fp)
   52b04:	10c00415 	stw	r3,16(r2)
   52b08:	e0bffa17 	ldw	r2,-24(fp)
   52b0c:	e0bffc15 	stw	r2,-16(fp)
   52b10:	e0bffc17 	ldw	r2,-16(fp)
   52b14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   52b18:	0005883a 	mov	r2,zero
}
   52b1c:	e037883a 	mov	sp,fp
   52b20:	df000017 	ldw	fp,0(sp)
   52b24:	dec00104 	addi	sp,sp,4
   52b28:	f800283a 	ret

00052b2c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   52b2c:	defffa04 	addi	sp,sp,-24
   52b30:	df000515 	stw	fp,20(sp)
   52b34:	df000504 	addi	fp,sp,20
   52b38:	e13ffe15 	stw	r4,-8(fp)
   52b3c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   52b40:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   52b44:	e0bffe17 	ldw	r2,-8(fp)
   52b48:	1000021e 	bne	r2,zero,52b54 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   52b4c:	00801804 	movi	r2,96
   52b50:	00002c06 	br	52c04 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   52b54:	e0bfff17 	ldw	r2,-4(fp)
   52b58:	1000021e 	bne	r2,zero,52b64 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   52b5c:	00801844 	movi	r2,97
   52b60:	00002806 	br	52c04 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52b64:	0005303a 	rdctl	r2,status
   52b68:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52b6c:	e0fffc17 	ldw	r3,-16(fp)
   52b70:	00bfff84 	movi	r2,-2
   52b74:	1884703a 	and	r2,r3,r2
   52b78:	1001703a 	wrctl	status,r2
  
  return context;
   52b7c:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   52b80:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   52b84:	e0bffe17 	ldw	r2,-8(fp)
   52b88:	10c00017 	ldw	r3,0(r2)
   52b8c:	e0bfff17 	ldw	r2,-4(fp)
   52b90:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   52b94:	e0bffe17 	ldw	r2,-8(fp)
   52b98:	10c00117 	ldw	r3,4(r2)
   52b9c:	e0bfff17 	ldw	r2,-4(fp)
   52ba0:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   52ba4:	e0bffe17 	ldw	r2,-8(fp)
   52ba8:	10c00217 	ldw	r3,8(r2)
   52bac:	e0bfff17 	ldw	r2,-4(fp)
   52bb0:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   52bb4:	e0bffe17 	ldw	r2,-8(fp)
   52bb8:	10c00317 	ldw	r3,12(r2)
   52bbc:	e0bfff17 	ldw	r2,-4(fp)
   52bc0:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   52bc4:	e0bffe17 	ldw	r2,-8(fp)
   52bc8:	10c00417 	ldw	r3,16(r2)
   52bcc:	e0bfff17 	ldw	r2,-4(fp)
   52bd0:	10c00415 	stw	r3,16(r2)
   52bd4:	e0bffb17 	ldw	r2,-20(fp)
   52bd8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52bdc:	e0bffd17 	ldw	r2,-12(fp)
   52be0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   52be4:	e0bfff17 	ldw	r2,-4(fp)
   52be8:	10c00317 	ldw	r3,12(r2)
   52bec:	e0bfff17 	ldw	r2,-4(fp)
   52bf0:	10800417 	ldw	r2,16(r2)
   52bf4:	1887c83a 	sub	r3,r3,r2
   52bf8:	e0bfff17 	ldw	r2,-4(fp)
   52bfc:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   52c00:	0005883a 	mov	r2,zero
}
   52c04:	e037883a 	mov	sp,fp
   52c08:	df000017 	ldw	fp,0(sp)
   52c0c:	dec00104 	addi	sp,sp,4
   52c10:	f800283a 	ret

00052c14 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   52c14:	defffc04 	addi	sp,sp,-16
   52c18:	dfc00315 	stw	ra,12(sp)
   52c1c:	df000215 	stw	fp,8(sp)
   52c20:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   52c24:	01430c04 	movi	r5,3120
   52c28:	010001b4 	movhi	r4,6
   52c2c:	2102c904 	addi	r4,r4,2852
   52c30:	004fa900 	call	4fa90 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   52c34:	008001b4 	movhi	r2,6
   52c38:	1082c904 	addi	r2,r2,2852
   52c3c:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   52c40:	e03fff0d 	sth	zero,-4(fp)
   52c44:	00001606 	br	52ca0 <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   52c48:	e0bfff0b 	ldhu	r2,-4(fp)
   52c4c:	10800044 	addi	r2,r2,1
   52c50:	01400d04 	movi	r5,52
   52c54:	1009883a 	mov	r4,r2
   52c58:	00406e00 	call	406e0 <__mulsi3>
   52c5c:	1007883a 	mov	r3,r2
   52c60:	008001b4 	movhi	r2,6
   52c64:	1082c904 	addi	r2,r2,2852
   52c68:	1887883a 	add	r3,r3,r2
   52c6c:	e0bffe17 	ldw	r2,-8(fp)
   52c70:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   52c74:	e0bffe17 	ldw	r2,-8(fp)
   52c78:	00c00fc4 	movi	r3,63
   52c7c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   52c80:	e0bffe17 	ldw	r2,-8(fp)
   52c84:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   52c88:	e0bffe17 	ldw	r2,-8(fp)
   52c8c:	10800d04 	addi	r2,r2,52
   52c90:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   52c94:	e0bfff0b 	ldhu	r2,-4(fp)
   52c98:	10800044 	addi	r2,r2,1
   52c9c:	e0bfff0d 	sth	r2,-4(fp)
   52ca0:	e0bfff0b 	ldhu	r2,-4(fp)
   52ca4:	10800ef0 	cmpltui	r2,r2,59
   52ca8:	103fe71e 	bne	r2,zero,52c48 <__alt_data_end+0xfffed448>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   52cac:	e0bffe17 	ldw	r2,-8(fp)
   52cb0:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   52cb4:	e0bffe17 	ldw	r2,-8(fp)
   52cb8:	00c00fc4 	movi	r3,63
   52cbc:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   52cc0:	e0bffe17 	ldw	r2,-8(fp)
   52cc4:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   52cc8:	008001b4 	movhi	r2,6
   52ccc:	1082c904 	addi	r2,r2,2852
   52cd0:	d0a72615 	stw	r2,-25448(gp)
#endif
}
   52cd4:	0001883a 	nop
   52cd8:	e037883a 	mov	sp,fp
   52cdc:	dfc00117 	ldw	ra,4(sp)
   52ce0:	df000017 	ldw	fp,0(sp)
   52ce4:	dec00204 	addi	sp,sp,8
   52ce8:	f800283a 	ret

00052cec <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   52cec:	defff804 	addi	sp,sp,-32
   52cf0:	df000715 	stw	fp,28(sp)
   52cf4:	df000704 	addi	fp,sp,28
   52cf8:	e13ffe15 	stw	r4,-8(fp)
   52cfc:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   52d00:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   52d04:	e0bfff17 	ldw	r2,-4(fp)
   52d08:	1000021e 	bne	r2,zero,52d14 <OSQAccept+0x28>
        return ((void *)0);
   52d0c:	0005883a 	mov	r2,zero
   52d10:	00004206 	br	52e1c <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   52d14:	e0bffe17 	ldw	r2,-8(fp)
   52d18:	1000051e 	bne	r2,zero,52d30 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   52d1c:	e0bfff17 	ldw	r2,-4(fp)
   52d20:	00c00104 	movi	r3,4
   52d24:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   52d28:	0005883a 	mov	r2,zero
   52d2c:	00003b06 	br	52e1c <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   52d30:	e0bffe17 	ldw	r2,-8(fp)
   52d34:	10800003 	ldbu	r2,0(r2)
   52d38:	10803fcc 	andi	r2,r2,255
   52d3c:	108000a0 	cmpeqi	r2,r2,2
   52d40:	1000051e 	bne	r2,zero,52d58 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   52d44:	e0bfff17 	ldw	r2,-4(fp)
   52d48:	00c00044 	movi	r3,1
   52d4c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   52d50:	0005883a 	mov	r2,zero
   52d54:	00003106 	br	52e1c <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52d58:	0005303a 	rdctl	r2,status
   52d5c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52d60:	e0fffd17 	ldw	r3,-12(fp)
   52d64:	00bfff84 	movi	r2,-2
   52d68:	1884703a 	and	r2,r3,r2
   52d6c:	1001703a 	wrctl	status,r2
  
  return context;
   52d70:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   52d74:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   52d78:	e0bffe17 	ldw	r2,-8(fp)
   52d7c:	10800117 	ldw	r2,4(r2)
   52d80:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   52d84:	e0bffc17 	ldw	r2,-16(fp)
   52d88:	1080058b 	ldhu	r2,22(r2)
   52d8c:	10bfffcc 	andi	r2,r2,65535
   52d90:	10001926 	beq	r2,zero,52df8 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   52d94:	e0bffc17 	ldw	r2,-16(fp)
   52d98:	10800417 	ldw	r2,16(r2)
   52d9c:	11000104 	addi	r4,r2,4
   52da0:	e0fffc17 	ldw	r3,-16(fp)
   52da4:	19000415 	stw	r4,16(r3)
   52da8:	10800017 	ldw	r2,0(r2)
   52dac:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   52db0:	e0bffc17 	ldw	r2,-16(fp)
   52db4:	1080058b 	ldhu	r2,22(r2)
   52db8:	10bfffc4 	addi	r2,r2,-1
   52dbc:	1007883a 	mov	r3,r2
   52dc0:	e0bffc17 	ldw	r2,-16(fp)
   52dc4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   52dc8:	e0bffc17 	ldw	r2,-16(fp)
   52dcc:	10c00417 	ldw	r3,16(r2)
   52dd0:	e0bffc17 	ldw	r2,-16(fp)
   52dd4:	10800217 	ldw	r2,8(r2)
   52dd8:	1880041e 	bne	r3,r2,52dec <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   52ddc:	e0bffc17 	ldw	r2,-16(fp)
   52de0:	10c00117 	ldw	r3,4(r2)
   52de4:	e0bffc17 	ldw	r2,-16(fp)
   52de8:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   52dec:	e0bfff17 	ldw	r2,-4(fp)
   52df0:	10000005 	stb	zero,0(r2)
   52df4:	00000406 	br	52e08 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   52df8:	e0bfff17 	ldw	r2,-4(fp)
   52dfc:	00c007c4 	movi	r3,31
   52e00:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   52e04:	e03ff915 	stw	zero,-28(fp)
   52e08:	e0bffa17 	ldw	r2,-24(fp)
   52e0c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52e10:	e0bffb17 	ldw	r2,-20(fp)
   52e14:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   52e18:	e0bff917 	ldw	r2,-28(fp)
}
   52e1c:	e037883a 	mov	sp,fp
   52e20:	df000017 	ldw	fp,0(sp)
   52e24:	dec00104 	addi	sp,sp,4
   52e28:	f800283a 	ret

00052e2c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   52e2c:	defff404 	addi	sp,sp,-48
   52e30:	dfc00b15 	stw	ra,44(sp)
   52e34:	df000a15 	stw	fp,40(sp)
   52e38:	df000a04 	addi	fp,sp,40
   52e3c:	e13ffe15 	stw	r4,-8(fp)
   52e40:	2805883a 	mov	r2,r5
   52e44:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   52e48:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   52e4c:	d0a72b03 	ldbu	r2,-25428(gp)
   52e50:	10803fcc 	andi	r2,r2,255
   52e54:	10000226 	beq	r2,zero,52e60 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   52e58:	0005883a 	mov	r2,zero
   52e5c:	00005906 	br	52fc4 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52e60:	0005303a 	rdctl	r2,status
   52e64:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52e68:	e0fffd17 	ldw	r3,-12(fp)
   52e6c:	00bfff84 	movi	r2,-2
   52e70:	1884703a 	and	r2,r3,r2
   52e74:	1001703a 	wrctl	status,r2
  
  return context;
   52e78:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   52e7c:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   52e80:	d0a72a17 	ldw	r2,-25432(gp)
   52e84:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   52e88:	d0a72a17 	ldw	r2,-25432(gp)
   52e8c:	10000326 	beq	r2,zero,52e9c <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   52e90:	d0a72a17 	ldw	r2,-25432(gp)
   52e94:	10800117 	ldw	r2,4(r2)
   52e98:	d0a72a15 	stw	r2,-25432(gp)
   52e9c:	e0bff717 	ldw	r2,-36(fp)
   52ea0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52ea4:	e0bff817 	ldw	r2,-32(fp)
   52ea8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   52eac:	e0bff617 	ldw	r2,-40(fp)
   52eb0:	10004326 	beq	r2,zero,52fc0 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52eb4:	0005303a 	rdctl	r2,status
   52eb8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52ebc:	e0fff917 	ldw	r3,-28(fp)
   52ec0:	00bfff84 	movi	r2,-2
   52ec4:	1884703a 	and	r2,r3,r2
   52ec8:	1001703a 	wrctl	status,r2
  
  return context;
   52ecc:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   52ed0:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   52ed4:	d0a72817 	ldw	r2,-25440(gp)
   52ed8:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   52edc:	e0bffb17 	ldw	r2,-20(fp)
   52ee0:	10002d26 	beq	r2,zero,52f98 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   52ee4:	d0a72817 	ldw	r2,-25440(gp)
   52ee8:	10800017 	ldw	r2,0(r2)
   52eec:	d0a72815 	stw	r2,-25440(gp)
   52ef0:	e0bff717 	ldw	r2,-36(fp)
   52ef4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52ef8:	e0bffa17 	ldw	r2,-24(fp)
   52efc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   52f00:	e0bffb17 	ldw	r2,-20(fp)
   52f04:	e0fffe17 	ldw	r3,-8(fp)
   52f08:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   52f0c:	e0bfff0b 	ldhu	r2,-4(fp)
   52f10:	1085883a 	add	r2,r2,r2
   52f14:	1085883a 	add	r2,r2,r2
   52f18:	1007883a 	mov	r3,r2
   52f1c:	e0bffe17 	ldw	r2,-8(fp)
   52f20:	10c7883a 	add	r3,r2,r3
   52f24:	e0bffb17 	ldw	r2,-20(fp)
   52f28:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   52f2c:	e0bffb17 	ldw	r2,-20(fp)
   52f30:	e0fffe17 	ldw	r3,-8(fp)
   52f34:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   52f38:	e0bffb17 	ldw	r2,-20(fp)
   52f3c:	e0fffe17 	ldw	r3,-8(fp)
   52f40:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   52f44:	e0bffb17 	ldw	r2,-20(fp)
   52f48:	e0ffff0b 	ldhu	r3,-4(fp)
   52f4c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   52f50:	e0bffb17 	ldw	r2,-20(fp)
   52f54:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   52f58:	e0bff617 	ldw	r2,-40(fp)
   52f5c:	00c00084 	movi	r3,2
   52f60:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   52f64:	e0bff617 	ldw	r2,-40(fp)
   52f68:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   52f6c:	e0bff617 	ldw	r2,-40(fp)
   52f70:	e0fffb17 	ldw	r3,-20(fp)
   52f74:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   52f78:	e0bff617 	ldw	r2,-40(fp)
   52f7c:	00c00fc4 	movi	r3,63
   52f80:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   52f84:	e0bff617 	ldw	r2,-40(fp)
   52f88:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   52f8c:	e13ff617 	ldw	r4,-40(fp)
   52f90:	004f6b00 	call	4f6b0 <OS_EventWaitListInit>
   52f94:	00000a06 	br	52fc0 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   52f98:	d0e72a17 	ldw	r3,-25432(gp)
   52f9c:	e0bff617 	ldw	r2,-40(fp)
   52fa0:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   52fa4:	e0bff617 	ldw	r2,-40(fp)
   52fa8:	d0a72a15 	stw	r2,-25432(gp)
   52fac:	e0bff717 	ldw	r2,-36(fp)
   52fb0:	e0bffc15 	stw	r2,-16(fp)
   52fb4:	e0bffc17 	ldw	r2,-16(fp)
   52fb8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   52fbc:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   52fc0:	e0bff617 	ldw	r2,-40(fp)
}
   52fc4:	e037883a 	mov	sp,fp
   52fc8:	dfc00117 	ldw	ra,4(sp)
   52fcc:	df000017 	ldw	fp,0(sp)
   52fd0:	dec00204 	addi	sp,sp,8
   52fd4:	f800283a 	ret

00052fd8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   52fd8:	defff204 	addi	sp,sp,-56
   52fdc:	dfc00d15 	stw	ra,52(sp)
   52fe0:	df000c15 	stw	fp,48(sp)
   52fe4:	df000c04 	addi	fp,sp,48
   52fe8:	e13ffd15 	stw	r4,-12(fp)
   52fec:	2805883a 	mov	r2,r5
   52ff0:	e1bfff15 	stw	r6,-4(fp)
   52ff4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   52ff8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   52ffc:	e0bfff17 	ldw	r2,-4(fp)
   53000:	1000021e 	bne	r2,zero,5300c <OSQDel+0x34>
        return (pevent);
   53004:	e0bffd17 	ldw	r2,-12(fp)
   53008:	00008e06 	br	53244 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   5300c:	e0bffd17 	ldw	r2,-12(fp)
   53010:	1000051e 	bne	r2,zero,53028 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   53014:	e0bfff17 	ldw	r2,-4(fp)
   53018:	00c00104 	movi	r3,4
   5301c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   53020:	e0bffd17 	ldw	r2,-12(fp)
   53024:	00008706 	br	53244 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   53028:	e0bffd17 	ldw	r2,-12(fp)
   5302c:	10800003 	ldbu	r2,0(r2)
   53030:	10803fcc 	andi	r2,r2,255
   53034:	108000a0 	cmpeqi	r2,r2,2
   53038:	1000051e 	bne	r2,zero,53050 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   5303c:	e0bfff17 	ldw	r2,-4(fp)
   53040:	00c00044 	movi	r3,1
   53044:	10c00005 	stb	r3,0(r2)
        return (pevent);
   53048:	e0bffd17 	ldw	r2,-12(fp)
   5304c:	00007d06 	br	53244 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   53050:	d0a72b03 	ldbu	r2,-25428(gp)
   53054:	10803fcc 	andi	r2,r2,255
   53058:	10000526 	beq	r2,zero,53070 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   5305c:	e0bfff17 	ldw	r2,-4(fp)
   53060:	00c003c4 	movi	r3,15
   53064:	10c00005 	stb	r3,0(r2)
        return (pevent);
   53068:	e0bffd17 	ldw	r2,-12(fp)
   5306c:	00007506 	br	53244 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53070:	0005303a 	rdctl	r2,status
   53074:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53078:	e0fffc17 	ldw	r3,-16(fp)
   5307c:	00bfff84 	movi	r2,-2
   53080:	1884703a 	and	r2,r3,r2
   53084:	1001703a 	wrctl	status,r2
  
  return context;
   53088:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   5308c:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   53090:	e0bffd17 	ldw	r2,-12(fp)
   53094:	10800283 	ldbu	r2,10(r2)
   53098:	10803fcc 	andi	r2,r2,255
   5309c:	10000326 	beq	r2,zero,530ac <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   530a0:	00800044 	movi	r2,1
   530a4:	e0bff405 	stb	r2,-48(fp)
   530a8:	00000106 	br	530b0 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   530ac:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   530b0:	e0bffe03 	ldbu	r2,-8(fp)
   530b4:	10000326 	beq	r2,zero,530c4 <OSQDel+0xec>
   530b8:	10800060 	cmpeqi	r2,r2,1
   530bc:	1000301e 	bne	r2,zero,53180 <OSQDel+0x1a8>
   530c0:	00005506 	br	53218 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   530c4:	e0bff403 	ldbu	r2,-48(fp)
   530c8:	10001e1e 	bne	r2,zero,53144 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   530cc:	e0bffd17 	ldw	r2,-12(fp)
   530d0:	00c00fc4 	movi	r3,63
   530d4:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   530d8:	e0bffd17 	ldw	r2,-12(fp)
   530dc:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   530e0:	e0bffd17 	ldw	r2,-12(fp)
   530e4:	10800117 	ldw	r2,4(r2)
   530e8:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   530ec:	d0e72817 	ldw	r3,-25440(gp)
   530f0:	e0bff817 	ldw	r2,-32(fp)
   530f4:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   530f8:	e0bff817 	ldw	r2,-32(fp)
   530fc:	d0a72815 	stw	r2,-25440(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   53100:	e0bffd17 	ldw	r2,-12(fp)
   53104:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   53108:	d0e72a17 	ldw	r3,-25432(gp)
   5310c:	e0bffd17 	ldw	r2,-12(fp)
   53110:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   53114:	e0bffd17 	ldw	r2,-12(fp)
   53118:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   5311c:	e0bffd17 	ldw	r2,-12(fp)
   53120:	d0a72a15 	stw	r2,-25432(gp)
   53124:	e0bff617 	ldw	r2,-40(fp)
   53128:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5312c:	e0bff717 	ldw	r2,-36(fp)
   53130:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   53134:	e0bfff17 	ldw	r2,-4(fp)
   53138:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   5313c:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   53140:	00003f06 	br	53240 <OSQDel+0x268>
   53144:	e0bff617 	ldw	r2,-40(fp)
   53148:	e0bff915 	stw	r2,-28(fp)
   5314c:	e0bff917 	ldw	r2,-28(fp)
   53150:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   53154:	e0bfff17 	ldw	r2,-4(fp)
   53158:	00c01244 	movi	r3,73
   5315c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   53160:	e0bffd17 	ldw	r2,-12(fp)
   53164:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   53168:	00003506 	br	53240 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   5316c:	000f883a 	mov	r7,zero
   53170:	01800104 	movi	r6,4
   53174:	000b883a 	mov	r5,zero
   53178:	e13ffd17 	ldw	r4,-12(fp)
   5317c:	004f1000 	call	4f100 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   53180:	e0bffd17 	ldw	r2,-12(fp)
   53184:	10800283 	ldbu	r2,10(r2)
   53188:	10803fcc 	andi	r2,r2,255
   5318c:	103ff71e 	bne	r2,zero,5316c <__alt_data_end+0xfffed96c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   53190:	e0bffd17 	ldw	r2,-12(fp)
   53194:	00c00fc4 	movi	r3,63
   53198:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   5319c:	e0bffd17 	ldw	r2,-12(fp)
   531a0:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   531a4:	e0bffd17 	ldw	r2,-12(fp)
   531a8:	10800117 	ldw	r2,4(r2)
   531ac:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   531b0:	d0e72817 	ldw	r3,-25440(gp)
   531b4:	e0bff817 	ldw	r2,-32(fp)
   531b8:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   531bc:	e0bff817 	ldw	r2,-32(fp)
   531c0:	d0a72815 	stw	r2,-25440(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   531c4:	e0bffd17 	ldw	r2,-12(fp)
   531c8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   531cc:	d0e72a17 	ldw	r3,-25432(gp)
   531d0:	e0bffd17 	ldw	r2,-12(fp)
   531d4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   531d8:	e0bffd17 	ldw	r2,-12(fp)
   531dc:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   531e0:	e0bffd17 	ldw	r2,-12(fp)
   531e4:	d0a72a15 	stw	r2,-25432(gp)
   531e8:	e0bff617 	ldw	r2,-40(fp)
   531ec:	e0bffa15 	stw	r2,-24(fp)
   531f0:	e0bffa17 	ldw	r2,-24(fp)
   531f4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   531f8:	e0bff403 	ldbu	r2,-48(fp)
   531fc:	10800058 	cmpnei	r2,r2,1
   53200:	1000011e 	bne	r2,zero,53208 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   53204:	004fb4c0 	call	4fb4c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   53208:	e0bfff17 	ldw	r2,-4(fp)
   5320c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   53210:	e03ff515 	stw	zero,-44(fp)
             break;
   53214:	00000a06 	br	53240 <OSQDel+0x268>
   53218:	e0bff617 	ldw	r2,-40(fp)
   5321c:	e0bffb15 	stw	r2,-20(fp)
   53220:	e0bffb17 	ldw	r2,-20(fp)
   53224:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   53228:	e0bfff17 	ldw	r2,-4(fp)
   5322c:	00c001c4 	movi	r3,7
   53230:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   53234:	e0bffd17 	ldw	r2,-12(fp)
   53238:	e0bff515 	stw	r2,-44(fp)
             break;
   5323c:	0001883a 	nop
    }
    return (pevent_return);
   53240:	e0bff517 	ldw	r2,-44(fp)
}
   53244:	e037883a 	mov	sp,fp
   53248:	dfc00117 	ldw	ra,4(sp)
   5324c:	df000017 	ldw	fp,0(sp)
   53250:	dec00204 	addi	sp,sp,8
   53254:	f800283a 	ret

00053258 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   53258:	defffa04 	addi	sp,sp,-24
   5325c:	df000515 	stw	fp,20(sp)
   53260:	df000504 	addi	fp,sp,20
   53264:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   53268:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   5326c:	e0bfff17 	ldw	r2,-4(fp)
   53270:	1000021e 	bne	r2,zero,5327c <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   53274:	00800104 	movi	r2,4
   53278:	00002106 	br	53300 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   5327c:	e0bfff17 	ldw	r2,-4(fp)
   53280:	10800003 	ldbu	r2,0(r2)
   53284:	10803fcc 	andi	r2,r2,255
   53288:	108000a0 	cmpeqi	r2,r2,2
   5328c:	1000021e 	bne	r2,zero,53298 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   53290:	00800044 	movi	r2,1
   53294:	00001a06 	br	53300 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53298:	0005303a 	rdctl	r2,status
   5329c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   532a0:	e0fffd17 	ldw	r3,-12(fp)
   532a4:	00bfff84 	movi	r2,-2
   532a8:	1884703a 	and	r2,r3,r2
   532ac:	1001703a 	wrctl	status,r2
  
  return context;
   532b0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   532b4:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   532b8:	e0bfff17 	ldw	r2,-4(fp)
   532bc:	10800117 	ldw	r2,4(r2)
   532c0:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   532c4:	e0bffc17 	ldw	r2,-16(fp)
   532c8:	10c00117 	ldw	r3,4(r2)
   532cc:	e0bffc17 	ldw	r2,-16(fp)
   532d0:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   532d4:	e0bffc17 	ldw	r2,-16(fp)
   532d8:	10c00117 	ldw	r3,4(r2)
   532dc:	e0bffc17 	ldw	r2,-16(fp)
   532e0:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   532e4:	e0bffc17 	ldw	r2,-16(fp)
   532e8:	1000058d 	sth	zero,22(r2)
   532ec:	e0bffb17 	ldw	r2,-20(fp)
   532f0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   532f4:	e0bffe17 	ldw	r2,-8(fp)
   532f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   532fc:	0005883a 	mov	r2,zero
}
   53300:	e037883a 	mov	sp,fp
   53304:	df000017 	ldw	fp,0(sp)
   53308:	dec00104 	addi	sp,sp,4
   5330c:	f800283a 	ret

00053310 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   53310:	defff304 	addi	sp,sp,-52
   53314:	dfc00c15 	stw	ra,48(sp)
   53318:	df000b15 	stw	fp,44(sp)
   5331c:	df000b04 	addi	fp,sp,44
   53320:	e13ffd15 	stw	r4,-12(fp)
   53324:	2805883a 	mov	r2,r5
   53328:	e1bfff15 	stw	r6,-4(fp)
   5332c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   53330:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   53334:	e0bfff17 	ldw	r2,-4(fp)
   53338:	1000021e 	bne	r2,zero,53344 <OSQPend+0x34>
        return ((void *)0);
   5333c:	0005883a 	mov	r2,zero
   53340:	00009106 	br	53588 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   53344:	e0bffd17 	ldw	r2,-12(fp)
   53348:	1000051e 	bne	r2,zero,53360 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   5334c:	e0bfff17 	ldw	r2,-4(fp)
   53350:	00c00104 	movi	r3,4
   53354:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   53358:	0005883a 	mov	r2,zero
   5335c:	00008a06 	br	53588 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   53360:	e0bffd17 	ldw	r2,-12(fp)
   53364:	10800003 	ldbu	r2,0(r2)
   53368:	10803fcc 	andi	r2,r2,255
   5336c:	108000a0 	cmpeqi	r2,r2,2
   53370:	1000051e 	bne	r2,zero,53388 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   53374:	e0bfff17 	ldw	r2,-4(fp)
   53378:	00c00044 	movi	r3,1
   5337c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   53380:	0005883a 	mov	r2,zero
   53384:	00008006 	br	53588 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   53388:	d0a72b03 	ldbu	r2,-25428(gp)
   5338c:	10803fcc 	andi	r2,r2,255
   53390:	10000526 	beq	r2,zero,533a8 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   53394:	e0bfff17 	ldw	r2,-4(fp)
   53398:	00c00084 	movi	r3,2
   5339c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   533a0:	0005883a 	mov	r2,zero
   533a4:	00007806 	br	53588 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   533a8:	d0a71d03 	ldbu	r2,-25484(gp)
   533ac:	10803fcc 	andi	r2,r2,255
   533b0:	10000526 	beq	r2,zero,533c8 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   533b4:	e0bfff17 	ldw	r2,-4(fp)
   533b8:	00c00344 	movi	r3,13
   533bc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   533c0:	0005883a 	mov	r2,zero
   533c4:	00007006 	br	53588 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   533c8:	0005303a 	rdctl	r2,status
   533cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   533d0:	e0fffc17 	ldw	r3,-16(fp)
   533d4:	00bfff84 	movi	r2,-2
   533d8:	1884703a 	and	r2,r3,r2
   533dc:	1001703a 	wrctl	status,r2
  
  return context;
   533e0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   533e4:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   533e8:	e0bffd17 	ldw	r2,-12(fp)
   533ec:	10800117 	ldw	r2,4(r2)
   533f0:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   533f4:	e0bff817 	ldw	r2,-32(fp)
   533f8:	1080058b 	ldhu	r2,22(r2)
   533fc:	10bfffcc 	andi	r2,r2,65535
   53400:	10001e26 	beq	r2,zero,5347c <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   53404:	e0bff817 	ldw	r2,-32(fp)
   53408:	10800417 	ldw	r2,16(r2)
   5340c:	11000104 	addi	r4,r2,4
   53410:	e0fff817 	ldw	r3,-32(fp)
   53414:	19000415 	stw	r4,16(r3)
   53418:	10800017 	ldw	r2,0(r2)
   5341c:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   53420:	e0bff817 	ldw	r2,-32(fp)
   53424:	1080058b 	ldhu	r2,22(r2)
   53428:	10bfffc4 	addi	r2,r2,-1
   5342c:	1007883a 	mov	r3,r2
   53430:	e0bff817 	ldw	r2,-32(fp)
   53434:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   53438:	e0bff817 	ldw	r2,-32(fp)
   5343c:	10c00417 	ldw	r3,16(r2)
   53440:	e0bff817 	ldw	r2,-32(fp)
   53444:	10800217 	ldw	r2,8(r2)
   53448:	1880041e 	bne	r3,r2,5345c <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   5344c:	e0bff817 	ldw	r2,-32(fp)
   53450:	10c00117 	ldw	r3,4(r2)
   53454:	e0bff817 	ldw	r2,-32(fp)
   53458:	10c00415 	stw	r3,16(r2)
   5345c:	e0bff617 	ldw	r2,-40(fp)
   53460:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53464:	e0bff717 	ldw	r2,-36(fp)
   53468:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   5346c:	e0bfff17 	ldw	r2,-4(fp)
   53470:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   53474:	e0bff517 	ldw	r2,-44(fp)
   53478:	00004306 	br	53588 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   5347c:	d0a72c17 	ldw	r2,-25424(gp)
   53480:	d0e72c17 	ldw	r3,-25424(gp)
   53484:	18c00c03 	ldbu	r3,48(r3)
   53488:	18c00114 	ori	r3,r3,4
   5348c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   53490:	d0a72c17 	ldw	r2,-25424(gp)
   53494:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   53498:	d0a72c17 	ldw	r2,-25424(gp)
   5349c:	e0fffe0b 	ldhu	r3,-8(fp)
   534a0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   534a4:	e13ffd17 	ldw	r4,-12(fp)
   534a8:	004f2980 	call	4f298 <OS_EventTaskWait>
   534ac:	e0bff617 	ldw	r2,-40(fp)
   534b0:	e0bffb15 	stw	r2,-20(fp)
   534b4:	e0bffb17 	ldw	r2,-20(fp)
   534b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   534bc:	004fb4c0 	call	4fb4c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   534c0:	0005303a 	rdctl	r2,status
   534c4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   534c8:	e0fff917 	ldw	r3,-28(fp)
   534cc:	00bfff84 	movi	r2,-2
   534d0:	1884703a 	and	r2,r3,r2
   534d4:	1001703a 	wrctl	status,r2
  
  return context;
   534d8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   534dc:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   534e0:	d0a72c17 	ldw	r2,-25424(gp)
   534e4:	10800c43 	ldbu	r2,49(r2)
   534e8:	10803fcc 	andi	r2,r2,255
   534ec:	10000326 	beq	r2,zero,534fc <OSQPend+0x1ec>
   534f0:	108000a0 	cmpeqi	r2,r2,2
   534f4:	1000071e 	bne	r2,zero,53514 <OSQPend+0x204>
   534f8:	00000b06 	br	53528 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   534fc:	d0a72c17 	ldw	r2,-25424(gp)
   53500:	10800917 	ldw	r2,36(r2)
   53504:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   53508:	e0bfff17 	ldw	r2,-4(fp)
   5350c:	10000005 	stb	zero,0(r2)
             break;
   53510:	00000e06 	br	5354c <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   53514:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   53518:	e0bfff17 	ldw	r2,-4(fp)
   5351c:	00c00384 	movi	r3,14
   53520:	10c00005 	stb	r3,0(r2)
             break;
   53524:	00000906 	br	5354c <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   53528:	d0a72c17 	ldw	r2,-25424(gp)
   5352c:	e17ffd17 	ldw	r5,-12(fp)
   53530:	1009883a 	mov	r4,r2
   53534:	004f4f80 	call	4f4f8 <OS_EventTaskRemove>
             pmsg = (void *)0;
   53538:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   5353c:	e0bfff17 	ldw	r2,-4(fp)
   53540:	00c00284 	movi	r3,10
   53544:	10c00005 	stb	r3,0(r2)
             break;
   53548:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   5354c:	d0a72c17 	ldw	r2,-25424(gp)
   53550:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   53554:	d0a72c17 	ldw	r2,-25424(gp)
   53558:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   5355c:	d0a72c17 	ldw	r2,-25424(gp)
   53560:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   53564:	d0a72c17 	ldw	r2,-25424(gp)
   53568:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   5356c:	d0a72c17 	ldw	r2,-25424(gp)
   53570:	10000915 	stw	zero,36(r2)
   53574:	e0bff617 	ldw	r2,-40(fp)
   53578:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5357c:	e0bffa17 	ldw	r2,-24(fp)
   53580:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   53584:	e0bff517 	ldw	r2,-44(fp)
}
   53588:	e037883a 	mov	sp,fp
   5358c:	dfc00117 	ldw	ra,4(sp)
   53590:	df000017 	ldw	fp,0(sp)
   53594:	dec00204 	addi	sp,sp,8
   53598:	f800283a 	ret

0005359c <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   5359c:	defff604 	addi	sp,sp,-40
   535a0:	dfc00915 	stw	ra,36(sp)
   535a4:	df000815 	stw	fp,32(sp)
   535a8:	df000804 	addi	fp,sp,32
   535ac:	e13ffd15 	stw	r4,-12(fp)
   535b0:	2805883a 	mov	r2,r5
   535b4:	e1bfff15 	stw	r6,-4(fp)
   535b8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   535bc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   535c0:	e0bfff17 	ldw	r2,-4(fp)
   535c4:	1000021e 	bne	r2,zero,535d0 <OSQPendAbort+0x34>
        return (0);
   535c8:	0005883a 	mov	r2,zero
   535cc:	00004906 	br	536f4 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   535d0:	e0bffd17 	ldw	r2,-12(fp)
   535d4:	1000051e 	bne	r2,zero,535ec <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   535d8:	e0bfff17 	ldw	r2,-4(fp)
   535dc:	00c00104 	movi	r3,4
   535e0:	10c00005 	stb	r3,0(r2)
        return (0);
   535e4:	0005883a 	mov	r2,zero
   535e8:	00004206 	br	536f4 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   535ec:	e0bffd17 	ldw	r2,-12(fp)
   535f0:	10800003 	ldbu	r2,0(r2)
   535f4:	10803fcc 	andi	r2,r2,255
   535f8:	108000a0 	cmpeqi	r2,r2,2
   535fc:	1000051e 	bne	r2,zero,53614 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   53600:	e0bfff17 	ldw	r2,-4(fp)
   53604:	00c00044 	movi	r3,1
   53608:	10c00005 	stb	r3,0(r2)
        return (0);
   5360c:	0005883a 	mov	r2,zero
   53610:	00003806 	br	536f4 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53614:	0005303a 	rdctl	r2,status
   53618:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5361c:	e0fffc17 	ldw	r3,-16(fp)
   53620:	00bfff84 	movi	r2,-2
   53624:	1884703a 	and	r2,r3,r2
   53628:	1001703a 	wrctl	status,r2
  
  return context;
   5362c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   53630:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   53634:	e0bffd17 	ldw	r2,-12(fp)
   53638:	10800283 	ldbu	r2,10(r2)
   5363c:	10803fcc 	andi	r2,r2,255
   53640:	10002526 	beq	r2,zero,536d8 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   53644:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   53648:	e0bffe03 	ldbu	r2,-8(fp)
   5364c:	10800060 	cmpeqi	r2,r2,1
   53650:	10000e26 	beq	r2,zero,5368c <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   53654:	00000806 	br	53678 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   53658:	01c00084 	movi	r7,2
   5365c:	01800104 	movi	r6,4
   53660:	000b883a 	mov	r5,zero
   53664:	e13ffd17 	ldw	r4,-12(fp)
   53668:	004f1000 	call	4f100 <OS_EventTaskRdy>
                     nbr_tasks++;
   5366c:	e0bff803 	ldbu	r2,-32(fp)
   53670:	10800044 	addi	r2,r2,1
   53674:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   53678:	e0bffd17 	ldw	r2,-12(fp)
   5367c:	10800283 	ldbu	r2,10(r2)
   53680:	10803fcc 	andi	r2,r2,255
   53684:	103ff41e 	bne	r2,zero,53658 <__alt_data_end+0xfffede58>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   53688:	00000906 	br	536b0 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   5368c:	01c00084 	movi	r7,2
   53690:	01800104 	movi	r6,4
   53694:	000b883a 	mov	r5,zero
   53698:	e13ffd17 	ldw	r4,-12(fp)
   5369c:	004f1000 	call	4f100 <OS_EventTaskRdy>
                 nbr_tasks++;
   536a0:	e0bff803 	ldbu	r2,-32(fp)
   536a4:	10800044 	addi	r2,r2,1
   536a8:	e0bff805 	stb	r2,-32(fp)
                 break;
   536ac:	0001883a 	nop
   536b0:	e0bff917 	ldw	r2,-28(fp)
   536b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   536b8:	e0bffa17 	ldw	r2,-24(fp)
   536bc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   536c0:	004fb4c0 	call	4fb4c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   536c4:	e0bfff17 	ldw	r2,-4(fp)
   536c8:	00c00384 	movi	r3,14
   536cc:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   536d0:	e0bff803 	ldbu	r2,-32(fp)
   536d4:	00000706 	br	536f4 <OSQPendAbort+0x158>
   536d8:	e0bff917 	ldw	r2,-28(fp)
   536dc:	e0bffb15 	stw	r2,-20(fp)
   536e0:	e0bffb17 	ldw	r2,-20(fp)
   536e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   536e8:	e0bfff17 	ldw	r2,-4(fp)
   536ec:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   536f0:	0005883a 	mov	r2,zero
}
   536f4:	e037883a 	mov	sp,fp
   536f8:	dfc00117 	ldw	ra,4(sp)
   536fc:	df000017 	ldw	fp,0(sp)
   53700:	dec00204 	addi	sp,sp,8
   53704:	f800283a 	ret

00053708 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   53708:	defff604 	addi	sp,sp,-40
   5370c:	dfc00915 	stw	ra,36(sp)
   53710:	df000815 	stw	fp,32(sp)
   53714:	df000804 	addi	fp,sp,32
   53718:	e13ffe15 	stw	r4,-8(fp)
   5371c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   53720:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   53724:	e0bffe17 	ldw	r2,-8(fp)
   53728:	1000021e 	bne	r2,zero,53734 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   5372c:	00800104 	movi	r2,4
   53730:	00004a06 	br	5385c <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   53734:	e0bffe17 	ldw	r2,-8(fp)
   53738:	10800003 	ldbu	r2,0(r2)
   5373c:	10803fcc 	andi	r2,r2,255
   53740:	108000a0 	cmpeqi	r2,r2,2
   53744:	1000021e 	bne	r2,zero,53750 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   53748:	00800044 	movi	r2,1
   5374c:	00004306 	br	5385c <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53750:	0005303a 	rdctl	r2,status
   53754:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53758:	e0fffd17 	ldw	r3,-12(fp)
   5375c:	00bfff84 	movi	r2,-2
   53760:	1884703a 	and	r2,r3,r2
   53764:	1001703a 	wrctl	status,r2
  
  return context;
   53768:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   5376c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   53770:	e0bffe17 	ldw	r2,-8(fp)
   53774:	10800283 	ldbu	r2,10(r2)
   53778:	10803fcc 	andi	r2,r2,255
   5377c:	10000c26 	beq	r2,zero,537b0 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   53780:	000f883a 	mov	r7,zero
   53784:	01800104 	movi	r6,4
   53788:	e17fff17 	ldw	r5,-4(fp)
   5378c:	e13ffe17 	ldw	r4,-8(fp)
   53790:	004f1000 	call	4f100 <OS_EventTaskRdy>
   53794:	e0bff817 	ldw	r2,-32(fp)
   53798:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5379c:	e0bff917 	ldw	r2,-28(fp)
   537a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   537a4:	004fb4c0 	call	4fb4c <OS_Sched>
        return (OS_ERR_NONE);
   537a8:	0005883a 	mov	r2,zero
   537ac:	00002b06 	br	5385c <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   537b0:	e0bffe17 	ldw	r2,-8(fp)
   537b4:	10800117 	ldw	r2,4(r2)
   537b8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   537bc:	e0bffb17 	ldw	r2,-20(fp)
   537c0:	10c0058b 	ldhu	r3,22(r2)
   537c4:	e0bffb17 	ldw	r2,-20(fp)
   537c8:	1080050b 	ldhu	r2,20(r2)
   537cc:	18ffffcc 	andi	r3,r3,65535
   537d0:	10bfffcc 	andi	r2,r2,65535
   537d4:	18800636 	bltu	r3,r2,537f0 <OSQPost+0xe8>
   537d8:	e0bff817 	ldw	r2,-32(fp)
   537dc:	e0bffa15 	stw	r2,-24(fp)
   537e0:	e0bffa17 	ldw	r2,-24(fp)
   537e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   537e8:	00800784 	movi	r2,30
   537ec:	00001b06 	br	5385c <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   537f0:	e0bffb17 	ldw	r2,-20(fp)
   537f4:	10800317 	ldw	r2,12(r2)
   537f8:	11000104 	addi	r4,r2,4
   537fc:	e0fffb17 	ldw	r3,-20(fp)
   53800:	19000315 	stw	r4,12(r3)
   53804:	e0ffff17 	ldw	r3,-4(fp)
   53808:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   5380c:	e0bffb17 	ldw	r2,-20(fp)
   53810:	1080058b 	ldhu	r2,22(r2)
   53814:	10800044 	addi	r2,r2,1
   53818:	1007883a 	mov	r3,r2
   5381c:	e0bffb17 	ldw	r2,-20(fp)
   53820:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   53824:	e0bffb17 	ldw	r2,-20(fp)
   53828:	10c00317 	ldw	r3,12(r2)
   5382c:	e0bffb17 	ldw	r2,-20(fp)
   53830:	10800217 	ldw	r2,8(r2)
   53834:	1880041e 	bne	r3,r2,53848 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   53838:	e0bffb17 	ldw	r2,-20(fp)
   5383c:	10c00117 	ldw	r3,4(r2)
   53840:	e0bffb17 	ldw	r2,-20(fp)
   53844:	10c00315 	stw	r3,12(r2)
   53848:	e0bff817 	ldw	r2,-32(fp)
   5384c:	e0bffc15 	stw	r2,-16(fp)
   53850:	e0bffc17 	ldw	r2,-16(fp)
   53854:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   53858:	0005883a 	mov	r2,zero
}
   5385c:	e037883a 	mov	sp,fp
   53860:	dfc00117 	ldw	ra,4(sp)
   53864:	df000017 	ldw	fp,0(sp)
   53868:	dec00204 	addi	sp,sp,8
   5386c:	f800283a 	ret

00053870 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   53870:	defff604 	addi	sp,sp,-40
   53874:	dfc00915 	stw	ra,36(sp)
   53878:	df000815 	stw	fp,32(sp)
   5387c:	df000804 	addi	fp,sp,32
   53880:	e13ffe15 	stw	r4,-8(fp)
   53884:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   53888:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   5388c:	e0bffe17 	ldw	r2,-8(fp)
   53890:	1000021e 	bne	r2,zero,5389c <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   53894:	00800104 	movi	r2,4
   53898:	00004c06 	br	539cc <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   5389c:	e0bffe17 	ldw	r2,-8(fp)
   538a0:	10800003 	ldbu	r2,0(r2)
   538a4:	10803fcc 	andi	r2,r2,255
   538a8:	108000a0 	cmpeqi	r2,r2,2
   538ac:	1000021e 	bne	r2,zero,538b8 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   538b0:	00800044 	movi	r2,1
   538b4:	00004506 	br	539cc <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   538b8:	0005303a 	rdctl	r2,status
   538bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   538c0:	e0fffd17 	ldw	r3,-12(fp)
   538c4:	00bfff84 	movi	r2,-2
   538c8:	1884703a 	and	r2,r3,r2
   538cc:	1001703a 	wrctl	status,r2
  
  return context;
   538d0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   538d4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   538d8:	e0bffe17 	ldw	r2,-8(fp)
   538dc:	10800283 	ldbu	r2,10(r2)
   538e0:	10803fcc 	andi	r2,r2,255
   538e4:	10000c26 	beq	r2,zero,53918 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   538e8:	000f883a 	mov	r7,zero
   538ec:	01800104 	movi	r6,4
   538f0:	e17fff17 	ldw	r5,-4(fp)
   538f4:	e13ffe17 	ldw	r4,-8(fp)
   538f8:	004f1000 	call	4f100 <OS_EventTaskRdy>
   538fc:	e0bff817 	ldw	r2,-32(fp)
   53900:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53904:	e0bff917 	ldw	r2,-28(fp)
   53908:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   5390c:	004fb4c0 	call	4fb4c <OS_Sched>
        return (OS_ERR_NONE);
   53910:	0005883a 	mov	r2,zero
   53914:	00002d06 	br	539cc <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   53918:	e0bffe17 	ldw	r2,-8(fp)
   5391c:	10800117 	ldw	r2,4(r2)
   53920:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   53924:	e0bffb17 	ldw	r2,-20(fp)
   53928:	10c0058b 	ldhu	r3,22(r2)
   5392c:	e0bffb17 	ldw	r2,-20(fp)
   53930:	1080050b 	ldhu	r2,20(r2)
   53934:	18ffffcc 	andi	r3,r3,65535
   53938:	10bfffcc 	andi	r2,r2,65535
   5393c:	18800636 	bltu	r3,r2,53958 <OSQPostFront+0xe8>
   53940:	e0bff817 	ldw	r2,-32(fp)
   53944:	e0bffa15 	stw	r2,-24(fp)
   53948:	e0bffa17 	ldw	r2,-24(fp)
   5394c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   53950:	00800784 	movi	r2,30
   53954:	00001d06 	br	539cc <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   53958:	e0bffb17 	ldw	r2,-20(fp)
   5395c:	10c00417 	ldw	r3,16(r2)
   53960:	e0bffb17 	ldw	r2,-20(fp)
   53964:	10800117 	ldw	r2,4(r2)
   53968:	1880041e 	bne	r3,r2,5397c <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   5396c:	e0bffb17 	ldw	r2,-20(fp)
   53970:	10c00217 	ldw	r3,8(r2)
   53974:	e0bffb17 	ldw	r2,-20(fp)
   53978:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   5397c:	e0bffb17 	ldw	r2,-20(fp)
   53980:	10800417 	ldw	r2,16(r2)
   53984:	10ffff04 	addi	r3,r2,-4
   53988:	e0bffb17 	ldw	r2,-20(fp)
   5398c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   53990:	e0bffb17 	ldw	r2,-20(fp)
   53994:	10800417 	ldw	r2,16(r2)
   53998:	e0ffff17 	ldw	r3,-4(fp)
   5399c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   539a0:	e0bffb17 	ldw	r2,-20(fp)
   539a4:	1080058b 	ldhu	r2,22(r2)
   539a8:	10800044 	addi	r2,r2,1
   539ac:	1007883a 	mov	r3,r2
   539b0:	e0bffb17 	ldw	r2,-20(fp)
   539b4:	10c0058d 	sth	r3,22(r2)
   539b8:	e0bff817 	ldw	r2,-32(fp)
   539bc:	e0bffc15 	stw	r2,-16(fp)
   539c0:	e0bffc17 	ldw	r2,-16(fp)
   539c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   539c8:	0005883a 	mov	r2,zero
}
   539cc:	e037883a 	mov	sp,fp
   539d0:	dfc00117 	ldw	ra,4(sp)
   539d4:	df000017 	ldw	fp,0(sp)
   539d8:	dec00204 	addi	sp,sp,8
   539dc:	f800283a 	ret

000539e0 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   539e0:	defff504 	addi	sp,sp,-44
   539e4:	dfc00a15 	stw	ra,40(sp)
   539e8:	df000915 	stw	fp,36(sp)
   539ec:	df000904 	addi	fp,sp,36
   539f0:	e13ffd15 	stw	r4,-12(fp)
   539f4:	e17ffe15 	stw	r5,-8(fp)
   539f8:	3005883a 	mov	r2,r6
   539fc:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   53a00:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   53a04:	e0bffd17 	ldw	r2,-12(fp)
   53a08:	1000021e 	bne	r2,zero,53a14 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   53a0c:	00800104 	movi	r2,4
   53a10:	00007106 	br	53bd8 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   53a14:	e0bffd17 	ldw	r2,-12(fp)
   53a18:	10800003 	ldbu	r2,0(r2)
   53a1c:	10803fcc 	andi	r2,r2,255
   53a20:	108000a0 	cmpeqi	r2,r2,2
   53a24:	1000021e 	bne	r2,zero,53a30 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   53a28:	00800044 	movi	r2,1
   53a2c:	00006a06 	br	53bd8 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53a30:	0005303a 	rdctl	r2,status
   53a34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53a38:	e0fffc17 	ldw	r3,-16(fp)
   53a3c:	00bfff84 	movi	r2,-2
   53a40:	1884703a 	and	r2,r3,r2
   53a44:	1001703a 	wrctl	status,r2
  
  return context;
   53a48:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   53a4c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   53a50:	e0bffd17 	ldw	r2,-12(fp)
   53a54:	10800283 	ldbu	r2,10(r2)
   53a58:	10803fcc 	andi	r2,r2,255
   53a5c:	10001d26 	beq	r2,zero,53ad4 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   53a60:	e0bfff03 	ldbu	r2,-4(fp)
   53a64:	1080004c 	andi	r2,r2,1
   53a68:	10000b26 	beq	r2,zero,53a98 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   53a6c:	00000506 	br	53a84 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   53a70:	000f883a 	mov	r7,zero
   53a74:	01800104 	movi	r6,4
   53a78:	e17ffe17 	ldw	r5,-8(fp)
   53a7c:	e13ffd17 	ldw	r4,-12(fp)
   53a80:	004f1000 	call	4f100 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   53a84:	e0bffd17 	ldw	r2,-12(fp)
   53a88:	10800283 	ldbu	r2,10(r2)
   53a8c:	10803fcc 	andi	r2,r2,255
   53a90:	103ff71e 	bne	r2,zero,53a70 <__alt_data_end+0xfffee270>
   53a94:	00000506 	br	53aac <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   53a98:	000f883a 	mov	r7,zero
   53a9c:	01800104 	movi	r6,4
   53aa0:	e17ffe17 	ldw	r5,-8(fp)
   53aa4:	e13ffd17 	ldw	r4,-12(fp)
   53aa8:	004f1000 	call	4f100 <OS_EventTaskRdy>
   53aac:	e0bff717 	ldw	r2,-36(fp)
   53ab0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53ab4:	e0bff817 	ldw	r2,-32(fp)
   53ab8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   53abc:	e0bfff03 	ldbu	r2,-4(fp)
   53ac0:	1080010c 	andi	r2,r2,4
   53ac4:	1000011e 	bne	r2,zero,53acc <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   53ac8:	004fb4c0 	call	4fb4c <OS_Sched>
        }
        return (OS_ERR_NONE);
   53acc:	0005883a 	mov	r2,zero
   53ad0:	00004106 	br	53bd8 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   53ad4:	e0bffd17 	ldw	r2,-12(fp)
   53ad8:	10800117 	ldw	r2,4(r2)
   53adc:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   53ae0:	e0bffa17 	ldw	r2,-24(fp)
   53ae4:	10c0058b 	ldhu	r3,22(r2)
   53ae8:	e0bffa17 	ldw	r2,-24(fp)
   53aec:	1080050b 	ldhu	r2,20(r2)
   53af0:	18ffffcc 	andi	r3,r3,65535
   53af4:	10bfffcc 	andi	r2,r2,65535
   53af8:	18800636 	bltu	r3,r2,53b14 <OSQPostOpt+0x134>
   53afc:	e0bff717 	ldw	r2,-36(fp)
   53b00:	e0bff915 	stw	r2,-28(fp)
   53b04:	e0bff917 	ldw	r2,-28(fp)
   53b08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   53b0c:	00800784 	movi	r2,30
   53b10:	00003106 	br	53bd8 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   53b14:	e0bfff03 	ldbu	r2,-4(fp)
   53b18:	1080008c 	andi	r2,r2,2
   53b1c:	10001326 	beq	r2,zero,53b6c <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   53b20:	e0bffa17 	ldw	r2,-24(fp)
   53b24:	10c00417 	ldw	r3,16(r2)
   53b28:	e0bffa17 	ldw	r2,-24(fp)
   53b2c:	10800117 	ldw	r2,4(r2)
   53b30:	1880041e 	bne	r3,r2,53b44 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   53b34:	e0bffa17 	ldw	r2,-24(fp)
   53b38:	10c00217 	ldw	r3,8(r2)
   53b3c:	e0bffa17 	ldw	r2,-24(fp)
   53b40:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   53b44:	e0bffa17 	ldw	r2,-24(fp)
   53b48:	10800417 	ldw	r2,16(r2)
   53b4c:	10ffff04 	addi	r3,r2,-4
   53b50:	e0bffa17 	ldw	r2,-24(fp)
   53b54:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   53b58:	e0bffa17 	ldw	r2,-24(fp)
   53b5c:	10800417 	ldw	r2,16(r2)
   53b60:	e0fffe17 	ldw	r3,-8(fp)
   53b64:	10c00015 	stw	r3,0(r2)
   53b68:	00001006 	br	53bac <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   53b6c:	e0bffa17 	ldw	r2,-24(fp)
   53b70:	10800317 	ldw	r2,12(r2)
   53b74:	11000104 	addi	r4,r2,4
   53b78:	e0fffa17 	ldw	r3,-24(fp)
   53b7c:	19000315 	stw	r4,12(r3)
   53b80:	e0fffe17 	ldw	r3,-8(fp)
   53b84:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   53b88:	e0bffa17 	ldw	r2,-24(fp)
   53b8c:	10c00317 	ldw	r3,12(r2)
   53b90:	e0bffa17 	ldw	r2,-24(fp)
   53b94:	10800217 	ldw	r2,8(r2)
   53b98:	1880041e 	bne	r3,r2,53bac <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   53b9c:	e0bffa17 	ldw	r2,-24(fp)
   53ba0:	10c00117 	ldw	r3,4(r2)
   53ba4:	e0bffa17 	ldw	r2,-24(fp)
   53ba8:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   53bac:	e0bffa17 	ldw	r2,-24(fp)
   53bb0:	1080058b 	ldhu	r2,22(r2)
   53bb4:	10800044 	addi	r2,r2,1
   53bb8:	1007883a 	mov	r3,r2
   53bbc:	e0bffa17 	ldw	r2,-24(fp)
   53bc0:	10c0058d 	sth	r3,22(r2)
   53bc4:	e0bff717 	ldw	r2,-36(fp)
   53bc8:	e0bffb15 	stw	r2,-20(fp)
   53bcc:	e0bffb17 	ldw	r2,-20(fp)
   53bd0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   53bd4:	0005883a 	mov	r2,zero
}
   53bd8:	e037883a 	mov	sp,fp
   53bdc:	dfc00117 	ldw	ra,4(sp)
   53be0:	df000017 	ldw	fp,0(sp)
   53be4:	dec00204 	addi	sp,sp,8
   53be8:	f800283a 	ret

00053bec <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   53bec:	defff604 	addi	sp,sp,-40
   53bf0:	df000915 	stw	fp,36(sp)
   53bf4:	df000904 	addi	fp,sp,36
   53bf8:	e13ffe15 	stw	r4,-8(fp)
   53bfc:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   53c00:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   53c04:	e0bffe17 	ldw	r2,-8(fp)
   53c08:	1000021e 	bne	r2,zero,53c14 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   53c0c:	00800104 	movi	r2,4
   53c10:	00004906 	br	53d38 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   53c14:	e0bfff17 	ldw	r2,-4(fp)
   53c18:	1000021e 	bne	r2,zero,53c24 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   53c1c:	00800244 	movi	r2,9
   53c20:	00004506 	br	53d38 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   53c24:	e0bffe17 	ldw	r2,-8(fp)
   53c28:	10800003 	ldbu	r2,0(r2)
   53c2c:	10803fcc 	andi	r2,r2,255
   53c30:	108000a0 	cmpeqi	r2,r2,2
   53c34:	1000021e 	bne	r2,zero,53c40 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   53c38:	00800044 	movi	r2,1
   53c3c:	00003e06 	br	53d38 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53c40:	0005303a 	rdctl	r2,status
   53c44:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53c48:	e0fffd17 	ldw	r3,-12(fp)
   53c4c:	00bfff84 	movi	r2,-2
   53c50:	1884703a 	and	r2,r3,r2
   53c54:	1001703a 	wrctl	status,r2
  
  return context;
   53c58:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   53c5c:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   53c60:	e0bffe17 	ldw	r2,-8(fp)
   53c64:	10c00283 	ldbu	r3,10(r2)
   53c68:	e0bfff17 	ldw	r2,-4(fp)
   53c6c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   53c70:	e0bffe17 	ldw	r2,-8(fp)
   53c74:	108002c4 	addi	r2,r2,11
   53c78:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   53c7c:	e0bfff17 	ldw	r2,-4(fp)
   53c80:	10800204 	addi	r2,r2,8
   53c84:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   53c88:	e03ff705 	stb	zero,-36(fp)
   53c8c:	00000b06 	br	53cbc <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   53c90:	e0bff917 	ldw	r2,-28(fp)
   53c94:	10c00044 	addi	r3,r2,1
   53c98:	e0fff915 	stw	r3,-28(fp)
   53c9c:	e0fff817 	ldw	r3,-32(fp)
   53ca0:	19000044 	addi	r4,r3,1
   53ca4:	e13ff815 	stw	r4,-32(fp)
   53ca8:	18c00003 	ldbu	r3,0(r3)
   53cac:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   53cb0:	e0bff703 	ldbu	r2,-36(fp)
   53cb4:	10800044 	addi	r2,r2,1
   53cb8:	e0bff705 	stb	r2,-36(fp)
   53cbc:	e0bff703 	ldbu	r2,-36(fp)
   53cc0:	108000f0 	cmpltui	r2,r2,3
   53cc4:	103ff21e 	bne	r2,zero,53c90 <__alt_data_end+0xfffee490>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   53cc8:	e0bffe17 	ldw	r2,-8(fp)
   53ccc:	10800117 	ldw	r2,4(r2)
   53cd0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   53cd4:	e0bffc17 	ldw	r2,-16(fp)
   53cd8:	1080058b 	ldhu	r2,22(r2)
   53cdc:	10bfffcc 	andi	r2,r2,65535
   53ce0:	10000626 	beq	r2,zero,53cfc <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   53ce4:	e0bffc17 	ldw	r2,-16(fp)
   53ce8:	10800417 	ldw	r2,16(r2)
   53cec:	10c00017 	ldw	r3,0(r2)
   53cf0:	e0bfff17 	ldw	r2,-4(fp)
   53cf4:	10c00015 	stw	r3,0(r2)
   53cf8:	00000206 	br	53d04 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   53cfc:	e0bfff17 	ldw	r2,-4(fp)
   53d00:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   53d04:	e0bffc17 	ldw	r2,-16(fp)
   53d08:	10c0058b 	ldhu	r3,22(r2)
   53d0c:	e0bfff17 	ldw	r2,-4(fp)
   53d10:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   53d14:	e0bffc17 	ldw	r2,-16(fp)
   53d18:	10c0050b 	ldhu	r3,20(r2)
   53d1c:	e0bfff17 	ldw	r2,-4(fp)
   53d20:	10c0018d 	sth	r3,6(r2)
   53d24:	e0bffa17 	ldw	r2,-24(fp)
   53d28:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53d2c:	e0bffb17 	ldw	r2,-20(fp)
   53d30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   53d34:	0005883a 	mov	r2,zero
}
   53d38:	e037883a 	mov	sp,fp
   53d3c:	df000017 	ldw	fp,0(sp)
   53d40:	dec00104 	addi	sp,sp,4
   53d44:	f800283a 	ret

00053d48 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   53d48:	defffb04 	addi	sp,sp,-20
   53d4c:	dfc00415 	stw	ra,16(sp)
   53d50:	df000315 	stw	fp,12(sp)
   53d54:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   53d58:	01407804 	movi	r5,480
   53d5c:	010001b4 	movhi	r4,6
   53d60:	2107d504 	addi	r4,r4,8020
   53d64:	004fa900 	call	4fa90 <OS_MemClr>
    pq1 = &OSQTbl[0];
   53d68:	008001b4 	movhi	r2,6
   53d6c:	1087d504 	addi	r2,r2,8020
   53d70:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   53d74:	008001b4 	movhi	r2,6
   53d78:	1087db04 	addi	r2,r2,8044
   53d7c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   53d80:	e03ffd0d 	sth	zero,-12(fp)
   53d84:	00000c06 	br	53db8 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   53d88:	e0bffe17 	ldw	r2,-8(fp)
   53d8c:	e0ffff17 	ldw	r3,-4(fp)
   53d90:	10c00015 	stw	r3,0(r2)
        pq1++;
   53d94:	e0bffe17 	ldw	r2,-8(fp)
   53d98:	10800604 	addi	r2,r2,24
   53d9c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   53da0:	e0bfff17 	ldw	r2,-4(fp)
   53da4:	10800604 	addi	r2,r2,24
   53da8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   53dac:	e0bffd0b 	ldhu	r2,-12(fp)
   53db0:	10800044 	addi	r2,r2,1
   53db4:	e0bffd0d 	sth	r2,-12(fp)
   53db8:	e0bffd0b 	ldhu	r2,-12(fp)
   53dbc:	108004f0 	cmpltui	r2,r2,19
   53dc0:	103ff11e 	bne	r2,zero,53d88 <__alt_data_end+0xfffee588>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   53dc4:	e0bffe17 	ldw	r2,-8(fp)
   53dc8:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   53dcc:	008001b4 	movhi	r2,6
   53dd0:	1087d504 	addi	r2,r2,8020
   53dd4:	d0a72815 	stw	r2,-25440(gp)
#endif
}
   53dd8:	0001883a 	nop
   53ddc:	e037883a 	mov	sp,fp
   53de0:	dfc00117 	ldw	ra,4(sp)
   53de4:	df000017 	ldw	fp,0(sp)
   53de8:	dec00204 	addi	sp,sp,8
   53dec:	f800283a 	ret

00053df0 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   53df0:	defffa04 	addi	sp,sp,-24
   53df4:	df000515 	stw	fp,20(sp)
   53df8:	df000504 	addi	fp,sp,20
   53dfc:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   53e00:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   53e04:	e0bfff17 	ldw	r2,-4(fp)
   53e08:	1000021e 	bne	r2,zero,53e14 <OSSemAccept+0x24>
        return (0);
   53e0c:	0005883a 	mov	r2,zero
   53e10:	00001f06 	br	53e90 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   53e14:	e0bfff17 	ldw	r2,-4(fp)
   53e18:	10800003 	ldbu	r2,0(r2)
   53e1c:	10803fcc 	andi	r2,r2,255
   53e20:	108000e0 	cmpeqi	r2,r2,3
   53e24:	1000021e 	bne	r2,zero,53e30 <OSSemAccept+0x40>
        return (0);
   53e28:	0005883a 	mov	r2,zero
   53e2c:	00001806 	br	53e90 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53e30:	0005303a 	rdctl	r2,status
   53e34:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53e38:	e0fffe17 	ldw	r3,-8(fp)
   53e3c:	00bfff84 	movi	r2,-2
   53e40:	1884703a 	and	r2,r3,r2
   53e44:	1001703a 	wrctl	status,r2
  
  return context;
   53e48:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   53e4c:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   53e50:	e0bfff17 	ldw	r2,-4(fp)
   53e54:	1080020b 	ldhu	r2,8(r2)
   53e58:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   53e5c:	e0bffd0b 	ldhu	r2,-12(fp)
   53e60:	10000626 	beq	r2,zero,53e7c <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   53e64:	e0bfff17 	ldw	r2,-4(fp)
   53e68:	1080020b 	ldhu	r2,8(r2)
   53e6c:	10bfffc4 	addi	r2,r2,-1
   53e70:	1007883a 	mov	r3,r2
   53e74:	e0bfff17 	ldw	r2,-4(fp)
   53e78:	10c0020d 	sth	r3,8(r2)
   53e7c:	e0bffb17 	ldw	r2,-20(fp)
   53e80:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53e84:	e0bffc17 	ldw	r2,-16(fp)
   53e88:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   53e8c:	e0bffd0b 	ldhu	r2,-12(fp)
}
   53e90:	e037883a 	mov	sp,fp
   53e94:	df000017 	ldw	fp,0(sp)
   53e98:	dec00104 	addi	sp,sp,4
   53e9c:	f800283a 	ret

00053ea0 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   53ea0:	defff904 	addi	sp,sp,-28
   53ea4:	dfc00615 	stw	ra,24(sp)
   53ea8:	df000515 	stw	fp,20(sp)
   53eac:	df000504 	addi	fp,sp,20
   53eb0:	2005883a 	mov	r2,r4
   53eb4:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   53eb8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   53ebc:	d0a72b03 	ldbu	r2,-25428(gp)
   53ec0:	10803fcc 	andi	r2,r2,255
   53ec4:	10000226 	beq	r2,zero,53ed0 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   53ec8:	0005883a 	mov	r2,zero
   53ecc:	00002506 	br	53f64 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53ed0:	0005303a 	rdctl	r2,status
   53ed4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53ed8:	e0fffe17 	ldw	r3,-8(fp)
   53edc:	00bfff84 	movi	r2,-2
   53ee0:	1884703a 	and	r2,r3,r2
   53ee4:	1001703a 	wrctl	status,r2
  
  return context;
   53ee8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   53eec:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   53ef0:	d0a72a17 	ldw	r2,-25432(gp)
   53ef4:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   53ef8:	d0a72a17 	ldw	r2,-25432(gp)
   53efc:	10000326 	beq	r2,zero,53f0c <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   53f00:	d0a72a17 	ldw	r2,-25432(gp)
   53f04:	10800117 	ldw	r2,4(r2)
   53f08:	d0a72a15 	stw	r2,-25432(gp)
   53f0c:	e0bffb17 	ldw	r2,-20(fp)
   53f10:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53f14:	e0bffc17 	ldw	r2,-16(fp)
   53f18:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   53f1c:	e0bffd17 	ldw	r2,-12(fp)
   53f20:	10000f26 	beq	r2,zero,53f60 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   53f24:	e0bffd17 	ldw	r2,-12(fp)
   53f28:	00c000c4 	movi	r3,3
   53f2c:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   53f30:	e0bffd17 	ldw	r2,-12(fp)
   53f34:	e0ffff0b 	ldhu	r3,-4(fp)
   53f38:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   53f3c:	e0bffd17 	ldw	r2,-12(fp)
   53f40:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   53f44:	e0bffd17 	ldw	r2,-12(fp)
   53f48:	00c00fc4 	movi	r3,63
   53f4c:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   53f50:	e0bffd17 	ldw	r2,-12(fp)
   53f54:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   53f58:	e13ffd17 	ldw	r4,-12(fp)
   53f5c:	004f6b00 	call	4f6b0 <OS_EventWaitListInit>
    }
    return (pevent);
   53f60:	e0bffd17 	ldw	r2,-12(fp)
}
   53f64:	e037883a 	mov	sp,fp
   53f68:	dfc00117 	ldw	ra,4(sp)
   53f6c:	df000017 	ldw	fp,0(sp)
   53f70:	dec00204 	addi	sp,sp,8
   53f74:	f800283a 	ret

00053f78 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   53f78:	defff304 	addi	sp,sp,-52
   53f7c:	dfc00c15 	stw	ra,48(sp)
   53f80:	df000b15 	stw	fp,44(sp)
   53f84:	df000b04 	addi	fp,sp,44
   53f88:	e13ffd15 	stw	r4,-12(fp)
   53f8c:	2805883a 	mov	r2,r5
   53f90:	e1bfff15 	stw	r6,-4(fp)
   53f94:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   53f98:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   53f9c:	e0bfff17 	ldw	r2,-4(fp)
   53fa0:	1000021e 	bne	r2,zero,53fac <OSSemDel+0x34>
        return (pevent);
   53fa4:	e0bffd17 	ldw	r2,-12(fp)
   53fa8:	00007e06 	br	541a4 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   53fac:	e0bffd17 	ldw	r2,-12(fp)
   53fb0:	1000051e 	bne	r2,zero,53fc8 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   53fb4:	e0bfff17 	ldw	r2,-4(fp)
   53fb8:	00c00104 	movi	r3,4
   53fbc:	10c00005 	stb	r3,0(r2)
        return (pevent);
   53fc0:	e0bffd17 	ldw	r2,-12(fp)
   53fc4:	00007706 	br	541a4 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   53fc8:	e0bffd17 	ldw	r2,-12(fp)
   53fcc:	10800003 	ldbu	r2,0(r2)
   53fd0:	10803fcc 	andi	r2,r2,255
   53fd4:	108000e0 	cmpeqi	r2,r2,3
   53fd8:	1000051e 	bne	r2,zero,53ff0 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   53fdc:	e0bfff17 	ldw	r2,-4(fp)
   53fe0:	00c00044 	movi	r3,1
   53fe4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   53fe8:	e0bffd17 	ldw	r2,-12(fp)
   53fec:	00006d06 	br	541a4 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   53ff0:	d0a72b03 	ldbu	r2,-25428(gp)
   53ff4:	10803fcc 	andi	r2,r2,255
   53ff8:	10000526 	beq	r2,zero,54010 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   53ffc:	e0bfff17 	ldw	r2,-4(fp)
   54000:	00c003c4 	movi	r3,15
   54004:	10c00005 	stb	r3,0(r2)
        return (pevent);
   54008:	e0bffd17 	ldw	r2,-12(fp)
   5400c:	00006506 	br	541a4 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54010:	0005303a 	rdctl	r2,status
   54014:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54018:	e0fffc17 	ldw	r3,-16(fp)
   5401c:	00bfff84 	movi	r2,-2
   54020:	1884703a 	and	r2,r3,r2
   54024:	1001703a 	wrctl	status,r2
  
  return context;
   54028:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   5402c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   54030:	e0bffd17 	ldw	r2,-12(fp)
   54034:	10800283 	ldbu	r2,10(r2)
   54038:	10803fcc 	andi	r2,r2,255
   5403c:	10000326 	beq	r2,zero,5404c <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   54040:	00800044 	movi	r2,1
   54044:	e0bff505 	stb	r2,-44(fp)
   54048:	00000106 	br	54050 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   5404c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   54050:	e0bffe03 	ldbu	r2,-8(fp)
   54054:	10000326 	beq	r2,zero,54064 <OSSemDel+0xec>
   54058:	10800060 	cmpeqi	r2,r2,1
   5405c:	1000281e 	bne	r2,zero,54100 <OSSemDel+0x188>
   54060:	00004506 	br	54178 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   54064:	e0bff503 	ldbu	r2,-44(fp)
   54068:	1000161e 	bne	r2,zero,540c4 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   5406c:	e0bffd17 	ldw	r2,-12(fp)
   54070:	00c00fc4 	movi	r3,63
   54074:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   54078:	e0bffd17 	ldw	r2,-12(fp)
   5407c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   54080:	e0bffd17 	ldw	r2,-12(fp)
   54084:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   54088:	d0e72a17 	ldw	r3,-25432(gp)
   5408c:	e0bffd17 	ldw	r2,-12(fp)
   54090:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   54094:	e0bffd17 	ldw	r2,-12(fp)
   54098:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   5409c:	e0bffd17 	ldw	r2,-12(fp)
   540a0:	d0a72a15 	stw	r2,-25432(gp)
   540a4:	e0bff717 	ldw	r2,-36(fp)
   540a8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   540ac:	e0bff817 	ldw	r2,-32(fp)
   540b0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   540b4:	e0bfff17 	ldw	r2,-4(fp)
   540b8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   540bc:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   540c0:	00003706 	br	541a0 <OSSemDel+0x228>
   540c4:	e0bff717 	ldw	r2,-36(fp)
   540c8:	e0bff915 	stw	r2,-28(fp)
   540cc:	e0bff917 	ldw	r2,-28(fp)
   540d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   540d4:	e0bfff17 	ldw	r2,-4(fp)
   540d8:	00c01244 	movi	r3,73
   540dc:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   540e0:	e0bffd17 	ldw	r2,-12(fp)
   540e4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   540e8:	00002d06 	br	541a0 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   540ec:	000f883a 	mov	r7,zero
   540f0:	01800044 	movi	r6,1
   540f4:	000b883a 	mov	r5,zero
   540f8:	e13ffd17 	ldw	r4,-12(fp)
   540fc:	004f1000 	call	4f100 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   54100:	e0bffd17 	ldw	r2,-12(fp)
   54104:	10800283 	ldbu	r2,10(r2)
   54108:	10803fcc 	andi	r2,r2,255
   5410c:	103ff71e 	bne	r2,zero,540ec <__alt_data_end+0xfffee8ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   54110:	e0bffd17 	ldw	r2,-12(fp)
   54114:	00c00fc4 	movi	r3,63
   54118:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   5411c:	e0bffd17 	ldw	r2,-12(fp)
   54120:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   54124:	e0bffd17 	ldw	r2,-12(fp)
   54128:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   5412c:	d0e72a17 	ldw	r3,-25432(gp)
   54130:	e0bffd17 	ldw	r2,-12(fp)
   54134:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   54138:	e0bffd17 	ldw	r2,-12(fp)
   5413c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   54140:	e0bffd17 	ldw	r2,-12(fp)
   54144:	d0a72a15 	stw	r2,-25432(gp)
   54148:	e0bff717 	ldw	r2,-36(fp)
   5414c:	e0bffa15 	stw	r2,-24(fp)
   54150:	e0bffa17 	ldw	r2,-24(fp)
   54154:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   54158:	e0bff503 	ldbu	r2,-44(fp)
   5415c:	10800058 	cmpnei	r2,r2,1
   54160:	1000011e 	bne	r2,zero,54168 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   54164:	004fb4c0 	call	4fb4c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   54168:	e0bfff17 	ldw	r2,-4(fp)
   5416c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   54170:	e03ff615 	stw	zero,-40(fp)
             break;
   54174:	00000a06 	br	541a0 <OSSemDel+0x228>
   54178:	e0bff717 	ldw	r2,-36(fp)
   5417c:	e0bffb15 	stw	r2,-20(fp)
   54180:	e0bffb17 	ldw	r2,-20(fp)
   54184:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   54188:	e0bfff17 	ldw	r2,-4(fp)
   5418c:	00c001c4 	movi	r3,7
   54190:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   54194:	e0bffd17 	ldw	r2,-12(fp)
   54198:	e0bff615 	stw	r2,-40(fp)
             break;
   5419c:	0001883a 	nop
    }
    return (pevent_return);
   541a0:	e0bff617 	ldw	r2,-40(fp)
}
   541a4:	e037883a 	mov	sp,fp
   541a8:	dfc00117 	ldw	ra,4(sp)
   541ac:	df000017 	ldw	fp,0(sp)
   541b0:	dec00204 	addi	sp,sp,8
   541b4:	f800283a 	ret

000541b8 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   541b8:	defff504 	addi	sp,sp,-44
   541bc:	dfc00a15 	stw	ra,40(sp)
   541c0:	df000915 	stw	fp,36(sp)
   541c4:	df000904 	addi	fp,sp,36
   541c8:	e13ffd15 	stw	r4,-12(fp)
   541cc:	2805883a 	mov	r2,r5
   541d0:	e1bfff15 	stw	r6,-4(fp)
   541d4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   541d8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   541dc:	e0bfff17 	ldw	r2,-4(fp)
   541e0:	10007226 	beq	r2,zero,543ac <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   541e4:	e0bffd17 	ldw	r2,-12(fp)
   541e8:	1000041e 	bne	r2,zero,541fc <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   541ec:	e0bfff17 	ldw	r2,-4(fp)
   541f0:	00c00104 	movi	r3,4
   541f4:	10c00005 	stb	r3,0(r2)
        return;
   541f8:	00006d06 	br	543b0 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   541fc:	e0bffd17 	ldw	r2,-12(fp)
   54200:	10800003 	ldbu	r2,0(r2)
   54204:	10803fcc 	andi	r2,r2,255
   54208:	108000e0 	cmpeqi	r2,r2,3
   5420c:	1000041e 	bne	r2,zero,54220 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   54210:	e0bfff17 	ldw	r2,-4(fp)
   54214:	00c00044 	movi	r3,1
   54218:	10c00005 	stb	r3,0(r2)
        return;
   5421c:	00006406 	br	543b0 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   54220:	d0a72b03 	ldbu	r2,-25428(gp)
   54224:	10803fcc 	andi	r2,r2,255
   54228:	10000426 	beq	r2,zero,5423c <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   5422c:	e0bfff17 	ldw	r2,-4(fp)
   54230:	00c00084 	movi	r3,2
   54234:	10c00005 	stb	r3,0(r2)
        return;
   54238:	00005d06 	br	543b0 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   5423c:	d0a71d03 	ldbu	r2,-25484(gp)
   54240:	10803fcc 	andi	r2,r2,255
   54244:	10000426 	beq	r2,zero,54258 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   54248:	e0bfff17 	ldw	r2,-4(fp)
   5424c:	00c00344 	movi	r3,13
   54250:	10c00005 	stb	r3,0(r2)
        return;
   54254:	00005606 	br	543b0 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54258:	0005303a 	rdctl	r2,status
   5425c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54260:	e0fffc17 	ldw	r3,-16(fp)
   54264:	00bfff84 	movi	r2,-2
   54268:	1884703a 	and	r2,r3,r2
   5426c:	1001703a 	wrctl	status,r2
  
  return context;
   54270:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   54274:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   54278:	e0bffd17 	ldw	r2,-12(fp)
   5427c:	1080020b 	ldhu	r2,8(r2)
   54280:	10bfffcc 	andi	r2,r2,65535
   54284:	10000d26 	beq	r2,zero,542bc <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   54288:	e0bffd17 	ldw	r2,-12(fp)
   5428c:	1080020b 	ldhu	r2,8(r2)
   54290:	10bfffc4 	addi	r2,r2,-1
   54294:	1007883a 	mov	r3,r2
   54298:	e0bffd17 	ldw	r2,-12(fp)
   5429c:	10c0020d 	sth	r3,8(r2)
   542a0:	e0bff717 	ldw	r2,-36(fp)
   542a4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   542a8:	e0bff817 	ldw	r2,-32(fp)
   542ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   542b0:	e0bfff17 	ldw	r2,-4(fp)
   542b4:	10000005 	stb	zero,0(r2)
        return;
   542b8:	00003d06 	br	543b0 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   542bc:	d0a72c17 	ldw	r2,-25424(gp)
   542c0:	d0e72c17 	ldw	r3,-25424(gp)
   542c4:	18c00c03 	ldbu	r3,48(r3)
   542c8:	18c00054 	ori	r3,r3,1
   542cc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   542d0:	d0a72c17 	ldw	r2,-25424(gp)
   542d4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   542d8:	d0a72c17 	ldw	r2,-25424(gp)
   542dc:	e0fffe0b 	ldhu	r3,-8(fp)
   542e0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   542e4:	e13ffd17 	ldw	r4,-12(fp)
   542e8:	004f2980 	call	4f298 <OS_EventTaskWait>
   542ec:	e0bff717 	ldw	r2,-36(fp)
   542f0:	e0bffb15 	stw	r2,-20(fp)
   542f4:	e0bffb17 	ldw	r2,-20(fp)
   542f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   542fc:	004fb4c0 	call	4fb4c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54300:	0005303a 	rdctl	r2,status
   54304:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54308:	e0fff917 	ldw	r3,-28(fp)
   5430c:	00bfff84 	movi	r2,-2
   54310:	1884703a 	and	r2,r3,r2
   54314:	1001703a 	wrctl	status,r2
  
  return context;
   54318:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   5431c:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   54320:	d0a72c17 	ldw	r2,-25424(gp)
   54324:	10800c43 	ldbu	r2,49(r2)
   54328:	10803fcc 	andi	r2,r2,255
   5432c:	10000326 	beq	r2,zero,5433c <OSSemPend+0x184>
   54330:	108000a0 	cmpeqi	r2,r2,2
   54334:	1000041e 	bne	r2,zero,54348 <OSSemPend+0x190>
   54338:	00000706 	br	54358 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   5433c:	e0bfff17 	ldw	r2,-4(fp)
   54340:	10000005 	stb	zero,0(r2)
             break;
   54344:	00000c06 	br	54378 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   54348:	e0bfff17 	ldw	r2,-4(fp)
   5434c:	00c00384 	movi	r3,14
   54350:	10c00005 	stb	r3,0(r2)
             break;
   54354:	00000806 	br	54378 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   54358:	d0a72c17 	ldw	r2,-25424(gp)
   5435c:	e17ffd17 	ldw	r5,-12(fp)
   54360:	1009883a 	mov	r4,r2
   54364:	004f4f80 	call	4f4f8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   54368:	e0bfff17 	ldw	r2,-4(fp)
   5436c:	00c00284 	movi	r3,10
   54370:	10c00005 	stb	r3,0(r2)
             break;
   54374:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   54378:	d0a72c17 	ldw	r2,-25424(gp)
   5437c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   54380:	d0a72c17 	ldw	r2,-25424(gp)
   54384:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   54388:	d0a72c17 	ldw	r2,-25424(gp)
   5438c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   54390:	d0a72c17 	ldw	r2,-25424(gp)
   54394:	10000815 	stw	zero,32(r2)
   54398:	e0bff717 	ldw	r2,-36(fp)
   5439c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   543a0:	e0bffa17 	ldw	r2,-24(fp)
   543a4:	1001703a 	wrctl	status,r2
   543a8:	00000106 	br	543b0 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   543ac:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   543b0:	e037883a 	mov	sp,fp
   543b4:	dfc00117 	ldw	ra,4(sp)
   543b8:	df000017 	ldw	fp,0(sp)
   543bc:	dec00204 	addi	sp,sp,8
   543c0:	f800283a 	ret

000543c4 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   543c4:	defff604 	addi	sp,sp,-40
   543c8:	dfc00915 	stw	ra,36(sp)
   543cc:	df000815 	stw	fp,32(sp)
   543d0:	df000804 	addi	fp,sp,32
   543d4:	e13ffd15 	stw	r4,-12(fp)
   543d8:	2805883a 	mov	r2,r5
   543dc:	e1bfff15 	stw	r6,-4(fp)
   543e0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   543e4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   543e8:	e0bfff17 	ldw	r2,-4(fp)
   543ec:	1000021e 	bne	r2,zero,543f8 <OSSemPendAbort+0x34>
        return (0);
   543f0:	0005883a 	mov	r2,zero
   543f4:	00004906 	br	5451c <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   543f8:	e0bffd17 	ldw	r2,-12(fp)
   543fc:	1000051e 	bne	r2,zero,54414 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   54400:	e0bfff17 	ldw	r2,-4(fp)
   54404:	00c00104 	movi	r3,4
   54408:	10c00005 	stb	r3,0(r2)
        return (0);
   5440c:	0005883a 	mov	r2,zero
   54410:	00004206 	br	5451c <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   54414:	e0bffd17 	ldw	r2,-12(fp)
   54418:	10800003 	ldbu	r2,0(r2)
   5441c:	10803fcc 	andi	r2,r2,255
   54420:	108000e0 	cmpeqi	r2,r2,3
   54424:	1000051e 	bne	r2,zero,5443c <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   54428:	e0bfff17 	ldw	r2,-4(fp)
   5442c:	00c00044 	movi	r3,1
   54430:	10c00005 	stb	r3,0(r2)
        return (0);
   54434:	0005883a 	mov	r2,zero
   54438:	00003806 	br	5451c <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5443c:	0005303a 	rdctl	r2,status
   54440:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54444:	e0fffc17 	ldw	r3,-16(fp)
   54448:	00bfff84 	movi	r2,-2
   5444c:	1884703a 	and	r2,r3,r2
   54450:	1001703a 	wrctl	status,r2
  
  return context;
   54454:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   54458:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   5445c:	e0bffd17 	ldw	r2,-12(fp)
   54460:	10800283 	ldbu	r2,10(r2)
   54464:	10803fcc 	andi	r2,r2,255
   54468:	10002526 	beq	r2,zero,54500 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   5446c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   54470:	e0bffe03 	ldbu	r2,-8(fp)
   54474:	10800060 	cmpeqi	r2,r2,1
   54478:	10000e26 	beq	r2,zero,544b4 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   5447c:	00000806 	br	544a0 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   54480:	01c00084 	movi	r7,2
   54484:	01800044 	movi	r6,1
   54488:	000b883a 	mov	r5,zero
   5448c:	e13ffd17 	ldw	r4,-12(fp)
   54490:	004f1000 	call	4f100 <OS_EventTaskRdy>
                     nbr_tasks++;
   54494:	e0bff803 	ldbu	r2,-32(fp)
   54498:	10800044 	addi	r2,r2,1
   5449c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   544a0:	e0bffd17 	ldw	r2,-12(fp)
   544a4:	10800283 	ldbu	r2,10(r2)
   544a8:	10803fcc 	andi	r2,r2,255
   544ac:	103ff41e 	bne	r2,zero,54480 <__alt_data_end+0xfffeec80>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   544b0:	00000906 	br	544d8 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   544b4:	01c00084 	movi	r7,2
   544b8:	01800044 	movi	r6,1
   544bc:	000b883a 	mov	r5,zero
   544c0:	e13ffd17 	ldw	r4,-12(fp)
   544c4:	004f1000 	call	4f100 <OS_EventTaskRdy>
                 nbr_tasks++;
   544c8:	e0bff803 	ldbu	r2,-32(fp)
   544cc:	10800044 	addi	r2,r2,1
   544d0:	e0bff805 	stb	r2,-32(fp)
                 break;
   544d4:	0001883a 	nop
   544d8:	e0bff917 	ldw	r2,-28(fp)
   544dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   544e0:	e0bffa17 	ldw	r2,-24(fp)
   544e4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   544e8:	004fb4c0 	call	4fb4c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   544ec:	e0bfff17 	ldw	r2,-4(fp)
   544f0:	00c00384 	movi	r3,14
   544f4:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   544f8:	e0bff803 	ldbu	r2,-32(fp)
   544fc:	00000706 	br	5451c <OSSemPendAbort+0x158>
   54500:	e0bff917 	ldw	r2,-28(fp)
   54504:	e0bffb15 	stw	r2,-20(fp)
   54508:	e0bffb17 	ldw	r2,-20(fp)
   5450c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   54510:	e0bfff17 	ldw	r2,-4(fp)
   54514:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   54518:	0005883a 	mov	r2,zero
}
   5451c:	e037883a 	mov	sp,fp
   54520:	dfc00117 	ldw	ra,4(sp)
   54524:	df000017 	ldw	fp,0(sp)
   54528:	dec00204 	addi	sp,sp,8
   5452c:	f800283a 	ret

00054530 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   54530:	defff804 	addi	sp,sp,-32
   54534:	dfc00715 	stw	ra,28(sp)
   54538:	df000615 	stw	fp,24(sp)
   5453c:	df000604 	addi	fp,sp,24
   54540:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   54544:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   54548:	e0bfff17 	ldw	r2,-4(fp)
   5454c:	1000021e 	bne	r2,zero,54558 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   54550:	00800104 	movi	r2,4
   54554:	00003506 	br	5462c <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   54558:	e0bfff17 	ldw	r2,-4(fp)
   5455c:	10800003 	ldbu	r2,0(r2)
   54560:	10803fcc 	andi	r2,r2,255
   54564:	108000e0 	cmpeqi	r2,r2,3
   54568:	1000021e 	bne	r2,zero,54574 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   5456c:	00800044 	movi	r2,1
   54570:	00002e06 	br	5462c <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54574:	0005303a 	rdctl	r2,status
   54578:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5457c:	e0fffe17 	ldw	r3,-8(fp)
   54580:	00bfff84 	movi	r2,-2
   54584:	1884703a 	and	r2,r3,r2
   54588:	1001703a 	wrctl	status,r2
  
  return context;
   5458c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   54590:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   54594:	e0bfff17 	ldw	r2,-4(fp)
   54598:	10800283 	ldbu	r2,10(r2)
   5459c:	10803fcc 	andi	r2,r2,255
   545a0:	10000c26 	beq	r2,zero,545d4 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   545a4:	000f883a 	mov	r7,zero
   545a8:	01800044 	movi	r6,1
   545ac:	000b883a 	mov	r5,zero
   545b0:	e13fff17 	ldw	r4,-4(fp)
   545b4:	004f1000 	call	4f100 <OS_EventTaskRdy>
   545b8:	e0bffa17 	ldw	r2,-24(fp)
   545bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   545c0:	e0bffb17 	ldw	r2,-20(fp)
   545c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   545c8:	004fb4c0 	call	4fb4c <OS_Sched>
        return (OS_ERR_NONE);
   545cc:	0005883a 	mov	r2,zero
   545d0:	00001606 	br	5462c <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   545d4:	e0bfff17 	ldw	r2,-4(fp)
   545d8:	1080020b 	ldhu	r2,8(r2)
   545dc:	10ffffcc 	andi	r3,r2,65535
   545e0:	00bfffd4 	movui	r2,65535
   545e4:	18800c26 	beq	r3,r2,54618 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   545e8:	e0bfff17 	ldw	r2,-4(fp)
   545ec:	1080020b 	ldhu	r2,8(r2)
   545f0:	10800044 	addi	r2,r2,1
   545f4:	1007883a 	mov	r3,r2
   545f8:	e0bfff17 	ldw	r2,-4(fp)
   545fc:	10c0020d 	sth	r3,8(r2)
   54600:	e0bffa17 	ldw	r2,-24(fp)
   54604:	e0bffc15 	stw	r2,-16(fp)
   54608:	e0bffc17 	ldw	r2,-16(fp)
   5460c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   54610:	0005883a 	mov	r2,zero
   54614:	00000506 	br	5462c <OSSemPost+0xfc>
   54618:	e0bffa17 	ldw	r2,-24(fp)
   5461c:	e0bffd15 	stw	r2,-12(fp)
   54620:	e0bffd17 	ldw	r2,-12(fp)
   54624:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   54628:	00800c84 	movi	r2,50
}
   5462c:	e037883a 	mov	sp,fp
   54630:	dfc00117 	ldw	ra,4(sp)
   54634:	df000017 	ldw	fp,0(sp)
   54638:	dec00204 	addi	sp,sp,8
   5463c:	f800283a 	ret

00054640 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   54640:	defff704 	addi	sp,sp,-36
   54644:	df000815 	stw	fp,32(sp)
   54648:	df000804 	addi	fp,sp,32
   5464c:	e13ffe15 	stw	r4,-8(fp)
   54650:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   54654:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   54658:	e0bffe17 	ldw	r2,-8(fp)
   5465c:	1000021e 	bne	r2,zero,54668 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   54660:	00800104 	movi	r2,4
   54664:	00003606 	br	54740 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   54668:	e0bfff17 	ldw	r2,-4(fp)
   5466c:	1000021e 	bne	r2,zero,54678 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   54670:	00800244 	movi	r2,9
   54674:	00003206 	br	54740 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   54678:	e0bffe17 	ldw	r2,-8(fp)
   5467c:	10800003 	ldbu	r2,0(r2)
   54680:	10803fcc 	andi	r2,r2,255
   54684:	108000e0 	cmpeqi	r2,r2,3
   54688:	1000021e 	bne	r2,zero,54694 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   5468c:	00800044 	movi	r2,1
   54690:	00002b06 	br	54740 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54694:	0005303a 	rdctl	r2,status
   54698:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5469c:	e0fffd17 	ldw	r3,-12(fp)
   546a0:	00bfff84 	movi	r2,-2
   546a4:	1884703a 	and	r2,r3,r2
   546a8:	1001703a 	wrctl	status,r2
  
  return context;
   546ac:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   546b0:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   546b4:	e0bffe17 	ldw	r2,-8(fp)
   546b8:	10c00283 	ldbu	r3,10(r2)
   546bc:	e0bfff17 	ldw	r2,-4(fp)
   546c0:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   546c4:	e0bffe17 	ldw	r2,-8(fp)
   546c8:	108002c4 	addi	r2,r2,11
   546cc:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   546d0:	e0bfff17 	ldw	r2,-4(fp)
   546d4:	10800084 	addi	r2,r2,2
   546d8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   546dc:	e03ffa05 	stb	zero,-24(fp)
   546e0:	00000b06 	br	54710 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   546e4:	e0bff917 	ldw	r2,-28(fp)
   546e8:	10c00044 	addi	r3,r2,1
   546ec:	e0fff915 	stw	r3,-28(fp)
   546f0:	e0fff817 	ldw	r3,-32(fp)
   546f4:	19000044 	addi	r4,r3,1
   546f8:	e13ff815 	stw	r4,-32(fp)
   546fc:	18c00003 	ldbu	r3,0(r3)
   54700:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   54704:	e0bffa03 	ldbu	r2,-24(fp)
   54708:	10800044 	addi	r2,r2,1
   5470c:	e0bffa05 	stb	r2,-24(fp)
   54710:	e0bffa03 	ldbu	r2,-24(fp)
   54714:	108000f0 	cmpltui	r2,r2,3
   54718:	103ff21e 	bne	r2,zero,546e4 <__alt_data_end+0xfffeeee4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   5471c:	e0bffe17 	ldw	r2,-8(fp)
   54720:	10c0020b 	ldhu	r3,8(r2)
   54724:	e0bfff17 	ldw	r2,-4(fp)
   54728:	10c0000d 	sth	r3,0(r2)
   5472c:	e0bffb17 	ldw	r2,-20(fp)
   54730:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54734:	e0bffc17 	ldw	r2,-16(fp)
   54738:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   5473c:	0005883a 	mov	r2,zero
}
   54740:	e037883a 	mov	sp,fp
   54744:	df000017 	ldw	fp,0(sp)
   54748:	dec00104 	addi	sp,sp,4
   5474c:	f800283a 	ret

00054750 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   54750:	defff904 	addi	sp,sp,-28
   54754:	df000615 	stw	fp,24(sp)
   54758:	df000604 	addi	fp,sp,24
   5475c:	e13ffd15 	stw	r4,-12(fp)
   54760:	2805883a 	mov	r2,r5
   54764:	e1bfff15 	stw	r6,-4(fp)
   54768:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   5476c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   54770:	e0bfff17 	ldw	r2,-4(fp)
   54774:	10003126 	beq	r2,zero,5483c <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   54778:	e0bffd17 	ldw	r2,-12(fp)
   5477c:	1000041e 	bne	r2,zero,54790 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   54780:	e0bfff17 	ldw	r2,-4(fp)
   54784:	00c00104 	movi	r3,4
   54788:	10c00005 	stb	r3,0(r2)
        return;
   5478c:	00002c06 	br	54840 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   54790:	e0bffd17 	ldw	r2,-12(fp)
   54794:	10800003 	ldbu	r2,0(r2)
   54798:	10803fcc 	andi	r2,r2,255
   5479c:	108000e0 	cmpeqi	r2,r2,3
   547a0:	1000041e 	bne	r2,zero,547b4 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   547a4:	e0bfff17 	ldw	r2,-4(fp)
   547a8:	00c00044 	movi	r3,1
   547ac:	10c00005 	stb	r3,0(r2)
        return;
   547b0:	00002306 	br	54840 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   547b4:	0005303a 	rdctl	r2,status
   547b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   547bc:	e0fffc17 	ldw	r3,-16(fp)
   547c0:	00bfff84 	movi	r2,-2
   547c4:	1884703a 	and	r2,r3,r2
   547c8:	1001703a 	wrctl	status,r2
  
  return context;
   547cc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   547d0:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   547d4:	e0bfff17 	ldw	r2,-4(fp)
   547d8:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   547dc:	e0bffd17 	ldw	r2,-12(fp)
   547e0:	1080020b 	ldhu	r2,8(r2)
   547e4:	10bfffcc 	andi	r2,r2,65535
   547e8:	10000426 	beq	r2,zero,547fc <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   547ec:	e0bffd17 	ldw	r2,-12(fp)
   547f0:	e0fffe0b 	ldhu	r3,-8(fp)
   547f4:	10c0020d 	sth	r3,8(r2)
   547f8:	00000b06 	br	54828 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   547fc:	e0bffd17 	ldw	r2,-12(fp)
   54800:	10800283 	ldbu	r2,10(r2)
   54804:	10803fcc 	andi	r2,r2,255
   54808:	1000041e 	bne	r2,zero,5481c <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   5480c:	e0bffd17 	ldw	r2,-12(fp)
   54810:	e0fffe0b 	ldhu	r3,-8(fp)
   54814:	10c0020d 	sth	r3,8(r2)
   54818:	00000306 	br	54828 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   5481c:	e0bfff17 	ldw	r2,-4(fp)
   54820:	00c01244 	movi	r3,73
   54824:	10c00005 	stb	r3,0(r2)
   54828:	e0bffa17 	ldw	r2,-24(fp)
   5482c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54830:	e0bffb17 	ldw	r2,-20(fp)
   54834:	1001703a 	wrctl	status,r2
   54838:	00000106 	br	54840 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   5483c:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   54840:	e037883a 	mov	sp,fp
   54844:	df000017 	ldw	fp,0(sp)
   54848:	dec00104 	addi	sp,sp,4
   5484c:	f800283a 	ret

00054850 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   54850:	defff104 	addi	sp,sp,-60
   54854:	dfc00e15 	stw	ra,56(sp)
   54858:	df000d15 	stw	fp,52(sp)
   5485c:	df000d04 	addi	fp,sp,52
   54860:	2007883a 	mov	r3,r4
   54864:	2805883a 	mov	r2,r5
   54868:	e0fffe05 	stb	r3,-8(fp)
   5486c:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   54870:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   54874:	e0bffe03 	ldbu	r2,-8(fp)
   54878:	10800530 	cmpltui	r2,r2,20
   5487c:	1000051e 	bne	r2,zero,54894 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   54880:	e0bffe03 	ldbu	r2,-8(fp)
   54884:	10803fe0 	cmpeqi	r2,r2,255
   54888:	1000021e 	bne	r2,zero,54894 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   5488c:	00800a84 	movi	r2,42
   54890:	00012606 	br	54d2c <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   54894:	e0bfff03 	ldbu	r2,-4(fp)
   54898:	10800530 	cmpltui	r2,r2,20
   5489c:	1000021e 	bne	r2,zero,548a8 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   548a0:	00800a84 	movi	r2,42
   548a4:	00012106 	br	54d2c <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   548a8:	0005303a 	rdctl	r2,status
   548ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   548b0:	e0fffd17 	ldw	r3,-12(fp)
   548b4:	00bfff84 	movi	r2,-2
   548b8:	1884703a 	and	r2,r3,r2
   548bc:	1001703a 	wrctl	status,r2
  
  return context;
   548c0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   548c4:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   548c8:	e0ffff03 	ldbu	r3,-4(fp)
   548cc:	008001b4 	movhi	r2,6
   548d0:	108e6104 	addi	r2,r2,14724
   548d4:	18c7883a 	add	r3,r3,r3
   548d8:	18c7883a 	add	r3,r3,r3
   548dc:	10c5883a 	add	r2,r2,r3
   548e0:	10800017 	ldw	r2,0(r2)
   548e4:	10000626 	beq	r2,zero,54900 <OSTaskChangePrio+0xb0>
   548e8:	e0bff517 	ldw	r2,-44(fp)
   548ec:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   548f0:	e0bff617 	ldw	r2,-40(fp)
   548f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   548f8:	00800a04 	movi	r2,40
   548fc:	00010b06 	br	54d2c <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   54900:	e0bffe03 	ldbu	r2,-8(fp)
   54904:	10803fd8 	cmpnei	r2,r2,255
   54908:	1000031e 	bne	r2,zero,54918 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   5490c:	d0a72c17 	ldw	r2,-25424(gp)
   54910:	10800c83 	ldbu	r2,50(r2)
   54914:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   54918:	e0fffe03 	ldbu	r3,-8(fp)
   5491c:	008001b4 	movhi	r2,6
   54920:	108e6104 	addi	r2,r2,14724
   54924:	18c7883a 	add	r3,r3,r3
   54928:	18c7883a 	add	r3,r3,r3
   5492c:	10c5883a 	add	r2,r2,r3
   54930:	10800017 	ldw	r2,0(r2)
   54934:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   54938:	e0bff817 	ldw	r2,-32(fp)
   5493c:	1000061e 	bne	r2,zero,54958 <OSTaskChangePrio+0x108>
   54940:	e0bff517 	ldw	r2,-44(fp)
   54944:	e0bff715 	stw	r2,-36(fp)
   54948:	e0bff717 	ldw	r2,-36(fp)
   5494c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   54950:	00800a44 	movi	r2,41
   54954:	0000f506 	br	54d2c <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   54958:	e0bff817 	ldw	r2,-32(fp)
   5495c:	10800058 	cmpnei	r2,r2,1
   54960:	1000061e 	bne	r2,zero,5497c <OSTaskChangePrio+0x12c>
   54964:	e0bff517 	ldw	r2,-44(fp)
   54968:	e0bff915 	stw	r2,-28(fp)
   5496c:	e0bff917 	ldw	r2,-28(fp)
   54970:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   54974:	008010c4 	movi	r2,67
   54978:	0000ec06 	br	54d2c <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   5497c:	e0bfff03 	ldbu	r2,-4(fp)
   54980:	1004d0fa 	srli	r2,r2,3
   54984:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   54988:	e0bfff03 	ldbu	r2,-4(fp)
   5498c:	108001cc 	andi	r2,r2,7
   54990:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   54994:	e0bffb03 	ldbu	r2,-20(fp)
   54998:	00c00044 	movi	r3,1
   5499c:	1884983a 	sll	r2,r3,r2
   549a0:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   549a4:	e0bffb43 	ldbu	r2,-19(fp)
   549a8:	00c00044 	movi	r3,1
   549ac:	1884983a 	sll	r2,r3,r2
   549b0:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   549b4:	e0fffe03 	ldbu	r3,-8(fp)
   549b8:	008001b4 	movhi	r2,6
   549bc:	108e6104 	addi	r2,r2,14724
   549c0:	18c7883a 	add	r3,r3,r3
   549c4:	18c7883a 	add	r3,r3,r3
   549c8:	10c5883a 	add	r2,r2,r3
   549cc:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   549d0:	e0ffff03 	ldbu	r3,-4(fp)
   549d4:	008001b4 	movhi	r2,6
   549d8:	108e6104 	addi	r2,r2,14724
   549dc:	18c7883a 	add	r3,r3,r3
   549e0:	18c7883a 	add	r3,r3,r3
   549e4:	10c5883a 	add	r2,r2,r3
   549e8:	e0fff817 	ldw	r3,-32(fp)
   549ec:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   549f0:	e0bff817 	ldw	r2,-32(fp)
   549f4:	10800d03 	ldbu	r2,52(r2)
   549f8:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   549fc:	e0bff817 	ldw	r2,-32(fp)
   54a00:	10800d83 	ldbu	r2,54(r2)
   54a04:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   54a08:	e0bff817 	ldw	r2,-32(fp)
   54a0c:	10800d43 	ldbu	r2,53(r2)
   54a10:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   54a14:	e0fffc03 	ldbu	r3,-16(fp)
   54a18:	d0a72944 	addi	r2,gp,-25435
   54a1c:	1885883a 	add	r2,r3,r2
   54a20:	10c00003 	ldbu	r3,0(r2)
   54a24:	e0bffc83 	ldbu	r2,-14(fp)
   54a28:	1884703a 	and	r2,r3,r2
   54a2c:	10803fcc 	andi	r2,r2,255
   54a30:	10002826 	beq	r2,zero,54ad4 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   54a34:	e0fffc03 	ldbu	r3,-16(fp)
   54a38:	e13ffc03 	ldbu	r4,-16(fp)
   54a3c:	d0a72944 	addi	r2,gp,-25435
   54a40:	2085883a 	add	r2,r4,r2
   54a44:	10800003 	ldbu	r2,0(r2)
   54a48:	1009883a 	mov	r4,r2
   54a4c:	e0bffc83 	ldbu	r2,-14(fp)
   54a50:	0084303a 	nor	r2,zero,r2
   54a54:	2084703a 	and	r2,r4,r2
   54a58:	1009883a 	mov	r4,r2
   54a5c:	d0a72944 	addi	r2,gp,-25435
   54a60:	1885883a 	add	r2,r3,r2
   54a64:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   54a68:	e0fffc03 	ldbu	r3,-16(fp)
   54a6c:	d0a72944 	addi	r2,gp,-25435
   54a70:	1885883a 	add	r2,r3,r2
   54a74:	10800003 	ldbu	r2,0(r2)
   54a78:	10803fcc 	andi	r2,r2,255
   54a7c:	1000061e 	bne	r2,zero,54a98 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   54a80:	e0bffc43 	ldbu	r2,-15(fp)
   54a84:	0084303a 	nor	r2,zero,r2
   54a88:	1007883a 	mov	r3,r2
   54a8c:	d0a72903 	ldbu	r2,-25436(gp)
   54a90:	1884703a 	and	r2,r3,r2
   54a94:	d0a72905 	stb	r2,-25436(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   54a98:	d0e72903 	ldbu	r3,-25436(gp)
   54a9c:	e0bffb83 	ldbu	r2,-18(fp)
   54aa0:	1884b03a 	or	r2,r3,r2
   54aa4:	d0a72905 	stb	r2,-25436(gp)
         OSRdyTbl[y_new] |= bitx_new;
   54aa8:	e0fffb03 	ldbu	r3,-20(fp)
   54aac:	e13ffb03 	ldbu	r4,-20(fp)
   54ab0:	d0a72944 	addi	r2,gp,-25435
   54ab4:	2085883a 	add	r2,r4,r2
   54ab8:	11000003 	ldbu	r4,0(r2)
   54abc:	e0bffbc3 	ldbu	r2,-17(fp)
   54ac0:	2084b03a 	or	r2,r4,r2
   54ac4:	1009883a 	mov	r4,r2
   54ac8:	d0a72944 	addi	r2,gp,-25435
   54acc:	1885883a 	add	r2,r3,r2
   54ad0:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   54ad4:	e0bff817 	ldw	r2,-32(fp)
   54ad8:	10800717 	ldw	r2,28(r2)
   54adc:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   54ae0:	e0bff317 	ldw	r2,-52(fp)
   54ae4:	10003326 	beq	r2,zero,54bb4 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   54ae8:	e0bffc03 	ldbu	r2,-16(fp)
   54aec:	e0fffc03 	ldbu	r3,-16(fp)
   54af0:	e13ff317 	ldw	r4,-52(fp)
   54af4:	20c7883a 	add	r3,r4,r3
   54af8:	18c002c4 	addi	r3,r3,11
   54afc:	18c00003 	ldbu	r3,0(r3)
   54b00:	1809883a 	mov	r4,r3
   54b04:	e0fffc83 	ldbu	r3,-14(fp)
   54b08:	00c6303a 	nor	r3,zero,r3
   54b0c:	20c6703a 	and	r3,r4,r3
   54b10:	1809883a 	mov	r4,r3
   54b14:	e0fff317 	ldw	r3,-52(fp)
   54b18:	1885883a 	add	r2,r3,r2
   54b1c:	108002c4 	addi	r2,r2,11
   54b20:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   54b24:	e0bffc03 	ldbu	r2,-16(fp)
   54b28:	e0fff317 	ldw	r3,-52(fp)
   54b2c:	1885883a 	add	r2,r3,r2
   54b30:	108002c4 	addi	r2,r2,11
   54b34:	10800003 	ldbu	r2,0(r2)
   54b38:	10803fcc 	andi	r2,r2,255
   54b3c:	1000091e 	bne	r2,zero,54b64 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   54b40:	e0bff317 	ldw	r2,-52(fp)
   54b44:	10800283 	ldbu	r2,10(r2)
   54b48:	1007883a 	mov	r3,r2
   54b4c:	e0bffc43 	ldbu	r2,-15(fp)
   54b50:	0084303a 	nor	r2,zero,r2
   54b54:	1884703a 	and	r2,r3,r2
   54b58:	1007883a 	mov	r3,r2
   54b5c:	e0bff317 	ldw	r2,-52(fp)
   54b60:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   54b64:	e0bff317 	ldw	r2,-52(fp)
   54b68:	10c00283 	ldbu	r3,10(r2)
   54b6c:	e0bffb83 	ldbu	r2,-18(fp)
   54b70:	1884b03a 	or	r2,r3,r2
   54b74:	1007883a 	mov	r3,r2
   54b78:	e0bff317 	ldw	r2,-52(fp)
   54b7c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   54b80:	e0bffb03 	ldbu	r2,-20(fp)
   54b84:	e0fffb03 	ldbu	r3,-20(fp)
   54b88:	e13ff317 	ldw	r4,-52(fp)
   54b8c:	20c7883a 	add	r3,r4,r3
   54b90:	18c002c4 	addi	r3,r3,11
   54b94:	19000003 	ldbu	r4,0(r3)
   54b98:	e0fffbc3 	ldbu	r3,-17(fp)
   54b9c:	20c6b03a 	or	r3,r4,r3
   54ba0:	1809883a 	mov	r4,r3
   54ba4:	e0fff317 	ldw	r3,-52(fp)
   54ba8:	1885883a 	add	r2,r3,r2
   54bac:	108002c4 	addi	r2,r2,11
   54bb0:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   54bb4:	e0bff817 	ldw	r2,-32(fp)
   54bb8:	10800817 	ldw	r2,32(r2)
   54bbc:	10004226 	beq	r2,zero,54cc8 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   54bc0:	e0bff817 	ldw	r2,-32(fp)
   54bc4:	10800817 	ldw	r2,32(r2)
   54bc8:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   54bcc:	e0bff417 	ldw	r2,-48(fp)
   54bd0:	10800017 	ldw	r2,0(r2)
   54bd4:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   54bd8:	00003906 	br	54cc0 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   54bdc:	e0bffc03 	ldbu	r2,-16(fp)
   54be0:	e0fffc03 	ldbu	r3,-16(fp)
   54be4:	e13ff317 	ldw	r4,-52(fp)
   54be8:	20c7883a 	add	r3,r4,r3
   54bec:	18c002c4 	addi	r3,r3,11
   54bf0:	18c00003 	ldbu	r3,0(r3)
   54bf4:	1809883a 	mov	r4,r3
   54bf8:	e0fffc83 	ldbu	r3,-14(fp)
   54bfc:	00c6303a 	nor	r3,zero,r3
   54c00:	20c6703a 	and	r3,r4,r3
   54c04:	1809883a 	mov	r4,r3
   54c08:	e0fff317 	ldw	r3,-52(fp)
   54c0c:	1885883a 	add	r2,r3,r2
   54c10:	108002c4 	addi	r2,r2,11
   54c14:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   54c18:	e0bffc03 	ldbu	r2,-16(fp)
   54c1c:	e0fff317 	ldw	r3,-52(fp)
   54c20:	1885883a 	add	r2,r3,r2
   54c24:	108002c4 	addi	r2,r2,11
   54c28:	10800003 	ldbu	r2,0(r2)
   54c2c:	10803fcc 	andi	r2,r2,255
   54c30:	1000091e 	bne	r2,zero,54c58 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   54c34:	e0bff317 	ldw	r2,-52(fp)
   54c38:	10800283 	ldbu	r2,10(r2)
   54c3c:	1007883a 	mov	r3,r2
   54c40:	e0bffc43 	ldbu	r2,-15(fp)
   54c44:	0084303a 	nor	r2,zero,r2
   54c48:	1884703a 	and	r2,r3,r2
   54c4c:	1007883a 	mov	r3,r2
   54c50:	e0bff317 	ldw	r2,-52(fp)
   54c54:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   54c58:	e0bff317 	ldw	r2,-52(fp)
   54c5c:	10c00283 	ldbu	r3,10(r2)
   54c60:	e0bffb83 	ldbu	r2,-18(fp)
   54c64:	1884b03a 	or	r2,r3,r2
   54c68:	1007883a 	mov	r3,r2
   54c6c:	e0bff317 	ldw	r2,-52(fp)
   54c70:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   54c74:	e0bffb03 	ldbu	r2,-20(fp)
   54c78:	e0fffb03 	ldbu	r3,-20(fp)
   54c7c:	e13ff317 	ldw	r4,-52(fp)
   54c80:	20c7883a 	add	r3,r4,r3
   54c84:	18c002c4 	addi	r3,r3,11
   54c88:	19000003 	ldbu	r4,0(r3)
   54c8c:	e0fffbc3 	ldbu	r3,-17(fp)
   54c90:	20c6b03a 	or	r3,r4,r3
   54c94:	1809883a 	mov	r4,r3
   54c98:	e0fff317 	ldw	r3,-52(fp)
   54c9c:	1885883a 	add	r2,r3,r2
   54ca0:	108002c4 	addi	r2,r2,11
   54ca4:	11000005 	stb	r4,0(r2)
            pevents++;
   54ca8:	e0bff417 	ldw	r2,-48(fp)
   54cac:	10800104 	addi	r2,r2,4
   54cb0:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   54cb4:	e0bff417 	ldw	r2,-48(fp)
   54cb8:	10800017 	ldw	r2,0(r2)
   54cbc:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   54cc0:	e0bff317 	ldw	r2,-52(fp)
   54cc4:	103fc51e 	bne	r2,zero,54bdc <__alt_data_end+0xfffef3dc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   54cc8:	e0bff817 	ldw	r2,-32(fp)
   54ccc:	e0ffff03 	ldbu	r3,-4(fp)
   54cd0:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   54cd4:	e0bff817 	ldw	r2,-32(fp)
   54cd8:	e0fffb03 	ldbu	r3,-20(fp)
   54cdc:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   54ce0:	e0bff817 	ldw	r2,-32(fp)
   54ce4:	e0fffb43 	ldbu	r3,-19(fp)
   54ce8:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   54cec:	e0bff817 	ldw	r2,-32(fp)
   54cf0:	e0fffb83 	ldbu	r3,-18(fp)
   54cf4:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   54cf8:	e0bff817 	ldw	r2,-32(fp)
   54cfc:	e0fffbc3 	ldbu	r3,-17(fp)
   54d00:	10c00d45 	stb	r3,53(r2)
   54d04:	e0bff517 	ldw	r2,-44(fp)
   54d08:	e0bffa15 	stw	r2,-24(fp)
   54d0c:	e0bffa17 	ldw	r2,-24(fp)
   54d10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   54d14:	d0a71d43 	ldbu	r2,-25483(gp)
   54d18:	10803fcc 	andi	r2,r2,255
   54d1c:	10800058 	cmpnei	r2,r2,1
   54d20:	1000011e 	bne	r2,zero,54d28 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   54d24:	004fb4c0 	call	4fb4c <OS_Sched>
    }
    return (OS_ERR_NONE);
   54d28:	0005883a 	mov	r2,zero
}
   54d2c:	e037883a 	mov	sp,fp
   54d30:	dfc00117 	ldw	ra,4(sp)
   54d34:	df000017 	ldw	fp,0(sp)
   54d38:	dec00204 	addi	sp,sp,8
   54d3c:	f800283a 	ret

00054d40 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   54d40:	deffee04 	addi	sp,sp,-72
   54d44:	dfc01115 	stw	ra,68(sp)
   54d48:	df001015 	stw	fp,64(sp)
   54d4c:	df001004 	addi	fp,sp,64
   54d50:	e13ffc15 	stw	r4,-16(fp)
   54d54:	e17ffd15 	stw	r5,-12(fp)
   54d58:	e1bffe15 	stw	r6,-8(fp)
   54d5c:	3805883a 	mov	r2,r7
   54d60:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   54d64:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   54d68:	e0bfff03 	ldbu	r2,-4(fp)
   54d6c:	10800570 	cmpltui	r2,r2,21
   54d70:	1000021e 	bne	r2,zero,54d7c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   54d74:	00800a84 	movi	r2,42
   54d78:	00005706 	br	54ed8 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54d7c:	0005303a 	rdctl	r2,status
   54d80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54d84:	e0fffb17 	ldw	r3,-20(fp)
   54d88:	00bfff84 	movi	r2,-2
   54d8c:	1884703a 	and	r2,r3,r2
   54d90:	1001703a 	wrctl	status,r2
  
  return context;
   54d94:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   54d98:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   54d9c:	d0a72b03 	ldbu	r2,-25428(gp)
   54da0:	10803fcc 	andi	r2,r2,255
   54da4:	10000626 	beq	r2,zero,54dc0 <OSTaskCreate+0x80>
   54da8:	e0bff317 	ldw	r2,-52(fp)
   54dac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54db0:	e0bff417 	ldw	r2,-48(fp)
   54db4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   54db8:	00800f04 	movi	r2,60
   54dbc:	00004606 	br	54ed8 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   54dc0:	e0ffff03 	ldbu	r3,-4(fp)
   54dc4:	008001b4 	movhi	r2,6
   54dc8:	108e6104 	addi	r2,r2,14724
   54dcc:	18c7883a 	add	r3,r3,r3
   54dd0:	18c7883a 	add	r3,r3,r3
   54dd4:	10c5883a 	add	r2,r2,r3
   54dd8:	10800017 	ldw	r2,0(r2)
   54ddc:	1000391e 	bne	r2,zero,54ec4 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   54de0:	e0ffff03 	ldbu	r3,-4(fp)
   54de4:	008001b4 	movhi	r2,6
   54de8:	108e6104 	addi	r2,r2,14724
   54dec:	18c7883a 	add	r3,r3,r3
   54df0:	18c7883a 	add	r3,r3,r3
   54df4:	10c5883a 	add	r2,r2,r3
   54df8:	00c00044 	movi	r3,1
   54dfc:	10c00015 	stw	r3,0(r2)
   54e00:	e0bff317 	ldw	r2,-52(fp)
   54e04:	e0bff515 	stw	r2,-44(fp)
   54e08:	e0bff517 	ldw	r2,-44(fp)
   54e0c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   54e10:	000f883a 	mov	r7,zero
   54e14:	e1bffe17 	ldw	r6,-8(fp)
   54e18:	e17ffd17 	ldw	r5,-12(fp)
   54e1c:	e13ffc17 	ldw	r4,-16(fp)
   54e20:	00582340 	call	58234 <OSTaskStkInit>
   54e24:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   54e28:	e0bfff03 	ldbu	r2,-4(fp)
   54e2c:	d8000215 	stw	zero,8(sp)
   54e30:	d8000115 	stw	zero,4(sp)
   54e34:	d8000015 	stw	zero,0(sp)
   54e38:	000f883a 	mov	r7,zero
   54e3c:	000d883a 	mov	r6,zero
   54e40:	e17ff717 	ldw	r5,-36(fp)
   54e44:	1009883a 	mov	r4,r2
   54e48:	004ff4c0 	call	4ff4c <OS_TCBInit>
   54e4c:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   54e50:	e0bff803 	ldbu	r2,-32(fp)
   54e54:	1000061e 	bne	r2,zero,54e70 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   54e58:	d0a71d43 	ldbu	r2,-25483(gp)
   54e5c:	10803fcc 	andi	r2,r2,255
   54e60:	10800058 	cmpnei	r2,r2,1
   54e64:	1000151e 	bne	r2,zero,54ebc <OSTaskCreate+0x17c>
                OS_Sched();
   54e68:	004fb4c0 	call	4fb4c <OS_Sched>
   54e6c:	00001306 	br	54ebc <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54e70:	0005303a 	rdctl	r2,status
   54e74:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54e78:	e0fffa17 	ldw	r3,-24(fp)
   54e7c:	00bfff84 	movi	r2,-2
   54e80:	1884703a 	and	r2,r3,r2
   54e84:	1001703a 	wrctl	status,r2
  
  return context;
   54e88:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   54e8c:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   54e90:	e0ffff03 	ldbu	r3,-4(fp)
   54e94:	008001b4 	movhi	r2,6
   54e98:	108e6104 	addi	r2,r2,14724
   54e9c:	18c7883a 	add	r3,r3,r3
   54ea0:	18c7883a 	add	r3,r3,r3
   54ea4:	10c5883a 	add	r2,r2,r3
   54ea8:	10000015 	stw	zero,0(r2)
   54eac:	e0bff317 	ldw	r2,-52(fp)
   54eb0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54eb4:	e0bff617 	ldw	r2,-40(fp)
   54eb8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   54ebc:	e0bff803 	ldbu	r2,-32(fp)
   54ec0:	00000506 	br	54ed8 <OSTaskCreate+0x198>
   54ec4:	e0bff317 	ldw	r2,-52(fp)
   54ec8:	e0bff915 	stw	r2,-28(fp)
   54ecc:	e0bff917 	ldw	r2,-28(fp)
   54ed0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   54ed4:	00800a04 	movi	r2,40
}
   54ed8:	e037883a 	mov	sp,fp
   54edc:	dfc00117 	ldw	ra,4(sp)
   54ee0:	df000017 	ldw	fp,0(sp)
   54ee4:	dec00204 	addi	sp,sp,8
   54ee8:	f800283a 	ret

00054eec <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   54eec:	deffec04 	addi	sp,sp,-80
   54ef0:	dfc01315 	stw	ra,76(sp)
   54ef4:	df001215 	stw	fp,72(sp)
   54ef8:	df001204 	addi	fp,sp,72
   54efc:	e13ffa15 	stw	r4,-24(fp)
   54f00:	e17ffb15 	stw	r5,-20(fp)
   54f04:	e1bffc15 	stw	r6,-16(fp)
   54f08:	3809883a 	mov	r4,r7
   54f0c:	e0c00217 	ldw	r3,8(fp)
   54f10:	e0800617 	ldw	r2,24(fp)
   54f14:	e13ffd05 	stb	r4,-12(fp)
   54f18:	e0fffe0d 	sth	r3,-8(fp)
   54f1c:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   54f20:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   54f24:	e0bffd03 	ldbu	r2,-12(fp)
   54f28:	10800570 	cmpltui	r2,r2,21
   54f2c:	1000021e 	bne	r2,zero,54f38 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   54f30:	00800a84 	movi	r2,42
   54f34:	00006106 	br	550bc <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54f38:	0005303a 	rdctl	r2,status
   54f3c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54f40:	e0fff917 	ldw	r3,-28(fp)
   54f44:	00bfff84 	movi	r2,-2
   54f48:	1884703a 	and	r2,r3,r2
   54f4c:	1001703a 	wrctl	status,r2
  
  return context;
   54f50:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   54f54:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   54f58:	d0a72b03 	ldbu	r2,-25428(gp)
   54f5c:	10803fcc 	andi	r2,r2,255
   54f60:	10000626 	beq	r2,zero,54f7c <OSTaskCreateExt+0x90>
   54f64:	e0bff117 	ldw	r2,-60(fp)
   54f68:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54f6c:	e0bff217 	ldw	r2,-56(fp)
   54f70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   54f74:	00800f04 	movi	r2,60
   54f78:	00005006 	br	550bc <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   54f7c:	e0fffd03 	ldbu	r3,-12(fp)
   54f80:	008001b4 	movhi	r2,6
   54f84:	108e6104 	addi	r2,r2,14724
   54f88:	18c7883a 	add	r3,r3,r3
   54f8c:	18c7883a 	add	r3,r3,r3
   54f90:	10c5883a 	add	r2,r2,r3
   54f94:	10800017 	ldw	r2,0(r2)
   54f98:	1000431e 	bne	r2,zero,550a8 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   54f9c:	e0fffd03 	ldbu	r3,-12(fp)
   54fa0:	008001b4 	movhi	r2,6
   54fa4:	108e6104 	addi	r2,r2,14724
   54fa8:	18c7883a 	add	r3,r3,r3
   54fac:	18c7883a 	add	r3,r3,r3
   54fb0:	10c5883a 	add	r2,r2,r3
   54fb4:	00c00044 	movi	r3,1
   54fb8:	10c00015 	stw	r3,0(r2)
   54fbc:	e0bff117 	ldw	r2,-60(fp)
   54fc0:	e0bff315 	stw	r2,-52(fp)
   54fc4:	e0bff317 	ldw	r2,-52(fp)
   54fc8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   54fcc:	e0bfff0b 	ldhu	r2,-4(fp)
   54fd0:	100d883a 	mov	r6,r2
   54fd4:	e1400417 	ldw	r5,16(fp)
   54fd8:	e1000317 	ldw	r4,12(fp)
   54fdc:	0055f4c0 	call	55f4c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   54fe0:	e0bfff0b 	ldhu	r2,-4(fp)
   54fe4:	100f883a 	mov	r7,r2
   54fe8:	e1bffc17 	ldw	r6,-16(fp)
   54fec:	e17ffb17 	ldw	r5,-20(fp)
   54ff0:	e13ffa17 	ldw	r4,-24(fp)
   54ff4:	00582340 	call	58234 <OSTaskStkInit>
   54ff8:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   54ffc:	e0fffd03 	ldbu	r3,-12(fp)
   55000:	e13ffe0b 	ldhu	r4,-8(fp)
   55004:	e0bfff0b 	ldhu	r2,-4(fp)
   55008:	d8800215 	stw	r2,8(sp)
   5500c:	e0800517 	ldw	r2,20(fp)
   55010:	d8800115 	stw	r2,4(sp)
   55014:	e0800417 	ldw	r2,16(fp)
   55018:	d8800015 	stw	r2,0(sp)
   5501c:	200f883a 	mov	r7,r4
   55020:	e1800317 	ldw	r6,12(fp)
   55024:	e17ff517 	ldw	r5,-44(fp)
   55028:	1809883a 	mov	r4,r3
   5502c:	004ff4c0 	call	4ff4c <OS_TCBInit>
   55030:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   55034:	e0bff603 	ldbu	r2,-40(fp)
   55038:	1000061e 	bne	r2,zero,55054 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   5503c:	d0a71d43 	ldbu	r2,-25483(gp)
   55040:	10803fcc 	andi	r2,r2,255
   55044:	10800058 	cmpnei	r2,r2,1
   55048:	1000151e 	bne	r2,zero,550a0 <OSTaskCreateExt+0x1b4>
                OS_Sched();
   5504c:	004fb4c0 	call	4fb4c <OS_Sched>
   55050:	00001306 	br	550a0 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55054:	0005303a 	rdctl	r2,status
   55058:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5505c:	e0fff817 	ldw	r3,-32(fp)
   55060:	00bfff84 	movi	r2,-2
   55064:	1884703a 	and	r2,r3,r2
   55068:	1001703a 	wrctl	status,r2
  
  return context;
   5506c:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   55070:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   55074:	e0fffd03 	ldbu	r3,-12(fp)
   55078:	008001b4 	movhi	r2,6
   5507c:	108e6104 	addi	r2,r2,14724
   55080:	18c7883a 	add	r3,r3,r3
   55084:	18c7883a 	add	r3,r3,r3
   55088:	10c5883a 	add	r2,r2,r3
   5508c:	10000015 	stw	zero,0(r2)
   55090:	e0bff117 	ldw	r2,-60(fp)
   55094:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55098:	e0bff417 	ldw	r2,-48(fp)
   5509c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   550a0:	e0bff603 	ldbu	r2,-40(fp)
   550a4:	00000506 	br	550bc <OSTaskCreateExt+0x1d0>
   550a8:	e0bff117 	ldw	r2,-60(fp)
   550ac:	e0bff715 	stw	r2,-36(fp)
   550b0:	e0bff717 	ldw	r2,-36(fp)
   550b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   550b8:	00800a04 	movi	r2,40
}
   550bc:	e037883a 	mov	sp,fp
   550c0:	dfc00117 	ldw	ra,4(sp)
   550c4:	df000017 	ldw	fp,0(sp)
   550c8:	dec00204 	addi	sp,sp,8
   550cc:	f800283a 	ret

000550d0 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   550d0:	defff404 	addi	sp,sp,-48
   550d4:	dfc00b15 	stw	ra,44(sp)
   550d8:	df000a15 	stw	fp,40(sp)
   550dc:	df000a04 	addi	fp,sp,40
   550e0:	2005883a 	mov	r2,r4
   550e4:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   550e8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   550ec:	d0a72b03 	ldbu	r2,-25428(gp)
   550f0:	10803fcc 	andi	r2,r2,255
   550f4:	10000226 	beq	r2,zero,55100 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   550f8:	00801004 	movi	r2,64
   550fc:	0000c006 	br	55400 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   55100:	e0bfff03 	ldbu	r2,-4(fp)
   55104:	10800518 	cmpnei	r2,r2,20
   55108:	1000021e 	bne	r2,zero,55114 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   5510c:	00800f84 	movi	r2,62
   55110:	0000bb06 	br	55400 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   55114:	e0bfff03 	ldbu	r2,-4(fp)
   55118:	10800530 	cmpltui	r2,r2,20
   5511c:	1000051e 	bne	r2,zero,55134 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   55120:	e0bfff03 	ldbu	r2,-4(fp)
   55124:	10803fe0 	cmpeqi	r2,r2,255
   55128:	1000021e 	bne	r2,zero,55134 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   5512c:	00800a84 	movi	r2,42
   55130:	0000b306 	br	55400 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55134:	0005303a 	rdctl	r2,status
   55138:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5513c:	e0fffe17 	ldw	r3,-8(fp)
   55140:	00bfff84 	movi	r2,-2
   55144:	1884703a 	and	r2,r3,r2
   55148:	1001703a 	wrctl	status,r2
  
  return context;
   5514c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   55150:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   55154:	e0bfff03 	ldbu	r2,-4(fp)
   55158:	10803fd8 	cmpnei	r2,r2,255
   5515c:	1000031e 	bne	r2,zero,5516c <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   55160:	d0a72c17 	ldw	r2,-25424(gp)
   55164:	10800c83 	ldbu	r2,50(r2)
   55168:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   5516c:	e0ffff03 	ldbu	r3,-4(fp)
   55170:	008001b4 	movhi	r2,6
   55174:	108e6104 	addi	r2,r2,14724
   55178:	18c7883a 	add	r3,r3,r3
   5517c:	18c7883a 	add	r3,r3,r3
   55180:	10c5883a 	add	r2,r2,r3
   55184:	10800017 	ldw	r2,0(r2)
   55188:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   5518c:	e0bff817 	ldw	r2,-32(fp)
   55190:	1000061e 	bne	r2,zero,551ac <OSTaskDel+0xdc>
   55194:	e0bff617 	ldw	r2,-40(fp)
   55198:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5519c:	e0bff717 	ldw	r2,-36(fp)
   551a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   551a4:	008010c4 	movi	r2,67
   551a8:	00009506 	br	55400 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   551ac:	e0bff817 	ldw	r2,-32(fp)
   551b0:	10800058 	cmpnei	r2,r2,1
   551b4:	1000061e 	bne	r2,zero,551d0 <OSTaskDel+0x100>
   551b8:	e0bff617 	ldw	r2,-40(fp)
   551bc:	e0bff915 	stw	r2,-28(fp)
   551c0:	e0bff917 	ldw	r2,-28(fp)
   551c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   551c8:	00800f44 	movi	r2,61
   551cc:	00008c06 	br	55400 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   551d0:	e0bff817 	ldw	r2,-32(fp)
   551d4:	10800d03 	ldbu	r2,52(r2)
   551d8:	10c03fcc 	andi	r3,r2,255
   551dc:	e0bff817 	ldw	r2,-32(fp)
   551e0:	10800d03 	ldbu	r2,52(r2)
   551e4:	11003fcc 	andi	r4,r2,255
   551e8:	d0a72944 	addi	r2,gp,-25435
   551ec:	2085883a 	add	r2,r4,r2
   551f0:	10800003 	ldbu	r2,0(r2)
   551f4:	1009883a 	mov	r4,r2
   551f8:	e0bff817 	ldw	r2,-32(fp)
   551fc:	10800d43 	ldbu	r2,53(r2)
   55200:	0084303a 	nor	r2,zero,r2
   55204:	2084703a 	and	r2,r4,r2
   55208:	1009883a 	mov	r4,r2
   5520c:	d0a72944 	addi	r2,gp,-25435
   55210:	1885883a 	add	r2,r3,r2
   55214:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   55218:	e0bff817 	ldw	r2,-32(fp)
   5521c:	10800d03 	ldbu	r2,52(r2)
   55220:	10c03fcc 	andi	r3,r2,255
   55224:	d0a72944 	addi	r2,gp,-25435
   55228:	1885883a 	add	r2,r3,r2
   5522c:	10800003 	ldbu	r2,0(r2)
   55230:	10803fcc 	andi	r2,r2,255
   55234:	1000071e 	bne	r2,zero,55254 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   55238:	e0bff817 	ldw	r2,-32(fp)
   5523c:	10800d83 	ldbu	r2,54(r2)
   55240:	0084303a 	nor	r2,zero,r2
   55244:	1007883a 	mov	r3,r2
   55248:	d0a72903 	ldbu	r2,-25436(gp)
   5524c:	1884703a 	and	r2,r3,r2
   55250:	d0a72905 	stb	r2,-25436(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   55254:	e0bff817 	ldw	r2,-32(fp)
   55258:	10800717 	ldw	r2,28(r2)
   5525c:	10000526 	beq	r2,zero,55274 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   55260:	e0bff817 	ldw	r2,-32(fp)
   55264:	10800717 	ldw	r2,28(r2)
   55268:	100b883a 	mov	r5,r2
   5526c:	e13ff817 	ldw	r4,-32(fp)
   55270:	004f4f80 	call	4f4f8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   55274:	e0bff817 	ldw	r2,-32(fp)
   55278:	10800817 	ldw	r2,32(r2)
   5527c:	10000526 	beq	r2,zero,55294 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   55280:	e0bff817 	ldw	r2,-32(fp)
   55284:	10800817 	ldw	r2,32(r2)
   55288:	100b883a 	mov	r5,r2
   5528c:	e13ff817 	ldw	r4,-32(fp)
   55290:	004f5b00 	call	4f5b0 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   55294:	e0bff817 	ldw	r2,-32(fp)
   55298:	10800a17 	ldw	r2,40(r2)
   5529c:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   552a0:	e0bffb17 	ldw	r2,-20(fp)
   552a4:	10000226 	beq	r2,zero,552b0 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   552a8:	e13ffb17 	ldw	r4,-20(fp)
   552ac:	0051a200 	call	51a20 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   552b0:	e0bff817 	ldw	r2,-32(fp)
   552b4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   552b8:	e0bff817 	ldw	r2,-32(fp)
   552bc:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   552c0:	e0bff817 	ldw	r2,-32(fp)
   552c4:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   552c8:	d0a71d03 	ldbu	r2,-25484(gp)
   552cc:	10803fcc 	andi	r2,r2,255
   552d0:	10803fe0 	cmpeqi	r2,r2,255
   552d4:	1000031e 	bne	r2,zero,552e4 <OSTaskDel+0x214>
        OSLockNesting++;
   552d8:	d0a71d03 	ldbu	r2,-25484(gp)
   552dc:	10800044 	addi	r2,r2,1
   552e0:	d0a71d05 	stb	r2,-25484(gp)
   552e4:	e0bff617 	ldw	r2,-40(fp)
   552e8:	e0bffd15 	stw	r2,-12(fp)
   552ec:	e0bffd17 	ldw	r2,-12(fp)
   552f0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   552f4:	004f0e00 	call	4f0e0 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   552f8:	0005303a 	rdctl	r2,status
   552fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55300:	e0fffa17 	ldw	r3,-24(fp)
   55304:	00bfff84 	movi	r2,-2
   55308:	1884703a 	and	r2,r3,r2
   5530c:	1001703a 	wrctl	status,r2
  
  return context;
   55310:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   55314:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   55318:	d0a71d03 	ldbu	r2,-25484(gp)
   5531c:	10803fcc 	andi	r2,r2,255
   55320:	10000326 	beq	r2,zero,55330 <OSTaskDel+0x260>
        OSLockNesting--;
   55324:	d0a71d03 	ldbu	r2,-25484(gp)
   55328:	10bfffc4 	addi	r2,r2,-1
   5532c:	d0a71d05 	stb	r2,-25484(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   55330:	e13ff817 	ldw	r4,-32(fp)
   55334:	00583b40 	call	583b4 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   55338:	d0a72543 	ldbu	r2,-25451(gp)
   5533c:	10bfffc4 	addi	r2,r2,-1
   55340:	d0a72545 	stb	r2,-25451(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   55344:	e0ffff03 	ldbu	r3,-4(fp)
   55348:	008001b4 	movhi	r2,6
   5534c:	108e6104 	addi	r2,r2,14724
   55350:	18c7883a 	add	r3,r3,r3
   55354:	18c7883a 	add	r3,r3,r3
   55358:	10c5883a 	add	r2,r2,r3
   5535c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   55360:	e0bff817 	ldw	r2,-32(fp)
   55364:	10800617 	ldw	r2,24(r2)
   55368:	1000071e 	bne	r2,zero,55388 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   5536c:	e0bff817 	ldw	r2,-32(fp)
   55370:	10800517 	ldw	r2,20(r2)
   55374:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   55378:	e0bff817 	ldw	r2,-32(fp)
   5537c:	10800517 	ldw	r2,20(r2)
   55380:	d0a72015 	stw	r2,-25472(gp)
   55384:	00000a06 	br	553b0 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   55388:	e0bff817 	ldw	r2,-32(fp)
   5538c:	10800617 	ldw	r2,24(r2)
   55390:	e0fff817 	ldw	r3,-32(fp)
   55394:	18c00517 	ldw	r3,20(r3)
   55398:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   5539c:	e0bff817 	ldw	r2,-32(fp)
   553a0:	10800517 	ldw	r2,20(r2)
   553a4:	e0fff817 	ldw	r3,-32(fp)
   553a8:	18c00617 	ldw	r3,24(r3)
   553ac:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   553b0:	d0e72417 	ldw	r3,-25456(gp)
   553b4:	e0bff817 	ldw	r2,-32(fp)
   553b8:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   553bc:	e0bff817 	ldw	r2,-32(fp)
   553c0:	d0a72415 	stw	r2,-25456(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   553c4:	e0bff817 	ldw	r2,-32(fp)
   553c8:	00c00fc4 	movi	r3,63
   553cc:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   553d0:	e0bff817 	ldw	r2,-32(fp)
   553d4:	10001345 	stb	zero,77(r2)
   553d8:	e0bff617 	ldw	r2,-40(fp)
   553dc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   553e0:	e0bffc17 	ldw	r2,-16(fp)
   553e4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   553e8:	d0a71d43 	ldbu	r2,-25483(gp)
   553ec:	10803fcc 	andi	r2,r2,255
   553f0:	10800058 	cmpnei	r2,r2,1
   553f4:	1000011e 	bne	r2,zero,553fc <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   553f8:	004fb4c0 	call	4fb4c <OS_Sched>
    }
    return (OS_ERR_NONE);
   553fc:	0005883a 	mov	r2,zero
}
   55400:	e037883a 	mov	sp,fp
   55404:	dfc00117 	ldw	ra,4(sp)
   55408:	df000017 	ldw	fp,0(sp)
   5540c:	dec00204 	addi	sp,sp,8
   55410:	f800283a 	ret

00055414 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   55414:	defff504 	addi	sp,sp,-44
   55418:	df000a15 	stw	fp,40(sp)
   5541c:	df000a04 	addi	fp,sp,40
   55420:	2005883a 	mov	r2,r4
   55424:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   55428:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   5542c:	e0bfff03 	ldbu	r2,-4(fp)
   55430:	10800518 	cmpnei	r2,r2,20
   55434:	1000021e 	bne	r2,zero,55440 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   55438:	00800f84 	movi	r2,62
   5543c:	00004506 	br	55554 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   55440:	e0bfff03 	ldbu	r2,-4(fp)
   55444:	10800530 	cmpltui	r2,r2,20
   55448:	1000051e 	bne	r2,zero,55460 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   5544c:	e0bfff03 	ldbu	r2,-4(fp)
   55450:	10803fe0 	cmpeqi	r2,r2,255
   55454:	1000021e 	bne	r2,zero,55460 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   55458:	00800a84 	movi	r2,42
   5545c:	00003d06 	br	55554 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   55460:	e0bfff03 	ldbu	r2,-4(fp)
   55464:	10803fd8 	cmpnei	r2,r2,255
   55468:	1000111e 	bne	r2,zero,554b0 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5546c:	0005303a 	rdctl	r2,status
   55470:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55474:	e0fff917 	ldw	r3,-28(fp)
   55478:	00bfff84 	movi	r2,-2
   5547c:	1884703a 	and	r2,r3,r2
   55480:	1001703a 	wrctl	status,r2
  
  return context;
   55484:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   55488:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   5548c:	d0a72c17 	ldw	r2,-25424(gp)
   55490:	10800dc3 	ldbu	r2,55(r2)
   55494:	e0bff805 	stb	r2,-32(fp)
   55498:	e0bff617 	ldw	r2,-40(fp)
   5549c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   554a0:	e0bffe17 	ldw	r2,-8(fp)
   554a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   554a8:	e0bff803 	ldbu	r2,-32(fp)
   554ac:	00002906 	br	55554 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   554b0:	0005303a 	rdctl	r2,status
   554b4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   554b8:	e0fff717 	ldw	r3,-36(fp)
   554bc:	00bfff84 	movi	r2,-2
   554c0:	1884703a 	and	r2,r3,r2
   554c4:	1001703a 	wrctl	status,r2
  
  return context;
   554c8:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   554cc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   554d0:	e0ffff03 	ldbu	r3,-4(fp)
   554d4:	008001b4 	movhi	r2,6
   554d8:	108e6104 	addi	r2,r2,14724
   554dc:	18c7883a 	add	r3,r3,r3
   554e0:	18c7883a 	add	r3,r3,r3
   554e4:	10c5883a 	add	r2,r2,r3
   554e8:	10800017 	ldw	r2,0(r2)
   554ec:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   554f0:	e0bffb17 	ldw	r2,-20(fp)
   554f4:	1000061e 	bne	r2,zero,55510 <OSTaskDelReq+0xfc>
   554f8:	e0bff617 	ldw	r2,-40(fp)
   554fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55500:	e0bffa17 	ldw	r2,-24(fp)
   55504:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   55508:	008010c4 	movi	r2,67
   5550c:	00001106 	br	55554 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   55510:	e0bffb17 	ldw	r2,-20(fp)
   55514:	10800058 	cmpnei	r2,r2,1
   55518:	1000061e 	bne	r2,zero,55534 <OSTaskDelReq+0x120>
   5551c:	e0bff617 	ldw	r2,-40(fp)
   55520:	e0bffc15 	stw	r2,-16(fp)
   55524:	e0bffc17 	ldw	r2,-16(fp)
   55528:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   5552c:	00800f44 	movi	r2,61
   55530:	00000806 	br	55554 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   55534:	e0bffb17 	ldw	r2,-20(fp)
   55538:	00c00fc4 	movi	r3,63
   5553c:	10c00dc5 	stb	r3,55(r2)
   55540:	e0bff617 	ldw	r2,-40(fp)
   55544:	e0bffd15 	stw	r2,-12(fp)
   55548:	e0bffd17 	ldw	r2,-12(fp)
   5554c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   55550:	0005883a 	mov	r2,zero
}
   55554:	e037883a 	mov	sp,fp
   55558:	df000017 	ldw	fp,0(sp)
   5555c:	dec00104 	addi	sp,sp,4
   55560:	f800283a 	ret

00055564 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   55564:	defff404 	addi	sp,sp,-48
   55568:	dfc00b15 	stw	ra,44(sp)
   5556c:	df000a15 	stw	fp,40(sp)
   55570:	df000a04 	addi	fp,sp,40
   55574:	2005883a 	mov	r2,r4
   55578:	e17ffe15 	stw	r5,-8(fp)
   5557c:	e1bfff15 	stw	r6,-4(fp)
   55580:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   55584:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   55588:	e0bfff17 	ldw	r2,-4(fp)
   5558c:	1000021e 	bne	r2,zero,55598 <OSTaskNameGet+0x34>
        return (0);
   55590:	0005883a 	mov	r2,zero
   55594:	00005406 	br	556e8 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   55598:	e0bffd03 	ldbu	r2,-12(fp)
   5559c:	10800570 	cmpltui	r2,r2,21
   555a0:	1000081e 	bne	r2,zero,555c4 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   555a4:	e0bffd03 	ldbu	r2,-12(fp)
   555a8:	10803fe0 	cmpeqi	r2,r2,255
   555ac:	1000051e 	bne	r2,zero,555c4 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   555b0:	e0bfff17 	ldw	r2,-4(fp)
   555b4:	00c00a84 	movi	r3,42
   555b8:	10c00005 	stb	r3,0(r2)
            return (0);
   555bc:	0005883a 	mov	r2,zero
   555c0:	00004906 	br	556e8 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   555c4:	e0bffe17 	ldw	r2,-8(fp)
   555c8:	1000051e 	bne	r2,zero,555e0 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   555cc:	e0bfff17 	ldw	r2,-4(fp)
   555d0:	00c00304 	movi	r3,12
   555d4:	10c00005 	stb	r3,0(r2)
        return (0);
   555d8:	0005883a 	mov	r2,zero
   555dc:	00004206 	br	556e8 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   555e0:	d0a72b03 	ldbu	r2,-25428(gp)
   555e4:	10803fcc 	andi	r2,r2,255
   555e8:	10000526 	beq	r2,zero,55600 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   555ec:	e0bfff17 	ldw	r2,-4(fp)
   555f0:	00c00444 	movi	r3,17
   555f4:	10c00005 	stb	r3,0(r2)
        return (0);
   555f8:	0005883a 	mov	r2,zero
   555fc:	00003a06 	br	556e8 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55600:	0005303a 	rdctl	r2,status
   55604:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55608:	e0fffc17 	ldw	r3,-16(fp)
   5560c:	00bfff84 	movi	r2,-2
   55610:	1884703a 	and	r2,r3,r2
   55614:	1001703a 	wrctl	status,r2
  
  return context;
   55618:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   5561c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   55620:	e0bffd03 	ldbu	r2,-12(fp)
   55624:	10803fd8 	cmpnei	r2,r2,255
   55628:	1000031e 	bne	r2,zero,55638 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   5562c:	d0a72c17 	ldw	r2,-25424(gp)
   55630:	10800c83 	ldbu	r2,50(r2)
   55634:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   55638:	e0fffd03 	ldbu	r3,-12(fp)
   5563c:	008001b4 	movhi	r2,6
   55640:	108e6104 	addi	r2,r2,14724
   55644:	18c7883a 	add	r3,r3,r3
   55648:	18c7883a 	add	r3,r3,r3
   5564c:	10c5883a 	add	r2,r2,r3
   55650:	10800017 	ldw	r2,0(r2)
   55654:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   55658:	e0bff817 	ldw	r2,-32(fp)
   5565c:	1000091e 	bne	r2,zero,55684 <OSTaskNameGet+0x120>
   55660:	e0bff617 	ldw	r2,-40(fp)
   55664:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55668:	e0bff717 	ldw	r2,-36(fp)
   5566c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   55670:	e0bfff17 	ldw	r2,-4(fp)
   55674:	00c010c4 	movi	r3,67
   55678:	10c00005 	stb	r3,0(r2)
        return (0);
   5567c:	0005883a 	mov	r2,zero
   55680:	00001906 	br	556e8 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   55684:	e0bff817 	ldw	r2,-32(fp)
   55688:	10800058 	cmpnei	r2,r2,1
   5568c:	1000091e 	bne	r2,zero,556b4 <OSTaskNameGet+0x150>
   55690:	e0bff617 	ldw	r2,-40(fp)
   55694:	e0bff915 	stw	r2,-28(fp)
   55698:	e0bff917 	ldw	r2,-28(fp)
   5569c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   556a0:	e0bfff17 	ldw	r2,-4(fp)
   556a4:	00c010c4 	movi	r3,67
   556a8:	10c00005 	stb	r3,0(r2)
        return (0);
   556ac:	0005883a 	mov	r2,zero
   556b0:	00000d06 	br	556e8 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   556b4:	e0bff817 	ldw	r2,-32(fp)
   556b8:	10801304 	addi	r2,r2,76
   556bc:	100b883a 	mov	r5,r2
   556c0:	e13ffe17 	ldw	r4,-8(fp)
   556c4:	004fc900 	call	4fc90 <OS_StrCopy>
   556c8:	e0bffb05 	stb	r2,-20(fp)
   556cc:	e0bff617 	ldw	r2,-40(fp)
   556d0:	e0bffa15 	stw	r2,-24(fp)
   556d4:	e0bffa17 	ldw	r2,-24(fp)
   556d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   556dc:	e0bfff17 	ldw	r2,-4(fp)
   556e0:	10000005 	stb	zero,0(r2)
    return (len);
   556e4:	e0bffb03 	ldbu	r2,-20(fp)
}
   556e8:	e037883a 	mov	sp,fp
   556ec:	dfc00117 	ldw	ra,4(sp)
   556f0:	df000017 	ldw	fp,0(sp)
   556f4:	dec00204 	addi	sp,sp,8
   556f8:	f800283a 	ret

000556fc <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   556fc:	defff304 	addi	sp,sp,-52
   55700:	dfc00c15 	stw	ra,48(sp)
   55704:	df000b15 	stw	fp,44(sp)
   55708:	df000b04 	addi	fp,sp,44
   5570c:	2005883a 	mov	r2,r4
   55710:	e17ffe15 	stw	r5,-8(fp)
   55714:	e1bfff15 	stw	r6,-4(fp)
   55718:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   5571c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   55720:	e0bfff17 	ldw	r2,-4(fp)
   55724:	10005c26 	beq	r2,zero,55898 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   55728:	e0bffd03 	ldbu	r2,-12(fp)
   5572c:	10800570 	cmpltui	r2,r2,21
   55730:	1000071e 	bne	r2,zero,55750 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   55734:	e0bffd03 	ldbu	r2,-12(fp)
   55738:	10803fe0 	cmpeqi	r2,r2,255
   5573c:	1000041e 	bne	r2,zero,55750 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   55740:	e0bfff17 	ldw	r2,-4(fp)
   55744:	00c00a84 	movi	r3,42
   55748:	10c00005 	stb	r3,0(r2)
            return;
   5574c:	00005306 	br	5589c <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   55750:	e0bffe17 	ldw	r2,-8(fp)
   55754:	1000041e 	bne	r2,zero,55768 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   55758:	e0bfff17 	ldw	r2,-4(fp)
   5575c:	00c00304 	movi	r3,12
   55760:	10c00005 	stb	r3,0(r2)
        return;
   55764:	00004d06 	br	5589c <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   55768:	d0a72b03 	ldbu	r2,-25428(gp)
   5576c:	10803fcc 	andi	r2,r2,255
   55770:	10000426 	beq	r2,zero,55784 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   55774:	e0bfff17 	ldw	r2,-4(fp)
   55778:	00c00484 	movi	r3,18
   5577c:	10c00005 	stb	r3,0(r2)
        return;
   55780:	00004606 	br	5589c <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55784:	0005303a 	rdctl	r2,status
   55788:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5578c:	e0fffc17 	ldw	r3,-16(fp)
   55790:	00bfff84 	movi	r2,-2
   55794:	1884703a 	and	r2,r3,r2
   55798:	1001703a 	wrctl	status,r2
  
  return context;
   5579c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   557a0:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   557a4:	e0bffd03 	ldbu	r2,-12(fp)
   557a8:	10803fd8 	cmpnei	r2,r2,255
   557ac:	1000031e 	bne	r2,zero,557bc <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   557b0:	d0a72c17 	ldw	r2,-25424(gp)
   557b4:	10800c83 	ldbu	r2,50(r2)
   557b8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   557bc:	e0fffd03 	ldbu	r3,-12(fp)
   557c0:	008001b4 	movhi	r2,6
   557c4:	108e6104 	addi	r2,r2,14724
   557c8:	18c7883a 	add	r3,r3,r3
   557cc:	18c7883a 	add	r3,r3,r3
   557d0:	10c5883a 	add	r2,r2,r3
   557d4:	10800017 	ldw	r2,0(r2)
   557d8:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   557dc:	e0bff717 	ldw	r2,-36(fp)
   557e0:	1000081e 	bne	r2,zero,55804 <OSTaskNameSet+0x108>
   557e4:	e0bff517 	ldw	r2,-44(fp)
   557e8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   557ec:	e0bff617 	ldw	r2,-40(fp)
   557f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   557f4:	e0bfff17 	ldw	r2,-4(fp)
   557f8:	00c010c4 	movi	r3,67
   557fc:	10c00005 	stb	r3,0(r2)
        return;
   55800:	00002606 	br	5589c <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   55804:	e0bff717 	ldw	r2,-36(fp)
   55808:	10800058 	cmpnei	r2,r2,1
   5580c:	1000081e 	bne	r2,zero,55830 <OSTaskNameSet+0x134>
   55810:	e0bff517 	ldw	r2,-44(fp)
   55814:	e0bff815 	stw	r2,-32(fp)
   55818:	e0bff817 	ldw	r2,-32(fp)
   5581c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   55820:	e0bfff17 	ldw	r2,-4(fp)
   55824:	00c010c4 	movi	r3,67
   55828:	10c00005 	stb	r3,0(r2)
        return;
   5582c:	00001b06 	br	5589c <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   55830:	e13ffe17 	ldw	r4,-8(fp)
   55834:	004fd040 	call	4fd04 <OS_StrLen>
   55838:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   5583c:	e0bffa03 	ldbu	r2,-24(fp)
   55840:	10800830 	cmpltui	r2,r2,32
   55844:	1000081e 	bne	r2,zero,55868 <OSTaskNameSet+0x16c>
   55848:	e0bff517 	ldw	r2,-44(fp)
   5584c:	e0bff915 	stw	r2,-28(fp)
   55850:	e0bff917 	ldw	r2,-28(fp)
   55854:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   55858:	e0bfff17 	ldw	r2,-4(fp)
   5585c:	00c01044 	movi	r3,65
   55860:	10c00005 	stb	r3,0(r2)
        return;
   55864:	00000d06 	br	5589c <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   55868:	e0bff717 	ldw	r2,-36(fp)
   5586c:	10801304 	addi	r2,r2,76
   55870:	e17ffe17 	ldw	r5,-8(fp)
   55874:	1009883a 	mov	r4,r2
   55878:	004fc900 	call	4fc90 <OS_StrCopy>
   5587c:	e0bff517 	ldw	r2,-44(fp)
   55880:	e0bffb15 	stw	r2,-20(fp)
   55884:	e0bffb17 	ldw	r2,-20(fp)
   55888:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   5588c:	e0bfff17 	ldw	r2,-4(fp)
   55890:	10000005 	stb	zero,0(r2)
   55894:	00000106 	br	5589c <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   55898:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   5589c:	e037883a 	mov	sp,fp
   558a0:	dfc00117 	ldw	ra,4(sp)
   558a4:	df000017 	ldw	fp,0(sp)
   558a8:	dec00204 	addi	sp,sp,8
   558ac:	f800283a 	ret

000558b0 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   558b0:	defff404 	addi	sp,sp,-48
   558b4:	dfc00b15 	stw	ra,44(sp)
   558b8:	df000a15 	stw	fp,40(sp)
   558bc:	df000a04 	addi	fp,sp,40
   558c0:	2005883a 	mov	r2,r4
   558c4:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   558c8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   558cc:	e0bfff03 	ldbu	r2,-4(fp)
   558d0:	10800530 	cmpltui	r2,r2,20
   558d4:	1000021e 	bne	r2,zero,558e0 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   558d8:	00800a84 	movi	r2,42
   558dc:	00006406 	br	55a70 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   558e0:	0005303a 	rdctl	r2,status
   558e4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   558e8:	e0fffe17 	ldw	r3,-8(fp)
   558ec:	00bfff84 	movi	r2,-2
   558f0:	1884703a 	and	r2,r3,r2
   558f4:	1001703a 	wrctl	status,r2
  
  return context;
   558f8:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   558fc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   55900:	e0ffff03 	ldbu	r3,-4(fp)
   55904:	008001b4 	movhi	r2,6
   55908:	108e6104 	addi	r2,r2,14724
   5590c:	18c7883a 	add	r3,r3,r3
   55910:	18c7883a 	add	r3,r3,r3
   55914:	10c5883a 	add	r2,r2,r3
   55918:	10800017 	ldw	r2,0(r2)
   5591c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   55920:	e0bff817 	ldw	r2,-32(fp)
   55924:	1000061e 	bne	r2,zero,55940 <OSTaskResume+0x90>
   55928:	e0bff617 	ldw	r2,-40(fp)
   5592c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55930:	e0bff717 	ldw	r2,-36(fp)
   55934:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   55938:	00801184 	movi	r2,70
   5593c:	00004c06 	br	55a70 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   55940:	e0bff817 	ldw	r2,-32(fp)
   55944:	10800058 	cmpnei	r2,r2,1
   55948:	1000061e 	bne	r2,zero,55964 <OSTaskResume+0xb4>
   5594c:	e0bff617 	ldw	r2,-40(fp)
   55950:	e0bff915 	stw	r2,-28(fp)
   55954:	e0bff917 	ldw	r2,-28(fp)
   55958:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   5595c:	008010c4 	movi	r2,67
   55960:	00004306 	br	55a70 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   55964:	e0bff817 	ldw	r2,-32(fp)
   55968:	10800c03 	ldbu	r2,48(r2)
   5596c:	10803fcc 	andi	r2,r2,255
   55970:	1080020c 	andi	r2,r2,8
   55974:	10003926 	beq	r2,zero,55a5c <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   55978:	e0bff817 	ldw	r2,-32(fp)
   5597c:	10c00c03 	ldbu	r3,48(r2)
   55980:	00bffdc4 	movi	r2,-9
   55984:	1884703a 	and	r2,r3,r2
   55988:	1007883a 	mov	r3,r2
   5598c:	e0bff817 	ldw	r2,-32(fp)
   55990:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   55994:	e0bff817 	ldw	r2,-32(fp)
   55998:	10800c03 	ldbu	r2,48(r2)
   5599c:	10803fcc 	andi	r2,r2,255
   559a0:	1000281e 	bne	r2,zero,55a44 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   559a4:	e0bff817 	ldw	r2,-32(fp)
   559a8:	10800b8b 	ldhu	r2,46(r2)
   559ac:	10bfffcc 	andi	r2,r2,65535
   559b0:	10001f1e 	bne	r2,zero,55a30 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   559b4:	e0bff817 	ldw	r2,-32(fp)
   559b8:	10c00d83 	ldbu	r3,54(r2)
   559bc:	d0a72903 	ldbu	r2,-25436(gp)
   559c0:	1884b03a 	or	r2,r3,r2
   559c4:	d0a72905 	stb	r2,-25436(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   559c8:	e0bff817 	ldw	r2,-32(fp)
   559cc:	10800d03 	ldbu	r2,52(r2)
   559d0:	10c03fcc 	andi	r3,r2,255
   559d4:	e0bff817 	ldw	r2,-32(fp)
   559d8:	10800d03 	ldbu	r2,52(r2)
   559dc:	11003fcc 	andi	r4,r2,255
   559e0:	d0a72944 	addi	r2,gp,-25435
   559e4:	2085883a 	add	r2,r4,r2
   559e8:	11000003 	ldbu	r4,0(r2)
   559ec:	e0bff817 	ldw	r2,-32(fp)
   559f0:	10800d43 	ldbu	r2,53(r2)
   559f4:	2084b03a 	or	r2,r4,r2
   559f8:	1009883a 	mov	r4,r2
   559fc:	d0a72944 	addi	r2,gp,-25435
   55a00:	1885883a 	add	r2,r3,r2
   55a04:	11000005 	stb	r4,0(r2)
   55a08:	e0bff617 	ldw	r2,-40(fp)
   55a0c:	e0bffa15 	stw	r2,-24(fp)
   55a10:	e0bffa17 	ldw	r2,-24(fp)
   55a14:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   55a18:	d0a71d43 	ldbu	r2,-25483(gp)
   55a1c:	10803fcc 	andi	r2,r2,255
   55a20:	10800058 	cmpnei	r2,r2,1
   55a24:	10000b1e 	bne	r2,zero,55a54 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   55a28:	004fb4c0 	call	4fb4c <OS_Sched>
   55a2c:	00000906 	br	55a54 <OSTaskResume+0x1a4>
   55a30:	e0bff617 	ldw	r2,-40(fp)
   55a34:	e0bffb15 	stw	r2,-20(fp)
   55a38:	e0bffb17 	ldw	r2,-20(fp)
   55a3c:	1001703a 	wrctl	status,r2
   55a40:	00000406 	br	55a54 <OSTaskResume+0x1a4>
   55a44:	e0bff617 	ldw	r2,-40(fp)
   55a48:	e0bffc15 	stw	r2,-16(fp)
   55a4c:	e0bffc17 	ldw	r2,-16(fp)
   55a50:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   55a54:	0005883a 	mov	r2,zero
   55a58:	00000506 	br	55a70 <OSTaskResume+0x1c0>
   55a5c:	e0bff617 	ldw	r2,-40(fp)
   55a60:	e0bffd15 	stw	r2,-12(fp)
   55a64:	e0bffd17 	ldw	r2,-12(fp)
   55a68:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   55a6c:	00801104 	movi	r2,68
}
   55a70:	e037883a 	mov	sp,fp
   55a74:	dfc00117 	ldw	ra,4(sp)
   55a78:	df000017 	ldw	fp,0(sp)
   55a7c:	dec00204 	addi	sp,sp,8
   55a80:	f800283a 	ret

00055a84 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   55a84:	defff304 	addi	sp,sp,-52
   55a88:	df000c15 	stw	fp,48(sp)
   55a8c:	df000c04 	addi	fp,sp,48
   55a90:	2005883a 	mov	r2,r4
   55a94:	e17fff15 	stw	r5,-4(fp)
   55a98:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   55a9c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   55aa0:	e0bffe03 	ldbu	r2,-8(fp)
   55aa4:	10800570 	cmpltui	r2,r2,21
   55aa8:	1000051e 	bne	r2,zero,55ac0 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   55aac:	e0bffe03 	ldbu	r2,-8(fp)
   55ab0:	10803fe0 	cmpeqi	r2,r2,255
   55ab4:	1000021e 	bne	r2,zero,55ac0 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   55ab8:	00800a84 	movi	r2,42
   55abc:	00005d06 	br	55c34 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   55ac0:	e0bfff17 	ldw	r2,-4(fp)
   55ac4:	1000021e 	bne	r2,zero,55ad0 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   55ac8:	00800244 	movi	r2,9
   55acc:	00005906 	br	55c34 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   55ad0:	e0bfff17 	ldw	r2,-4(fp)
   55ad4:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   55ad8:	e0bfff17 	ldw	r2,-4(fp)
   55adc:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55ae0:	0005303a 	rdctl	r2,status
   55ae4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55ae8:	e0fffd17 	ldw	r3,-12(fp)
   55aec:	00bfff84 	movi	r2,-2
   55af0:	1884703a 	and	r2,r3,r2
   55af4:	1001703a 	wrctl	status,r2
  
  return context;
   55af8:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   55afc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   55b00:	e0bffe03 	ldbu	r2,-8(fp)
   55b04:	10803fd8 	cmpnei	r2,r2,255
   55b08:	1000031e 	bne	r2,zero,55b18 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   55b0c:	d0a72c17 	ldw	r2,-25424(gp)
   55b10:	10800c83 	ldbu	r2,50(r2)
   55b14:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   55b18:	e0fffe03 	ldbu	r3,-8(fp)
   55b1c:	008001b4 	movhi	r2,6
   55b20:	108e6104 	addi	r2,r2,14724
   55b24:	18c7883a 	add	r3,r3,r3
   55b28:	18c7883a 	add	r3,r3,r3
   55b2c:	10c5883a 	add	r2,r2,r3
   55b30:	10800017 	ldw	r2,0(r2)
   55b34:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   55b38:	e0bff817 	ldw	r2,-32(fp)
   55b3c:	1000061e 	bne	r2,zero,55b58 <OSTaskStkChk+0xd4>
   55b40:	e0bff617 	ldw	r2,-40(fp)
   55b44:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55b48:	e0bff717 	ldw	r2,-36(fp)
   55b4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   55b50:	008010c4 	movi	r2,67
   55b54:	00003706 	br	55c34 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   55b58:	e0bff817 	ldw	r2,-32(fp)
   55b5c:	10800058 	cmpnei	r2,r2,1
   55b60:	1000061e 	bne	r2,zero,55b7c <OSTaskStkChk+0xf8>
   55b64:	e0bff617 	ldw	r2,-40(fp)
   55b68:	e0bff915 	stw	r2,-28(fp)
   55b6c:	e0bff917 	ldw	r2,-28(fp)
   55b70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   55b74:	008010c4 	movi	r2,67
   55b78:	00002e06 	br	55c34 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   55b7c:	e0bff817 	ldw	r2,-32(fp)
   55b80:	1080040b 	ldhu	r2,16(r2)
   55b84:	10bfffcc 	andi	r2,r2,65535
   55b88:	1080004c 	andi	r2,r2,1
   55b8c:	1000061e 	bne	r2,zero,55ba8 <OSTaskStkChk+0x124>
   55b90:	e0bff617 	ldw	r2,-40(fp)
   55b94:	e0bffa15 	stw	r2,-24(fp)
   55b98:	e0bffa17 	ldw	r2,-24(fp)
   55b9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   55ba0:	00801144 	movi	r2,69
   55ba4:	00002306 	br	55c34 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   55ba8:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   55bac:	e0bff817 	ldw	r2,-32(fp)
   55bb0:	10800317 	ldw	r2,12(r2)
   55bb4:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   55bb8:	e0bff817 	ldw	r2,-32(fp)
   55bbc:	10800217 	ldw	r2,8(r2)
   55bc0:	e0bff415 	stw	r2,-48(fp)
   55bc4:	e0bff617 	ldw	r2,-40(fp)
   55bc8:	e0bffb15 	stw	r2,-20(fp)
   55bcc:	e0bffb17 	ldw	r2,-20(fp)
   55bd0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   55bd4:	00000306 	br	55be4 <OSTaskStkChk+0x160>
        nfree++;
   55bd8:	e0bff517 	ldw	r2,-44(fp)
   55bdc:	10800044 	addi	r2,r2,1
   55be0:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   55be4:	e0bff417 	ldw	r2,-48(fp)
   55be8:	10c00104 	addi	r3,r2,4
   55bec:	e0fff415 	stw	r3,-48(fp)
   55bf0:	10800017 	ldw	r2,0(r2)
   55bf4:	103ff826 	beq	r2,zero,55bd8 <__alt_data_end+0xffff03d8>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   55bf8:	e0bff517 	ldw	r2,-44(fp)
   55bfc:	1085883a 	add	r2,r2,r2
   55c00:	1085883a 	add	r2,r2,r2
   55c04:	1007883a 	mov	r3,r2
   55c08:	e0bfff17 	ldw	r2,-4(fp)
   55c0c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   55c10:	e0fffc17 	ldw	r3,-16(fp)
   55c14:	e0bff517 	ldw	r2,-44(fp)
   55c18:	1885c83a 	sub	r2,r3,r2
   55c1c:	1085883a 	add	r2,r2,r2
   55c20:	1085883a 	add	r2,r2,r2
   55c24:	1007883a 	mov	r3,r2
   55c28:	e0bfff17 	ldw	r2,-4(fp)
   55c2c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   55c30:	0005883a 	mov	r2,zero
}
   55c34:	e037883a 	mov	sp,fp
   55c38:	df000017 	ldw	fp,0(sp)
   55c3c:	dec00104 	addi	sp,sp,4
   55c40:	f800283a 	ret

00055c44 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   55c44:	defff504 	addi	sp,sp,-44
   55c48:	dfc00a15 	stw	ra,40(sp)
   55c4c:	df000915 	stw	fp,36(sp)
   55c50:	df000904 	addi	fp,sp,36
   55c54:	2005883a 	mov	r2,r4
   55c58:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   55c5c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   55c60:	e0bfff03 	ldbu	r2,-4(fp)
   55c64:	10800518 	cmpnei	r2,r2,20
   55c68:	1000021e 	bne	r2,zero,55c74 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   55c6c:	008011c4 	movi	r2,71
   55c70:	00006806 	br	55e14 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   55c74:	e0bfff03 	ldbu	r2,-4(fp)
   55c78:	10800530 	cmpltui	r2,r2,20
   55c7c:	1000051e 	bne	r2,zero,55c94 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   55c80:	e0bfff03 	ldbu	r2,-4(fp)
   55c84:	10803fe0 	cmpeqi	r2,r2,255
   55c88:	1000021e 	bne	r2,zero,55c94 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   55c8c:	00800a84 	movi	r2,42
   55c90:	00006006 	br	55e14 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55c94:	0005303a 	rdctl	r2,status
   55c98:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55c9c:	e0fffe17 	ldw	r3,-8(fp)
   55ca0:	00bfff84 	movi	r2,-2
   55ca4:	1884703a 	and	r2,r3,r2
   55ca8:	1001703a 	wrctl	status,r2
  
  return context;
   55cac:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   55cb0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   55cb4:	e0bfff03 	ldbu	r2,-4(fp)
   55cb8:	10803fd8 	cmpnei	r2,r2,255
   55cbc:	1000061e 	bne	r2,zero,55cd8 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   55cc0:	d0a72c17 	ldw	r2,-25424(gp)
   55cc4:	10800c83 	ldbu	r2,50(r2)
   55cc8:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   55ccc:	00800044 	movi	r2,1
   55cd0:	e0bff705 	stb	r2,-36(fp)
   55cd4:	00000906 	br	55cfc <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   55cd8:	d0a72c17 	ldw	r2,-25424(gp)
   55cdc:	10800c83 	ldbu	r2,50(r2)
   55ce0:	10c03fcc 	andi	r3,r2,255
   55ce4:	e0bfff03 	ldbu	r2,-4(fp)
   55ce8:	1880031e 	bne	r3,r2,55cf8 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   55cec:	00800044 	movi	r2,1
   55cf0:	e0bff705 	stb	r2,-36(fp)
   55cf4:	00000106 	br	55cfc <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   55cf8:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   55cfc:	e0ffff03 	ldbu	r3,-4(fp)
   55d00:	008001b4 	movhi	r2,6
   55d04:	108e6104 	addi	r2,r2,14724
   55d08:	18c7883a 	add	r3,r3,r3
   55d0c:	18c7883a 	add	r3,r3,r3
   55d10:	10c5883a 	add	r2,r2,r3
   55d14:	10800017 	ldw	r2,0(r2)
   55d18:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   55d1c:	e0bffa17 	ldw	r2,-24(fp)
   55d20:	1000061e 	bne	r2,zero,55d3c <OSTaskSuspend+0xf8>
   55d24:	e0bff817 	ldw	r2,-32(fp)
   55d28:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55d2c:	e0bff917 	ldw	r2,-28(fp)
   55d30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   55d34:	00801204 	movi	r2,72
   55d38:	00003606 	br	55e14 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   55d3c:	e0bffa17 	ldw	r2,-24(fp)
   55d40:	10800058 	cmpnei	r2,r2,1
   55d44:	1000061e 	bne	r2,zero,55d60 <OSTaskSuspend+0x11c>
   55d48:	e0bff817 	ldw	r2,-32(fp)
   55d4c:	e0bffb15 	stw	r2,-20(fp)
   55d50:	e0bffb17 	ldw	r2,-20(fp)
   55d54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   55d58:	008010c4 	movi	r2,67
   55d5c:	00002d06 	br	55e14 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   55d60:	e0bffa17 	ldw	r2,-24(fp)
   55d64:	10800d03 	ldbu	r2,52(r2)
   55d68:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   55d6c:	e0fffd03 	ldbu	r3,-12(fp)
   55d70:	e13ffd03 	ldbu	r4,-12(fp)
   55d74:	d0a72944 	addi	r2,gp,-25435
   55d78:	2085883a 	add	r2,r4,r2
   55d7c:	10800003 	ldbu	r2,0(r2)
   55d80:	1009883a 	mov	r4,r2
   55d84:	e0bffa17 	ldw	r2,-24(fp)
   55d88:	10800d43 	ldbu	r2,53(r2)
   55d8c:	0084303a 	nor	r2,zero,r2
   55d90:	2084703a 	and	r2,r4,r2
   55d94:	1009883a 	mov	r4,r2
   55d98:	d0a72944 	addi	r2,gp,-25435
   55d9c:	1885883a 	add	r2,r3,r2
   55da0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   55da4:	e0fffd03 	ldbu	r3,-12(fp)
   55da8:	d0a72944 	addi	r2,gp,-25435
   55dac:	1885883a 	add	r2,r3,r2
   55db0:	10800003 	ldbu	r2,0(r2)
   55db4:	10803fcc 	andi	r2,r2,255
   55db8:	1000071e 	bne	r2,zero,55dd8 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   55dbc:	e0bffa17 	ldw	r2,-24(fp)
   55dc0:	10800d83 	ldbu	r2,54(r2)
   55dc4:	0084303a 	nor	r2,zero,r2
   55dc8:	1007883a 	mov	r3,r2
   55dcc:	d0a72903 	ldbu	r2,-25436(gp)
   55dd0:	1884703a 	and	r2,r3,r2
   55dd4:	d0a72905 	stb	r2,-25436(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   55dd8:	e0bffa17 	ldw	r2,-24(fp)
   55ddc:	10800c03 	ldbu	r2,48(r2)
   55de0:	10800214 	ori	r2,r2,8
   55de4:	1007883a 	mov	r3,r2
   55de8:	e0bffa17 	ldw	r2,-24(fp)
   55dec:	10c00c05 	stb	r3,48(r2)
   55df0:	e0bff817 	ldw	r2,-32(fp)
   55df4:	e0bffc15 	stw	r2,-16(fp)
   55df8:	e0bffc17 	ldw	r2,-16(fp)
   55dfc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   55e00:	e0bff703 	ldbu	r2,-36(fp)
   55e04:	10800058 	cmpnei	r2,r2,1
   55e08:	1000011e 	bne	r2,zero,55e10 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   55e0c:	004fb4c0 	call	4fb4c <OS_Sched>
    }
    return (OS_ERR_NONE);
   55e10:	0005883a 	mov	r2,zero
}
   55e14:	e037883a 	mov	sp,fp
   55e18:	dfc00117 	ldw	ra,4(sp)
   55e1c:	df000017 	ldw	fp,0(sp)
   55e20:	dec00204 	addi	sp,sp,8
   55e24:	f800283a 	ret

00055e28 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   55e28:	defff604 	addi	sp,sp,-40
   55e2c:	dfc00915 	stw	ra,36(sp)
   55e30:	df000815 	stw	fp,32(sp)
   55e34:	df000804 	addi	fp,sp,32
   55e38:	2005883a 	mov	r2,r4
   55e3c:	e17fff15 	stw	r5,-4(fp)
   55e40:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   55e44:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   55e48:	e0bffe03 	ldbu	r2,-8(fp)
   55e4c:	10800570 	cmpltui	r2,r2,21
   55e50:	1000051e 	bne	r2,zero,55e68 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   55e54:	e0bffe03 	ldbu	r2,-8(fp)
   55e58:	10803fe0 	cmpeqi	r2,r2,255
   55e5c:	1000021e 	bne	r2,zero,55e68 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   55e60:	00800a84 	movi	r2,42
   55e64:	00003406 	br	55f38 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   55e68:	e0bfff17 	ldw	r2,-4(fp)
   55e6c:	1000021e 	bne	r2,zero,55e78 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   55e70:	00800244 	movi	r2,9
   55e74:	00003006 	br	55f38 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55e78:	0005303a 	rdctl	r2,status
   55e7c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55e80:	e0fffd17 	ldw	r3,-12(fp)
   55e84:	00bfff84 	movi	r2,-2
   55e88:	1884703a 	and	r2,r3,r2
   55e8c:	1001703a 	wrctl	status,r2
  
  return context;
   55e90:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   55e94:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   55e98:	e0bffe03 	ldbu	r2,-8(fp)
   55e9c:	10803fd8 	cmpnei	r2,r2,255
   55ea0:	1000031e 	bne	r2,zero,55eb0 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   55ea4:	d0a72c17 	ldw	r2,-25424(gp)
   55ea8:	10800c83 	ldbu	r2,50(r2)
   55eac:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   55eb0:	e0fffe03 	ldbu	r3,-8(fp)
   55eb4:	008001b4 	movhi	r2,6
   55eb8:	108e6104 	addi	r2,r2,14724
   55ebc:	18c7883a 	add	r3,r3,r3
   55ec0:	18c7883a 	add	r3,r3,r3
   55ec4:	10c5883a 	add	r2,r2,r3
   55ec8:	10800017 	ldw	r2,0(r2)
   55ecc:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   55ed0:	e0bffa17 	ldw	r2,-24(fp)
   55ed4:	1000061e 	bne	r2,zero,55ef0 <OSTaskQuery+0xc8>
   55ed8:	e0bff817 	ldw	r2,-32(fp)
   55edc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55ee0:	e0bff917 	ldw	r2,-28(fp)
   55ee4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   55ee8:	00800a44 	movi	r2,41
   55eec:	00001206 	br	55f38 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   55ef0:	e0bffa17 	ldw	r2,-24(fp)
   55ef4:	10800058 	cmpnei	r2,r2,1
   55ef8:	1000061e 	bne	r2,zero,55f14 <OSTaskQuery+0xec>
   55efc:	e0bff817 	ldw	r2,-32(fp)
   55f00:	e0bffb15 	stw	r2,-20(fp)
   55f04:	e0bffb17 	ldw	r2,-20(fp)
   55f08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   55f0c:	008010c4 	movi	r2,67
   55f10:	00000906 	br	55f38 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   55f14:	01801b04 	movi	r6,108
   55f18:	e17ffa17 	ldw	r5,-24(fp)
   55f1c:	e13fff17 	ldw	r4,-4(fp)
   55f20:	004fae40 	call	4fae4 <OS_MemCopy>
   55f24:	e0bff817 	ldw	r2,-32(fp)
   55f28:	e0bffc15 	stw	r2,-16(fp)
   55f2c:	e0bffc17 	ldw	r2,-16(fp)
   55f30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   55f34:	0005883a 	mov	r2,zero
}
   55f38:	e037883a 	mov	sp,fp
   55f3c:	dfc00117 	ldw	ra,4(sp)
   55f40:	df000017 	ldw	fp,0(sp)
   55f44:	dec00204 	addi	sp,sp,8
   55f48:	f800283a 	ret

00055f4c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   55f4c:	defffc04 	addi	sp,sp,-16
   55f50:	df000315 	stw	fp,12(sp)
   55f54:	df000304 	addi	fp,sp,12
   55f58:	e13ffd15 	stw	r4,-12(fp)
   55f5c:	e17ffe15 	stw	r5,-8(fp)
   55f60:	3005883a 	mov	r2,r6
   55f64:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   55f68:	e0bfff0b 	ldhu	r2,-4(fp)
   55f6c:	1080004c 	andi	r2,r2,1
   55f70:	10000d26 	beq	r2,zero,55fa8 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   55f74:	e0bfff0b 	ldhu	r2,-4(fp)
   55f78:	1080008c 	andi	r2,r2,2
   55f7c:	10000a26 	beq	r2,zero,55fa8 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   55f80:	00000706 	br	55fa0 <OS_TaskStkClr+0x54>
                size--;
   55f84:	e0bffe17 	ldw	r2,-8(fp)
   55f88:	10bfffc4 	addi	r2,r2,-1
   55f8c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   55f90:	e0bffd17 	ldw	r2,-12(fp)
   55f94:	10c00104 	addi	r3,r2,4
   55f98:	e0fffd15 	stw	r3,-12(fp)
   55f9c:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   55fa0:	e0bffe17 	ldw	r2,-8(fp)
   55fa4:	103ff71e 	bne	r2,zero,55f84 <__alt_data_end+0xffff0784>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   55fa8:	0001883a 	nop
   55fac:	e037883a 	mov	sp,fp
   55fb0:	df000017 	ldw	fp,0(sp)
   55fb4:	dec00104 	addi	sp,sp,4
   55fb8:	f800283a 	ret

00055fbc <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   55fbc:	defff904 	addi	sp,sp,-28
   55fc0:	dfc00615 	stw	ra,24(sp)
   55fc4:	df000515 	stw	fp,20(sp)
   55fc8:	df000504 	addi	fp,sp,20
   55fcc:	2005883a 	mov	r2,r4
   55fd0:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   55fd4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   55fd8:	d0a72b03 	ldbu	r2,-25428(gp)
   55fdc:	10803fcc 	andi	r2,r2,255
   55fe0:	1000311e 	bne	r2,zero,560a8 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   55fe4:	e0bfff0b 	ldhu	r2,-4(fp)
   55fe8:	10003026 	beq	r2,zero,560ac <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55fec:	0005303a 	rdctl	r2,status
   55ff0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55ff4:	e0fffe17 	ldw	r3,-8(fp)
   55ff8:	00bfff84 	movi	r2,-2
   55ffc:	1884703a 	and	r2,r3,r2
   56000:	1001703a 	wrctl	status,r2
  
  return context;
   56004:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   56008:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   5600c:	d0a72c17 	ldw	r2,-25424(gp)
   56010:	10800d03 	ldbu	r2,52(r2)
   56014:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   56018:	e0fffd03 	ldbu	r3,-12(fp)
   5601c:	e13ffd03 	ldbu	r4,-12(fp)
   56020:	d0a72944 	addi	r2,gp,-25435
   56024:	2085883a 	add	r2,r4,r2
   56028:	10800003 	ldbu	r2,0(r2)
   5602c:	1009883a 	mov	r4,r2
   56030:	d0a72c17 	ldw	r2,-25424(gp)
   56034:	10800d43 	ldbu	r2,53(r2)
   56038:	0084303a 	nor	r2,zero,r2
   5603c:	2084703a 	and	r2,r4,r2
   56040:	1009883a 	mov	r4,r2
   56044:	d0a72944 	addi	r2,gp,-25435
   56048:	1885883a 	add	r2,r3,r2
   5604c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   56050:	e0fffd03 	ldbu	r3,-12(fp)
   56054:	d0a72944 	addi	r2,gp,-25435
   56058:	1885883a 	add	r2,r3,r2
   5605c:	10800003 	ldbu	r2,0(r2)
   56060:	10803fcc 	andi	r2,r2,255
   56064:	1000071e 	bne	r2,zero,56084 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   56068:	d0a72c17 	ldw	r2,-25424(gp)
   5606c:	10800d83 	ldbu	r2,54(r2)
   56070:	0084303a 	nor	r2,zero,r2
   56074:	1007883a 	mov	r3,r2
   56078:	d0a72903 	ldbu	r2,-25436(gp)
   5607c:	1884703a 	and	r2,r3,r2
   56080:	d0a72905 	stb	r2,-25436(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   56084:	d0a72c17 	ldw	r2,-25424(gp)
   56088:	e0ffff0b 	ldhu	r3,-4(fp)
   5608c:	10c00b8d 	sth	r3,46(r2)
   56090:	e0bffb17 	ldw	r2,-20(fp)
   56094:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   56098:	e0bffc17 	ldw	r2,-16(fp)
   5609c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   560a0:	004fb4c0 	call	4fb4c <OS_Sched>
   560a4:	00000106 	br	560ac <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   560a8:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   560ac:	e037883a 	mov	sp,fp
   560b0:	dfc00117 	ldw	ra,4(sp)
   560b4:	df000017 	ldw	fp,0(sp)
   560b8:	dec00204 	addi	sp,sp,8
   560bc:	f800283a 	ret

000560c0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   560c0:	defff704 	addi	sp,sp,-36
   560c4:	dfc00815 	stw	ra,32(sp)
   560c8:	df000715 	stw	fp,28(sp)
   560cc:	dc000615 	stw	r16,24(sp)
   560d0:	df000704 	addi	fp,sp,28
   560d4:	2011883a 	mov	r8,r4
   560d8:	2809883a 	mov	r4,r5
   560dc:	3007883a 	mov	r3,r6
   560e0:	3805883a 	mov	r2,r7
   560e4:	e23ffb05 	stb	r8,-20(fp)
   560e8:	e13ffc05 	stb	r4,-16(fp)
   560ec:	e0fffd05 	stb	r3,-12(fp)
   560f0:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   560f4:	d0a72b03 	ldbu	r2,-25428(gp)
   560f8:	10803fcc 	andi	r2,r2,255
   560fc:	10000226 	beq	r2,zero,56108 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
   56100:	00801544 	movi	r2,85
   56104:	00004706 	br	56224 <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   56108:	e0bffb03 	ldbu	r2,-20(fp)
   5610c:	1000081e 	bne	r2,zero,56130 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
   56110:	e0bffc03 	ldbu	r2,-16(fp)
   56114:	1000061e 	bne	r2,zero,56130 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
   56118:	e0bffd03 	ldbu	r2,-12(fp)
   5611c:	1000041e 	bne	r2,zero,56130 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
   56120:	e0bffe0b 	ldhu	r2,-8(fp)
   56124:	1000021e 	bne	r2,zero,56130 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
   56128:	00801504 	movi	r2,84
   5612c:	00003d06 	br	56224 <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
   56130:	e0bffc03 	ldbu	r2,-16(fp)
   56134:	10800f30 	cmpltui	r2,r2,60
   56138:	1000021e 	bne	r2,zero,56144 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   5613c:	00801444 	movi	r2,81
   56140:	00003806 	br	56224 <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
   56144:	e0bffd03 	ldbu	r2,-12(fp)
   56148:	10800f30 	cmpltui	r2,r2,60
   5614c:	1000021e 	bne	r2,zero,56158 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
   56150:	00801484 	movi	r2,82
   56154:	00003306 	br	56224 <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
   56158:	e0bffe0b 	ldhu	r2,-8(fp)
   5615c:	1080fa30 	cmpltui	r2,r2,1000
   56160:	1000021e 	bne	r2,zero,5616c <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
   56164:	008014c4 	movi	r2,83
   56168:	00002e06 	br	56224 <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   5616c:	e0bffb03 	ldbu	r2,-20(fp)
   56170:	01438404 	movi	r5,3600
   56174:	1009883a 	mov	r4,r2
   56178:	00406e00 	call	406e0 <__mulsi3>
   5617c:	1021883a 	mov	r16,r2
   56180:	e0bffc03 	ldbu	r2,-16(fp)
   56184:	01400f04 	movi	r5,60
   56188:	1009883a 	mov	r4,r2
   5618c:	00406e00 	call	406e0 <__mulsi3>
   56190:	8087883a 	add	r3,r16,r2
   56194:	e0bffd03 	ldbu	r2,-12(fp)
   56198:	1885883a 	add	r2,r3,r2
   5619c:	0140fa04 	movi	r5,1000
   561a0:	1009883a 	mov	r4,r2
   561a4:	00406e00 	call	406e0 <__mulsi3>
   561a8:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   561ac:	e0bffe0b 	ldhu	r2,-8(fp)
   561b0:	0140fa04 	movi	r5,1000
   561b4:	1009883a 	mov	r4,r2
   561b8:	00406e00 	call	406e0 <__mulsi3>
   561bc:	0140fa04 	movi	r5,1000
   561c0:	1009883a 	mov	r4,r2
   561c4:	004abec0 	call	4abec <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   561c8:	8085883a 	add	r2,r16,r2
   561cc:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   561d0:	e0bffa17 	ldw	r2,-24(fp)
   561d4:	1004d43a 	srli	r2,r2,16
   561d8:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   561dc:	e0bffa17 	ldw	r2,-24(fp)
   561e0:	10bfffcc 	andi	r2,r2,65535
   561e4:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
   561e8:	e0bffa17 	ldw	r2,-24(fp)
   561ec:	10bfffcc 	andi	r2,r2,65535
   561f0:	1009883a 	mov	r4,r2
   561f4:	0055fbc0 	call	55fbc <OSTimeDly>
    while (loops > 0) {
   561f8:	00000706 	br	56218 <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
   561fc:	01200014 	movui	r4,32768
   56200:	0055fbc0 	call	55fbc <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   56204:	01200014 	movui	r4,32768
   56208:	0055fbc0 	call	55fbc <OSTimeDly>
        loops--;
   5620c:	e0bff90b 	ldhu	r2,-28(fp)
   56210:	10bfffc4 	addi	r2,r2,-1
   56214:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   56218:	e0bff90b 	ldhu	r2,-28(fp)
   5621c:	103ff71e 	bne	r2,zero,561fc <__alt_data_end+0xffff09fc>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   56220:	0005883a 	mov	r2,zero
}
   56224:	e6ffff04 	addi	sp,fp,-4
   56228:	dfc00217 	ldw	ra,8(sp)
   5622c:	df000117 	ldw	fp,4(sp)
   56230:	dc000017 	ldw	r16,0(sp)
   56234:	dec00304 	addi	sp,sp,12
   56238:	f800283a 	ret

0005623c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   5623c:	defff504 	addi	sp,sp,-44
   56240:	dfc00a15 	stw	ra,40(sp)
   56244:	df000915 	stw	fp,36(sp)
   56248:	df000904 	addi	fp,sp,36
   5624c:	2005883a 	mov	r2,r4
   56250:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   56254:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   56258:	e0bfff03 	ldbu	r2,-4(fp)
   5625c:	10800530 	cmpltui	r2,r2,20
   56260:	1000021e 	bne	r2,zero,5626c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   56264:	00800a84 	movi	r2,42
   56268:	00006406 	br	563fc <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5626c:	0005303a 	rdctl	r2,status
   56270:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   56274:	e0fffe17 	ldw	r3,-8(fp)
   56278:	00bfff84 	movi	r2,-2
   5627c:	1884703a 	and	r2,r3,r2
   56280:	1001703a 	wrctl	status,r2
  
  return context;
   56284:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   56288:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   5628c:	e0ffff03 	ldbu	r3,-4(fp)
   56290:	008001b4 	movhi	r2,6
   56294:	108e6104 	addi	r2,r2,14724
   56298:	18c7883a 	add	r3,r3,r3
   5629c:	18c7883a 	add	r3,r3,r3
   562a0:	10c5883a 	add	r2,r2,r3
   562a4:	10800017 	ldw	r2,0(r2)
   562a8:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   562ac:	e0bff917 	ldw	r2,-28(fp)
   562b0:	1000061e 	bne	r2,zero,562cc <OSTimeDlyResume+0x90>
   562b4:	e0bff717 	ldw	r2,-36(fp)
   562b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   562bc:	e0bff817 	ldw	r2,-32(fp)
   562c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   562c4:	008010c4 	movi	r2,67
   562c8:	00004c06 	br	563fc <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   562cc:	e0bff917 	ldw	r2,-28(fp)
   562d0:	10800058 	cmpnei	r2,r2,1
   562d4:	1000061e 	bne	r2,zero,562f0 <OSTimeDlyResume+0xb4>
   562d8:	e0bff717 	ldw	r2,-36(fp)
   562dc:	e0bffa15 	stw	r2,-24(fp)
   562e0:	e0bffa17 	ldw	r2,-24(fp)
   562e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   562e8:	008010c4 	movi	r2,67
   562ec:	00004306 	br	563fc <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   562f0:	e0bff917 	ldw	r2,-28(fp)
   562f4:	10800b8b 	ldhu	r2,46(r2)
   562f8:	10bfffcc 	andi	r2,r2,65535
   562fc:	1000061e 	bne	r2,zero,56318 <OSTimeDlyResume+0xdc>
   56300:	e0bff717 	ldw	r2,-36(fp)
   56304:	e0bffb15 	stw	r2,-20(fp)
   56308:	e0bffb17 	ldw	r2,-20(fp)
   5630c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   56310:	00801404 	movi	r2,80
   56314:	00003906 	br	563fc <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   56318:	e0bff917 	ldw	r2,-28(fp)
   5631c:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   56320:	e0bff917 	ldw	r2,-28(fp)
   56324:	10800c03 	ldbu	r2,48(r2)
   56328:	10803fcc 	andi	r2,r2,255
   5632c:	10800dcc 	andi	r2,r2,55
   56330:	10000b26 	beq	r2,zero,56360 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   56334:	e0bff917 	ldw	r2,-28(fp)
   56338:	10c00c03 	ldbu	r3,48(r2)
   5633c:	00bff204 	movi	r2,-56
   56340:	1884703a 	and	r2,r3,r2
   56344:	1007883a 	mov	r3,r2
   56348:	e0bff917 	ldw	r2,-28(fp)
   5634c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   56350:	e0bff917 	ldw	r2,-28(fp)
   56354:	00c00044 	movi	r3,1
   56358:	10c00c45 	stb	r3,49(r2)
   5635c:	00000206 	br	56368 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   56360:	e0bff917 	ldw	r2,-28(fp)
   56364:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   56368:	e0bff917 	ldw	r2,-28(fp)
   5636c:	10800c03 	ldbu	r2,48(r2)
   56370:	10803fcc 	andi	r2,r2,255
   56374:	1080020c 	andi	r2,r2,8
   56378:	10001b1e 	bne	r2,zero,563e8 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   5637c:	e0bff917 	ldw	r2,-28(fp)
   56380:	10c00d83 	ldbu	r3,54(r2)
   56384:	d0a72903 	ldbu	r2,-25436(gp)
   56388:	1884b03a 	or	r2,r3,r2
   5638c:	d0a72905 	stb	r2,-25436(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   56390:	e0bff917 	ldw	r2,-28(fp)
   56394:	10800d03 	ldbu	r2,52(r2)
   56398:	10c03fcc 	andi	r3,r2,255
   5639c:	e0bff917 	ldw	r2,-28(fp)
   563a0:	10800d03 	ldbu	r2,52(r2)
   563a4:	11003fcc 	andi	r4,r2,255
   563a8:	d0a72944 	addi	r2,gp,-25435
   563ac:	2085883a 	add	r2,r4,r2
   563b0:	11000003 	ldbu	r4,0(r2)
   563b4:	e0bff917 	ldw	r2,-28(fp)
   563b8:	10800d43 	ldbu	r2,53(r2)
   563bc:	2084b03a 	or	r2,r4,r2
   563c0:	1009883a 	mov	r4,r2
   563c4:	d0a72944 	addi	r2,gp,-25435
   563c8:	1885883a 	add	r2,r3,r2
   563cc:	11000005 	stb	r4,0(r2)
   563d0:	e0bff717 	ldw	r2,-36(fp)
   563d4:	e0bffc15 	stw	r2,-16(fp)
   563d8:	e0bffc17 	ldw	r2,-16(fp)
   563dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   563e0:	004fb4c0 	call	4fb4c <OS_Sched>
   563e4:	00000406 	br	563f8 <OSTimeDlyResume+0x1bc>
   563e8:	e0bff717 	ldw	r2,-36(fp)
   563ec:	e0bffd15 	stw	r2,-12(fp)
   563f0:	e0bffd17 	ldw	r2,-12(fp)
   563f4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   563f8:	0005883a 	mov	r2,zero
}
   563fc:	e037883a 	mov	sp,fp
   56400:	dfc00117 	ldw	ra,4(sp)
   56404:	df000017 	ldw	fp,0(sp)
   56408:	dec00204 	addi	sp,sp,8
   5640c:	f800283a 	ret

00056410 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   56410:	defffb04 	addi	sp,sp,-20
   56414:	df000415 	stw	fp,16(sp)
   56418:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   5641c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   56420:	0005303a 	rdctl	r2,status
   56424:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   56428:	e0fffe17 	ldw	r3,-8(fp)
   5642c:	00bfff84 	movi	r2,-2
   56430:	1884703a 	and	r2,r3,r2
   56434:	1001703a 	wrctl	status,r2
  
  return context;
   56438:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   5643c:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   56440:	d0a72d17 	ldw	r2,-25420(gp)
   56444:	e0bffd15 	stw	r2,-12(fp)
   56448:	e0bffc17 	ldw	r2,-16(fp)
   5644c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   56450:	e0bfff17 	ldw	r2,-4(fp)
   56454:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   56458:	e0bffd17 	ldw	r2,-12(fp)
}
   5645c:	e037883a 	mov	sp,fp
   56460:	df000017 	ldw	fp,0(sp)
   56464:	dec00104 	addi	sp,sp,4
   56468:	f800283a 	ret

0005646c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   5646c:	defffb04 	addi	sp,sp,-20
   56470:	df000415 	stw	fp,16(sp)
   56474:	df000404 	addi	fp,sp,16
   56478:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   5647c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   56480:	0005303a 	rdctl	r2,status
   56484:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   56488:	e0fffd17 	ldw	r3,-12(fp)
   5648c:	00bfff84 	movi	r2,-2
   56490:	1884703a 	and	r2,r3,r2
   56494:	1001703a 	wrctl	status,r2
  
  return context;
   56498:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   5649c:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   564a0:	e0bfff17 	ldw	r2,-4(fp)
   564a4:	d0a72d15 	stw	r2,-25420(gp)
   564a8:	e0bffc17 	ldw	r2,-16(fp)
   564ac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   564b0:	e0bffe17 	ldw	r2,-8(fp)
   564b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   564b8:	0001883a 	nop
   564bc:	e037883a 	mov	sp,fp
   564c0:	df000017 	ldw	fp,0(sp)
   564c4:	dec00104 	addi	sp,sp,4
   564c8:	f800283a 	ret

000564cc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   564cc:	defffd04 	addi	sp,sp,-12
   564d0:	dfc00215 	stw	ra,8(sp)
   564d4:	df000115 	stw	fp,4(sp)
   564d8:	df000104 	addi	fp,sp,4
   564dc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   564e0:	d1600804 	addi	r5,gp,-32736
   564e4:	e13fff17 	ldw	r4,-4(fp)
   564e8:	00577b80 	call	577b8 <alt_dev_llist_insert>
}
   564ec:	e037883a 	mov	sp,fp
   564f0:	dfc00117 	ldw	ra,4(sp)
   564f4:	df000017 	ldw	fp,0(sp)
   564f8:	dec00204 	addi	sp,sp,8
   564fc:	f800283a 	ret

00056500 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   56500:	defffd04 	addi	sp,sp,-12
   56504:	dfc00215 	stw	ra,8(sp)
   56508:	df000115 	stw	fp,4(sp)
   5650c:	df000104 	addi	fp,sp,4
   56510:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   56514:	004ded80 	call	4ded8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   56518:	00800044 	movi	r2,1
   5651c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   56520:	0001883a 	nop
   56524:	e037883a 	mov	sp,fp
   56528:	dfc00117 	ldw	ra,4(sp)
   5652c:	df000017 	ldw	fp,0(sp)
   56530:	dec00204 	addi	sp,sp,8
   56534:	f800283a 	ret

00056538 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   56538:	defffe04 	addi	sp,sp,-8
   5653c:	dfc00115 	stw	ra,4(sp)
   56540:	df000015 	stw	fp,0(sp)
   56544:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   56548:	01c0fa04 	movi	r7,1000
   5654c:	01800044 	movi	r6,1
   56550:	000b883a 	mov	r5,zero
   56554:	01000234 	movhi	r4,8
   56558:	21040804 	addi	r4,r4,4128
   5655c:	00573400 	call	57340 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   56560:	01800404 	movi	r6,16
   56564:	000b883a 	mov	r5,zero
   56568:	010001b4 	movhi	r4,6
   5656c:	21269d04 	addi	r4,r4,-25996
   56570:	00567000 	call	56700 <altera_avalon_jtag_uart_init>
   56574:	010001b4 	movhi	r4,6
   56578:	21269304 	addi	r4,r4,-26036
   5657c:	00564cc0 	call	564cc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   56580:	0001883a 	nop
}
   56584:	0001883a 	nop
   56588:	e037883a 	mov	sp,fp
   5658c:	dfc00117 	ldw	ra,4(sp)
   56590:	df000017 	ldw	fp,0(sp)
   56594:	dec00204 	addi	sp,sp,8
   56598:	f800283a 	ret

0005659c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   5659c:	defffa04 	addi	sp,sp,-24
   565a0:	dfc00515 	stw	ra,20(sp)
   565a4:	df000415 	stw	fp,16(sp)
   565a8:	df000404 	addi	fp,sp,16
   565ac:	e13ffd15 	stw	r4,-12(fp)
   565b0:	e17ffe15 	stw	r5,-8(fp)
   565b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   565b8:	e0bffd17 	ldw	r2,-12(fp)
   565bc:	10800017 	ldw	r2,0(r2)
   565c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   565c4:	e0bffc17 	ldw	r2,-16(fp)
   565c8:	10c00a04 	addi	r3,r2,40
   565cc:	e0bffd17 	ldw	r2,-12(fp)
   565d0:	10800217 	ldw	r2,8(r2)
   565d4:	100f883a 	mov	r7,r2
   565d8:	e1bfff17 	ldw	r6,-4(fp)
   565dc:	e17ffe17 	ldw	r5,-8(fp)
   565e0:	1809883a 	mov	r4,r3
   565e4:	0056d480 	call	56d48 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   565e8:	e037883a 	mov	sp,fp
   565ec:	dfc00117 	ldw	ra,4(sp)
   565f0:	df000017 	ldw	fp,0(sp)
   565f4:	dec00204 	addi	sp,sp,8
   565f8:	f800283a 	ret

000565fc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   565fc:	defffa04 	addi	sp,sp,-24
   56600:	dfc00515 	stw	ra,20(sp)
   56604:	df000415 	stw	fp,16(sp)
   56608:	df000404 	addi	fp,sp,16
   5660c:	e13ffd15 	stw	r4,-12(fp)
   56610:	e17ffe15 	stw	r5,-8(fp)
   56614:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   56618:	e0bffd17 	ldw	r2,-12(fp)
   5661c:	10800017 	ldw	r2,0(r2)
   56620:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   56624:	e0bffc17 	ldw	r2,-16(fp)
   56628:	10c00a04 	addi	r3,r2,40
   5662c:	e0bffd17 	ldw	r2,-12(fp)
   56630:	10800217 	ldw	r2,8(r2)
   56634:	100f883a 	mov	r7,r2
   56638:	e1bfff17 	ldw	r6,-4(fp)
   5663c:	e17ffe17 	ldw	r5,-8(fp)
   56640:	1809883a 	mov	r4,r3
   56644:	00570040 	call	57004 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   56648:	e037883a 	mov	sp,fp
   5664c:	dfc00117 	ldw	ra,4(sp)
   56650:	df000017 	ldw	fp,0(sp)
   56654:	dec00204 	addi	sp,sp,8
   56658:	f800283a 	ret

0005665c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   5665c:	defffc04 	addi	sp,sp,-16
   56660:	dfc00315 	stw	ra,12(sp)
   56664:	df000215 	stw	fp,8(sp)
   56668:	df000204 	addi	fp,sp,8
   5666c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   56670:	e0bfff17 	ldw	r2,-4(fp)
   56674:	10800017 	ldw	r2,0(r2)
   56678:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   5667c:	e0bffe17 	ldw	r2,-8(fp)
   56680:	10c00a04 	addi	r3,r2,40
   56684:	e0bfff17 	ldw	r2,-4(fp)
   56688:	10800217 	ldw	r2,8(r2)
   5668c:	100b883a 	mov	r5,r2
   56690:	1809883a 	mov	r4,r3
   56694:	0056bf00 	call	56bf0 <altera_avalon_jtag_uart_close>
}
   56698:	e037883a 	mov	sp,fp
   5669c:	dfc00117 	ldw	ra,4(sp)
   566a0:	df000017 	ldw	fp,0(sp)
   566a4:	dec00204 	addi	sp,sp,8
   566a8:	f800283a 	ret

000566ac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   566ac:	defffa04 	addi	sp,sp,-24
   566b0:	dfc00515 	stw	ra,20(sp)
   566b4:	df000415 	stw	fp,16(sp)
   566b8:	df000404 	addi	fp,sp,16
   566bc:	e13ffd15 	stw	r4,-12(fp)
   566c0:	e17ffe15 	stw	r5,-8(fp)
   566c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   566c8:	e0bffd17 	ldw	r2,-12(fp)
   566cc:	10800017 	ldw	r2,0(r2)
   566d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   566d4:	e0bffc17 	ldw	r2,-16(fp)
   566d8:	10800a04 	addi	r2,r2,40
   566dc:	e1bfff17 	ldw	r6,-4(fp)
   566e0:	e17ffe17 	ldw	r5,-8(fp)
   566e4:	1009883a 	mov	r4,r2
   566e8:	0056c580 	call	56c58 <altera_avalon_jtag_uart_ioctl>
}
   566ec:	e037883a 	mov	sp,fp
   566f0:	dfc00117 	ldw	ra,4(sp)
   566f4:	df000017 	ldw	fp,0(sp)
   566f8:	dec00204 	addi	sp,sp,8
   566fc:	f800283a 	ret

00056700 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   56700:	defff104 	addi	sp,sp,-60
   56704:	dfc00e15 	stw	ra,56(sp)
   56708:	df000d15 	stw	fp,52(sp)
   5670c:	df000d04 	addi	fp,sp,52
   56710:	e13ff915 	stw	r4,-28(fp)
   56714:	e17ffa15 	stw	r5,-24(fp)
   56718:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   5671c:	e0bff917 	ldw	r2,-28(fp)
   56720:	10800c04 	addi	r2,r2,48
   56724:	e0bff415 	stw	r2,-48(fp)
   56728:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   5672c:	e0bff80b 	ldhu	r2,-32(fp)
   56730:	e0fff884 	addi	r3,fp,-30
   56734:	180b883a 	mov	r5,r3
   56738:	1009883a 	mov	r4,r2
   5673c:	00506b80 	call	506b8 <OSFlagCreate>
   56740:	1007883a 	mov	r3,r2
   56744:	e0bff417 	ldw	r2,-48(fp)
   56748:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   5674c:	e0bff917 	ldw	r2,-28(fp)
   56750:	10800a04 	addi	r2,r2,40
   56754:	e0bff515 	stw	r2,-44(fp)
   56758:	00800044 	movi	r2,1
   5675c:	e0bff78d 	sth	r2,-34(fp)
   56760:	e0bff78b 	ldhu	r2,-34(fp)
   56764:	1009883a 	mov	r4,r2
   56768:	0053ea00 	call	53ea0 <OSSemCreate>
   5676c:	1007883a 	mov	r3,r2
   56770:	e0bff517 	ldw	r2,-44(fp)
   56774:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   56778:	e0bff917 	ldw	r2,-28(fp)
   5677c:	10800b04 	addi	r2,r2,44
   56780:	e0bff615 	stw	r2,-40(fp)
   56784:	00800044 	movi	r2,1
   56788:	e0bff70d 	sth	r2,-36(fp)
   5678c:	e0bff70b 	ldhu	r2,-36(fp)
   56790:	1009883a 	mov	r4,r2
   56794:	0053ea00 	call	53ea0 <OSSemCreate>
   56798:	1007883a 	mov	r3,r2
   5679c:	e0bff617 	ldw	r2,-40(fp)
   567a0:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   567a4:	e0bff917 	ldw	r2,-28(fp)
   567a8:	00c00044 	movi	r3,1
   567ac:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   567b0:	e0bff917 	ldw	r2,-28(fp)
   567b4:	10800017 	ldw	r2,0(r2)
   567b8:	10800104 	addi	r2,r2,4
   567bc:	1007883a 	mov	r3,r2
   567c0:	e0bff917 	ldw	r2,-28(fp)
   567c4:	10800817 	ldw	r2,32(r2)
   567c8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   567cc:	e0bffa17 	ldw	r2,-24(fp)
   567d0:	e0fffb17 	ldw	r3,-20(fp)
   567d4:	d8000015 	stw	zero,0(sp)
   567d8:	e1fff917 	ldw	r7,-28(fp)
   567dc:	01800174 	movhi	r6,5
   567e0:	319a1204 	addi	r6,r6,26696
   567e4:	180b883a 	mov	r5,r3
   567e8:	1009883a 	mov	r4,r2
   567ec:	005793c0 	call	5793c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   567f0:	e0bff917 	ldw	r2,-28(fp)
   567f4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   567f8:	e0bff917 	ldw	r2,-28(fp)
   567fc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   56800:	d0e73217 	ldw	r3,-25400(gp)
   56804:	e1fff917 	ldw	r7,-28(fp)
   56808:	01800174 	movhi	r6,5
   5680c:	319abb04 	addi	r6,r6,27372
   56810:	180b883a 	mov	r5,r3
   56814:	1009883a 	mov	r4,r2
   56818:	00576300 	call	57630 <alt_alarm_start>
   5681c:	1000040e 	bge	r2,zero,56830 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   56820:	e0fff917 	ldw	r3,-28(fp)
   56824:	00a00034 	movhi	r2,32768
   56828:	10bfffc4 	addi	r2,r2,-1
   5682c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   56830:	0001883a 	nop
   56834:	e037883a 	mov	sp,fp
   56838:	dfc00117 	ldw	ra,4(sp)
   5683c:	df000017 	ldw	fp,0(sp)
   56840:	dec00204 	addi	sp,sp,8
   56844:	f800283a 	ret

00056848 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   56848:	defff204 	addi	sp,sp,-56
   5684c:	dfc00d15 	stw	ra,52(sp)
   56850:	df000c15 	stw	fp,48(sp)
   56854:	df000c04 	addi	fp,sp,48
   56858:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   5685c:	e0bfff17 	ldw	r2,-4(fp)
   56860:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
   56864:	e0bff617 	ldw	r2,-40(fp)
   56868:	10800017 	ldw	r2,0(r2)
   5686c:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   56870:	e0bff717 	ldw	r2,-36(fp)
   56874:	10800104 	addi	r2,r2,4
   56878:	10800037 	ldwio	r2,0(r2)
   5687c:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   56880:	e0bff817 	ldw	r2,-32(fp)
   56884:	1080c00c 	andi	r2,r2,768
   56888:	10009126 	beq	r2,zero,56ad0 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   5688c:	e0bff817 	ldw	r2,-32(fp)
   56890:	1080400c 	andi	r2,r2,256
   56894:	10004726 	beq	r2,zero,569b4 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   56898:	00800074 	movhi	r2,1
   5689c:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   568a0:	e0bff617 	ldw	r2,-40(fp)
   568a4:	10800d17 	ldw	r2,52(r2)
   568a8:	10800044 	addi	r2,r2,1
   568ac:	1081ffcc 	andi	r2,r2,2047
   568b0:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   568b4:	e0bff617 	ldw	r2,-40(fp)
   568b8:	10c00e17 	ldw	r3,56(r2)
   568bc:	e0bff917 	ldw	r2,-28(fp)
   568c0:	18802726 	beq	r3,r2,56960 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   568c4:	e0bff717 	ldw	r2,-36(fp)
   568c8:	10800037 	ldwio	r2,0(r2)
   568cc:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   568d0:	e0bff417 	ldw	r2,-48(fp)
   568d4:	10a0000c 	andi	r2,r2,32768
   568d8:	10002326 	beq	r2,zero,56968 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   568dc:	e0bff617 	ldw	r2,-40(fp)
   568e0:	10800d17 	ldw	r2,52(r2)
   568e4:	e0fff417 	ldw	r3,-48(fp)
   568e8:	1809883a 	mov	r4,r3
   568ec:	e0fff617 	ldw	r3,-40(fp)
   568f0:	1885883a 	add	r2,r3,r2
   568f4:	10801104 	addi	r2,r2,68
   568f8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   568fc:	e0bff617 	ldw	r2,-40(fp)
   56900:	10800d17 	ldw	r2,52(r2)
   56904:	10800044 	addi	r2,r2,1
   56908:	10c1ffcc 	andi	r3,r2,2047
   5690c:	e0bff617 	ldw	r2,-40(fp)
   56910:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   56914:	e0bff617 	ldw	r2,-40(fp)
   56918:	10800c17 	ldw	r2,48(r2)
   5691c:	e0bffb15 	stw	r2,-20(fp)
   56920:	00800044 	movi	r2,1
   56924:	e0bffc0d 	sth	r2,-16(fp)
   56928:	00800044 	movi	r2,1
   5692c:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   56930:	d0a71d43 	ldbu	r2,-25483(gp)
   56934:	10803fcc 	andi	r2,r2,255
   56938:	103fd926 	beq	r2,zero,568a0 <__alt_data_end+0xffff10a0>
  {
    OSFlagPost (group, flags, opt, &err);
   5693c:	e0bffc0b 	ldhu	r2,-16(fp)
   56940:	e0fffc83 	ldbu	r3,-14(fp)
   56944:	e13ffdc4 	addi	r4,fp,-9
   56948:	200f883a 	mov	r7,r4
   5694c:	180d883a 	mov	r6,r3
   56950:	100b883a 	mov	r5,r2
   56954:	e13ffb17 	ldw	r4,-20(fp)
   56958:	00512940 	call	51294 <OSFlagPost>
      }
   5695c:	003fd006 	br	568a0 <__alt_data_end+0xffff10a0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   56960:	0001883a 	nop
   56964:	00000106 	br	5696c <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   56968:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   5696c:	e0bff417 	ldw	r2,-48(fp)
   56970:	10bfffec 	andhi	r2,r2,65535
   56974:	10000f26 	beq	r2,zero,569b4 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   56978:	e0bff617 	ldw	r2,-40(fp)
   5697c:	10c00817 	ldw	r3,32(r2)
   56980:	00bfff84 	movi	r2,-2
   56984:	1886703a 	and	r3,r3,r2
   56988:	e0bff617 	ldw	r2,-40(fp)
   5698c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   56990:	e0bff717 	ldw	r2,-36(fp)
   56994:	10800104 	addi	r2,r2,4
   56998:	1007883a 	mov	r3,r2
   5699c:	e0bff617 	ldw	r2,-40(fp)
   569a0:	10800817 	ldw	r2,32(r2)
   569a4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   569a8:	e0bff717 	ldw	r2,-36(fp)
   569ac:	10800104 	addi	r2,r2,4
   569b0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   569b4:	e0bff817 	ldw	r2,-32(fp)
   569b8:	1080800c 	andi	r2,r2,512
   569bc:	103fac26 	beq	r2,zero,56870 <__alt_data_end+0xffff1070>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   569c0:	e0bff817 	ldw	r2,-32(fp)
   569c4:	1004d43a 	srli	r2,r2,16
   569c8:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   569cc:	00002606 	br	56a68 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   569d0:	e0bff717 	ldw	r2,-36(fp)
   569d4:	e0fff617 	ldw	r3,-40(fp)
   569d8:	18c01017 	ldw	r3,64(r3)
   569dc:	e13ff617 	ldw	r4,-40(fp)
   569e0:	20c7883a 	add	r3,r4,r3
   569e4:	18c21104 	addi	r3,r3,2116
   569e8:	18c00003 	ldbu	r3,0(r3)
   569ec:	18c03fcc 	andi	r3,r3,255
   569f0:	18c0201c 	xori	r3,r3,128
   569f4:	18ffe004 	addi	r3,r3,-128
   569f8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   569fc:	e0bff617 	ldw	r2,-40(fp)
   56a00:	10801017 	ldw	r2,64(r2)
   56a04:	10800044 	addi	r2,r2,1
   56a08:	10c1ffcc 	andi	r3,r2,2047
   56a0c:	e0bff617 	ldw	r2,-40(fp)
   56a10:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   56a14:	e0bff617 	ldw	r2,-40(fp)
   56a18:	10800c17 	ldw	r2,48(r2)
   56a1c:	e0bffa15 	stw	r2,-24(fp)
   56a20:	00800084 	movi	r2,2
   56a24:	e0bffd0d 	sth	r2,-12(fp)
   56a28:	00800044 	movi	r2,1
   56a2c:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   56a30:	d0a71d43 	ldbu	r2,-25483(gp)
   56a34:	10803fcc 	andi	r2,r2,255
   56a38:	10000826 	beq	r2,zero,56a5c <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
   56a3c:	e0bffd0b 	ldhu	r2,-12(fp)
   56a40:	e0fffd83 	ldbu	r3,-10(fp)
   56a44:	e13ffe04 	addi	r4,fp,-8
   56a48:	200f883a 	mov	r7,r4
   56a4c:	180d883a 	mov	r6,r3
   56a50:	100b883a 	mov	r5,r2
   56a54:	e13ffa17 	ldw	r4,-24(fp)
   56a58:	00512940 	call	51294 <OSFlagPost>

        space--;
   56a5c:	e0bff517 	ldw	r2,-44(fp)
   56a60:	10bfffc4 	addi	r2,r2,-1
   56a64:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   56a68:	e0bff517 	ldw	r2,-44(fp)
   56a6c:	10000526 	beq	r2,zero,56a84 <altera_avalon_jtag_uart_irq+0x23c>
   56a70:	e0bff617 	ldw	r2,-40(fp)
   56a74:	10c01017 	ldw	r3,64(r2)
   56a78:	e0bff617 	ldw	r2,-40(fp)
   56a7c:	10800f17 	ldw	r2,60(r2)
   56a80:	18bfd31e 	bne	r3,r2,569d0 <__alt_data_end+0xffff11d0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   56a84:	e0bff517 	ldw	r2,-44(fp)
   56a88:	103f7926 	beq	r2,zero,56870 <__alt_data_end+0xffff1070>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   56a8c:	e0bff617 	ldw	r2,-40(fp)
   56a90:	10c00817 	ldw	r3,32(r2)
   56a94:	00bfff44 	movi	r2,-3
   56a98:	1886703a 	and	r3,r3,r2
   56a9c:	e0bff617 	ldw	r2,-40(fp)
   56aa0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   56aa4:	e0bff617 	ldw	r2,-40(fp)
   56aa8:	10800017 	ldw	r2,0(r2)
   56aac:	10800104 	addi	r2,r2,4
   56ab0:	1007883a 	mov	r3,r2
   56ab4:	e0bff617 	ldw	r2,-40(fp)
   56ab8:	10800817 	ldw	r2,32(r2)
   56abc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   56ac0:	e0bff717 	ldw	r2,-36(fp)
   56ac4:	10800104 	addi	r2,r2,4
   56ac8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   56acc:	003f6806 	br	56870 <__alt_data_end+0xffff1070>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   56ad0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   56ad4:	0001883a 	nop
   56ad8:	e037883a 	mov	sp,fp
   56adc:	dfc00117 	ldw	ra,4(sp)
   56ae0:	df000017 	ldw	fp,0(sp)
   56ae4:	dec00204 	addi	sp,sp,8
   56ae8:	f800283a 	ret

00056aec <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   56aec:	defff904 	addi	sp,sp,-28
   56af0:	dfc00615 	stw	ra,24(sp)
   56af4:	df000515 	stw	fp,20(sp)
   56af8:	df000504 	addi	fp,sp,20
   56afc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   56b00:	e0bfff17 	ldw	r2,-4(fp)
   56b04:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   56b08:	e0bffb17 	ldw	r2,-20(fp)
   56b0c:	10800017 	ldw	r2,0(r2)
   56b10:	10800104 	addi	r2,r2,4
   56b14:	10800037 	ldwio	r2,0(r2)
   56b18:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   56b1c:	e0bffc17 	ldw	r2,-16(fp)
   56b20:	1081000c 	andi	r2,r2,1024
   56b24:	10000b26 	beq	r2,zero,56b54 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   56b28:	e0bffb17 	ldw	r2,-20(fp)
   56b2c:	10800017 	ldw	r2,0(r2)
   56b30:	10800104 	addi	r2,r2,4
   56b34:	1007883a 	mov	r3,r2
   56b38:	e0bffb17 	ldw	r2,-20(fp)
   56b3c:	10800817 	ldw	r2,32(r2)
   56b40:	10810014 	ori	r2,r2,1024
   56b44:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   56b48:	e0bffb17 	ldw	r2,-20(fp)
   56b4c:	10000915 	stw	zero,36(r2)
   56b50:	00002106 	br	56bd8 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   56b54:	e0bffb17 	ldw	r2,-20(fp)
   56b58:	10c00917 	ldw	r3,36(r2)
   56b5c:	00a00034 	movhi	r2,32768
   56b60:	10bfff04 	addi	r2,r2,-4
   56b64:	10c01c36 	bltu	r2,r3,56bd8 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   56b68:	e0bffb17 	ldw	r2,-20(fp)
   56b6c:	10800917 	ldw	r2,36(r2)
   56b70:	10c00044 	addi	r3,r2,1
   56b74:	e0bffb17 	ldw	r2,-20(fp)
   56b78:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   56b7c:	e0bffb17 	ldw	r2,-20(fp)
   56b80:	10c00917 	ldw	r3,36(r2)
   56b84:	e0bffb17 	ldw	r2,-20(fp)
   56b88:	10800117 	ldw	r2,4(r2)
   56b8c:	18801236 	bltu	r3,r2,56bd8 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   56b90:	e0bffb17 	ldw	r2,-20(fp)
   56b94:	10800c17 	ldw	r2,48(r2)
   56b98:	e0bffd15 	stw	r2,-12(fp)
   56b9c:	00800104 	movi	r2,4
   56ba0:	e0bffe0d 	sth	r2,-8(fp)
   56ba4:	00800044 	movi	r2,1
   56ba8:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   56bac:	d0a71d43 	ldbu	r2,-25483(gp)
   56bb0:	10803fcc 	andi	r2,r2,255
   56bb4:	10000826 	beq	r2,zero,56bd8 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   56bb8:	e0bffe0b 	ldhu	r2,-8(fp)
   56bbc:	e0fffe83 	ldbu	r3,-6(fp)
   56bc0:	e13ffec4 	addi	r4,fp,-5
   56bc4:	200f883a 	mov	r7,r4
   56bc8:	180d883a 	mov	r6,r3
   56bcc:	100b883a 	mov	r5,r2
   56bd0:	e13ffd17 	ldw	r4,-12(fp)
   56bd4:	00512940 	call	51294 <OSFlagPost>
   56bd8:	d0a73217 	ldw	r2,-25400(gp)
    }
  }

  return alt_ticks_per_second();
}
   56bdc:	e037883a 	mov	sp,fp
   56be0:	dfc00117 	ldw	ra,4(sp)
   56be4:	df000017 	ldw	fp,0(sp)
   56be8:	dec00204 	addi	sp,sp,8
   56bec:	f800283a 	ret

00056bf0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   56bf0:	defffd04 	addi	sp,sp,-12
   56bf4:	df000215 	stw	fp,8(sp)
   56bf8:	df000204 	addi	fp,sp,8
   56bfc:	e13ffe15 	stw	r4,-8(fp)
   56c00:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   56c04:	00000506 	br	56c1c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   56c08:	e0bfff17 	ldw	r2,-4(fp)
   56c0c:	1090000c 	andi	r2,r2,16384
   56c10:	10000226 	beq	r2,zero,56c1c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   56c14:	00bffd44 	movi	r2,-11
   56c18:	00000b06 	br	56c48 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   56c1c:	e0bffe17 	ldw	r2,-8(fp)
   56c20:	10c01017 	ldw	r3,64(r2)
   56c24:	e0bffe17 	ldw	r2,-8(fp)
   56c28:	10800f17 	ldw	r2,60(r2)
   56c2c:	18800526 	beq	r3,r2,56c44 <altera_avalon_jtag_uart_close+0x54>
   56c30:	e0bffe17 	ldw	r2,-8(fp)
   56c34:	10c00917 	ldw	r3,36(r2)
   56c38:	e0bffe17 	ldw	r2,-8(fp)
   56c3c:	10800117 	ldw	r2,4(r2)
   56c40:	18bff136 	bltu	r3,r2,56c08 <__alt_data_end+0xffff1408>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   56c44:	0005883a 	mov	r2,zero
}
   56c48:	e037883a 	mov	sp,fp
   56c4c:	df000017 	ldw	fp,0(sp)
   56c50:	dec00104 	addi	sp,sp,4
   56c54:	f800283a 	ret

00056c58 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   56c58:	defffa04 	addi	sp,sp,-24
   56c5c:	df000515 	stw	fp,20(sp)
   56c60:	df000504 	addi	fp,sp,20
   56c64:	e13ffd15 	stw	r4,-12(fp)
   56c68:	e17ffe15 	stw	r5,-8(fp)
   56c6c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   56c70:	00bff9c4 	movi	r2,-25
   56c74:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   56c78:	e0bffe17 	ldw	r2,-8(fp)
   56c7c:	10da8060 	cmpeqi	r3,r2,27137
   56c80:	1800031e 	bne	r3,zero,56c90 <altera_avalon_jtag_uart_ioctl+0x38>
   56c84:	109a80a0 	cmpeqi	r2,r2,27138
   56c88:	1000181e 	bne	r2,zero,56cec <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   56c8c:	00002906 	br	56d34 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   56c90:	e0bffd17 	ldw	r2,-12(fp)
   56c94:	10c00117 	ldw	r3,4(r2)
   56c98:	00a00034 	movhi	r2,32768
   56c9c:	10bfffc4 	addi	r2,r2,-1
   56ca0:	18802126 	beq	r3,r2,56d28 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   56ca4:	e0bfff17 	ldw	r2,-4(fp)
   56ca8:	10800017 	ldw	r2,0(r2)
   56cac:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   56cb0:	e0bffc17 	ldw	r2,-16(fp)
   56cb4:	10800090 	cmplti	r2,r2,2
   56cb8:	1000061e 	bne	r2,zero,56cd4 <altera_avalon_jtag_uart_ioctl+0x7c>
   56cbc:	e0fffc17 	ldw	r3,-16(fp)
   56cc0:	00a00034 	movhi	r2,32768
   56cc4:	10bfffc4 	addi	r2,r2,-1
   56cc8:	18800226 	beq	r3,r2,56cd4 <altera_avalon_jtag_uart_ioctl+0x7c>
   56ccc:	e0bffc17 	ldw	r2,-16(fp)
   56cd0:	00000206 	br	56cdc <altera_avalon_jtag_uart_ioctl+0x84>
   56cd4:	00a00034 	movhi	r2,32768
   56cd8:	10bfff84 	addi	r2,r2,-2
   56cdc:	e0fffd17 	ldw	r3,-12(fp)
   56ce0:	18800115 	stw	r2,4(r3)
      rc = 0;
   56ce4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   56ce8:	00000f06 	br	56d28 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   56cec:	e0bffd17 	ldw	r2,-12(fp)
   56cf0:	10c00117 	ldw	r3,4(r2)
   56cf4:	00a00034 	movhi	r2,32768
   56cf8:	10bfffc4 	addi	r2,r2,-1
   56cfc:	18800c26 	beq	r3,r2,56d30 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   56d00:	e0bffd17 	ldw	r2,-12(fp)
   56d04:	10c00917 	ldw	r3,36(r2)
   56d08:	e0bffd17 	ldw	r2,-12(fp)
   56d0c:	10800117 	ldw	r2,4(r2)
   56d10:	1885803a 	cmpltu	r2,r3,r2
   56d14:	10c03fcc 	andi	r3,r2,255
   56d18:	e0bfff17 	ldw	r2,-4(fp)
   56d1c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   56d20:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   56d24:	00000206 	br	56d30 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   56d28:	0001883a 	nop
   56d2c:	00000106 	br	56d34 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   56d30:	0001883a 	nop

  default:
    break;
  }

  return rc;
   56d34:	e0bffb17 	ldw	r2,-20(fp)
}
   56d38:	e037883a 	mov	sp,fp
   56d3c:	df000017 	ldw	fp,0(sp)
   56d40:	dec00104 	addi	sp,sp,4
   56d44:	f800283a 	ret

00056d48 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   56d48:	deffed04 	addi	sp,sp,-76
   56d4c:	dfc01215 	stw	ra,72(sp)
   56d50:	df001115 	stw	fp,68(sp)
   56d54:	df001104 	addi	fp,sp,68
   56d58:	e13ffc15 	stw	r4,-16(fp)
   56d5c:	e17ffd15 	stw	r5,-12(fp)
   56d60:	e1bffe15 	stw	r6,-8(fp)
   56d64:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   56d68:	e0bffd17 	ldw	r2,-12(fp)
   56d6c:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   56d70:	e0bffc17 	ldw	r2,-16(fp)
   56d74:	10800a17 	ldw	r2,40(r2)
   56d78:	e0bff815 	stw	r2,-32(fp)
   56d7c:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   56d80:	e0bff90b 	ldhu	r2,-28(fp)
   56d84:	e0fffb04 	addi	r3,fp,-20
   56d88:	180d883a 	mov	r6,r3
   56d8c:	100b883a 	mov	r5,r2
   56d90:	e13ff817 	ldw	r4,-32(fp)
   56d94:	00541b80 	call	541b8 <OSSemPend>

  while (space > 0)
   56d98:	00006106 	br	56f20 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   56d9c:	e0bffc17 	ldw	r2,-16(fp)
   56da0:	10800d17 	ldw	r2,52(r2)
   56da4:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   56da8:	e0bffc17 	ldw	r2,-16(fp)
   56dac:	10800e17 	ldw	r2,56(r2)
   56db0:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   56db4:	e0fff317 	ldw	r3,-52(fp)
   56db8:	e0bff417 	ldw	r2,-48(fp)
   56dbc:	18800536 	bltu	r3,r2,56dd4 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   56dc0:	e0fff317 	ldw	r3,-52(fp)
   56dc4:	e0bff417 	ldw	r2,-48(fp)
   56dc8:	1885c83a 	sub	r2,r3,r2
   56dcc:	e0bff115 	stw	r2,-60(fp)
   56dd0:	00000406 	br	56de4 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   56dd4:	00c20004 	movi	r3,2048
   56dd8:	e0bff417 	ldw	r2,-48(fp)
   56ddc:	1885c83a 	sub	r2,r3,r2
   56de0:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   56de4:	e0bff117 	ldw	r2,-60(fp)
   56de8:	10001e26 	beq	r2,zero,56e64 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   56dec:	e0fffe17 	ldw	r3,-8(fp)
   56df0:	e0bff117 	ldw	r2,-60(fp)
   56df4:	1880022e 	bgeu	r3,r2,56e00 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   56df8:	e0bffe17 	ldw	r2,-8(fp)
   56dfc:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   56e00:	e0bffc17 	ldw	r2,-16(fp)
   56e04:	10c01104 	addi	r3,r2,68
   56e08:	e0bff417 	ldw	r2,-48(fp)
   56e0c:	1885883a 	add	r2,r3,r2
   56e10:	e1bff117 	ldw	r6,-60(fp)
   56e14:	100b883a 	mov	r5,r2
   56e18:	e13ff017 	ldw	r4,-64(fp)
   56e1c:	0045cc80 	call	45cc8 <memcpy>
      ptr   += n;
   56e20:	e0fff017 	ldw	r3,-64(fp)
   56e24:	e0bff117 	ldw	r2,-60(fp)
   56e28:	1885883a 	add	r2,r3,r2
   56e2c:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   56e30:	e0fffe17 	ldw	r3,-8(fp)
   56e34:	e0bff117 	ldw	r2,-60(fp)
   56e38:	1885c83a 	sub	r2,r3,r2
   56e3c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   56e40:	e0fff417 	ldw	r3,-48(fp)
   56e44:	e0bff117 	ldw	r2,-60(fp)
   56e48:	1885883a 	add	r2,r3,r2
   56e4c:	10c1ffcc 	andi	r3,r2,2047
   56e50:	e0bffc17 	ldw	r2,-16(fp)
   56e54:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   56e58:	e0bffe17 	ldw	r2,-8(fp)
   56e5c:	00bfcf16 	blt	zero,r2,56d9c <__alt_data_end+0xffff159c>
   56e60:	00000106 	br	56e68 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   56e64:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   56e68:	e0fff017 	ldw	r3,-64(fp)
   56e6c:	e0bffd17 	ldw	r2,-12(fp)
   56e70:	18802e1e 	bne	r3,r2,56f2c <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   56e74:	e0bfff17 	ldw	r2,-4(fp)
   56e78:	1090000c 	andi	r2,r2,16384
   56e7c:	10002d1e 	bne	r2,zero,56f34 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   56e80:	d0a71d43 	ldbu	r2,-25483(gp)
   56e84:	10803fcc 	andi	r2,r2,255
   56e88:	10800058 	cmpnei	r2,r2,1
   56e8c:	1000161e 	bne	r2,zero,56ee8 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   56e90:	e0bffc17 	ldw	r2,-16(fp)
   56e94:	10800c17 	ldw	r2,48(r2)
   56e98:	e0bff215 	stw	r2,-56(fp)
   56e9c:	00800144 	movi	r2,5
   56ea0:	e0bff98d 	sth	r2,-26(fp)
   56ea4:	00bfe0c4 	movi	r2,-125
   56ea8:	e0bffa05 	stb	r2,-24(fp)
   56eac:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   56eb0:	d0a71d43 	ldbu	r2,-25483(gp)
   56eb4:	10803fcc 	andi	r2,r2,255
   56eb8:	10001526 	beq	r2,zero,56f10 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   56ebc:	e0fff98b 	ldhu	r3,-26(fp)
   56ec0:	e13ffa03 	ldbu	r4,-24(fp)
   56ec4:	e17ffa8b 	ldhu	r5,-22(fp)
   56ec8:	e0bffb44 	addi	r2,fp,-19
   56ecc:	d8800015 	stw	r2,0(sp)
   56ed0:	280f883a 	mov	r7,r5
   56ed4:	200d883a 	mov	r6,r4
   56ed8:	180b883a 	mov	r5,r3
   56edc:	e13ff217 	ldw	r4,-56(fp)
   56ee0:	0050c7c0 	call	50c7c <OSFlagPend>
   56ee4:	00000a06 	br	56f10 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   56ee8:	0001883a 	nop
   56eec:	e0bffc17 	ldw	r2,-16(fp)
   56ef0:	10c00d17 	ldw	r3,52(r2)
   56ef4:	e0bff317 	ldw	r2,-52(fp)
   56ef8:	1880051e 	bne	r3,r2,56f10 <altera_avalon_jtag_uart_read+0x1c8>
   56efc:	e0bffc17 	ldw	r2,-16(fp)
   56f00:	10c00917 	ldw	r3,36(r2)
   56f04:	e0bffc17 	ldw	r2,-16(fp)
   56f08:	10800117 	ldw	r2,4(r2)
   56f0c:	18bff736 	bltu	r3,r2,56eec <__alt_data_end+0xffff16ec>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   56f10:	e0bffc17 	ldw	r2,-16(fp)
   56f14:	10c00d17 	ldw	r3,52(r2)
   56f18:	e0bff317 	ldw	r2,-52(fp)
   56f1c:	18800726 	beq	r3,r2,56f3c <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   56f20:	e0bffe17 	ldw	r2,-8(fp)
   56f24:	00bf9d16 	blt	zero,r2,56d9c <__alt_data_end+0xffff159c>
   56f28:	00000506 	br	56f40 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   56f2c:	0001883a 	nop
   56f30:	00000306 	br	56f40 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   56f34:	0001883a 	nop
   56f38:	00000106 	br	56f40 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   56f3c:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   56f40:	e0bffc17 	ldw	r2,-16(fp)
   56f44:	10800a17 	ldw	r2,40(r2)
   56f48:	1009883a 	mov	r4,r2
   56f4c:	00545300 	call	54530 <OSSemPost>

  if (ptr != buffer)
   56f50:	e0fff017 	ldw	r3,-64(fp)
   56f54:	e0bffd17 	ldw	r2,-12(fp)
   56f58:	18801826 	beq	r3,r2,56fbc <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   56f5c:	0005303a 	rdctl	r2,status
   56f60:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   56f64:	e0fff717 	ldw	r3,-36(fp)
   56f68:	00bfff84 	movi	r2,-2
   56f6c:	1884703a 	and	r2,r3,r2
   56f70:	1001703a 	wrctl	status,r2
  
  return context;
   56f74:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   56f78:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   56f7c:	e0bffc17 	ldw	r2,-16(fp)
   56f80:	10800817 	ldw	r2,32(r2)
   56f84:	10c00054 	ori	r3,r2,1
   56f88:	e0bffc17 	ldw	r2,-16(fp)
   56f8c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   56f90:	e0bffc17 	ldw	r2,-16(fp)
   56f94:	10800017 	ldw	r2,0(r2)
   56f98:	10800104 	addi	r2,r2,4
   56f9c:	1007883a 	mov	r3,r2
   56fa0:	e0bffc17 	ldw	r2,-16(fp)
   56fa4:	10800817 	ldw	r2,32(r2)
   56fa8:	18800035 	stwio	r2,0(r3)
   56fac:	e0bff617 	ldw	r2,-40(fp)
   56fb0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   56fb4:	e0bff517 	ldw	r2,-44(fp)
   56fb8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   56fbc:	e0fff017 	ldw	r3,-64(fp)
   56fc0:	e0bffd17 	ldw	r2,-12(fp)
   56fc4:	18800426 	beq	r3,r2,56fd8 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   56fc8:	e0fff017 	ldw	r3,-64(fp)
   56fcc:	e0bffd17 	ldw	r2,-12(fp)
   56fd0:	1885c83a 	sub	r2,r3,r2
   56fd4:	00000606 	br	56ff0 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   56fd8:	e0bfff17 	ldw	r2,-4(fp)
   56fdc:	1090000c 	andi	r2,r2,16384
   56fe0:	10000226 	beq	r2,zero,56fec <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   56fe4:	00bffd44 	movi	r2,-11
   56fe8:	00000106 	br	56ff0 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   56fec:	00bffec4 	movi	r2,-5
}
   56ff0:	e037883a 	mov	sp,fp
   56ff4:	dfc00117 	ldw	ra,4(sp)
   56ff8:	df000017 	ldw	fp,0(sp)
   56ffc:	dec00204 	addi	sp,sp,8
   57000:	f800283a 	ret

00057004 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   57004:	deffed04 	addi	sp,sp,-76
   57008:	dfc01215 	stw	ra,72(sp)
   5700c:	df001115 	stw	fp,68(sp)
   57010:	df001104 	addi	fp,sp,68
   57014:	e13ffc15 	stw	r4,-16(fp)
   57018:	e17ffd15 	stw	r5,-12(fp)
   5701c:	e1bffe15 	stw	r6,-8(fp)
   57020:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   57024:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   57028:	e0bffd17 	ldw	r2,-12(fp)
   5702c:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   57030:	e0bffc17 	ldw	r2,-16(fp)
   57034:	10800b17 	ldw	r2,44(r2)
   57038:	e0bff815 	stw	r2,-32(fp)
   5703c:	e03ff90d 	sth	zero,-28(fp)
   57040:	e0bff90b 	ldhu	r2,-28(fp)
   57044:	e0fffb44 	addi	r3,fp,-19
   57048:	180d883a 	mov	r6,r3
   5704c:	100b883a 	mov	r5,r2
   57050:	e13ff817 	ldw	r4,-32(fp)
   57054:	00541b80 	call	541b8 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   57058:	00003706 	br	57138 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   5705c:	e0bffc17 	ldw	r2,-16(fp)
   57060:	10800f17 	ldw	r2,60(r2)
   57064:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   57068:	e0bffc17 	ldw	r2,-16(fp)
   5706c:	10801017 	ldw	r2,64(r2)
   57070:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   57074:	e0fff417 	ldw	r3,-48(fp)
   57078:	e0bff017 	ldw	r2,-64(fp)
   5707c:	1880062e 	bgeu	r3,r2,57098 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   57080:	e0fff017 	ldw	r3,-64(fp)
   57084:	e0bff417 	ldw	r2,-48(fp)
   57088:	1885c83a 	sub	r2,r3,r2
   5708c:	10bfffc4 	addi	r2,r2,-1
   57090:	e0bff115 	stw	r2,-60(fp)
   57094:	00000b06 	br	570c4 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   57098:	e0bff017 	ldw	r2,-64(fp)
   5709c:	10000526 	beq	r2,zero,570b4 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   570a0:	00c20004 	movi	r3,2048
   570a4:	e0bff417 	ldw	r2,-48(fp)
   570a8:	1885c83a 	sub	r2,r3,r2
   570ac:	e0bff115 	stw	r2,-60(fp)
   570b0:	00000406 	br	570c4 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   570b4:	00c1ffc4 	movi	r3,2047
   570b8:	e0bff417 	ldw	r2,-48(fp)
   570bc:	1885c83a 	sub	r2,r3,r2
   570c0:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   570c4:	e0bff117 	ldw	r2,-60(fp)
   570c8:	10001e26 	beq	r2,zero,57144 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   570cc:	e0fffe17 	ldw	r3,-8(fp)
   570d0:	e0bff117 	ldw	r2,-60(fp)
   570d4:	1880022e 	bgeu	r3,r2,570e0 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   570d8:	e0bffe17 	ldw	r2,-8(fp)
   570dc:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   570e0:	e0bffc17 	ldw	r2,-16(fp)
   570e4:	10c21104 	addi	r3,r2,2116
   570e8:	e0bff417 	ldw	r2,-48(fp)
   570ec:	1885883a 	add	r2,r3,r2
   570f0:	e1bff117 	ldw	r6,-60(fp)
   570f4:	e17ffd17 	ldw	r5,-12(fp)
   570f8:	1009883a 	mov	r4,r2
   570fc:	0045cc80 	call	45cc8 <memcpy>
      ptr   += n;
   57100:	e0fffd17 	ldw	r3,-12(fp)
   57104:	e0bff117 	ldw	r2,-60(fp)
   57108:	1885883a 	add	r2,r3,r2
   5710c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   57110:	e0fffe17 	ldw	r3,-8(fp)
   57114:	e0bff117 	ldw	r2,-60(fp)
   57118:	1885c83a 	sub	r2,r3,r2
   5711c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   57120:	e0fff417 	ldw	r3,-48(fp)
   57124:	e0bff117 	ldw	r2,-60(fp)
   57128:	1885883a 	add	r2,r3,r2
   5712c:	10c1ffcc 	andi	r3,r2,2047
   57130:	e0bffc17 	ldw	r2,-16(fp)
   57134:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   57138:	e0bffe17 	ldw	r2,-8(fp)
   5713c:	00bfc716 	blt	zero,r2,5705c <__alt_data_end+0xffff185c>
   57140:	00000106 	br	57148 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   57144:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   57148:	0005303a 	rdctl	r2,status
   5714c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   57150:	e0fff717 	ldw	r3,-36(fp)
   57154:	00bfff84 	movi	r2,-2
   57158:	1884703a 	and	r2,r3,r2
   5715c:	1001703a 	wrctl	status,r2
  
  return context;
   57160:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   57164:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   57168:	e0bffc17 	ldw	r2,-16(fp)
   5716c:	10800817 	ldw	r2,32(r2)
   57170:	10c00094 	ori	r3,r2,2
   57174:	e0bffc17 	ldw	r2,-16(fp)
   57178:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   5717c:	e0bffc17 	ldw	r2,-16(fp)
   57180:	10800017 	ldw	r2,0(r2)
   57184:	10800104 	addi	r2,r2,4
   57188:	1007883a 	mov	r3,r2
   5718c:	e0bffc17 	ldw	r2,-16(fp)
   57190:	10800817 	ldw	r2,32(r2)
   57194:	18800035 	stwio	r2,0(r3)
   57198:	e0bff617 	ldw	r2,-40(fp)
   5719c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   571a0:	e0bff317 	ldw	r2,-52(fp)
   571a4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   571a8:	e0bffe17 	ldw	r2,-8(fp)
   571ac:	00802a0e 	bge	zero,r2,57258 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   571b0:	e0bfff17 	ldw	r2,-4(fp)
   571b4:	1090000c 	andi	r2,r2,16384
   571b8:	10002a1e 	bne	r2,zero,57264 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   571bc:	d0a71d43 	ldbu	r2,-25483(gp)
   571c0:	10803fcc 	andi	r2,r2,255
   571c4:	10800058 	cmpnei	r2,r2,1
   571c8:	1000161e 	bne	r2,zero,57224 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   571cc:	e0bffc17 	ldw	r2,-16(fp)
   571d0:	10800c17 	ldw	r2,48(r2)
   571d4:	e0bff515 	stw	r2,-44(fp)
   571d8:	00800184 	movi	r2,6
   571dc:	e0bff98d 	sth	r2,-26(fp)
   571e0:	00bfe0c4 	movi	r2,-125
   571e4:	e0bffa05 	stb	r2,-24(fp)
   571e8:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   571ec:	d0a71d43 	ldbu	r2,-25483(gp)
   571f0:	10803fcc 	andi	r2,r2,255
   571f4:	10001526 	beq	r2,zero,5724c <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   571f8:	e0fff98b 	ldhu	r3,-26(fp)
   571fc:	e13ffa03 	ldbu	r4,-24(fp)
   57200:	e17ffa8b 	ldhu	r5,-22(fp)
   57204:	e0bffb04 	addi	r2,fp,-20
   57208:	d8800015 	stw	r2,0(sp)
   5720c:	280f883a 	mov	r7,r5
   57210:	200d883a 	mov	r6,r4
   57214:	180b883a 	mov	r5,r3
   57218:	e13ff517 	ldw	r4,-44(fp)
   5721c:	0050c7c0 	call	50c7c <OSFlagPend>
   57220:	00000a06 	br	5724c <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   57224:	0001883a 	nop
   57228:	e0bffc17 	ldw	r2,-16(fp)
   5722c:	10c01017 	ldw	r3,64(r2)
   57230:	e0bff017 	ldw	r2,-64(fp)
   57234:	1880051e 	bne	r3,r2,5724c <altera_avalon_jtag_uart_write+0x248>
   57238:	e0bffc17 	ldw	r2,-16(fp)
   5723c:	10c00917 	ldw	r3,36(r2)
   57240:	e0bffc17 	ldw	r2,-16(fp)
   57244:	10800117 	ldw	r2,4(r2)
   57248:	18bff736 	bltu	r3,r2,57228 <__alt_data_end+0xffff1a28>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   5724c:	e0bffc17 	ldw	r2,-16(fp)
   57250:	10800917 	ldw	r2,36(r2)
   57254:	1000051e 	bne	r2,zero,5726c <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   57258:	e0bffe17 	ldw	r2,-8(fp)
   5725c:	00bfb616 	blt	zero,r2,57138 <__alt_data_end+0xffff1938>
   57260:	00000306 	br	57270 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   57264:	0001883a 	nop
   57268:	00000106 	br	57270 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   5726c:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   57270:	e0bffc17 	ldw	r2,-16(fp)
   57274:	10800b17 	ldw	r2,44(r2)
   57278:	1009883a 	mov	r4,r2
   5727c:	00545300 	call	54530 <OSSemPost>

  if (ptr != start)
   57280:	e0fffd17 	ldw	r3,-12(fp)
   57284:	e0bff217 	ldw	r2,-56(fp)
   57288:	18800426 	beq	r3,r2,5729c <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   5728c:	e0fffd17 	ldw	r3,-12(fp)
   57290:	e0bff217 	ldw	r2,-56(fp)
   57294:	1885c83a 	sub	r2,r3,r2
   57298:	00000606 	br	572b4 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   5729c:	e0bfff17 	ldw	r2,-4(fp)
   572a0:	1090000c 	andi	r2,r2,16384
   572a4:	10000226 	beq	r2,zero,572b0 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   572a8:	00bffd44 	movi	r2,-11
   572ac:	00000106 	br	572b4 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   572b0:	00bffec4 	movi	r2,-5
}
   572b4:	e037883a 	mov	sp,fp
   572b8:	dfc00117 	ldw	ra,4(sp)
   572bc:	df000017 	ldw	fp,0(sp)
   572c0:	dec00204 	addi	sp,sp,8
   572c4:	f800283a 	ret

000572c8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   572c8:	defffa04 	addi	sp,sp,-24
   572cc:	dfc00515 	stw	ra,20(sp)
   572d0:	df000415 	stw	fp,16(sp)
   572d4:	df000404 	addi	fp,sp,16
   572d8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   572dc:	0007883a 	mov	r3,zero
   572e0:	e0bfff17 	ldw	r2,-4(fp)
   572e4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   572e8:	e0bfff17 	ldw	r2,-4(fp)
   572ec:	10800104 	addi	r2,r2,4
   572f0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   572f4:	0005303a 	rdctl	r2,status
   572f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   572fc:	e0fffd17 	ldw	r3,-12(fp)
   57300:	00bfff84 	movi	r2,-2
   57304:	1884703a 	and	r2,r3,r2
   57308:	1001703a 	wrctl	status,r2
  
  return context;
   5730c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   57310:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   57314:	005805c0 	call	5805c <alt_tick>
   57318:	e0bffc17 	ldw	r2,-16(fp)
   5731c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   57320:	e0bffe17 	ldw	r2,-8(fp)
   57324:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   57328:	0001883a 	nop
   5732c:	e037883a 	mov	sp,fp
   57330:	dfc00117 	ldw	ra,4(sp)
   57334:	df000017 	ldw	fp,0(sp)
   57338:	dec00204 	addi	sp,sp,8
   5733c:	f800283a 	ret

00057340 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   57340:	defff804 	addi	sp,sp,-32
   57344:	dfc00715 	stw	ra,28(sp)
   57348:	df000615 	stw	fp,24(sp)
   5734c:	df000604 	addi	fp,sp,24
   57350:	e13ffc15 	stw	r4,-16(fp)
   57354:	e17ffd15 	stw	r5,-12(fp)
   57358:	e1bffe15 	stw	r6,-8(fp)
   5735c:	e1ffff15 	stw	r7,-4(fp)
   57360:	e0bfff17 	ldw	r2,-4(fp)
   57364:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   57368:	d0a73217 	ldw	r2,-25400(gp)
   5736c:	1000021e 	bne	r2,zero,57378 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   57370:	e0bffb17 	ldw	r2,-20(fp)
   57374:	d0a73215 	stw	r2,-25400(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   57378:	e0bffc17 	ldw	r2,-16(fp)
   5737c:	10800104 	addi	r2,r2,4
   57380:	00c001c4 	movi	r3,7
   57384:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   57388:	d8000015 	stw	zero,0(sp)
   5738c:	e1fffc17 	ldw	r7,-16(fp)
   57390:	01800174 	movhi	r6,5
   57394:	319cb204 	addi	r6,r6,29384
   57398:	e17ffe17 	ldw	r5,-8(fp)
   5739c:	e13ffd17 	ldw	r4,-12(fp)
   573a0:	005793c0 	call	5793c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   573a4:	0001883a 	nop
   573a8:	e037883a 	mov	sp,fp
   573ac:	dfc00117 	ldw	ra,4(sp)
   573b0:	df000017 	ldw	fp,0(sp)
   573b4:	dec00204 	addi	sp,sp,8
   573b8:	f800283a 	ret

000573bc <check_mm_if_busy>:
#include "unistd.h" //usleep()

// #define DEBUG

int check_mm_if_busy(void)
{
   573bc:	defffe04 	addi	sp,sp,-8
   573c0:	df000115 	stw	fp,4(sp)
   573c4:	df000104 	addi	fp,sp,4
    //Read control register of I2C-mm if
    int res = IORD(I2C_AVALON_MM_IF_0_BASE,CTRL_REG);
   573c8:	00800234 	movhi	r2,8
   573cc:	10841004 	addi	r2,r2,4160
   573d0:	10800037 	ldwio	r2,0(r2)
   573d4:	e0bfff15 	stw	r2,-4(fp)
    //check if I2C_AVALON_MM_IF state machine is busy
  #ifdef DEBUG
    printf("CTRL: 0x%x\n",res);
  #endif
    if (check_bit(res,MM_IF_BUSY))
   573d8:	e0bfff17 	ldw	r2,-4(fp)
   573dc:	1080200c 	andi	r2,r2,128
   573e0:	10000226 	beq	r2,zero,573ec <check_mm_if_busy+0x30>
    {
        return 1;
   573e4:	00800044 	movi	r2,1
   573e8:	00000106 	br	573f0 <check_mm_if_busy+0x34>
    }
    else
    {
        return 0;
   573ec:	0005883a 	mov	r2,zero
    }
}
   573f0:	e037883a 	mov	sp,fp
   573f4:	df000017 	ldw	fp,0(sp)
   573f8:	dec00104 	addi	sp,sp,4
   573fc:	f800283a 	ret

00057400 <write_to_i2c_device>:

void write_to_i2c_device(alt_u8 i2c_device_addr, alt_u8 i2c_reg_addr,alt_u8 no_bytes,alt_u32 data)
{
   57400:	defffa04 	addi	sp,sp,-24
   57404:	dfc00515 	stw	ra,20(sp)
   57408:	df000415 	stw	fp,16(sp)
   5740c:	df000404 	addi	fp,sp,16
   57410:	2807883a 	mov	r3,r5
   57414:	3005883a 	mov	r2,r6
   57418:	e1ffff15 	stw	r7,-4(fp)
   5741c:	e13ffc05 	stb	r4,-16(fp)
   57420:	e0fffd05 	stb	r3,-12(fp)
   57424:	e0bffe05 	stb	r2,-8(fp)
    //write to address register of i2c mm if
    IOWR(I2C_AVALON_MM_IF_0_BASE,ADDR_REG, i2c_reg_addr << 8 | i2c_device_addr);
   57428:	e0bffd03 	ldbu	r2,-12(fp)
   5742c:	1006923a 	slli	r3,r2,8
   57430:	e0bffc03 	ldbu	r2,-16(fp)
   57434:	1886b03a 	or	r3,r3,r2
   57438:	00800234 	movhi	r2,8
   5743c:	10841104 	addi	r2,r2,4164
   57440:	10c00035 	stwio	r3,0(r2)
    //write to the data register of the i2c mm if
    IOWR(I2C_AVALON_MM_IF_0_BASE,WRITE_REG,data);
   57444:	e0ffff17 	ldw	r3,-4(fp)
   57448:	00800234 	movhi	r2,8
   5744c:	10841204 	addi	r2,r2,4168
   57450:	10c00035 	stwio	r3,0(r2)
    //Set the corresponding bits of the ctrl register to enable the i2c communication
    IOWR(I2C_AVALON_MM_IF_0_BASE,CTRL_REG,no_bytes << 2 | CMD_ENA_WR);
   57454:	e0bffe03 	ldbu	r2,-8(fp)
   57458:	1085883a 	add	r2,r2,r2
   5745c:	1085883a 	add	r2,r2,r2
   57460:	10c00054 	ori	r3,r2,1
   57464:	00800234 	movhi	r2,8
   57468:	10841004 	addi	r2,r2,4160
   5746c:	10c00035 	stwio	r3,0(r2)
    //Check for busy in the ctrl register (i2c busy or mm if busy), and continue when no longer busy
    while(check_mm_if_busy()) continue;
   57470:	00000106 	br	57478 <write_to_i2c_device+0x78>
   57474:	0001883a 	nop
   57478:	00573bc0 	call	573bc <check_mm_if_busy>
   5747c:	103ffd1e 	bne	r2,zero,57474 <__alt_data_end+0xffff1c74>
}
   57480:	0001883a 	nop
   57484:	e037883a 	mov	sp,fp
   57488:	dfc00117 	ldw	ra,4(sp)
   5748c:	df000017 	ldw	fp,0(sp)
   57490:	dec00204 	addi	sp,sp,8
   57494:	f800283a 	ret

00057498 <read_from_i2c_device>:

void read_from_i2c_device(alt_u8 i2c_device_addr,alt_u8 i2c_reg_addr,alt_u8 no_bytes, alt_u8* data)
{
   57498:	defff404 	addi	sp,sp,-48
   5749c:	dfc00b15 	stw	ra,44(sp)
   574a0:	df000a15 	stw	fp,40(sp)
   574a4:	df000a04 	addi	fp,sp,40
   574a8:	2807883a 	mov	r3,r5
   574ac:	3005883a 	mov	r2,r6
   574b0:	e1ffff15 	stw	r7,-4(fp)
   574b4:	e13ffc05 	stb	r4,-16(fp)
   574b8:	e0fffd05 	stb	r3,-12(fp)
   574bc:	e0bffe05 	stb	r2,-8(fp)
    alt_u32 read_reg[2] = {0};
   574c0:	0005883a 	mov	r2,zero
   574c4:	0007883a 	mov	r3,zero
   574c8:	e0bff815 	stw	r2,-32(fp)
   574cc:	e0fff915 	stw	r3,-28(fp)
    alt_u8 data_temp[8] = {0};
   574d0:	e03ffa15 	stw	zero,-24(fp)
   574d4:	e03ffb15 	stw	zero,-20(fp)

    //write to address register of i2c mm if
    //6..0: 7-bits i2c device addres
    //15..8: 8 bits register address of i2c device
    IOWR(I2C_AVALON_MM_IF_0_BASE,ADDR_REG, i2c_reg_addr << 8 | i2c_device_addr);
   574d8:	e0bffd03 	ldbu	r2,-12(fp)
   574dc:	1006923a 	slli	r3,r2,8
   574e0:	e0bffc03 	ldbu	r2,-16(fp)
   574e4:	1886b03a 	or	r3,r3,r2
   574e8:	00800234 	movhi	r2,8
   574ec:	10841104 	addi	r2,r2,4164
   574f0:	10c00035 	stwio	r3,0(r2)
    //Write to i2c mm if ctrl register to enable i2c command
    IOWR(I2C_AVALON_MM_IF_0_BASE,CTRL_REG, CMD_ENA_WR);
   574f4:	00c00044 	movi	r3,1
   574f8:	00800234 	movhi	r2,8
   574fc:	10841004 	addi	r2,r2,4160
   57500:	10c00035 	stwio	r3,0(r2)
    //Check for busy in the ctrl register (i2c busy or mm if busy), and continue when no longer busy
    while(check_mm_if_busy()) continue;
   57504:	00000106 	br	5750c <read_from_i2c_device+0x74>
   57508:	0001883a 	nop
   5750c:	00573bc0 	call	573bc <check_mm_if_busy>
   57510:	103ffd1e 	bne	r2,zero,57508 <__alt_data_end+0xffff1d08>

    //no_bytes to be read from the i2c device

    IOWR(I2C_AVALON_MM_IF_0_BASE,CTRL_REG,no_bytes << 2 | CMD_ENA_RD);
   57514:	e0bffe03 	ldbu	r2,-8(fp)
   57518:	1085883a 	add	r2,r2,r2
   5751c:	1085883a 	add	r2,r2,r2
   57520:	10c000d4 	ori	r3,r2,3
   57524:	00800234 	movhi	r2,8
   57528:	10841004 	addi	r2,r2,4160
   5752c:	10c00035 	stwio	r3,0(r2)
    while(check_mm_if_busy()) continue;
   57530:	00000106 	br	57538 <read_from_i2c_device+0xa0>
   57534:	0001883a 	nop
   57538:	00573bc0 	call	573bc <check_mm_if_busy>
   5753c:	103ffd1e 	bne	r2,zero,57534 <__alt_data_end+0xffff1d34>

    read_reg[0] = IORD(I2C_AVALON_MM_IF_0_BASE,READ_REG_LOW);
   57540:	00800234 	movhi	r2,8
   57544:	10841304 	addi	r2,r2,4172
   57548:	10800037 	ldwio	r2,0(r2)
   5754c:	e0bff815 	stw	r2,-32(fp)
    read_reg[1] = IORD(I2C_AVALON_MM_IF_0_BASE,READ_REG_HIGH);
   57550:	00800234 	movhi	r2,8
   57554:	10841404 	addi	r2,r2,4176
   57558:	10800037 	ldwio	r2,0(r2)
   5755c:	e0bff915 	stw	r2,-28(fp)

    //Move data in to byte array
    for(int i = 0; i<4; i++) {
   57560:	e03ff615 	stw	zero,-40(fp)
   57564:	00001606 	br	575c0 <read_from_i2c_device+0x128>
        data_temp[i] = (read_reg[0] >> i*8) & 0xff;
   57568:	e0fff817 	ldw	r3,-32(fp)
   5756c:	e0bff617 	ldw	r2,-40(fp)
   57570:	100490fa 	slli	r2,r2,3
   57574:	1884d83a 	srl	r2,r3,r2
   57578:	1009883a 	mov	r4,r2
   5757c:	e0fffa04 	addi	r3,fp,-24
   57580:	e0bff617 	ldw	r2,-40(fp)
   57584:	1885883a 	add	r2,r3,r2
   57588:	11000005 	stb	r4,0(r2)
        data_temp[i+4] = (read_reg[1] >> i*8) & 0xff;
   5758c:	e0bff617 	ldw	r2,-40(fp)
   57590:	10800104 	addi	r2,r2,4
   57594:	e13ff917 	ldw	r4,-28(fp)
   57598:	e0fff617 	ldw	r3,-40(fp)
   5759c:	180690fa 	slli	r3,r3,3
   575a0:	20c6d83a 	srl	r3,r4,r3
   575a4:	1809883a 	mov	r4,r3
   575a8:	e0fffa04 	addi	r3,fp,-24
   575ac:	1885883a 	add	r2,r3,r2
   575b0:	11000005 	stb	r4,0(r2)

    read_reg[0] = IORD(I2C_AVALON_MM_IF_0_BASE,READ_REG_LOW);
    read_reg[1] = IORD(I2C_AVALON_MM_IF_0_BASE,READ_REG_HIGH);

    //Move data in to byte array
    for(int i = 0; i<4; i++) {
   575b4:	e0bff617 	ldw	r2,-40(fp)
   575b8:	10800044 	addi	r2,r2,1
   575bc:	e0bff615 	stw	r2,-40(fp)
   575c0:	e0bff617 	ldw	r2,-40(fp)
   575c4:	10800110 	cmplti	r2,r2,4
   575c8:	103fe71e 	bne	r2,zero,57568 <__alt_data_end+0xffff1d68>
        data_temp[i] = (read_reg[0] >> i*8) & 0xff;
        data_temp[i+4] = (read_reg[1] >> i*8) & 0xff;
    }

    //reverse byte array to have first received byte in the lowest array position
    for(int i = 0; i<no_bytes; i++) {
   575cc:	e03ff715 	stw	zero,-36(fp)
   575d0:	00000e06 	br	5760c <read_from_i2c_device+0x174>
        data[i] = data_temp[(no_bytes-1)-i];
   575d4:	e0bff717 	ldw	r2,-36(fp)
   575d8:	e0ffff17 	ldw	r3,-4(fp)
   575dc:	1885883a 	add	r2,r3,r2
   575e0:	e0fffe03 	ldbu	r3,-8(fp)
   575e4:	193fffc4 	addi	r4,r3,-1
   575e8:	e0fff717 	ldw	r3,-36(fp)
   575ec:	20c7c83a 	sub	r3,r4,r3
   575f0:	e13ffa04 	addi	r4,fp,-24
   575f4:	20c7883a 	add	r3,r4,r3
   575f8:	18c00003 	ldbu	r3,0(r3)
   575fc:	10c00005 	stb	r3,0(r2)
        data_temp[i] = (read_reg[0] >> i*8) & 0xff;
        data_temp[i+4] = (read_reg[1] >> i*8) & 0xff;
    }

    //reverse byte array to have first received byte in the lowest array position
    for(int i = 0; i<no_bytes; i++) {
   57600:	e0bff717 	ldw	r2,-36(fp)
   57604:	10800044 	addi	r2,r2,1
   57608:	e0bff715 	stw	r2,-36(fp)
   5760c:	e0bffe03 	ldbu	r2,-8(fp)
   57610:	e0fff717 	ldw	r3,-36(fp)
   57614:	18bfef16 	blt	r3,r2,575d4 <__alt_data_end+0xffff1dd4>
        data[i] = data_temp[(no_bytes-1)-i];
        //printf("i: %d, no_bytes: %d\n" ,i,(no_bytes-1)-i);
    }

   57618:	0001883a 	nop
   5761c:	e037883a 	mov	sp,fp
   57620:	dfc00117 	ldw	ra,4(sp)
   57624:	df000017 	ldw	fp,0(sp)
   57628:	dec00204 	addi	sp,sp,8
   5762c:	f800283a 	ret

00057630 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   57630:	defff504 	addi	sp,sp,-44
   57634:	df000a15 	stw	fp,40(sp)
   57638:	df000a04 	addi	fp,sp,40
   5763c:	e13ffc15 	stw	r4,-16(fp)
   57640:	e17ffd15 	stw	r5,-12(fp)
   57644:	e1bffe15 	stw	r6,-8(fp)
   57648:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   5764c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   57650:	d0a73217 	ldw	r2,-25400(gp)
  
  if (alt_ticks_per_second ())
   57654:	10003c26 	beq	r2,zero,57748 <alt_alarm_start+0x118>
  {
    if (alarm)
   57658:	e0bffc17 	ldw	r2,-16(fp)
   5765c:	10003826 	beq	r2,zero,57740 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   57660:	e0bffc17 	ldw	r2,-16(fp)
   57664:	e0fffe17 	ldw	r3,-8(fp)
   57668:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   5766c:	e0bffc17 	ldw	r2,-16(fp)
   57670:	e0ffff17 	ldw	r3,-4(fp)
   57674:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   57678:	0005303a 	rdctl	r2,status
   5767c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   57680:	e0fff917 	ldw	r3,-28(fp)
   57684:	00bfff84 	movi	r2,-2
   57688:	1884703a 	and	r2,r3,r2
   5768c:	1001703a 	wrctl	status,r2
  
  return context;
   57690:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   57694:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   57698:	d0a73317 	ldw	r2,-25396(gp)
      
      current_nticks = alt_nticks();
   5769c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   576a0:	e0fffd17 	ldw	r3,-12(fp)
   576a4:	e0bff617 	ldw	r2,-40(fp)
   576a8:	1885883a 	add	r2,r3,r2
   576ac:	10c00044 	addi	r3,r2,1
   576b0:	e0bffc17 	ldw	r2,-16(fp)
   576b4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   576b8:	e0bffc17 	ldw	r2,-16(fp)
   576bc:	10c00217 	ldw	r3,8(r2)
   576c0:	e0bff617 	ldw	r2,-40(fp)
   576c4:	1880042e 	bgeu	r3,r2,576d8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   576c8:	e0bffc17 	ldw	r2,-16(fp)
   576cc:	00c00044 	movi	r3,1
   576d0:	10c00405 	stb	r3,16(r2)
   576d4:	00000206 	br	576e0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   576d8:	e0bffc17 	ldw	r2,-16(fp)
   576dc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   576e0:	e0bffc17 	ldw	r2,-16(fp)
   576e4:	d0e02d04 	addi	r3,gp,-32588
   576e8:	e0fffa15 	stw	r3,-24(fp)
   576ec:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   576f0:	e0bffb17 	ldw	r2,-20(fp)
   576f4:	e0fffa17 	ldw	r3,-24(fp)
   576f8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   576fc:	e0bffa17 	ldw	r2,-24(fp)
   57700:	10c00017 	ldw	r3,0(r2)
   57704:	e0bffb17 	ldw	r2,-20(fp)
   57708:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   5770c:	e0bffa17 	ldw	r2,-24(fp)
   57710:	10800017 	ldw	r2,0(r2)
   57714:	e0fffb17 	ldw	r3,-20(fp)
   57718:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   5771c:	e0bffa17 	ldw	r2,-24(fp)
   57720:	e0fffb17 	ldw	r3,-20(fp)
   57724:	10c00015 	stw	r3,0(r2)
   57728:	e0bff817 	ldw	r2,-32(fp)
   5772c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   57730:	e0bff717 	ldw	r2,-36(fp)
   57734:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   57738:	0005883a 	mov	r2,zero
   5773c:	00000306 	br	5774c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   57740:	00bffa84 	movi	r2,-22
   57744:	00000106 	br	5774c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   57748:	00bfde84 	movi	r2,-134
  }
}
   5774c:	e037883a 	mov	sp,fp
   57750:	df000017 	ldw	fp,0(sp)
   57754:	dec00104 	addi	sp,sp,4
   57758:	f800283a 	ret

0005775c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   5775c:	deffff04 	addi	sp,sp,-4
   57760:	df000015 	stw	fp,0(sp)
   57764:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   57768:	0001883a 	nop
   5776c:	e037883a 	mov	sp,fp
   57770:	df000017 	ldw	fp,0(sp)
   57774:	dec00104 	addi	sp,sp,4
   57778:	f800283a 	ret

0005777c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   5777c:	defffe04 	addi	sp,sp,-8
   57780:	dfc00115 	stw	ra,4(sp)
   57784:	df000015 	stw	fp,0(sp)
   57788:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   5778c:	d0a00b17 	ldw	r2,-32724(gp)
   57790:	10000326 	beq	r2,zero,577a0 <alt_get_errno+0x24>
   57794:	d0a00b17 	ldw	r2,-32724(gp)
   57798:	103ee83a 	callr	r2
   5779c:	00000106 	br	577a4 <alt_get_errno+0x28>
   577a0:	d0a71404 	addi	r2,gp,-25520
}
   577a4:	e037883a 	mov	sp,fp
   577a8:	dfc00117 	ldw	ra,4(sp)
   577ac:	df000017 	ldw	fp,0(sp)
   577b0:	dec00204 	addi	sp,sp,8
   577b4:	f800283a 	ret

000577b8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   577b8:	defffa04 	addi	sp,sp,-24
   577bc:	dfc00515 	stw	ra,20(sp)
   577c0:	df000415 	stw	fp,16(sp)
   577c4:	df000404 	addi	fp,sp,16
   577c8:	e13ffe15 	stw	r4,-8(fp)
   577cc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   577d0:	e0bffe17 	ldw	r2,-8(fp)
   577d4:	10000326 	beq	r2,zero,577e4 <alt_dev_llist_insert+0x2c>
   577d8:	e0bffe17 	ldw	r2,-8(fp)
   577dc:	10800217 	ldw	r2,8(r2)
   577e0:	1000061e 	bne	r2,zero,577fc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   577e4:	005777c0 	call	5777c <alt_get_errno>
   577e8:	1007883a 	mov	r3,r2
   577ec:	00800584 	movi	r2,22
   577f0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   577f4:	00bffa84 	movi	r2,-22
   577f8:	00001306 	br	57848 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   577fc:	e0bffe17 	ldw	r2,-8(fp)
   57800:	e0ffff17 	ldw	r3,-4(fp)
   57804:	e0fffc15 	stw	r3,-16(fp)
   57808:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   5780c:	e0bffd17 	ldw	r2,-12(fp)
   57810:	e0fffc17 	ldw	r3,-16(fp)
   57814:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   57818:	e0bffc17 	ldw	r2,-16(fp)
   5781c:	10c00017 	ldw	r3,0(r2)
   57820:	e0bffd17 	ldw	r2,-12(fp)
   57824:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   57828:	e0bffc17 	ldw	r2,-16(fp)
   5782c:	10800017 	ldw	r2,0(r2)
   57830:	e0fffd17 	ldw	r3,-12(fp)
   57834:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   57838:	e0bffc17 	ldw	r2,-16(fp)
   5783c:	e0fffd17 	ldw	r3,-12(fp)
   57840:	10c00015 	stw	r3,0(r2)

  return 0;  
   57844:	0005883a 	mov	r2,zero
}
   57848:	e037883a 	mov	sp,fp
   5784c:	dfc00117 	ldw	ra,4(sp)
   57850:	df000017 	ldw	fp,0(sp)
   57854:	dec00204 	addi	sp,sp,8
   57858:	f800283a 	ret

0005785c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   5785c:	defffd04 	addi	sp,sp,-12
   57860:	dfc00215 	stw	ra,8(sp)
   57864:	df000115 	stw	fp,4(sp)
   57868:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   5786c:	008001b4 	movhi	r2,6
   57870:	10a2dd04 	addi	r2,r2,-29836
   57874:	e0bfff15 	stw	r2,-4(fp)
   57878:	00000606 	br	57894 <_do_ctors+0x38>
        (*ctor) (); 
   5787c:	e0bfff17 	ldw	r2,-4(fp)
   57880:	10800017 	ldw	r2,0(r2)
   57884:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   57888:	e0bfff17 	ldw	r2,-4(fp)
   5788c:	10bfff04 	addi	r2,r2,-4
   57890:	e0bfff15 	stw	r2,-4(fp)
   57894:	e0ffff17 	ldw	r3,-4(fp)
   57898:	008001b4 	movhi	r2,6
   5789c:	10a2de04 	addi	r2,r2,-29832
   578a0:	18bff62e 	bgeu	r3,r2,5787c <__alt_data_end+0xffff207c>
        (*ctor) (); 
}
   578a4:	0001883a 	nop
   578a8:	e037883a 	mov	sp,fp
   578ac:	dfc00117 	ldw	ra,4(sp)
   578b0:	df000017 	ldw	fp,0(sp)
   578b4:	dec00204 	addi	sp,sp,8
   578b8:	f800283a 	ret

000578bc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   578bc:	defffd04 	addi	sp,sp,-12
   578c0:	dfc00215 	stw	ra,8(sp)
   578c4:	df000115 	stw	fp,4(sp)
   578c8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   578cc:	008001b4 	movhi	r2,6
   578d0:	10a2dd04 	addi	r2,r2,-29836
   578d4:	e0bfff15 	stw	r2,-4(fp)
   578d8:	00000606 	br	578f4 <_do_dtors+0x38>
        (*dtor) (); 
   578dc:	e0bfff17 	ldw	r2,-4(fp)
   578e0:	10800017 	ldw	r2,0(r2)
   578e4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   578e8:	e0bfff17 	ldw	r2,-4(fp)
   578ec:	10bfff04 	addi	r2,r2,-4
   578f0:	e0bfff15 	stw	r2,-4(fp)
   578f4:	e0ffff17 	ldw	r3,-4(fp)
   578f8:	008001b4 	movhi	r2,6
   578fc:	10a2de04 	addi	r2,r2,-29832
   57900:	18bff62e 	bgeu	r3,r2,578dc <__alt_data_end+0xffff20dc>
        (*dtor) (); 
}
   57904:	0001883a 	nop
   57908:	e037883a 	mov	sp,fp
   5790c:	dfc00117 	ldw	ra,4(sp)
   57910:	df000017 	ldw	fp,0(sp)
   57914:	dec00204 	addi	sp,sp,8
   57918:	f800283a 	ret

0005791c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   5791c:	deffff04 	addi	sp,sp,-4
   57920:	df000015 	stw	fp,0(sp)
   57924:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   57928:	0001883a 	nop
   5792c:	e037883a 	mov	sp,fp
   57930:	df000017 	ldw	fp,0(sp)
   57934:	dec00104 	addi	sp,sp,4
   57938:	f800283a 	ret

0005793c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   5793c:	defff904 	addi	sp,sp,-28
   57940:	dfc00615 	stw	ra,24(sp)
   57944:	df000515 	stw	fp,20(sp)
   57948:	df000504 	addi	fp,sp,20
   5794c:	e13ffc15 	stw	r4,-16(fp)
   57950:	e17ffd15 	stw	r5,-12(fp)
   57954:	e1bffe15 	stw	r6,-8(fp)
   57958:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   5795c:	e0800217 	ldw	r2,8(fp)
   57960:	d8800015 	stw	r2,0(sp)
   57964:	e1ffff17 	ldw	r7,-4(fp)
   57968:	e1bffe17 	ldw	r6,-8(fp)
   5796c:	e17ffd17 	ldw	r5,-12(fp)
   57970:	e13ffc17 	ldw	r4,-16(fp)
   57974:	0057aec0 	call	57aec <alt_iic_isr_register>
}  
   57978:	e037883a 	mov	sp,fp
   5797c:	dfc00117 	ldw	ra,4(sp)
   57980:	df000017 	ldw	fp,0(sp)
   57984:	dec00204 	addi	sp,sp,8
   57988:	f800283a 	ret

0005798c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   5798c:	defff904 	addi	sp,sp,-28
   57990:	df000615 	stw	fp,24(sp)
   57994:	df000604 	addi	fp,sp,24
   57998:	e13ffe15 	stw	r4,-8(fp)
   5799c:	e17fff15 	stw	r5,-4(fp)
   579a0:	e0bfff17 	ldw	r2,-4(fp)
   579a4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   579a8:	0005303a 	rdctl	r2,status
   579ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   579b0:	e0fffb17 	ldw	r3,-20(fp)
   579b4:	00bfff84 	movi	r2,-2
   579b8:	1884703a 	and	r2,r3,r2
   579bc:	1001703a 	wrctl	status,r2
  
  return context;
   579c0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   579c4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   579c8:	00c00044 	movi	r3,1
   579cc:	e0bffa17 	ldw	r2,-24(fp)
   579d0:	1884983a 	sll	r2,r3,r2
   579d4:	1007883a 	mov	r3,r2
   579d8:	d0a73117 	ldw	r2,-25404(gp)
   579dc:	1884b03a 	or	r2,r3,r2
   579e0:	d0a73115 	stw	r2,-25404(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   579e4:	d0a73117 	ldw	r2,-25404(gp)
   579e8:	100170fa 	wrctl	ienable,r2
   579ec:	e0bffc17 	ldw	r2,-16(fp)
   579f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   579f4:	e0bffd17 	ldw	r2,-12(fp)
   579f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   579fc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   57a00:	0001883a 	nop
}
   57a04:	e037883a 	mov	sp,fp
   57a08:	df000017 	ldw	fp,0(sp)
   57a0c:	dec00104 	addi	sp,sp,4
   57a10:	f800283a 	ret

00057a14 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   57a14:	defff904 	addi	sp,sp,-28
   57a18:	df000615 	stw	fp,24(sp)
   57a1c:	df000604 	addi	fp,sp,24
   57a20:	e13ffe15 	stw	r4,-8(fp)
   57a24:	e17fff15 	stw	r5,-4(fp)
   57a28:	e0bfff17 	ldw	r2,-4(fp)
   57a2c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   57a30:	0005303a 	rdctl	r2,status
   57a34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   57a38:	e0fffb17 	ldw	r3,-20(fp)
   57a3c:	00bfff84 	movi	r2,-2
   57a40:	1884703a 	and	r2,r3,r2
   57a44:	1001703a 	wrctl	status,r2
  
  return context;
   57a48:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   57a4c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   57a50:	00c00044 	movi	r3,1
   57a54:	e0bffa17 	ldw	r2,-24(fp)
   57a58:	1884983a 	sll	r2,r3,r2
   57a5c:	0084303a 	nor	r2,zero,r2
   57a60:	1007883a 	mov	r3,r2
   57a64:	d0a73117 	ldw	r2,-25404(gp)
   57a68:	1884703a 	and	r2,r3,r2
   57a6c:	d0a73115 	stw	r2,-25404(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   57a70:	d0a73117 	ldw	r2,-25404(gp)
   57a74:	100170fa 	wrctl	ienable,r2
   57a78:	e0bffc17 	ldw	r2,-16(fp)
   57a7c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   57a80:	e0bffd17 	ldw	r2,-12(fp)
   57a84:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   57a88:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   57a8c:	0001883a 	nop
}
   57a90:	e037883a 	mov	sp,fp
   57a94:	df000017 	ldw	fp,0(sp)
   57a98:	dec00104 	addi	sp,sp,4
   57a9c:	f800283a 	ret

00057aa0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   57aa0:	defffc04 	addi	sp,sp,-16
   57aa4:	df000315 	stw	fp,12(sp)
   57aa8:	df000304 	addi	fp,sp,12
   57aac:	e13ffe15 	stw	r4,-8(fp)
   57ab0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   57ab4:	000530fa 	rdctl	r2,ienable
   57ab8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   57abc:	00c00044 	movi	r3,1
   57ac0:	e0bfff17 	ldw	r2,-4(fp)
   57ac4:	1884983a 	sll	r2,r3,r2
   57ac8:	1007883a 	mov	r3,r2
   57acc:	e0bffd17 	ldw	r2,-12(fp)
   57ad0:	1884703a 	and	r2,r3,r2
   57ad4:	1004c03a 	cmpne	r2,r2,zero
   57ad8:	10803fcc 	andi	r2,r2,255
}
   57adc:	e037883a 	mov	sp,fp
   57ae0:	df000017 	ldw	fp,0(sp)
   57ae4:	dec00104 	addi	sp,sp,4
   57ae8:	f800283a 	ret

00057aec <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   57aec:	defff504 	addi	sp,sp,-44
   57af0:	dfc00a15 	stw	ra,40(sp)
   57af4:	df000915 	stw	fp,36(sp)
   57af8:	df000904 	addi	fp,sp,36
   57afc:	e13ffc15 	stw	r4,-16(fp)
   57b00:	e17ffd15 	stw	r5,-12(fp)
   57b04:	e1bffe15 	stw	r6,-8(fp)
   57b08:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   57b0c:	00bffa84 	movi	r2,-22
   57b10:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   57b14:	e0bffd17 	ldw	r2,-12(fp)
   57b18:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   57b1c:	e0bff817 	ldw	r2,-32(fp)
   57b20:	10800808 	cmpgei	r2,r2,32
   57b24:	1000271e 	bne	r2,zero,57bc4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   57b28:	0005303a 	rdctl	r2,status
   57b2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   57b30:	e0fffb17 	ldw	r3,-20(fp)
   57b34:	00bfff84 	movi	r2,-2
   57b38:	1884703a 	and	r2,r3,r2
   57b3c:	1001703a 	wrctl	status,r2
  
  return context;
   57b40:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   57b44:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   57b48:	008001b4 	movhi	r2,6
   57b4c:	108e7604 	addi	r2,r2,14808
   57b50:	e0fff817 	ldw	r3,-32(fp)
   57b54:	180690fa 	slli	r3,r3,3
   57b58:	10c5883a 	add	r2,r2,r3
   57b5c:	e0fffe17 	ldw	r3,-8(fp)
   57b60:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   57b64:	008001b4 	movhi	r2,6
   57b68:	108e7604 	addi	r2,r2,14808
   57b6c:	e0fff817 	ldw	r3,-32(fp)
   57b70:	180690fa 	slli	r3,r3,3
   57b74:	10c5883a 	add	r2,r2,r3
   57b78:	10800104 	addi	r2,r2,4
   57b7c:	e0ffff17 	ldw	r3,-4(fp)
   57b80:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   57b84:	e0bffe17 	ldw	r2,-8(fp)
   57b88:	10000526 	beq	r2,zero,57ba0 <alt_iic_isr_register+0xb4>
   57b8c:	e0bff817 	ldw	r2,-32(fp)
   57b90:	100b883a 	mov	r5,r2
   57b94:	e13ffc17 	ldw	r4,-16(fp)
   57b98:	005798c0 	call	5798c <alt_ic_irq_enable>
   57b9c:	00000406 	br	57bb0 <alt_iic_isr_register+0xc4>
   57ba0:	e0bff817 	ldw	r2,-32(fp)
   57ba4:	100b883a 	mov	r5,r2
   57ba8:	e13ffc17 	ldw	r4,-16(fp)
   57bac:	0057a140 	call	57a14 <alt_ic_irq_disable>
   57bb0:	e0bff715 	stw	r2,-36(fp)
   57bb4:	e0bffa17 	ldw	r2,-24(fp)
   57bb8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   57bbc:	e0bff917 	ldw	r2,-28(fp)
   57bc0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   57bc4:	e0bff717 	ldw	r2,-36(fp)
}
   57bc8:	e037883a 	mov	sp,fp
   57bcc:	dfc00117 	ldw	ra,4(sp)
   57bd0:	df000017 	ldw	fp,0(sp)
   57bd4:	dec00204 	addi	sp,sp,8
   57bd8:	f800283a 	ret

00057bdc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   57bdc:	defff804 	addi	sp,sp,-32
   57be0:	dfc00715 	stw	ra,28(sp)
   57be4:	df000615 	stw	fp,24(sp)
   57be8:	dc000515 	stw	r16,20(sp)
   57bec:	df000604 	addi	fp,sp,24
   57bf0:	e13ffb15 	stw	r4,-20(fp)
   57bf4:	e17ffc15 	stw	r5,-16(fp)
   57bf8:	e1bffd15 	stw	r6,-12(fp)
   57bfc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   57c00:	e1bffe17 	ldw	r6,-8(fp)
   57c04:	e17ffd17 	ldw	r5,-12(fp)
   57c08:	e13ffc17 	ldw	r4,-16(fp)
   57c0c:	0057e640 	call	57e64 <open>
   57c10:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   57c14:	e0bffa17 	ldw	r2,-24(fp)
   57c18:	10002216 	blt	r2,zero,57ca4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   57c1c:	040001b4 	movhi	r16,6
   57c20:	84263304 	addi	r16,r16,-26420
   57c24:	e0bffa17 	ldw	r2,-24(fp)
   57c28:	01400304 	movi	r5,12
   57c2c:	1009883a 	mov	r4,r2
   57c30:	00406e00 	call	406e0 <__mulsi3>
   57c34:	8085883a 	add	r2,r16,r2
   57c38:	10c00017 	ldw	r3,0(r2)
   57c3c:	e0bffb17 	ldw	r2,-20(fp)
   57c40:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   57c44:	040001b4 	movhi	r16,6
   57c48:	84263304 	addi	r16,r16,-26420
   57c4c:	e0bffa17 	ldw	r2,-24(fp)
   57c50:	01400304 	movi	r5,12
   57c54:	1009883a 	mov	r4,r2
   57c58:	00406e00 	call	406e0 <__mulsi3>
   57c5c:	8085883a 	add	r2,r16,r2
   57c60:	10800104 	addi	r2,r2,4
   57c64:	10c00017 	ldw	r3,0(r2)
   57c68:	e0bffb17 	ldw	r2,-20(fp)
   57c6c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   57c70:	040001b4 	movhi	r16,6
   57c74:	84263304 	addi	r16,r16,-26420
   57c78:	e0bffa17 	ldw	r2,-24(fp)
   57c7c:	01400304 	movi	r5,12
   57c80:	1009883a 	mov	r4,r2
   57c84:	00406e00 	call	406e0 <__mulsi3>
   57c88:	8085883a 	add	r2,r16,r2
   57c8c:	10800204 	addi	r2,r2,8
   57c90:	10c00017 	ldw	r3,0(r2)
   57c94:	e0bffb17 	ldw	r2,-20(fp)
   57c98:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   57c9c:	e13ffa17 	ldw	r4,-24(fp)
   57ca0:	004dc680 	call	4dc68 <alt_release_fd>
  }
} 
   57ca4:	0001883a 	nop
   57ca8:	e6ffff04 	addi	sp,fp,-4
   57cac:	dfc00217 	ldw	ra,8(sp)
   57cb0:	df000117 	ldw	fp,4(sp)
   57cb4:	dc000017 	ldw	r16,0(sp)
   57cb8:	dec00304 	addi	sp,sp,12
   57cbc:	f800283a 	ret

00057cc0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   57cc0:	defffb04 	addi	sp,sp,-20
   57cc4:	dfc00415 	stw	ra,16(sp)
   57cc8:	df000315 	stw	fp,12(sp)
   57ccc:	df000304 	addi	fp,sp,12
   57cd0:	e13ffd15 	stw	r4,-12(fp)
   57cd4:	e17ffe15 	stw	r5,-8(fp)
   57cd8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   57cdc:	01c07fc4 	movi	r7,511
   57ce0:	01800044 	movi	r6,1
   57ce4:	e17ffd17 	ldw	r5,-12(fp)
   57ce8:	010001b4 	movhi	r4,6
   57cec:	21263604 	addi	r4,r4,-26408
   57cf0:	0057bdc0 	call	57bdc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   57cf4:	01c07fc4 	movi	r7,511
   57cf8:	000d883a 	mov	r6,zero
   57cfc:	e17ffe17 	ldw	r5,-8(fp)
   57d00:	010001b4 	movhi	r4,6
   57d04:	21263304 	addi	r4,r4,-26420
   57d08:	0057bdc0 	call	57bdc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   57d0c:	01c07fc4 	movi	r7,511
   57d10:	01800044 	movi	r6,1
   57d14:	e17fff17 	ldw	r5,-4(fp)
   57d18:	010001b4 	movhi	r4,6
   57d1c:	21263904 	addi	r4,r4,-26396
   57d20:	0057bdc0 	call	57bdc <alt_open_fd>
}  
   57d24:	0001883a 	nop
   57d28:	e037883a 	mov	sp,fp
   57d2c:	dfc00117 	ldw	ra,4(sp)
   57d30:	df000017 	ldw	fp,0(sp)
   57d34:	dec00204 	addi	sp,sp,8
   57d38:	f800283a 	ret

00057d3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   57d3c:	defffe04 	addi	sp,sp,-8
   57d40:	dfc00115 	stw	ra,4(sp)
   57d44:	df000015 	stw	fp,0(sp)
   57d48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   57d4c:	d0a00b17 	ldw	r2,-32724(gp)
   57d50:	10000326 	beq	r2,zero,57d60 <alt_get_errno+0x24>
   57d54:	d0a00b17 	ldw	r2,-32724(gp)
   57d58:	103ee83a 	callr	r2
   57d5c:	00000106 	br	57d64 <alt_get_errno+0x28>
   57d60:	d0a71404 	addi	r2,gp,-25520
}
   57d64:	e037883a 	mov	sp,fp
   57d68:	dfc00117 	ldw	ra,4(sp)
   57d6c:	df000017 	ldw	fp,0(sp)
   57d70:	dec00204 	addi	sp,sp,8
   57d74:	f800283a 	ret

00057d78 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   57d78:	defffb04 	addi	sp,sp,-20
   57d7c:	dfc00415 	stw	ra,16(sp)
   57d80:	df000315 	stw	fp,12(sp)
   57d84:	dc000215 	stw	r16,8(sp)
   57d88:	df000304 	addi	fp,sp,12
   57d8c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   57d90:	e0bffe17 	ldw	r2,-8(fp)
   57d94:	10800217 	ldw	r2,8(r2)
   57d98:	10d00034 	orhi	r3,r2,16384
   57d9c:	e0bffe17 	ldw	r2,-8(fp)
   57da0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   57da4:	e03ffd15 	stw	zero,-12(fp)
   57da8:	00002306 	br	57e38 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   57dac:	040001b4 	movhi	r16,6
   57db0:	84263304 	addi	r16,r16,-26420
   57db4:	e0bffd17 	ldw	r2,-12(fp)
   57db8:	01400304 	movi	r5,12
   57dbc:	1009883a 	mov	r4,r2
   57dc0:	00406e00 	call	406e0 <__mulsi3>
   57dc4:	8085883a 	add	r2,r16,r2
   57dc8:	10c00017 	ldw	r3,0(r2)
   57dcc:	e0bffe17 	ldw	r2,-8(fp)
   57dd0:	10800017 	ldw	r2,0(r2)
   57dd4:	1880151e 	bne	r3,r2,57e2c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   57dd8:	040001b4 	movhi	r16,6
   57ddc:	84263304 	addi	r16,r16,-26420
   57de0:	e0bffd17 	ldw	r2,-12(fp)
   57de4:	01400304 	movi	r5,12
   57de8:	1009883a 	mov	r4,r2
   57dec:	00406e00 	call	406e0 <__mulsi3>
   57df0:	8085883a 	add	r2,r16,r2
   57df4:	10800204 	addi	r2,r2,8
   57df8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   57dfc:	10000b0e 	bge	r2,zero,57e2c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   57e00:	01400304 	movi	r5,12
   57e04:	e13ffd17 	ldw	r4,-12(fp)
   57e08:	00406e00 	call	406e0 <__mulsi3>
   57e0c:	1007883a 	mov	r3,r2
   57e10:	008001b4 	movhi	r2,6
   57e14:	10a63304 	addi	r2,r2,-26420
   57e18:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   57e1c:	e0bffe17 	ldw	r2,-8(fp)
   57e20:	18800226 	beq	r3,r2,57e2c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   57e24:	00bffcc4 	movi	r2,-13
   57e28:	00000806 	br	57e4c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   57e2c:	e0bffd17 	ldw	r2,-12(fp)
   57e30:	10800044 	addi	r2,r2,1
   57e34:	e0bffd15 	stw	r2,-12(fp)
   57e38:	d0a00a17 	ldw	r2,-32728(gp)
   57e3c:	1007883a 	mov	r3,r2
   57e40:	e0bffd17 	ldw	r2,-12(fp)
   57e44:	18bfd92e 	bgeu	r3,r2,57dac <__alt_data_end+0xffff25ac>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   57e48:	0005883a 	mov	r2,zero
}
   57e4c:	e6ffff04 	addi	sp,fp,-4
   57e50:	dfc00217 	ldw	ra,8(sp)
   57e54:	df000117 	ldw	fp,4(sp)
   57e58:	dc000017 	ldw	r16,0(sp)
   57e5c:	dec00304 	addi	sp,sp,12
   57e60:	f800283a 	ret

00057e64 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   57e64:	defff604 	addi	sp,sp,-40
   57e68:	dfc00915 	stw	ra,36(sp)
   57e6c:	df000815 	stw	fp,32(sp)
   57e70:	df000804 	addi	fp,sp,32
   57e74:	e13ffd15 	stw	r4,-12(fp)
   57e78:	e17ffe15 	stw	r5,-8(fp)
   57e7c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   57e80:	00bfffc4 	movi	r2,-1
   57e84:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   57e88:	00bffb44 	movi	r2,-19
   57e8c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   57e90:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   57e94:	d1600804 	addi	r5,gp,-32736
   57e98:	e13ffd17 	ldw	r4,-12(fp)
   57e9c:	00584bc0 	call	584bc <alt_find_dev>
   57ea0:	e0bff815 	stw	r2,-32(fp)
   57ea4:	e0bff817 	ldw	r2,-32(fp)
   57ea8:	1000051e 	bne	r2,zero,57ec0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   57eac:	e13ffd17 	ldw	r4,-12(fp)
   57eb0:	005854c0 	call	5854c <alt_find_file>
   57eb4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   57eb8:	00800044 	movi	r2,1
   57ebc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   57ec0:	e0bff817 	ldw	r2,-32(fp)
   57ec4:	10002b26 	beq	r2,zero,57f74 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   57ec8:	e13ff817 	ldw	r4,-32(fp)
   57ecc:	00586540 	call	58654 <alt_get_fd>
   57ed0:	e0bff915 	stw	r2,-28(fp)
   57ed4:	e0bff917 	ldw	r2,-28(fp)
   57ed8:	1000030e 	bge	r2,zero,57ee8 <open+0x84>
    {
      status = index;
   57edc:	e0bff917 	ldw	r2,-28(fp)
   57ee0:	e0bffa15 	stw	r2,-24(fp)
   57ee4:	00002506 	br	57f7c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   57ee8:	01400304 	movi	r5,12
   57eec:	e13ff917 	ldw	r4,-28(fp)
   57ef0:	00406e00 	call	406e0 <__mulsi3>
   57ef4:	1007883a 	mov	r3,r2
   57ef8:	008001b4 	movhi	r2,6
   57efc:	10a63304 	addi	r2,r2,-26420
   57f00:	1885883a 	add	r2,r3,r2
   57f04:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   57f08:	e0fffe17 	ldw	r3,-8(fp)
   57f0c:	00900034 	movhi	r2,16384
   57f10:	10bfffc4 	addi	r2,r2,-1
   57f14:	1886703a 	and	r3,r3,r2
   57f18:	e0bffc17 	ldw	r2,-16(fp)
   57f1c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   57f20:	e0bffb17 	ldw	r2,-20(fp)
   57f24:	1000051e 	bne	r2,zero,57f3c <open+0xd8>
   57f28:	e13ffc17 	ldw	r4,-16(fp)
   57f2c:	0057d780 	call	57d78 <alt_file_locked>
   57f30:	e0bffa15 	stw	r2,-24(fp)
   57f34:	e0bffa17 	ldw	r2,-24(fp)
   57f38:	10001016 	blt	r2,zero,57f7c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   57f3c:	e0bff817 	ldw	r2,-32(fp)
   57f40:	10800317 	ldw	r2,12(r2)
   57f44:	10000826 	beq	r2,zero,57f68 <open+0x104>
   57f48:	e0bff817 	ldw	r2,-32(fp)
   57f4c:	10800317 	ldw	r2,12(r2)
   57f50:	e1ffff17 	ldw	r7,-4(fp)
   57f54:	e1bffe17 	ldw	r6,-8(fp)
   57f58:	e17ffd17 	ldw	r5,-12(fp)
   57f5c:	e13ffc17 	ldw	r4,-16(fp)
   57f60:	103ee83a 	callr	r2
   57f64:	00000106 	br	57f6c <open+0x108>
   57f68:	0005883a 	mov	r2,zero
   57f6c:	e0bffa15 	stw	r2,-24(fp)
   57f70:	00000206 	br	57f7c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   57f74:	00bffb44 	movi	r2,-19
   57f78:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   57f7c:	e0bffa17 	ldw	r2,-24(fp)
   57f80:	1000090e 	bge	r2,zero,57fa8 <open+0x144>
  {
    alt_release_fd (index);  
   57f84:	e13ff917 	ldw	r4,-28(fp)
   57f88:	004dc680 	call	4dc68 <alt_release_fd>
    ALT_ERRNO = -status;
   57f8c:	0057d3c0 	call	57d3c <alt_get_errno>
   57f90:	1007883a 	mov	r3,r2
   57f94:	e0bffa17 	ldw	r2,-24(fp)
   57f98:	0085c83a 	sub	r2,zero,r2
   57f9c:	18800015 	stw	r2,0(r3)
    return -1;
   57fa0:	00bfffc4 	movi	r2,-1
   57fa4:	00000106 	br	57fac <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   57fa8:	e0bff917 	ldw	r2,-28(fp)
}
   57fac:	e037883a 	mov	sp,fp
   57fb0:	dfc00117 	ldw	ra,4(sp)
   57fb4:	df000017 	ldw	fp,0(sp)
   57fb8:	dec00204 	addi	sp,sp,8
   57fbc:	f800283a 	ret

00057fc0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   57fc0:	defffa04 	addi	sp,sp,-24
   57fc4:	df000515 	stw	fp,20(sp)
   57fc8:	df000504 	addi	fp,sp,20
   57fcc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   57fd0:	0005303a 	rdctl	r2,status
   57fd4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   57fd8:	e0fffc17 	ldw	r3,-16(fp)
   57fdc:	00bfff84 	movi	r2,-2
   57fe0:	1884703a 	and	r2,r3,r2
   57fe4:	1001703a 	wrctl	status,r2
  
  return context;
   57fe8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   57fec:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   57ff0:	e0bfff17 	ldw	r2,-4(fp)
   57ff4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   57ff8:	e0bffd17 	ldw	r2,-12(fp)
   57ffc:	10800017 	ldw	r2,0(r2)
   58000:	e0fffd17 	ldw	r3,-12(fp)
   58004:	18c00117 	ldw	r3,4(r3)
   58008:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   5800c:	e0bffd17 	ldw	r2,-12(fp)
   58010:	10800117 	ldw	r2,4(r2)
   58014:	e0fffd17 	ldw	r3,-12(fp)
   58018:	18c00017 	ldw	r3,0(r3)
   5801c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   58020:	e0bffd17 	ldw	r2,-12(fp)
   58024:	e0fffd17 	ldw	r3,-12(fp)
   58028:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   5802c:	e0bffd17 	ldw	r2,-12(fp)
   58030:	e0fffd17 	ldw	r3,-12(fp)
   58034:	10c00015 	stw	r3,0(r2)
   58038:	e0bffb17 	ldw	r2,-20(fp)
   5803c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   58040:	e0bffe17 	ldw	r2,-8(fp)
   58044:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   58048:	0001883a 	nop
   5804c:	e037883a 	mov	sp,fp
   58050:	df000017 	ldw	fp,0(sp)
   58054:	dec00104 	addi	sp,sp,4
   58058:	f800283a 	ret

0005805c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   5805c:	defffb04 	addi	sp,sp,-20
   58060:	dfc00415 	stw	ra,16(sp)
   58064:	df000315 	stw	fp,12(sp)
   58068:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   5806c:	d0a02d17 	ldw	r2,-32588(gp)
   58070:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   58074:	d0a73317 	ldw	r2,-25396(gp)
   58078:	10800044 	addi	r2,r2,1
   5807c:	d0a73315 	stw	r2,-25396(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   58080:	00002e06 	br	5813c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   58084:	e0bffd17 	ldw	r2,-12(fp)
   58088:	10800017 	ldw	r2,0(r2)
   5808c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   58090:	e0bffd17 	ldw	r2,-12(fp)
   58094:	10800403 	ldbu	r2,16(r2)
   58098:	10803fcc 	andi	r2,r2,255
   5809c:	10000426 	beq	r2,zero,580b0 <alt_tick+0x54>
   580a0:	d0a73317 	ldw	r2,-25396(gp)
   580a4:	1000021e 	bne	r2,zero,580b0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   580a8:	e0bffd17 	ldw	r2,-12(fp)
   580ac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   580b0:	e0bffd17 	ldw	r2,-12(fp)
   580b4:	10800217 	ldw	r2,8(r2)
   580b8:	d0e73317 	ldw	r3,-25396(gp)
   580bc:	18801d36 	bltu	r3,r2,58134 <alt_tick+0xd8>
   580c0:	e0bffd17 	ldw	r2,-12(fp)
   580c4:	10800403 	ldbu	r2,16(r2)
   580c8:	10803fcc 	andi	r2,r2,255
   580cc:	1000191e 	bne	r2,zero,58134 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   580d0:	e0bffd17 	ldw	r2,-12(fp)
   580d4:	10800317 	ldw	r2,12(r2)
   580d8:	e0fffd17 	ldw	r3,-12(fp)
   580dc:	18c00517 	ldw	r3,20(r3)
   580e0:	1809883a 	mov	r4,r3
   580e4:	103ee83a 	callr	r2
   580e8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   580ec:	e0bfff17 	ldw	r2,-4(fp)
   580f0:	1000031e 	bne	r2,zero,58100 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   580f4:	e13ffd17 	ldw	r4,-12(fp)
   580f8:	0057fc00 	call	57fc0 <alt_alarm_stop>
   580fc:	00000d06 	br	58134 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   58100:	e0bffd17 	ldw	r2,-12(fp)
   58104:	10c00217 	ldw	r3,8(r2)
   58108:	e0bfff17 	ldw	r2,-4(fp)
   5810c:	1887883a 	add	r3,r3,r2
   58110:	e0bffd17 	ldw	r2,-12(fp)
   58114:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   58118:	e0bffd17 	ldw	r2,-12(fp)
   5811c:	10c00217 	ldw	r3,8(r2)
   58120:	d0a73317 	ldw	r2,-25396(gp)
   58124:	1880032e 	bgeu	r3,r2,58134 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   58128:	e0bffd17 	ldw	r2,-12(fp)
   5812c:	00c00044 	movi	r3,1
   58130:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   58134:	e0bffe17 	ldw	r2,-8(fp)
   58138:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   5813c:	e0fffd17 	ldw	r3,-12(fp)
   58140:	d0a02d04 	addi	r2,gp,-32588
   58144:	18bfcf1e 	bne	r3,r2,58084 <__alt_data_end+0xffff2884>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   58148:	004eea00 	call	4eea0 <OSTimeTick>
}
   5814c:	0001883a 	nop
   58150:	e037883a 	mov	sp,fp
   58154:	dfc00117 	ldw	ra,4(sp)
   58158:	df000017 	ldw	fp,0(sp)
   5815c:	dec00204 	addi	sp,sp,8
   58160:	f800283a 	ret

00058164 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   58164:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   58168:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   5816c:	d1272c17 	ldw	r4,-25424(gp)

      stw ra,  0(sp)
   58170:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   58174:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   58178:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   5817c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   58180:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   58184:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   58188:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   5818c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   58190:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   58194:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   58198:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   5819c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   581a0:	00583d80 	call	583d8 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   581a4:	d1272717 	ldw	r4,-25444(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   581a8:	d1671f07 	ldb	r5,-25476(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   581ac:	d1272c15 	stw	r4,-25424(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   581b0:	d1671f45 	stb	r5,-25475(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   581b4:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   581b8:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   581bc:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   581c0:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   581c4:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   581c8:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   581cc:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   581d0:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   581d4:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   581d8:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   581dc:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   581e0:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   581e4:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   581e8:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   581ec:	f800283a 	ret

000581f0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   581f0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   581f4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   581f8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   581fc:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   58200:	00583d80 	call	583d8 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   58204:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   58208:	d4a71d45 	stb	r18,-25483(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   5820c:	003fe506 	br	581a4 <__alt_data_end+0xffff29a4>

00058210 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   58210:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   58214:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   58218:	10800054 	ori	r2,r2,1
      wrctl status, r2
   5821c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   58220:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   58224:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   58228:	dec00204 	addi	sp,sp,8

      callr r2
   5822c:	103ee83a 	callr	r2

      nop
   58230:	0001883a 	nop

00058234 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   58234:	defff704 	addi	sp,sp,-36
   58238:	dfc00815 	stw	ra,32(sp)
   5823c:	df000715 	stw	fp,28(sp)
   58240:	df000704 	addi	fp,sp,28
   58244:	e13ffc15 	stw	r4,-16(fp)
   58248:	e17ffd15 	stw	r5,-12(fp)
   5824c:	e1bffe15 	stw	r6,-8(fp)
   58250:	3805883a 	mov	r2,r7
   58254:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   58258:	e0fffe17 	ldw	r3,-8(fp)
   5825c:	00bfff04 	movi	r2,-4
   58260:	1884703a 	and	r2,r3,r2
   58264:	10bef704 	addi	r2,r2,-1060
   58268:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   5826c:	01810904 	movi	r6,1060
   58270:	000b883a 	mov	r5,zero
   58274:	e13ff917 	ldw	r4,-28(fp)
   58278:	0045e100 	call	45e10 <memset>
   5827c:	e0bff917 	ldw	r2,-28(fp)
   58280:	10c0bb04 	addi	r3,r2,748
   58284:	e0bff917 	ldw	r2,-28(fp)
   58288:	10c00115 	stw	r3,4(r2)
   5828c:	e0bff917 	ldw	r2,-28(fp)
   58290:	10c0d504 	addi	r3,r2,852
   58294:	e0bff917 	ldw	r2,-28(fp)
   58298:	10c00215 	stw	r3,8(r2)
   5829c:	e0bff917 	ldw	r2,-28(fp)
   582a0:	10c0ef04 	addi	r3,r2,956
   582a4:	e0bff917 	ldw	r2,-28(fp)
   582a8:	10c00315 	stw	r3,12(r2)
   582ac:	e0fff917 	ldw	r3,-28(fp)
   582b0:	008001b4 	movhi	r2,6
   582b4:	10a3ff04 	addi	r2,r2,-28676
   582b8:	18800d15 	stw	r2,52(r3)
   582bc:	e0bff917 	ldw	r2,-28(fp)
   582c0:	00c00044 	movi	r3,1
   582c4:	10c02915 	stw	r3,164(r2)
   582c8:	10002a15 	stw	zero,168(r2)
   582cc:	e0bff917 	ldw	r2,-28(fp)
   582d0:	00ccc384 	movi	r3,13070
   582d4:	10c02b0d 	sth	r3,172(r2)
   582d8:	e0bff917 	ldw	r2,-28(fp)
   582dc:	00eaf344 	movi	r3,-21555
   582e0:	10c02b8d 	sth	r3,174(r2)
   582e4:	e0bff917 	ldw	r2,-28(fp)
   582e8:	00c48d04 	movi	r3,4660
   582ec:	10c02c0d 	sth	r3,176(r2)
   582f0:	e0bff917 	ldw	r2,-28(fp)
   582f4:	00f99b44 	movi	r3,-6547
   582f8:	10c02c8d 	sth	r3,178(r2)
   582fc:	e0bff917 	ldw	r2,-28(fp)
   58300:	00f7bb04 	movi	r3,-8468
   58304:	10c02d0d 	sth	r3,180(r2)
   58308:	e0bff917 	ldw	r2,-28(fp)
   5830c:	00c00144 	movi	r3,5
   58310:	10c02d8d 	sth	r3,182(r2)
   58314:	e0bff917 	ldw	r2,-28(fp)
   58318:	00c002c4 	movi	r3,11
   5831c:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   58320:	e0bff917 	ldw	r2,-28(fp)
   58324:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   58328:	e0bffa17 	ldw	r2,-24(fp)
   5832c:	10bff304 	addi	r2,r2,-52
   58330:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   58334:	e0bffb17 	ldw	r2,-20(fp)
   58338:	10800c04 	addi	r2,r2,48
   5833c:	e0fffc17 	ldw	r3,-16(fp)
   58340:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   58344:	e0bffb17 	ldw	r2,-20(fp)
   58348:	10800b04 	addi	r2,r2,44
   5834c:	e0fffd17 	ldw	r3,-12(fp)
   58350:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   58354:	e0bffb17 	ldw	r2,-20(fp)
   58358:	10800a04 	addi	r2,r2,40
   5835c:	e0fff917 	ldw	r3,-28(fp)
   58360:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   58364:	008001b4 	movhi	r2,6
   58368:	10a08404 	addi	r2,r2,-32240
   5836c:	10c00104 	addi	r3,r2,4
   58370:	e0bffb17 	ldw	r2,-20(fp)
   58374:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   58378:	e0bffb17 	ldw	r2,-20(fp)
}
   5837c:	e037883a 	mov	sp,fp
   58380:	dfc00117 	ldw	ra,4(sp)
   58384:	df000017 	ldw	fp,0(sp)
   58388:	dec00204 	addi	sp,sp,8
   5838c:	f800283a 	ret

00058390 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   58390:	defffe04 	addi	sp,sp,-8
   58394:	df000115 	stw	fp,4(sp)
   58398:	df000104 	addi	fp,sp,4
   5839c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   583a0:	0001883a 	nop
   583a4:	e037883a 	mov	sp,fp
   583a8:	df000017 	ldw	fp,0(sp)
   583ac:	dec00104 	addi	sp,sp,4
   583b0:	f800283a 	ret

000583b4 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   583b4:	defffe04 	addi	sp,sp,-8
   583b8:	df000115 	stw	fp,4(sp)
   583bc:	df000104 	addi	fp,sp,4
   583c0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   583c4:	0001883a 	nop
   583c8:	e037883a 	mov	sp,fp
   583cc:	df000017 	ldw	fp,0(sp)
   583d0:	dec00104 	addi	sp,sp,4
   583d4:	f800283a 	ret

000583d8 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   583d8:	deffff04 	addi	sp,sp,-4
   583dc:	df000015 	stw	fp,0(sp)
   583e0:	d839883a 	mov	fp,sp
}
   583e4:	0001883a 	nop
   583e8:	e037883a 	mov	sp,fp
   583ec:	df000017 	ldw	fp,0(sp)
   583f0:	dec00104 	addi	sp,sp,4
   583f4:	f800283a 	ret

000583f8 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   583f8:	deffff04 	addi	sp,sp,-4
   583fc:	df000015 	stw	fp,0(sp)
   58400:	d839883a 	mov	fp,sp
}
   58404:	0001883a 	nop
   58408:	e037883a 	mov	sp,fp
   5840c:	df000017 	ldw	fp,0(sp)
   58410:	dec00104 	addi	sp,sp,4
   58414:	f800283a 	ret

00058418 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   58418:	deffff04 	addi	sp,sp,-4
   5841c:	df000015 	stw	fp,0(sp)
   58420:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   58424:	0001883a 	nop
   58428:	e037883a 	mov	sp,fp
   5842c:	df000017 	ldw	fp,0(sp)
   58430:	dec00104 	addi	sp,sp,4
   58434:	f800283a 	ret

00058438 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   58438:	deffff04 	addi	sp,sp,-4
   5843c:	df000015 	stw	fp,0(sp)
   58440:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   58444:	0001883a 	nop
   58448:	e037883a 	mov	sp,fp
   5844c:	df000017 	ldw	fp,0(sp)
   58450:	dec00104 	addi	sp,sp,4
   58454:	f800283a 	ret

00058458 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   58458:	deffff04 	addi	sp,sp,-4
   5845c:	df000015 	stw	fp,0(sp)
   58460:	d839883a 	mov	fp,sp
}
   58464:	0001883a 	nop
   58468:	e037883a 	mov	sp,fp
   5846c:	df000017 	ldw	fp,0(sp)
   58470:	dec00104 	addi	sp,sp,4
   58474:	f800283a 	ret

00058478 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   58478:	deffff04 	addi	sp,sp,-4
   5847c:	df000015 	stw	fp,0(sp)
   58480:	d839883a 	mov	fp,sp
}
   58484:	0001883a 	nop
   58488:	e037883a 	mov	sp,fp
   5848c:	df000017 	ldw	fp,0(sp)
   58490:	dec00104 	addi	sp,sp,4
   58494:	f800283a 	ret

00058498 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   58498:	defffe04 	addi	sp,sp,-8
   5849c:	df000115 	stw	fp,4(sp)
   584a0:	df000104 	addi	fp,sp,4
   584a4:	e13fff15 	stw	r4,-4(fp)
}
   584a8:	0001883a 	nop
   584ac:	e037883a 	mov	sp,fp
   584b0:	df000017 	ldw	fp,0(sp)
   584b4:	dec00104 	addi	sp,sp,4
   584b8:	f800283a 	ret

000584bc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   584bc:	defffa04 	addi	sp,sp,-24
   584c0:	dfc00515 	stw	ra,20(sp)
   584c4:	df000415 	stw	fp,16(sp)
   584c8:	df000404 	addi	fp,sp,16
   584cc:	e13ffe15 	stw	r4,-8(fp)
   584d0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   584d4:	e0bfff17 	ldw	r2,-4(fp)
   584d8:	10800017 	ldw	r2,0(r2)
   584dc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   584e0:	e13ffe17 	ldw	r4,-8(fp)
   584e4:	00472d00 	call	472d0 <strlen>
   584e8:	10800044 	addi	r2,r2,1
   584ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   584f0:	00000d06 	br	58528 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   584f4:	e0bffc17 	ldw	r2,-16(fp)
   584f8:	10800217 	ldw	r2,8(r2)
   584fc:	e0fffd17 	ldw	r3,-12(fp)
   58500:	180d883a 	mov	r6,r3
   58504:	e17ffe17 	ldw	r5,-8(fp)
   58508:	1009883a 	mov	r4,r2
   5850c:	00588300 	call	58830 <memcmp>
   58510:	1000021e 	bne	r2,zero,5851c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   58514:	e0bffc17 	ldw	r2,-16(fp)
   58518:	00000706 	br	58538 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   5851c:	e0bffc17 	ldw	r2,-16(fp)
   58520:	10800017 	ldw	r2,0(r2)
   58524:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   58528:	e0fffc17 	ldw	r3,-16(fp)
   5852c:	e0bfff17 	ldw	r2,-4(fp)
   58530:	18bff01e 	bne	r3,r2,584f4 <__alt_data_end+0xffff2cf4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   58534:	0005883a 	mov	r2,zero
}
   58538:	e037883a 	mov	sp,fp
   5853c:	dfc00117 	ldw	ra,4(sp)
   58540:	df000017 	ldw	fp,0(sp)
   58544:	dec00204 	addi	sp,sp,8
   58548:	f800283a 	ret

0005854c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   5854c:	defffb04 	addi	sp,sp,-20
   58550:	dfc00415 	stw	ra,16(sp)
   58554:	df000315 	stw	fp,12(sp)
   58558:	df000304 	addi	fp,sp,12
   5855c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   58560:	d0a00617 	ldw	r2,-32744(gp)
   58564:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   58568:	00003106 	br	58630 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   5856c:	e0bffd17 	ldw	r2,-12(fp)
   58570:	10800217 	ldw	r2,8(r2)
   58574:	1009883a 	mov	r4,r2
   58578:	00472d00 	call	472d0 <strlen>
   5857c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   58580:	e0bffd17 	ldw	r2,-12(fp)
   58584:	10c00217 	ldw	r3,8(r2)
   58588:	e0bffe17 	ldw	r2,-8(fp)
   5858c:	10bfffc4 	addi	r2,r2,-1
   58590:	1885883a 	add	r2,r3,r2
   58594:	10800003 	ldbu	r2,0(r2)
   58598:	10803fcc 	andi	r2,r2,255
   5859c:	1080201c 	xori	r2,r2,128
   585a0:	10bfe004 	addi	r2,r2,-128
   585a4:	10800bd8 	cmpnei	r2,r2,47
   585a8:	1000031e 	bne	r2,zero,585b8 <alt_find_file+0x6c>
    {
      len -= 1;
   585ac:	e0bffe17 	ldw	r2,-8(fp)
   585b0:	10bfffc4 	addi	r2,r2,-1
   585b4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   585b8:	e0bffe17 	ldw	r2,-8(fp)
   585bc:	e0ffff17 	ldw	r3,-4(fp)
   585c0:	1885883a 	add	r2,r3,r2
   585c4:	10800003 	ldbu	r2,0(r2)
   585c8:	10803fcc 	andi	r2,r2,255
   585cc:	1080201c 	xori	r2,r2,128
   585d0:	10bfe004 	addi	r2,r2,-128
   585d4:	10800be0 	cmpeqi	r2,r2,47
   585d8:	1000081e 	bne	r2,zero,585fc <alt_find_file+0xb0>
   585dc:	e0bffe17 	ldw	r2,-8(fp)
   585e0:	e0ffff17 	ldw	r3,-4(fp)
   585e4:	1885883a 	add	r2,r3,r2
   585e8:	10800003 	ldbu	r2,0(r2)
   585ec:	10803fcc 	andi	r2,r2,255
   585f0:	1080201c 	xori	r2,r2,128
   585f4:	10bfe004 	addi	r2,r2,-128
   585f8:	10000a1e 	bne	r2,zero,58624 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   585fc:	e0bffd17 	ldw	r2,-12(fp)
   58600:	10800217 	ldw	r2,8(r2)
   58604:	e0fffe17 	ldw	r3,-8(fp)
   58608:	180d883a 	mov	r6,r3
   5860c:	e17fff17 	ldw	r5,-4(fp)
   58610:	1009883a 	mov	r4,r2
   58614:	00588300 	call	58830 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   58618:	1000021e 	bne	r2,zero,58624 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   5861c:	e0bffd17 	ldw	r2,-12(fp)
   58620:	00000706 	br	58640 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   58624:	e0bffd17 	ldw	r2,-12(fp)
   58628:	10800017 	ldw	r2,0(r2)
   5862c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   58630:	e0fffd17 	ldw	r3,-12(fp)
   58634:	d0a00604 	addi	r2,gp,-32744
   58638:	18bfcc1e 	bne	r3,r2,5856c <__alt_data_end+0xffff2d6c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   5863c:	0005883a 	mov	r2,zero
}
   58640:	e037883a 	mov	sp,fp
   58644:	dfc00117 	ldw	ra,4(sp)
   58648:	df000017 	ldw	fp,0(sp)
   5864c:	dec00204 	addi	sp,sp,8
   58650:	f800283a 	ret

00058654 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   58654:	defff804 	addi	sp,sp,-32
   58658:	dfc00715 	stw	ra,28(sp)
   5865c:	df000615 	stw	fp,24(sp)
   58660:	dc000515 	stw	r16,20(sp)
   58664:	df000604 	addi	fp,sp,24
   58668:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   5866c:	00bffa04 	movi	r2,-24
   58670:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   58674:	d0a71517 	ldw	r2,-25516(gp)
   58678:	e0bffc15 	stw	r2,-16(fp)
   5867c:	e03ffd0d 	sth	zero,-12(fp)
   58680:	e0bffd0b 	ldhu	r2,-12(fp)
   58684:	e0fffd84 	addi	r3,fp,-10
   58688:	180d883a 	mov	r6,r3
   5868c:	100b883a 	mov	r5,r2
   58690:	e13ffc17 	ldw	r4,-16(fp)
   58694:	00541b80 	call	541b8 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   58698:	e03ffa15 	stw	zero,-24(fp)
   5869c:	00001d06 	br	58714 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
   586a0:	040001b4 	movhi	r16,6
   586a4:	84263304 	addi	r16,r16,-26420
   586a8:	e0bffa17 	ldw	r2,-24(fp)
   586ac:	01400304 	movi	r5,12
   586b0:	1009883a 	mov	r4,r2
   586b4:	00406e00 	call	406e0 <__mulsi3>
   586b8:	8085883a 	add	r2,r16,r2
   586bc:	10800017 	ldw	r2,0(r2)
   586c0:	1000111e 	bne	r2,zero,58708 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
   586c4:	040001b4 	movhi	r16,6
   586c8:	84263304 	addi	r16,r16,-26420
   586cc:	e0bffa17 	ldw	r2,-24(fp)
   586d0:	01400304 	movi	r5,12
   586d4:	1009883a 	mov	r4,r2
   586d8:	00406e00 	call	406e0 <__mulsi3>
   586dc:	8085883a 	add	r2,r16,r2
   586e0:	e0fffe17 	ldw	r3,-8(fp)
   586e4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   586e8:	d0e00a17 	ldw	r3,-32728(gp)
   586ec:	e0bffa17 	ldw	r2,-24(fp)
   586f0:	1880020e 	bge	r3,r2,586fc <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
   586f4:	e0bffa17 	ldw	r2,-24(fp)
   586f8:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   586fc:	e0bffa17 	ldw	r2,-24(fp)
   58700:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
   58704:	00000606 	br	58720 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   58708:	e0bffa17 	ldw	r2,-24(fp)
   5870c:	10800044 	addi	r2,r2,1
   58710:	e0bffa15 	stw	r2,-24(fp)
   58714:	e0bffa17 	ldw	r2,-24(fp)
   58718:	10800810 	cmplti	r2,r2,32
   5871c:	103fe01e 	bne	r2,zero,586a0 <__alt_data_end+0xffff2ea0>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   58720:	d0a71517 	ldw	r2,-25516(gp)
   58724:	1009883a 	mov	r4,r2
   58728:	00545300 	call	54530 <OSSemPost>

  return rc;
   5872c:	e0bffb17 	ldw	r2,-20(fp)
}
   58730:	e6ffff04 	addi	sp,fp,-4
   58734:	dfc00217 	ldw	ra,8(sp)
   58738:	df000117 	ldw	fp,4(sp)
   5873c:	dc000017 	ldw	r16,0(sp)
   58740:	dec00304 	addi	sp,sp,12
   58744:	f800283a 	ret

00058748 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   58748:	defffe04 	addi	sp,sp,-8
   5874c:	df000115 	stw	fp,4(sp)
   58750:	df000104 	addi	fp,sp,4
   58754:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   58758:	e0bfff17 	ldw	r2,-4(fp)
   5875c:	10bffe84 	addi	r2,r2,-6
   58760:	10c00428 	cmpgeui	r3,r2,16
   58764:	18001a1e 	bne	r3,zero,587d0 <alt_exception_cause_generated_bad_addr+0x88>
   58768:	100690ba 	slli	r3,r2,2
   5876c:	008001b4 	movhi	r2,6
   58770:	10a1e004 	addi	r2,r2,-30848
   58774:	1885883a 	add	r2,r3,r2
   58778:	10800017 	ldw	r2,0(r2)
   5877c:	1000683a 	jmp	r2
   58780:	000587c0 	call	587c <OSCtxSw_SWITCH_PC+0x583c>
   58784:	000587c0 	call	587c <OSCtxSw_SWITCH_PC+0x583c>
   58788:	000587d0 	cmplti	zero,zero,5663
   5878c:	000587d0 	cmplti	zero,zero,5663
   58790:	000587d0 	cmplti	zero,zero,5663
   58794:	000587c0 	call	587c <OSCtxSw_SWITCH_PC+0x583c>
   58798:	000587c8 	cmpgei	zero,zero,5663
   5879c:	000587d0 	cmplti	zero,zero,5663
   587a0:	000587c0 	call	587c <OSCtxSw_SWITCH_PC+0x583c>
   587a4:	000587c0 	call	587c <OSCtxSw_SWITCH_PC+0x583c>
   587a8:	000587d0 	cmplti	zero,zero,5663
   587ac:	000587c0 	call	587c <OSCtxSw_SWITCH_PC+0x583c>
   587b0:	000587c8 	cmpgei	zero,zero,5663
   587b4:	000587d0 	cmplti	zero,zero,5663
   587b8:	000587d0 	cmplti	zero,zero,5663
   587bc:	000587c0 	call	587c <OSCtxSw_SWITCH_PC+0x583c>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   587c0:	00800044 	movi	r2,1
   587c4:	00000306 	br	587d4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   587c8:	0005883a 	mov	r2,zero
   587cc:	00000106 	br	587d4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   587d0:	0005883a 	mov	r2,zero
  }
}
   587d4:	e037883a 	mov	sp,fp
   587d8:	df000017 	ldw	fp,0(sp)
   587dc:	dec00104 	addi	sp,sp,4
   587e0:	f800283a 	ret

000587e4 <atexit>:
   587e4:	200b883a 	mov	r5,r4
   587e8:	000f883a 	mov	r7,zero
   587ec:	000d883a 	mov	r6,zero
   587f0:	0009883a 	mov	r4,zero
   587f4:	00588ac1 	jmpi	588ac <__register_exitproc>

000587f8 <exit>:
   587f8:	defffe04 	addi	sp,sp,-8
   587fc:	000b883a 	mov	r5,zero
   58800:	dc000015 	stw	r16,0(sp)
   58804:	dfc00115 	stw	ra,4(sp)
   58808:	2021883a 	mov	r16,r4
   5880c:	00589c40 	call	589c4 <__call_exitprocs>
   58810:	008001b4 	movhi	r2,6
   58814:	10aaae04 	addi	r2,r2,-21832
   58818:	11000017 	ldw	r4,0(r2)
   5881c:	20800f17 	ldw	r2,60(r4)
   58820:	10000126 	beq	r2,zero,58828 <exit+0x30>
   58824:	103ee83a 	callr	r2
   58828:	8009883a 	mov	r4,r16
   5882c:	0058b440 	call	58b44 <_exit>

00058830 <memcmp>:
   58830:	01c000c4 	movi	r7,3
   58834:	3980192e 	bgeu	r7,r6,5889c <memcmp+0x6c>
   58838:	2144b03a 	or	r2,r4,r5
   5883c:	11c4703a 	and	r2,r2,r7
   58840:	10000f26 	beq	r2,zero,58880 <memcmp+0x50>
   58844:	20800003 	ldbu	r2,0(r4)
   58848:	28c00003 	ldbu	r3,0(r5)
   5884c:	10c0151e 	bne	r2,r3,588a4 <memcmp+0x74>
   58850:	31bfff84 	addi	r6,r6,-2
   58854:	01ffffc4 	movi	r7,-1
   58858:	00000406 	br	5886c <memcmp+0x3c>
   5885c:	20800003 	ldbu	r2,0(r4)
   58860:	28c00003 	ldbu	r3,0(r5)
   58864:	31bfffc4 	addi	r6,r6,-1
   58868:	10c00e1e 	bne	r2,r3,588a4 <memcmp+0x74>
   5886c:	21000044 	addi	r4,r4,1
   58870:	29400044 	addi	r5,r5,1
   58874:	31fff91e 	bne	r6,r7,5885c <__alt_data_end+0xffff305c>
   58878:	0005883a 	mov	r2,zero
   5887c:	f800283a 	ret
   58880:	20c00017 	ldw	r3,0(r4)
   58884:	28800017 	ldw	r2,0(r5)
   58888:	18bfee1e 	bne	r3,r2,58844 <__alt_data_end+0xffff3044>
   5888c:	31bfff04 	addi	r6,r6,-4
   58890:	21000104 	addi	r4,r4,4
   58894:	29400104 	addi	r5,r5,4
   58898:	39bff936 	bltu	r7,r6,58880 <__alt_data_end+0xffff3080>
   5889c:	303fe91e 	bne	r6,zero,58844 <__alt_data_end+0xffff3044>
   588a0:	003ff506 	br	58878 <__alt_data_end+0xffff3078>
   588a4:	10c5c83a 	sub	r2,r2,r3
   588a8:	f800283a 	ret

000588ac <__register_exitproc>:
   588ac:	defffa04 	addi	sp,sp,-24
   588b0:	dc000315 	stw	r16,12(sp)
   588b4:	040001b4 	movhi	r16,6
   588b8:	842aae04 	addi	r16,r16,-21832
   588bc:	80c00017 	ldw	r3,0(r16)
   588c0:	dc400415 	stw	r17,16(sp)
   588c4:	dfc00515 	stw	ra,20(sp)
   588c8:	18805217 	ldw	r2,328(r3)
   588cc:	2023883a 	mov	r17,r4
   588d0:	10003726 	beq	r2,zero,589b0 <__register_exitproc+0x104>
   588d4:	10c00117 	ldw	r3,4(r2)
   588d8:	010007c4 	movi	r4,31
   588dc:	20c00e16 	blt	r4,r3,58918 <__register_exitproc+0x6c>
   588e0:	1a000044 	addi	r8,r3,1
   588e4:	8800221e 	bne	r17,zero,58970 <__register_exitproc+0xc4>
   588e8:	18c00084 	addi	r3,r3,2
   588ec:	18c7883a 	add	r3,r3,r3
   588f0:	18c7883a 	add	r3,r3,r3
   588f4:	12000115 	stw	r8,4(r2)
   588f8:	10c7883a 	add	r3,r2,r3
   588fc:	19400015 	stw	r5,0(r3)
   58900:	0005883a 	mov	r2,zero
   58904:	dfc00517 	ldw	ra,20(sp)
   58908:	dc400417 	ldw	r17,16(sp)
   5890c:	dc000317 	ldw	r16,12(sp)
   58910:	dec00604 	addi	sp,sp,24
   58914:	f800283a 	ret
   58918:	00800034 	movhi	r2,0
   5891c:	10800004 	addi	r2,r2,0
   58920:	10002626 	beq	r2,zero,589bc <__register_exitproc+0x110>
   58924:	01006404 	movi	r4,400
   58928:	d9400015 	stw	r5,0(sp)
   5892c:	d9800115 	stw	r6,4(sp)
   58930:	d9c00215 	stw	r7,8(sp)
   58934:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
   58938:	d9400017 	ldw	r5,0(sp)
   5893c:	d9800117 	ldw	r6,4(sp)
   58940:	d9c00217 	ldw	r7,8(sp)
   58944:	10001d26 	beq	r2,zero,589bc <__register_exitproc+0x110>
   58948:	81000017 	ldw	r4,0(r16)
   5894c:	10000115 	stw	zero,4(r2)
   58950:	02000044 	movi	r8,1
   58954:	22405217 	ldw	r9,328(r4)
   58958:	0007883a 	mov	r3,zero
   5895c:	12400015 	stw	r9,0(r2)
   58960:	20805215 	stw	r2,328(r4)
   58964:	10006215 	stw	zero,392(r2)
   58968:	10006315 	stw	zero,396(r2)
   5896c:	883fde26 	beq	r17,zero,588e8 <__alt_data_end+0xffff30e8>
   58970:	18c9883a 	add	r4,r3,r3
   58974:	2109883a 	add	r4,r4,r4
   58978:	1109883a 	add	r4,r2,r4
   5897c:	21802215 	stw	r6,136(r4)
   58980:	01800044 	movi	r6,1
   58984:	12406217 	ldw	r9,392(r2)
   58988:	30cc983a 	sll	r6,r6,r3
   5898c:	4992b03a 	or	r9,r9,r6
   58990:	12406215 	stw	r9,392(r2)
   58994:	21c04215 	stw	r7,264(r4)
   58998:	01000084 	movi	r4,2
   5899c:	893fd21e 	bne	r17,r4,588e8 <__alt_data_end+0xffff30e8>
   589a0:	11006317 	ldw	r4,396(r2)
   589a4:	218cb03a 	or	r6,r4,r6
   589a8:	11806315 	stw	r6,396(r2)
   589ac:	003fce06 	br	588e8 <__alt_data_end+0xffff30e8>
   589b0:	18805304 	addi	r2,r3,332
   589b4:	18805215 	stw	r2,328(r3)
   589b8:	003fc606 	br	588d4 <__alt_data_end+0xffff30d4>
   589bc:	00bfffc4 	movi	r2,-1
   589c0:	003fd006 	br	58904 <__alt_data_end+0xffff3104>

000589c4 <__call_exitprocs>:
   589c4:	defff504 	addi	sp,sp,-44
   589c8:	df000915 	stw	fp,36(sp)
   589cc:	dd400615 	stw	r21,24(sp)
   589d0:	dc800315 	stw	r18,12(sp)
   589d4:	dfc00a15 	stw	ra,40(sp)
   589d8:	ddc00815 	stw	r23,32(sp)
   589dc:	dd800715 	stw	r22,28(sp)
   589e0:	dd000515 	stw	r20,20(sp)
   589e4:	dcc00415 	stw	r19,16(sp)
   589e8:	dc400215 	stw	r17,8(sp)
   589ec:	dc000115 	stw	r16,4(sp)
   589f0:	d9000015 	stw	r4,0(sp)
   589f4:	2839883a 	mov	fp,r5
   589f8:	04800044 	movi	r18,1
   589fc:	057fffc4 	movi	r21,-1
   58a00:	008001b4 	movhi	r2,6
   58a04:	10aaae04 	addi	r2,r2,-21832
   58a08:	12000017 	ldw	r8,0(r2)
   58a0c:	45005217 	ldw	r20,328(r8)
   58a10:	44c05204 	addi	r19,r8,328
   58a14:	a0001c26 	beq	r20,zero,58a88 <__call_exitprocs+0xc4>
   58a18:	a0800117 	ldw	r2,4(r20)
   58a1c:	15ffffc4 	addi	r23,r2,-1
   58a20:	b8000d16 	blt	r23,zero,58a58 <__call_exitprocs+0x94>
   58a24:	14000044 	addi	r16,r2,1
   58a28:	8421883a 	add	r16,r16,r16
   58a2c:	8421883a 	add	r16,r16,r16
   58a30:	84402004 	addi	r17,r16,128
   58a34:	a463883a 	add	r17,r20,r17
   58a38:	a421883a 	add	r16,r20,r16
   58a3c:	e0001e26 	beq	fp,zero,58ab8 <__call_exitprocs+0xf4>
   58a40:	80804017 	ldw	r2,256(r16)
   58a44:	e0801c26 	beq	fp,r2,58ab8 <__call_exitprocs+0xf4>
   58a48:	bdffffc4 	addi	r23,r23,-1
   58a4c:	843fff04 	addi	r16,r16,-4
   58a50:	8c7fff04 	addi	r17,r17,-4
   58a54:	bd7ff91e 	bne	r23,r21,58a3c <__alt_data_end+0xffff323c>
   58a58:	00800034 	movhi	r2,0
   58a5c:	10800004 	addi	r2,r2,0
   58a60:	10000926 	beq	r2,zero,58a88 <__call_exitprocs+0xc4>
   58a64:	a0800117 	ldw	r2,4(r20)
   58a68:	1000301e 	bne	r2,zero,58b2c <__call_exitprocs+0x168>
   58a6c:	a0800017 	ldw	r2,0(r20)
   58a70:	10003226 	beq	r2,zero,58b3c <__call_exitprocs+0x178>
   58a74:	a009883a 	mov	r4,r20
   58a78:	98800015 	stw	r2,0(r19)
   58a7c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
   58a80:	9d000017 	ldw	r20,0(r19)
   58a84:	a03fe41e 	bne	r20,zero,58a18 <__alt_data_end+0xffff3218>
   58a88:	dfc00a17 	ldw	ra,40(sp)
   58a8c:	df000917 	ldw	fp,36(sp)
   58a90:	ddc00817 	ldw	r23,32(sp)
   58a94:	dd800717 	ldw	r22,28(sp)
   58a98:	dd400617 	ldw	r21,24(sp)
   58a9c:	dd000517 	ldw	r20,20(sp)
   58aa0:	dcc00417 	ldw	r19,16(sp)
   58aa4:	dc800317 	ldw	r18,12(sp)
   58aa8:	dc400217 	ldw	r17,8(sp)
   58aac:	dc000117 	ldw	r16,4(sp)
   58ab0:	dec00b04 	addi	sp,sp,44
   58ab4:	f800283a 	ret
   58ab8:	a0800117 	ldw	r2,4(r20)
   58abc:	80c00017 	ldw	r3,0(r16)
   58ac0:	10bfffc4 	addi	r2,r2,-1
   58ac4:	15c01426 	beq	r2,r23,58b18 <__call_exitprocs+0x154>
   58ac8:	80000015 	stw	zero,0(r16)
   58acc:	183fde26 	beq	r3,zero,58a48 <__alt_data_end+0xffff3248>
   58ad0:	95c8983a 	sll	r4,r18,r23
   58ad4:	a0806217 	ldw	r2,392(r20)
   58ad8:	a5800117 	ldw	r22,4(r20)
   58adc:	2084703a 	and	r2,r4,r2
   58ae0:	10000b26 	beq	r2,zero,58b10 <__call_exitprocs+0x14c>
   58ae4:	a0806317 	ldw	r2,396(r20)
   58ae8:	2088703a 	and	r4,r4,r2
   58aec:	20000c1e 	bne	r4,zero,58b20 <__call_exitprocs+0x15c>
   58af0:	89400017 	ldw	r5,0(r17)
   58af4:	d9000017 	ldw	r4,0(sp)
   58af8:	183ee83a 	callr	r3
   58afc:	a0800117 	ldw	r2,4(r20)
   58b00:	15bfbf1e 	bne	r2,r22,58a00 <__alt_data_end+0xffff3200>
   58b04:	98800017 	ldw	r2,0(r19)
   58b08:	153fcf26 	beq	r2,r20,58a48 <__alt_data_end+0xffff3248>
   58b0c:	003fbc06 	br	58a00 <__alt_data_end+0xffff3200>
   58b10:	183ee83a 	callr	r3
   58b14:	003ff906 	br	58afc <__alt_data_end+0xffff32fc>
   58b18:	a5c00115 	stw	r23,4(r20)
   58b1c:	003feb06 	br	58acc <__alt_data_end+0xffff32cc>
   58b20:	89000017 	ldw	r4,0(r17)
   58b24:	183ee83a 	callr	r3
   58b28:	003ff406 	br	58afc <__alt_data_end+0xffff32fc>
   58b2c:	a0800017 	ldw	r2,0(r20)
   58b30:	a027883a 	mov	r19,r20
   58b34:	1029883a 	mov	r20,r2
   58b38:	003fb606 	br	58a14 <__alt_data_end+0xffff3214>
   58b3c:	0005883a 	mov	r2,zero
   58b40:	003ffb06 	br	58b30 <__alt_data_end+0xffff3330>

00058b44 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   58b44:	defffd04 	addi	sp,sp,-12
   58b48:	df000215 	stw	fp,8(sp)
   58b4c:	df000204 	addi	fp,sp,8
   58b50:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   58b54:	d0271d45 	stb	zero,-25483(gp)
   58b58:	e0bfff17 	ldw	r2,-4(fp)
   58b5c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   58b60:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   58b64:	10000226 	beq	r2,zero,58b70 <_exit+0x2c>
    ALT_SIM_FAIL();
   58b68:	002af070 	cmpltui	zero,zero,43969
   58b6c:	00000106 	br	58b74 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   58b70:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   58b74:	003fff06 	br	58b74 <__alt_data_end+0xffff3374>
